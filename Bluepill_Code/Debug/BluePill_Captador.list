
BluePill_Captador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009598  08009598  00019598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08009980  08009980  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009980  08009980  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000088  08009a10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08009a10  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a76c  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f2  00000000  00000000  0002a81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178d9  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089fd  00000000  00000000  00044d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008908c  00000000  00000000  0004d716  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d67a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036bc  00000000  00000000  000d6820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08009580 	.word	0x08009580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08009580 	.word	0x08009580

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <MPU6050_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int MPU6050_Init (I2C_HandleTypeDef hi2c)
{
 800110c:	b084      	sub	sp, #16
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af04      	add	r7, sp, #16
 8001114:	f107 0c10 	add.w	ip, r7, #16
 8001118:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t check;
	uint8_t Data;

		// check device ID WHO_AM_I
		Data = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	71bb      	strb	r3, [r7, #6]
		check= 0;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	226b      	movs	r2, #107	; 0x6b
 8001136:	21d0      	movs	r1, #208	; 0xd0
 8001138:	f107 0010 	add.w	r0, r7, #16
 800113c:	f002 feb4 	bl	8003ea8 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2275      	movs	r2, #117	; 0x75
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	f107 0010 	add.w	r0, r7, #16
 8001158:	f002 ffa0 	bl	800409c <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b68      	cmp	r3, #104	; 0x68
 8001160:	d131      	bne.n	80011c6 <MPU6050_Init+0xba>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up


			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8001162:	2307      	movs	r3, #7
 8001164:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2219      	movs	r2, #25
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	f107 0010 	add.w	r0, r7, #16
 800117e:	f002 fe93 	bl	8003ea8 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8001182:	2300      	movs	r3, #0
 8001184:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221c      	movs	r2, #28
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	f107 0010 	add.w	r0, r7, #16
 800119e:	f002 fe83 	bl	8003ea8 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	221b      	movs	r2, #27
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	f107 0010 	add.w	r0, r7, #16
 80011be:	f002 fe73 	bl	8003ea8 <HAL_I2C_Mem_Write>
			return 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <MPU6050_Init+0xbc>
		}
 return 0;
 80011c6:	2300      	movs	r3, #0
	}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d2:	b004      	add	sp, #16
 80011d4:	4770      	bx	lr
	...

080011d8 <MPU6050_Read_Accel>:

Accel MPU6050_Read_Accel (int selector)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0a3      	sub	sp, #140	; 0x8c
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];
	Accel lectura;

	//valores en RAW temporales de GYRO Y ACCEL
	int16_t Accel_X_RAW = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Accel_Y_RAW = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Accel_Z_RAW = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	I2C_HandleTypeDef hi2c;

	if (selector == 1) hi2c = hi2c1;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <MPU6050_Read_Accel+0x32>
 80011fa:	4a41      	ldr	r2, [pc, #260]	; (8001300 <MPU6050_Read_Accel+0x128>)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4611      	mov	r1, r2
 8001202:	2254      	movs	r2, #84	; 0x54
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fcb3 	bl	8005b70 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d107      	bne.n	8001220 <MPU6050_Read_Accel+0x48>
 8001210:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <MPU6050_Read_Accel+0x12c>)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	2254      	movs	r2, #84	; 0x54
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fca8 	bl	8005b70 <memcpy>

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001220:	f107 000c 	add.w	r0, r7, #12
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2306      	movs	r3, #6
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	223b      	movs	r2, #59	; 0x3b
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	f002 ff2f 	bl	800409c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800123e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001252:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001266:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	lectura.Ax = Accel_X_RAW/16384.0;
 800127a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8b8 	bl	80003f4 <__aeabi_i2d>
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MPU6050_Read_Accel+0x130>)
 800128a:	f7ff fa47 	bl	800071c <__aeabi_ddiv>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fbef 	bl	8000a78 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	663b      	str	r3, [r7, #96]	; 0x60
	lectura.Ay = Accel_Y_RAW/16384.0;
 800129e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8a6 	bl	80003f4 <__aeabi_i2d>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MPU6050_Read_Accel+0x130>)
 80012ae:	f7ff fa35 	bl	800071c <__aeabi_ddiv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	4618      	mov	r0, r3
 80012b8:	4621      	mov	r1, r4
 80012ba:	f7ff fbdd 	bl	8000a78 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Az = Accel_Z_RAW/16384.0;
 80012c2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MPU6050_Read_Accel+0x130>)
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_ddiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fbcb 	bl	8000a78 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	66bb      	str	r3, [r7, #104]	; 0x68
	return lectura;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	461c      	mov	r4, r3
 80012ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	377c      	adds	r7, #124	; 0x7c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000120 	.word	0x20000120
 8001304:	20000178 	.word	0x20000178
 8001308:	40d00000 	.word	0x40d00000
 800130c:	00000000 	.word	0x00000000

08001310 <MPU6050_Read_Gyro>:


Gyro MPU6050_Read_Gyro (int selector)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b0a3      	sub	sp, #140	; 0x8c
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	Gyro lectura;
	uint8_t Rec_Data[6];
	I2C_HandleTypeDef hi2c;

	int16_t Gyro_X_RAW = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Gyro_Y_RAW = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Gyro_Z_RAW = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	if (selector == 1) hi2c = hi2c1;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <MPU6050_Read_Gyro+0x32>
 8001332:	4a43      	ldr	r2, [pc, #268]	; (8001440 <MPU6050_Read_Gyro+0x130>)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4611      	mov	r1, r2
 800133a:	2254      	movs	r2, #84	; 0x54
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fc17 	bl	8005b70 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d107      	bne.n	8001358 <MPU6050_Read_Gyro+0x48>
 8001348:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <MPU6050_Read_Gyro+0x134>)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4611      	mov	r1, r2
 8001350:	2254      	movs	r2, #84	; 0x54
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fc0c 	bl	8005b70 <memcpy>
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001358:	f107 0008 	add.w	r0, r7, #8
 800135c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2306      	movs	r3, #6
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2243      	movs	r2, #67	; 0x43
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	f002 fe93 	bl	800409c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001376:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800138a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800139e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	lectura.Gx = Gyro_X_RAW/131.0;
 80013b2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f81c 	bl	80003f4 <__aeabi_i2d>
 80013bc:	a31e      	add	r3, pc, #120	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f9ab 	bl	800071c <__aeabi_ddiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	f7ff fb53 	bl	8000a78 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Gy = Gyro_Y_RAW/131.0;
 80013d6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f80a 	bl	80003f4 <__aeabi_i2d>
 80013e0:	a315      	add	r3, pc, #84	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f999 	bl	800071c <__aeabi_ddiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	4618      	mov	r0, r3
 80013f0:	4621      	mov	r1, r4
 80013f2:	f7ff fb41 	bl	8000a78 <__aeabi_d2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	66bb      	str	r3, [r7, #104]	; 0x68
	lectura.Gz = Gyro_Z_RAW/131.0;
 80013fa:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe fff8 	bl	80003f4 <__aeabi_i2d>
 8001404:	a30c      	add	r3, pc, #48	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f987 	bl	800071c <__aeabi_ddiv>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff fb2f 	bl	8000a78 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	66fb      	str	r3, [r7, #108]	; 0x6c

return lectura;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	461c      	mov	r4, r3
 8001422:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800142a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	377c      	adds	r7, #124	; 0x7c
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	00000000 	.word	0x00000000
 800143c:	40606000 	.word	0x40606000
 8001440:	20000120 	.word	0x20000120
 8001444:	20000178 	.word	0x20000178

08001448 <KalmanMPU>:





float KalmanMPU(float newAngle, float newRate, float dt,int identifier, int axis){  //1 x, 2 y , 3 z
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b0a3      	sub	sp, #140	; 0x8c
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]

	float myrate;
	float mybias;
	float myangle;
	float P[2][2];
	if(identifier == 1 && axis == 1 ){
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d131      	bne.n	80014c0 <KalmanMPU+0x78>
 800145c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001460:	2b01      	cmp	r3, #1
 8001462:	d12d      	bne.n	80014c0 <KalmanMPU+0x78>
		myrate = rate;
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <KalmanMPU+0x17c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
		mybias = bias;
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <KalmanMPU+0x180>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		myangle= angle;
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <KalmanMPU+0x184>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i = 0; i<2;i++){
 800147a:	2300      	movs	r3, #0
 800147c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800147e:	e01c      	b.n	80014ba <KalmanMPU+0x72>
			for(int j=0;j<2;j++){
 8001480:	2300      	movs	r3, #0
 8001482:	67bb      	str	r3, [r7, #120]	; 0x78
 8001484:	e013      	b.n	80014ae <KalmanMPU+0x66>
				P[i][j]=P1[i][j];
 8001486:	4952      	ldr	r1, [pc, #328]	; (80015d0 <KalmanMPU+0x188>)
 8001488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800148a:	005a      	lsls	r2, r3, #1
 800148c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800148e:	4413      	add	r3, r2
 8001490:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001496:	0059      	lsls	r1, r3, #1
 8001498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800149a:	440b      	add	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80014a2:	440b      	add	r3, r1
 80014a4:	f843 2c6c 	str.w	r2, [r3, #-108]
			for(int j=0;j<2;j++){
 80014a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014aa:	3301      	adds	r3, #1
 80014ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	dde8      	ble.n	8001486 <KalmanMPU+0x3e>
		for(int i = 0; i<2;i++){
 80014b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014b6:	3301      	adds	r3, #1
 80014b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	dddf      	ble.n	8001480 <KalmanMPU+0x38>
			}
		}
	}

	if(identifier == 2 && axis ==1){
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d131      	bne.n	800152a <KalmanMPU+0xe2>
 80014c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d12d      	bne.n	800152a <KalmanMPU+0xe2>
		myrate = rate2;
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <KalmanMPU+0x18c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
		mybias = bias2;
 80014d4:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <KalmanMPU+0x190>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		myangle= angle2;
 80014dc:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <KalmanMPU+0x194>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i = 0; i<2;i++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	677b      	str	r3, [r7, #116]	; 0x74
 80014e8:	e01c      	b.n	8001524 <KalmanMPU+0xdc>
			for(int j=0;j<2;j++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	673b      	str	r3, [r7, #112]	; 0x70
 80014ee:	e013      	b.n	8001518 <KalmanMPU+0xd0>
				P[i][j]=P2[i][j];
 80014f0:	493b      	ldr	r1, [pc, #236]	; (80015e0 <KalmanMPU+0x198>)
 80014f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014f4:	005a      	lsls	r2, r3, #1
 80014f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014f8:	4413      	add	r3, r2
 80014fa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80014fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001500:	0059      	lsls	r1, r3, #1
 8001502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001504:	440b      	add	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800150c:	440b      	add	r3, r1
 800150e:	f843 2c6c 	str.w	r2, [r3, #-108]
			for(int j=0;j<2;j++){
 8001512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001514:	3301      	adds	r3, #1
 8001516:	673b      	str	r3, [r7, #112]	; 0x70
 8001518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800151a:	2b01      	cmp	r3, #1
 800151c:	dde8      	ble.n	80014f0 <KalmanMPU+0xa8>
		for(int i = 0; i<2;i++){
 800151e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001520:	3301      	adds	r3, #1
 8001522:	677b      	str	r3, [r7, #116]	; 0x74
 8001524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001526:	2b01      	cmp	r3, #1
 8001528:	dddf      	ble.n	80014ea <KalmanMPU+0xa2>
			}
		}
	}

	if(identifier == 1 && axis == 2){
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d131      	bne.n	8001594 <KalmanMPU+0x14c>
 8001530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001534:	2b02      	cmp	r3, #2
 8001536:	d12d      	bne.n	8001594 <KalmanMPU+0x14c>
		myrate = rate3;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <KalmanMPU+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
		mybias = bias3;
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <KalmanMPU+0x1a0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		myangle= angle3;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <KalmanMPU+0x1a4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i = 0; i<2;i++){
 800154e:	2300      	movs	r3, #0
 8001550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001552:	e01c      	b.n	800158e <KalmanMPU+0x146>
			for(int j=0;j<2;j++){
 8001554:	2300      	movs	r3, #0
 8001556:	66bb      	str	r3, [r7, #104]	; 0x68
 8001558:	e013      	b.n	8001582 <KalmanMPU+0x13a>
				P[i][j]=P3[i][j];
 800155a:	4925      	ldr	r1, [pc, #148]	; (80015f0 <KalmanMPU+0x1a8>)
 800155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155e:	005a      	lsls	r2, r3, #1
 8001560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001562:	4413      	add	r3, r2
 8001564:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156a:	0059      	lsls	r1, r3, #1
 800156c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800156e:	440b      	add	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001576:	440b      	add	r3, r1
 8001578:	f843 2c6c 	str.w	r2, [r3, #-108]
			for(int j=0;j<2;j++){
 800157c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800157e:	3301      	adds	r3, #1
 8001580:	66bb      	str	r3, [r7, #104]	; 0x68
 8001582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001584:	2b01      	cmp	r3, #1
 8001586:	dde8      	ble.n	800155a <KalmanMPU+0x112>
		for(int i = 0; i<2;i++){
 8001588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800158a:	3301      	adds	r3, #1
 800158c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800158e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001590:	2b01      	cmp	r3, #1
 8001592:	dddf      	ble.n	8001554 <KalmanMPU+0x10c>
			}
		}
	}

	if(identifier == 2 && axis==2){
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d14f      	bne.n	800163a <KalmanMPU+0x1f2>
 800159a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d14b      	bne.n	800163a <KalmanMPU+0x1f2>
		myrate = rate4;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <KalmanMPU+0x1ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		mybias = bias4;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <KalmanMPU+0x1b0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		myangle= angle4;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <KalmanMPU+0x1b4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i = 0; i<2;i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
 80015bc:	e03a      	b.n	8001634 <KalmanMPU+0x1ec>
			for(int j=0;j<2;j++){
 80015be:	2300      	movs	r3, #0
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
 80015c2:	e031      	b.n	8001628 <KalmanMPU+0x1e0>
 80015c4:	200000ac 	.word	0x200000ac
 80015c8:	200000a4 	.word	0x200000a4
 80015cc:	200000a8 	.word	0x200000a8
 80015d0:	2000010c 	.word	0x2000010c
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	200000b0 	.word	0x200000b0
 80015dc:	200000b4 	.word	0x200000b4
 80015e0:	200001e0 	.word	0x200001e0
 80015e4:	200000c4 	.word	0x200000c4
 80015e8:	200000bc 	.word	0x200000bc
 80015ec:	200000c0 	.word	0x200000c0
 80015f0:	20000318 	.word	0x20000318
 80015f4:	200000d0 	.word	0x200000d0
 80015f8:	200000c8 	.word	0x200000c8
 80015fc:	200000cc 	.word	0x200000cc
				P[i][j]=P4[i][j];
 8001600:	499e      	ldr	r1, [pc, #632]	; (800187c <KalmanMPU+0x434>)
 8001602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001604:	005a      	lsls	r2, r3, #1
 8001606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001608:	4413      	add	r3, r2
 800160a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800160e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001610:	0059      	lsls	r1, r3, #1
 8001612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001614:	440b      	add	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800161c:	440b      	add	r3, r1
 800161e:	f843 2c6c 	str.w	r2, [r3, #-108]
			for(int j=0;j<2;j++){
 8001622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001624:	3301      	adds	r3, #1
 8001626:	663b      	str	r3, [r7, #96]	; 0x60
 8001628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800162a:	2b01      	cmp	r3, #1
 800162c:	dde8      	ble.n	8001600 <KalmanMPU+0x1b8>
		for(int i = 0; i<2;i++){
 800162e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001630:	3301      	adds	r3, #1
 8001632:	667b      	str	r3, [r7, #100]	; 0x64
 8001634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001636:	2b01      	cmp	r3, #1
 8001638:	ddc1      	ble.n	80015be <KalmanMPU+0x176>
		}
	}


	//1
	myrate = newRate - mybias;
 800163a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f7ff fa6e 	bl	8000b20 <__aeabi_fsub>
 8001644:	4603      	mov	r3, r0
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
    myangle += dt * myrate;
 8001648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fb72 	bl	8000d34 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001658:	f7ff fa64 	bl	8000b24 <__addsf3>
 800165c:	4603      	mov	r3, r0
 800165e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	//2
    	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8001662:	69fc      	ldr	r4, [r7, #28]
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fb63 	bl	8000d34 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f7ff fa52 	bl	8000b20 <__aeabi_fsub>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7ff fa4b 	bl	8000b20 <__aeabi_fsub>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <KalmanMPU+0x438>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff fa45 	bl	8000b24 <__addsf3>
 800169a:	4603      	mov	r3, r0
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb48 	bl	8000d34 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fa3b 	bl	8000b24 <__addsf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	61fb      	str	r3, [r7, #28]
    	P[0][1] -= dt * P[1][1];
 80016b2:	6a3c      	ldr	r4, [r7, #32]
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb3b 	bl	8000d34 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fa2c 	bl	8000b20 <__aeabi_fsub>
 80016c8:	4603      	mov	r3, r0
 80016ca:	623b      	str	r3, [r7, #32]
    	P[1][0] -= dt * P[1][1];
 80016cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb2e 	bl	8000d34 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fa1f 	bl	8000b20 <__aeabi_fsub>
 80016e2:	4603      	mov	r3, r0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    	P[1][1] += Q_bias * dt;
 80016e6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80016e8:	4b66      	ldr	r3, [pc, #408]	; (8001884 <KalmanMPU+0x43c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb20 	bl	8000d34 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fa13 	bl	8000b24 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
	 //3
    	float S = P[0][0] + R_measure; // Estimate error
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4b60      	ldr	r3, [pc, #384]	; (8001888 <KalmanMPU+0x440>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fa0a 	bl	8000b24 <__addsf3>
 8001710:	4603      	mov	r3, r0
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
    	float K[2]; // Kalman gain - This is a 2x1 vector
    	K[0] = P[0][0] / S;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fbbf 	bl	8000e9c <__aeabi_fdiv>
 800171e:	4603      	mov	r3, r0
 8001720:	617b      	str	r3, [r7, #20]
    	K[1] = P[1][0] / S;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fbb8 	bl	8000e9c <__aeabi_fdiv>
 800172c:	4603      	mov	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]
     //4
    	float y = newAngle - myangle;
 8001730:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff f9f3 	bl	8000b20 <__aeabi_fsub>
 800173a:	4603      	mov	r3, r0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
        myangle += K[0] * y;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faf6 	bl	8000d34 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001750:	f7ff f9e8 	bl	8000b24 <__addsf3>
 8001754:	4603      	mov	r3, r0
 8001756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        mybias += K[1] * y;
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fae8 	bl	8000d34 <__aeabi_fmul>
 8001764:	4603      	mov	r3, r0
 8001766:	4619      	mov	r1, r3
 8001768:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800176c:	f7ff f9da 	bl	8000b24 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     //5
         float P00_temp = P[0][0];
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
         float P01_temp = P[0][1];
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c

         P[0][0] -= K[0] * P00_temp;
 800177e:	69fc      	ldr	r4, [r7, #28]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fad5 	bl	8000d34 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	4619      	mov	r1, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff f9c6 	bl	8000b20 <__aeabi_fsub>
 8001794:	4603      	mov	r3, r0
 8001796:	61fb      	str	r3, [r7, #28]
         P[0][1] -= K[0] * P01_temp;
 8001798:	6a3c      	ldr	r4, [r7, #32]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fac8 	bl	8000d34 <__aeabi_fmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff f9b9 	bl	8000b20 <__aeabi_fsub>
 80017ae:	4603      	mov	r3, r0
 80017b0:	623b      	str	r3, [r7, #32]
         P[1][0] -= K[1] * P00_temp;
 80017b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fabb 	bl	8000d34 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff f9ac 	bl	8000b20 <__aeabi_fsub>
 80017c8:	4603      	mov	r3, r0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
         P[1][1] -= K[1] * P01_temp;
 80017cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff faae 	bl	8000d34 <__aeabi_fmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff f99f 	bl	8000b20 <__aeabi_fsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28


     	if(identifier == 1 && axis ==1){
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d131      	bne.n	8001850 <KalmanMPU+0x408>
 80017ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d12d      	bne.n	8001850 <KalmanMPU+0x408>
     		rate = myrate;
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <KalmanMPU+0x444>)
 80017f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f8:	6013      	str	r3, [r2, #0]
     		bias = mybias;
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <KalmanMPU+0x448>)
 80017fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001800:	6013      	str	r3, [r2, #0]
     		angle= myangle;
 8001802:	4a24      	ldr	r2, [pc, #144]	; (8001894 <KalmanMPU+0x44c>)
 8001804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001808:	6013      	str	r3, [r2, #0]
     		for(int i = 0; i<2;i++){
 800180a:	2300      	movs	r3, #0
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180e:	e01c      	b.n	800184a <KalmanMPU+0x402>
     			for(int j=0;j<2;j++){
 8001810:	2300      	movs	r3, #0
 8001812:	65bb      	str	r3, [r7, #88]	; 0x58
 8001814:	e013      	b.n	800183e <KalmanMPU+0x3f6>
     				P1[i][j]=P[i][j];
 8001816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001818:	005a      	lsls	r2, r3, #1
 800181a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001824:	4413      	add	r3, r2
 8001826:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800182a:	481b      	ldr	r0, [pc, #108]	; (8001898 <KalmanMPU+0x450>)
 800182c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182e:	0059      	lsls	r1, r3, #1
 8001830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001832:	440b      	add	r3, r1
 8001834:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 8001838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800183a:	3301      	adds	r3, #1
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
 800183e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001840:	2b01      	cmp	r3, #1
 8001842:	dde8      	ble.n	8001816 <KalmanMPU+0x3ce>
     		for(int i = 0; i<2;i++){
 8001844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001846:	3301      	adds	r3, #1
 8001848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	2b01      	cmp	r3, #1
 800184e:	dddf      	ble.n	8001810 <KalmanMPU+0x3c8>
     			}
     		}
     	}

     	if(identifier == 2  && axis ==1){
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d148      	bne.n	80018e8 <KalmanMPU+0x4a0>
 8001856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800185a:	2b01      	cmp	r3, #1
 800185c:	d144      	bne.n	80018e8 <KalmanMPU+0x4a0>
     		rate2 = myrate;
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <KalmanMPU+0x454>)
 8001860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001862:	6013      	str	r3, [r2, #0]
     		bias2 = mybias;
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <KalmanMPU+0x458>)
 8001866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800186a:	6013      	str	r3, [r2, #0]
     		angle2= myangle;
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <KalmanMPU+0x45c>)
 800186e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001872:	6013      	str	r3, [r2, #0]
     		for(int i = 0; i<2;i++){
 8001874:	2300      	movs	r3, #0
 8001876:	657b      	str	r3, [r7, #84]	; 0x54
 8001878:	e033      	b.n	80018e2 <KalmanMPU+0x49a>
 800187a:	bf00      	nop
 800187c:	200002f0 	.word	0x200002f0
 8001880:	20000008 	.word	0x20000008
 8001884:	2000000c 	.word	0x2000000c
 8001888:	20000010 	.word	0x20000010
 800188c:	200000ac 	.word	0x200000ac
 8001890:	200000a4 	.word	0x200000a4
 8001894:	200000a8 	.word	0x200000a8
 8001898:	2000010c 	.word	0x2000010c
 800189c:	200000b8 	.word	0x200000b8
 80018a0:	200000b0 	.word	0x200000b0
 80018a4:	200000b4 	.word	0x200000b4
     			for(int j=0;j<2;j++){
 80018a8:	2300      	movs	r3, #0
 80018aa:	653b      	str	r3, [r7, #80]	; 0x50
 80018ac:	e013      	b.n	80018d6 <KalmanMPU+0x48e>
     				P2[i][j]=P[i][j];
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018bc:	4413      	add	r3, r2
 80018be:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 80018c2:	4841      	ldr	r0, [pc, #260]	; (80019c8 <KalmanMPU+0x580>)
 80018c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c6:	0059      	lsls	r1, r3, #1
 80018c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ca:	440b      	add	r3, r1
 80018cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80018d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d2:	3301      	adds	r3, #1
 80018d4:	653b      	str	r3, [r7, #80]	; 0x50
 80018d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d8:	2b01      	cmp	r3, #1
 80018da:	dde8      	ble.n	80018ae <KalmanMPU+0x466>
     		for(int i = 0; i<2;i++){
 80018dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018de:	3301      	adds	r3, #1
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
 80018e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	dddf      	ble.n	80018a8 <KalmanMPU+0x460>
     			}
     		}
     	}
     	if(identifier == 1  && axis ==2){
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d131      	bne.n	8001952 <KalmanMPU+0x50a>
 80018ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d12d      	bne.n	8001952 <KalmanMPU+0x50a>
     		rate3 = myrate;
 80018f6:	4a35      	ldr	r2, [pc, #212]	; (80019cc <KalmanMPU+0x584>)
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	6013      	str	r3, [r2, #0]
     		bias3 = mybias;
 80018fc:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <KalmanMPU+0x588>)
 80018fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001902:	6013      	str	r3, [r2, #0]
     		angle3= myangle;
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <KalmanMPU+0x58c>)
 8001906:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800190a:	6013      	str	r3, [r2, #0]
     		for(int i = 0; i<2;i++){
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	e01c      	b.n	800194c <KalmanMPU+0x504>
     			for(int j=0;j<2;j++){
 8001912:	2300      	movs	r3, #0
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
 8001916:	e013      	b.n	8001940 <KalmanMPU+0x4f8>
     				P3[i][j]=P[i][j];
 8001918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191a:	005a      	lsls	r2, r3, #1
 800191c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001926:	4413      	add	r3, r2
 8001928:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800192c:	482a      	ldr	r0, [pc, #168]	; (80019d8 <KalmanMPU+0x590>)
 800192e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001930:	0059      	lsls	r1, r3, #1
 8001932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001934:	440b      	add	r3, r1
 8001936:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 800193a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193c:	3301      	adds	r3, #1
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001942:	2b01      	cmp	r3, #1
 8001944:	dde8      	ble.n	8001918 <KalmanMPU+0x4d0>
     		for(int i = 0; i<2;i++){
 8001946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001948:	3301      	adds	r3, #1
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194e:	2b01      	cmp	r3, #1
 8001950:	dddf      	ble.n	8001912 <KalmanMPU+0x4ca>
     			}
     		}
     	}
     	if(identifier == 2  && axis ==2){
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d131      	bne.n	80019bc <KalmanMPU+0x574>
 8001958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800195c:	2b02      	cmp	r3, #2
 800195e:	d12d      	bne.n	80019bc <KalmanMPU+0x574>
     		rate4 = myrate;
 8001960:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <KalmanMPU+0x594>)
 8001962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001964:	6013      	str	r3, [r2, #0]
     		bias4 = mybias;
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <KalmanMPU+0x598>)
 8001968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800196c:	6013      	str	r3, [r2, #0]
     		angle4= myangle;
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <KalmanMPU+0x59c>)
 8001970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001974:	6013      	str	r3, [r2, #0]
     		for(int i = 0; i<2;i++){
 8001976:	2300      	movs	r3, #0
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
 800197a:	e01c      	b.n	80019b6 <KalmanMPU+0x56e>
     			for(int j=0;j<2;j++){
 800197c:	2300      	movs	r3, #0
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
 8001980:	e013      	b.n	80019aa <KalmanMPU+0x562>
     				P4[i][j]=P[i][j];
 8001982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001984:	005a      	lsls	r2, r3, #1
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001990:	4413      	add	r3, r2
 8001992:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <KalmanMPU+0x5a0>)
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	0059      	lsls	r1, r3, #1
 800199c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199e:	440b      	add	r3, r1
 80019a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80019a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a6:	3301      	adds	r3, #1
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	dde8      	ble.n	8001982 <KalmanMPU+0x53a>
     		for(int i = 0; i<2;i++){
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	3301      	adds	r3, #1
 80019b4:	647b      	str	r3, [r7, #68]	; 0x44
 80019b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	dddf      	ble.n	800197c <KalmanMPU+0x534>
     		}
     	}



return myangle;
 80019bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80

}
 80019c0:	4618      	mov	r0, r3
 80019c2:	378c      	adds	r7, #140	; 0x8c
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	200001e0 	.word	0x200001e0
 80019cc:	200000c4 	.word	0x200000c4
 80019d0:	200000bc 	.word	0x200000bc
 80019d4:	200000c0 	.word	0x200000c0
 80019d8:	20000318 	.word	0x20000318
 80019dc:	200000d0 	.word	0x200000d0
 80019e0:	200000c8 	.word	0x200000c8
 80019e4:	200000cc 	.word	0x200000cc
 80019e8:	200002f0 	.word	0x200002f0
 80019ec:	00000000 	.word	0x00000000

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f4:	b0b9      	sub	sp, #228	; 0xe4
 80019f6:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f001 fa34 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 ff2c 	bl	8002858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f001 f83e 	bl	8002a80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a04:	f000 ff78 	bl	80028f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a08:	f000 ffb4 	bl	8002974 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a0c:	f000 ffe0 	bl	80029d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001a10:	f001 f80c 	bl	8002a2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu1.hi2c= 1;
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <main+0xc8>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
  mpu2.hi2c= 2;
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <main+0xcc>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]

  mpu1.offsetY =  3;
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <main+0xc8>)
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <main+0xd0>)
 8001a24:	621a      	str	r2, [r3, #32]
  mpu1.offsetx =  1.25;
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <main+0xc8>)
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <main+0xd4>)
 8001a2a:	61da      	str	r2, [r3, #28]

  mpu2.offsetY =  -3; //2,48  -3
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <main+0xcc>)
 8001a2e:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <main+0xd8>)
 8001a30:	621a      	str	r2, [r3, #32]
  mpu2.offsetx = -0.57;  //0.57    0
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <main+0xcc>)
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <main+0xdc>)
 8001a36:	61da      	str	r2, [r3, #28]
KalmanAngle5=0;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <main+0xe0>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
trans_time = 0;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <main+0xe4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]


//ampliacion de struct
mpu1.Q_angle = 0.001;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <main+0xc8>)
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <main+0xe8>)
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
mpu1.Q_bias = 0.003;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <main+0xc8>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	; (8001adc <main+0xec>)
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
mpu1.R_Measure = 0.03;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <main+0xc8>)
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <main+0xf0>)
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c

  //valores stadisticos
  	float desv_tipica = 2.0231;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <main+0xf4>)
 8001a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  	float desv_estado = 2.0231;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <main+0xf4>)
 8001a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  	float var = desv_tipica*desv_tipica;
 8001a64:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001a68:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a6c:	f7ff f962 	bl	8000d34 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	float var_estado = desv_estado*desv_estado;
 8001a76:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001a7a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a7e:	f7ff f959 	bl	8000d34 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  	float P = var_estado;
 8001a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  	float P_previa;


  	char info_real[32], info_kalman[32];
  		char ln[] = "\n\r";
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <main+0xf8>)
 8001a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	8019      	strh	r1, [r3, #0]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	0c12      	lsrs	r2, r2, #16
 8001aa0:	701a      	strb	r2, [r3, #0]
  		char comma[] = ",";
 8001aa2:	232c      	movs	r3, #44	; 0x2c
 8001aa4:	863b      	strh	r3, [r7, #48]	; 0x30
int start = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  		HAL_Delay(2000);
 8001aac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ab0:	f001 fa3a 	bl	8002f28 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
while (start != 1){
 8001ab4:	e03a      	b.n	8001b2c <main+0x13c>
 8001ab6:	bf00      	nop
 8001ab8:	200003e4 	.word	0x200003e4
 8001abc:	200001f4 	.word	0x200001f4
 8001ac0:	40400000 	.word	0x40400000
 8001ac4:	3fa00000 	.word	0x3fa00000
 8001ac8:	c0400000 	.word	0xc0400000
 8001acc:	bf11eb85 	.word	0xbf11eb85
 8001ad0:	200002c4 	.word	0x200002c4
 8001ad4:	2000011c 	.word	0x2000011c
 8001ad8:	3a83126f 	.word	0x3a83126f
 8001adc:	3b449ba6 	.word	0x3b449ba6
 8001ae0:	3cf5c28f 	.word	0x3cf5c28f
 8001ae4:	40017a78 	.word	0x40017a78
 8001ae8:	08009598 	.word	0x08009598
start =	  MPU6050_Init(hi2c1);
 8001aec:	4cd0      	ldr	r4, [pc, #832]	; (8001e30 <main+0x440>)
 8001aee:	4668      	mov	r0, sp
 8001af0:	f104 0310 	add.w	r3, r4, #16
 8001af4:	2244      	movs	r2, #68	; 0x44
 8001af6:	4619      	mov	r1, r3
 8001af8:	f004 f83a 	bl	8005b70 <memcpy>
 8001afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b00:	f7ff fb04 	bl	800110c <MPU6050_Init>
 8001b04:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
start =	 	 MPU6050_Init(hi2c2);
 8001b08:	4cca      	ldr	r4, [pc, #808]	; (8001e34 <main+0x444>)
 8001b0a:	4668      	mov	r0, sp
 8001b0c:	f104 0310 	add.w	r3, r4, #16
 8001b10:	2244      	movs	r2, #68	; 0x44
 8001b12:	4619      	mov	r1, r3
 8001b14:	f004 f82c 	bl	8005b70 <memcpy>
 8001b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b1c:	f7ff faf6 	bl	800110c <MPU6050_Init>
 8001b20:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

HAL_Delay(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f001 f9fe 	bl	8002f28 <HAL_Delay>
while (start != 1){
 8001b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d1db      	bne.n	8001aec <main+0xfc>
}
	 	  // read the Accelerometer and Gyro values and tranform into angles


	 	// 	  MPU6050_Read_Accel(hi2c2,Ax1,Ay1,Az1); // error AL asignar? proque no coge las void
	 	 mpu2.MPUaccel = MPU6050_Read_Accel(mpu2.hi2c);
 8001b34:	4bc0      	ldr	r3, [pc, #768]	; (8001e38 <main+0x448>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4cbf      	ldr	r4, [pc, #764]	; (8001e38 <main+0x448>)
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb49 	bl	80011d8 <MPU6050_Read_Accel>
 8001b46:	f104 0310 	add.w	r3, r4, #16
 8001b4a:	f107 0210 	add.w	r2, r7, #16
 8001b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUaccel =  MPU6050_Read_Accel(mpu1.hi2c);
 8001b54:	4bb9      	ldr	r3, [pc, #740]	; (8001e3c <main+0x44c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4cb8      	ldr	r4, [pc, #736]	; (8001e3c <main+0x44c>)
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fb39 	bl	80011d8 <MPU6050_Read_Accel>
 8001b66:	f104 0310 	add.w	r3, r4, #16
 8001b6a:	f107 0210 	add.w	r2, r7, #16
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu2.MPUgyro =   MPU6050_Read_Gyro(mpu2.hi2c);
 8001b74:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <main+0x448>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4caf      	ldr	r4, [pc, #700]	; (8001e38 <main+0x448>)
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fbc5 	bl	8001310 <MPU6050_Read_Gyro>
 8001b86:	1d23      	adds	r3, r4, #4
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUgyro = MPU6050_Read_Gyro(mpu1.hi2c);
 8001b92:	4baa      	ldr	r3, [pc, #680]	; (8001e3c <main+0x44c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4ca9      	ldr	r4, [pc, #676]	; (8001e3c <main+0x44c>)
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fbb6 	bl	8001310 <MPU6050_Read_Gyro>
 8001ba4:	1d23      	adds	r3, r4, #4
 8001ba6:	f107 0210 	add.w	r2, r7, #16
 8001baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	 accel_x1= atan(mpu1.MPUaccel.Ay/sqrt(pow(mpu1.MPUaccel.Ax,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001bb0:	4ba2      	ldr	r3, [pc, #648]	; (8001e3c <main+0x44c>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc2f 	bl	8000418 <__aeabi_f2d>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4b9f      	ldr	r3, [pc, #636]	; (8001e3c <main+0x44c>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc28 	bl	8000418 <__aeabi_f2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd0:	f005 fd28 	bl	8007624 <pow>
 8001bd4:	4680      	mov	r8, r0
 8001bd6:	4689      	mov	r9, r1
 8001bd8:	4b98      	ldr	r3, [pc, #608]	; (8001e3c <main+0x44c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc1b 	bl	8000418 <__aeabi_f2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bea:	f005 fd1b 	bl	8007624 <pow>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	f7fe fab1 	bl	800015c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f005 fe6b 	bl	80078dc <sqrt>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fd85 	bl	800071c <__aeabi_ddiv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	4618      	mov	r0, r3
 8001c18:	4621      	mov	r1, r4
 8001c1a:	f005 fb05 	bl	8007228 <atan>
 8001c1e:	a382      	add	r3, pc, #520	; (adr r3, 8001e28 <main+0x438>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fc50 	bl	80004c8 <__aeabi_dmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4621      	mov	r1, r4
 8001c30:	f7fe ff22 	bl	8000a78 <__aeabi_d2f>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <main+0x450>)
 8001c38:	601a      	str	r2, [r3, #0]
	 accel_y1=atan(-mpu1.MPUaccel.Ax/sqrt(pow(mpu1.MPUaccel.Ay,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001c3a:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <main+0x44c>)
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fbe8 	bl	8000418 <__aeabi_f2d>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
 8001c4c:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <main+0x44c>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fbe1 	bl	8000418 <__aeabi_f2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5e:	f005 fce1 	bl	8007624 <pow>
 8001c62:	4680      	mov	r8, r0
 8001c64:	4689      	mov	r9, r1
 8001c66:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <main+0x44c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fbd4 	bl	8000418 <__aeabi_f2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c78:	f005 fcd4 	bl	8007624 <pow>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4640      	mov	r0, r8
 8001c82:	4649      	mov	r1, r9
 8001c84:	f7fe fa6a 	bl	800015c <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f005 fe24 	bl	80078dc <sqrt>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fd3e 	bl	800071c <__aeabi_ddiv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	f005 fabe 	bl	8007228 <atan>
 8001cac:	a35e      	add	r3, pc, #376	; (adr r3, 8001e28 <main+0x438>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fc09 	bl	80004c8 <__aeabi_dmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460c      	mov	r4, r1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	f7fe fedb 	bl	8000a78 <__aeabi_d2f>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <main+0x454>)
 8001cc6:	601a      	str	r2, [r3, #0]

	 accel_x2= atan(mpu2.MPUaccel.Ay/sqrt(pow(mpu2.MPUaccel.Ax,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <main+0x448>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fba3 	bl	8000418 <__aeabi_f2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <main+0x448>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fb9c 	bl	8000418 <__aeabi_f2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce8:	f005 fc9c 	bl	8007624 <pow>
 8001cec:	4680      	mov	r8, r0
 8001cee:	4689      	mov	r9, r1
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <main+0x448>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fb8f 	bl	8000418 <__aeabi_f2d>
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d02:	f005 fc8f 	bl	8007624 <pow>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	f7fe fa25 	bl	800015c <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f005 fddf 	bl	80078dc <sqrt>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fcf9 	bl	800071c <__aeabi_ddiv>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	f005 fa79 	bl	8007228 <atan>
 8001d36:	a33c      	add	r3, pc, #240	; (adr r3, 8001e28 <main+0x438>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fbc4 	bl	80004c8 <__aeabi_dmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	4618      	mov	r0, r3
 8001d46:	4621      	mov	r1, r4
 8001d48:	f7fe fe96 	bl	8000a78 <__aeabi_d2f>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <main+0x458>)
 8001d50:	601a      	str	r2, [r3, #0]
	 accel_y2=atan(-mpu2.MPUaccel.Ax/sqrt(pow(mpu2.MPUaccel.Ay,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <main+0x448>)
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb5c 	bl	8000418 <__aeabi_f2d>
 8001d60:	4604      	mov	r4, r0
 8001d62:	460d      	mov	r5, r1
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <main+0x448>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fb55 	bl	8000418 <__aeabi_f2d>
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d76:	f005 fc55 	bl	8007624 <pow>
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4689      	mov	r9, r1
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main+0x448>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fb48 	bl	8000418 <__aeabi_f2d>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d90:	f005 fc48 	bl	8007624 <pow>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe f9de 	bl	800015c <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f005 fd98 	bl	80078dc <sqrt>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fcb2 	bl	800071c <__aeabi_ddiv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	f005 fa32 	bl	8007228 <atan>
 8001dc4:	a318      	add	r3, pc, #96	; (adr r3, 8001e28 <main+0x438>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fb7d 	bl	80004c8 <__aeabi_dmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f7fe fe4f 	bl	8000a78 <__aeabi_d2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <main+0x45c>)
 8001dde:	601a      	str	r2, [r3, #0]

	 	  dt =  HAL_GetTick()-time;
 8001de0:	f001 f898 	bl	8002f14 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <main+0x460>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <main+0x464>)
 8001dee:	6013      	str	r3, [r2, #0]
	 	  time = HAL_GetTick();
 8001df0:	f001 f890 	bl	8002f14 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <main+0x460>)
 8001df8:	601a      	str	r2, [r3, #0]

	 	 	gyro_y1 += dt*(mpu1.MPUgyro.Gy-mpu1.offsetY)/1000;  //2.579
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <main+0x464>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ff40 	bl	8000c84 <__aeabi_ui2f>
 8001e04:	4604      	mov	r4, r0
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <main+0x44c>)
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <main+0x44c>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7fe fe85 	bl	8000b20 <__aeabi_fsub>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7fe ff8a 	bl	8000d34 <__aeabi_fmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	e019      	b.n	8001e58 <main+0x468>
 8001e24:	f3af 8000 	nop.w
 8001e28:	61d59ae7 	.word	0x61d59ae7
 8001e2c:	404ca994 	.word	0x404ca994
 8001e30:	20000120 	.word	0x20000120
 8001e34:	20000178 	.word	0x20000178
 8001e38:	200001f4 	.word	0x200001f4
 8001e3c:	200003e4 	.word	0x200003e4
 8001e40:	2000030c 	.word	0x2000030c
 8001e44:	2000032c 	.word	0x2000032c
 8001e48:	200000e0 	.word	0x200000e0
 8001e4c:	200000e4 	.word	0x200000e4
 8001e50:	20000314 	.word	0x20000314
 8001e54:	20000380 	.word	0x20000380
 8001e58:	499b      	ldr	r1, [pc, #620]	; (80020c8 <main+0x6d8>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f81e 	bl	8000e9c <__aeabi_fdiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b99      	ldr	r3, [pc, #612]	; (80020cc <main+0x6dc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f7fe fe5a 	bl	8000b24 <__addsf3>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b95      	ldr	r3, [pc, #596]	; (80020cc <main+0x6dc>)
 8001e76:	601a      	str	r2, [r3, #0]
	 	 	gyro_x1 += dt*(mpu1.MPUgyro.Gx-mpu1.offsetx)/1000;    //0.3
 8001e78:	4b95      	ldr	r3, [pc, #596]	; (80020d0 <main+0x6e0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff01 	bl	8000c84 <__aeabi_ui2f>
 8001e82:	4604      	mov	r4, r0
 8001e84:	4b93      	ldr	r3, [pc, #588]	; (80020d4 <main+0x6e4>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <main+0x6e4>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f7fe fe46 	bl	8000b20 <__aeabi_fsub>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4619      	mov	r1, r3
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe ff4b 	bl	8000d34 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4989      	ldr	r1, [pc, #548]	; (80020c8 <main+0x6d8>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fffa 	bl	8000e9c <__aeabi_fdiv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <main+0x6e8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7fe fe36 	bl	8000b24 <__addsf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b86      	ldr	r3, [pc, #536]	; (80020d8 <main+0x6e8>)
 8001ebe:	601a      	str	r2, [r3, #0]
	 	 	gyro_z1 += dt*(mpu1.MPUgyro.Gz)/1000;
 8001ec0:	4b83      	ldr	r3, [pc, #524]	; (80020d0 <main+0x6e0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fedd 	bl	8000c84 <__aeabi_ui2f>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <main+0x6e4>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe ff2e 	bl	8000d34 <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	497b      	ldr	r1, [pc, #492]	; (80020c8 <main+0x6d8>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ffdd 	bl	8000e9c <__aeabi_fdiv>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b7d      	ldr	r3, [pc, #500]	; (80020dc <main+0x6ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7fe fe19 	bl	8000b24 <__addsf3>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b79      	ldr	r3, [pc, #484]	; (80020dc <main+0x6ec>)
 8001ef8:	601a      	str	r2, [r3, #0]

	 	 	gyro_y2 += dt*(mpu2.MPUgyro.Gy-mpu2.offsetY)/1000;
 8001efa:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <main+0x6e0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fec0 	bl	8000c84 <__aeabi_ui2f>
 8001f04:	4604      	mov	r4, r0
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <main+0x6f0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b75      	ldr	r3, [pc, #468]	; (80020e0 <main+0x6f0>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f7fe fe05 	bl	8000b20 <__aeabi_fsub>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe ff0a 	bl	8000d34 <__aeabi_fmul>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4969      	ldr	r1, [pc, #420]	; (80020c8 <main+0x6d8>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ffb9 	bl	8000e9c <__aeabi_fdiv>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	; (80020e4 <main+0x6f4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7fe fdf5 	bl	8000b24 <__addsf3>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b69      	ldr	r3, [pc, #420]	; (80020e4 <main+0x6f4>)
 8001f40:	601a      	str	r2, [r3, #0]
	 	 	gyro_x2 += dt*(mpu2.MPUgyro.Gx-mpu2.offsetx)/1000;
 8001f42:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <main+0x6e0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fe9c 	bl	8000c84 <__aeabi_ui2f>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <main+0x6f0>)
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <main+0x6f0>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7fe fde1 	bl	8000b20 <__aeabi_fsub>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7fe fee6 	bl	8000d34 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4957      	ldr	r1, [pc, #348]	; (80020c8 <main+0x6d8>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ff95 	bl	8000e9c <__aeabi_fdiv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <main+0x6f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f7fe fdd1 	bl	8000b24 <__addsf3>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <main+0x6f8>)
 8001f88:	601a      	str	r2, [r3, #0]
	 	 	gyro_z2 += dt*(mpu2.MPUgyro.Gz)/1000;
 8001f8a:	4b51      	ldr	r3, [pc, #324]	; (80020d0 <main+0x6e0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe78 	bl	8000c84 <__aeabi_ui2f>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <main+0x6f0>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe fec9 	bl	8000d34 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4948      	ldr	r1, [pc, #288]	; (80020c8 <main+0x6d8>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe ff78 	bl	8000e9c <__aeabi_fdiv>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <main+0x6fc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f7fe fdb4 	bl	8000b24 <__addsf3>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <main+0x6fc>)
 8001fc2:	601a      	str	r2, [r3, #0]



	// angulo_y = 0.01*(accel_y1) + 0.9*gyro_y1;
	 angulo_x = 0.01*(accel_x1) + 0.9*gyro_x1;
 8001fc4:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <main+0x700>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa25 	bl	8000418 <__aeabi_f2d>
 8001fce:	a33a      	add	r3, pc, #232	; (adr r3, 80020b8 <main+0x6c8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fa78 	bl	80004c8 <__aeabi_dmul>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4625      	mov	r5, r4
 8001fde:	461c      	mov	r4, r3
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <main+0x6e8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa17 	bl	8000418 <__aeabi_f2d>
 8001fea:	a335      	add	r3, pc, #212	; (adr r3, 80020c0 <main+0x6d0>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fa6a 	bl	80004c8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	f7fe f8ae 	bl	800015c <__adddf3>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fd36 	bl	8000a78 <__aeabi_d2f>
 800200c:	4602      	mov	r2, r0
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <main+0x704>)
 8002010:	601a      	str	r2, [r3, #0]



	KalmanAngle1 = KalmanMPU(accel_x1, mpu1.MPUgyro.Gx, dt,mpu1.hi2c,1); //1 x, 2y , 3z
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <main+0x700>)
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <main+0x6e4>)
 8002018:	685d      	ldr	r5, [r3, #4]
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <main+0x6e0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe30 	bl	8000c84 <__aeabi_ui2f>
 8002024:	4601      	mov	r1, r0
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <main+0x6e4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	4629      	mov	r1, r5
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fa07 	bl	8001448 <KalmanMPU>
 800203a:	4602      	mov	r2, r0
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <main+0x708>)
 800203e:	601a      	str	r2, [r3, #0]
	 KalmanAngle2 = KalmanMPU(accel_x2, mpu2.MPUgyro.Gx, dt,mpu2.hi2c,1);
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <main+0x70c>)
 8002042:	681c      	ldr	r4, [r3, #0]
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <main+0x6f0>)
 8002046:	685d      	ldr	r5, [r3, #4]
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <main+0x6e0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fe19 	bl	8000c84 <__aeabi_ui2f>
 8002052:	4601      	mov	r1, r0
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <main+0x6f0>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	460a      	mov	r2, r1
 8002060:	4629      	mov	r1, r5
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff f9f0 	bl	8001448 <KalmanMPU>
 8002068:	4602      	mov	r2, r0
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <main+0x710>)
 800206c:	601a      	str	r2, [r3, #0]
	 KalmanAngle3 = KalmanMPU(accel_y1, mpu1.MPUgyro.Gy, dt,mpu1.hi2c,2);
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <main+0x714>)
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <main+0x6e4>)
 8002074:	689d      	ldr	r5, [r3, #8]
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <main+0x6e0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe02 	bl	8000c84 <__aeabi_ui2f>
 8002080:	4601      	mov	r1, r0
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <main+0x6e4>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	460a      	mov	r2, r1
 800208e:	4629      	mov	r1, r5
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff f9d9 	bl	8001448 <KalmanMPU>
 8002096:	4602      	mov	r2, r0
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <main+0x718>)
 800209a:	601a      	str	r2, [r3, #0]
	 KalmanAngle4 = KalmanMPU(accel_y2, mpu2.MPUgyro.Gy, dt,mpu2.hi2c,2);
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <main+0x71c>)
 800209e:	681c      	ldr	r4, [r3, #0]
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <main+0x6f0>)
 80020a2:	689d      	ldr	r5, [r3, #8]
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <main+0x6e0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fdeb 	bl	8000c84 <__aeabi_ui2f>
 80020ae:	4601      	mov	r1, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <main+0x6f0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2302      	movs	r3, #2
 80020b6:	e02b      	b.n	8002110 <main+0x720>
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3f847ae1 	.word	0x3f847ae1
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	3feccccc 	.word	0x3feccccc
 80020c8:	447a0000 	.word	0x447a0000
 80020cc:	200002c8 	.word	0x200002c8
 80020d0:	20000380 	.word	0x20000380
 80020d4:	200003e4 	.word	0x200003e4
 80020d8:	20000278 	.word	0x20000278
 80020dc:	200002c0 	.word	0x200002c0
 80020e0:	200001f4 	.word	0x200001f4
 80020e4:	200003cc 	.word	0x200003cc
 80020e8:	20000174 	.word	0x20000174
 80020ec:	20000358 	.word	0x20000358
 80020f0:	2000030c 	.word	0x2000030c
 80020f4:	20000308 	.word	0x20000308
 80020f8:	20000244 	.word	0x20000244
 80020fc:	200000e0 	.word	0x200000e0
 8002100:	20000354 	.word	0x20000354
 8002104:	2000032c 	.word	0x2000032c
 8002108:	200001dc 	.word	0x200001dc
 800210c:	200000e4 	.word	0x200000e4
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	460a      	mov	r2, r1
 8002116:	4629      	mov	r1, r5
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff f995 	bl	8001448 <KalmanMPU>
 800211e:	4602      	mov	r2, r0
 8002120:	4bb3      	ldr	r3, [pc, #716]	; (80023f0 <main+0xa00>)
 8002122:	601a      	str	r2, [r3, #0]
	 //KalmanAngle6 =  KalmanFUN(accel_x1, mpu1.MPUgyro.Gx,KalmanAngle6,bias6, dt, P6 );

//NUEVAS FUNCIONES


	 angulo_y2 = 0.01*(accel_y2) + 0.9*gyro_y2;
 8002124:	4bb3      	ldr	r3, [pc, #716]	; (80023f4 <main+0xa04>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe f975 	bl	8000418 <__aeabi_f2d>
 800212e:	a3aa      	add	r3, pc, #680	; (adr r3, 80023d8 <main+0x9e8>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe f9c8 	bl	80004c8 <__aeabi_dmul>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	4625      	mov	r5, r4
 800213e:	461c      	mov	r4, r3
 8002140:	4bad      	ldr	r3, [pc, #692]	; (80023f8 <main+0xa08>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f967 	bl	8000418 <__aeabi_f2d>
 800214a:	a3a5      	add	r3, pc, #660	; (adr r3, 80023e0 <main+0x9f0>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe f9ba 	bl	80004c8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fd fffe 	bl	800015c <__adddf3>
 8002160:	4603      	mov	r3, r0
 8002162:	460c      	mov	r4, r1
 8002164:	4618      	mov	r0, r3
 8002166:	4621      	mov	r1, r4
 8002168:	f7fe fc86 	bl	8000a78 <__aeabi_d2f>
 800216c:	4602      	mov	r2, r0
 800216e:	4ba3      	ldr	r3, [pc, #652]	; (80023fc <main+0xa0c>)
 8002170:	601a      	str	r2, [r3, #0]
	 angulo_x2 = 0.01*(accel_x2) + 0.9*gyro_x2;
 8002172:	4ba3      	ldr	r3, [pc, #652]	; (8002400 <main+0xa10>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f94e 	bl	8000418 <__aeabi_f2d>
 800217c:	a396      	add	r3, pc, #600	; (adr r3, 80023d8 <main+0x9e8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f9a1 	bl	80004c8 <__aeabi_dmul>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	4625      	mov	r5, r4
 800218c:	461c      	mov	r4, r3
 800218e:	4b9d      	ldr	r3, [pc, #628]	; (8002404 <main+0xa14>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f940 	bl	8000418 <__aeabi_f2d>
 8002198:	a391      	add	r3, pc, #580	; (adr r3, 80023e0 <main+0x9f0>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe f993 	bl	80004c8 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fd ffd7 	bl	800015c <__adddf3>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	4618      	mov	r0, r3
 80021b4:	4621      	mov	r1, r4
 80021b6:	f7fe fc5f 	bl	8000a78 <__aeabi_d2f>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <main+0xa18>)
 80021be:	601a      	str	r2, [r3, #0]

Z_correcto = mpu1.MPUgyro.Gz -2.3;
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <main+0xa1c>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f927 	bl	8000418 <__aeabi_f2d>
 80021ca:	a387      	add	r3, pc, #540	; (adr r3, 80023e8 <main+0x9f8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fd ffc2 	bl	8000158 <__aeabi_dsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	4618      	mov	r0, r3
 80021da:	4621      	mov	r1, r4
 80021dc:	f7fe fc4c 	bl	8000a78 <__aeabi_d2f>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <main+0xa20>)
 80021e4:	601a      	str	r2, [r3, #0]
if( abs(Z_correcto) < 2) Z_correcto = 0;
 80021e6:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <main+0xa20>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ff68 	bl	80010c0 <__aeabi_f2iz>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	db0b      	blt.n	8002210 <main+0x820>
 80021f8:	4b85      	ldr	r3, [pc, #532]	; (8002410 <main+0xa20>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff5f 	bl	80010c0 <__aeabi_f2iz>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	dc03      	bgt.n	8002210 <main+0x820>
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <main+0xa20>)
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
KalmanAngle5 += dt*Z_correcto/1000;
 8002210:	4b80      	ldr	r3, [pc, #512]	; (8002414 <main+0xa24>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd35 	bl	8000c84 <__aeabi_ui2f>
 800221a:	4602      	mov	r2, r0
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <main+0xa20>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7fe fd86 	bl	8000d34 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	497b      	ldr	r1, [pc, #492]	; (8002418 <main+0xa28>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fe35 	bl	8000e9c <__aeabi_fdiv>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b79      	ldr	r3, [pc, #484]	; (800241c <main+0xa2c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fc71 	bl	8000b24 <__addsf3>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	4b75      	ldr	r3, [pc, #468]	; (800241c <main+0xa2c>)
 8002248:	601a      	str	r2, [r3, #0]

if(KalmanAngle5 > 90) KalmanAngle5 = 90;
 800224a:	4b74      	ldr	r3, [pc, #464]	; (800241c <main+0xa2c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4974      	ldr	r1, [pc, #464]	; (8002420 <main+0xa30>)
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ff2b 	bl	80010ac <__aeabi_fcmpgt>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <main+0x872>
 800225c:	4b6f      	ldr	r3, [pc, #444]	; (800241c <main+0xa2c>)
 800225e:	4a70      	ldr	r2, [pc, #448]	; (8002420 <main+0xa30>)
 8002260:	601a      	str	r2, [r3, #0]
if(KalmanAngle5 < -90) KalmanAngle5 = -90;
 8002262:	4b6e      	ldr	r3, [pc, #440]	; (800241c <main+0xa2c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	496f      	ldr	r1, [pc, #444]	; (8002424 <main+0xa34>)
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff01 	bl	8001070 <__aeabi_fcmplt>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <main+0x88a>
 8002274:	4b69      	ldr	r3, [pc, #420]	; (800241c <main+0xa2c>)
 8002276:	4a6b      	ldr	r2, [pc, #428]	; (8002424 <main+0xa34>)
 8002278:	601a      	str	r2, [r3, #0]
	 //ADC read

	 P_previa =  P;
 800227a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800227e:	67fb      	str	r3, [r7, #124]	; 0x7c

	 	Kalman = P/(P+var);
 8002280:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002284:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002288:	f7fe fc4c 	bl	8000b24 <__addsf3>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002294:	f7fe fe02 	bl	8000e9c <__aeabi_fdiv>
 8002298:	4603      	mov	r3, r0
 800229a:	67bb      	str	r3, [r7, #120]	; 0x78

	 HAL_ADC_Start(&hadc1);
 800229c:	4862      	ldr	r0, [pc, #392]	; (8002428 <main+0xa38>)
 800229e:	f000 ff3d 	bl	800311c <HAL_ADC_Start>
	 	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 80022a2:	f04f 31ff 	mov.w	r1, #4294967295
 80022a6:	4860      	ldr	r0, [pc, #384]	; (8002428 <main+0xa38>)
 80022a8:	f000 ffe6 	bl	8003278 <HAL_ADC_PollForConversion>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <main+0x8d6>
	 		 ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 80022b2:	485d      	ldr	r0, [pc, #372]	; (8002428 <main+0xa38>)
 80022b4:	f001 f8da 	bl	800346c <HAL_ADC_GetValue>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fce2 	bl	8000c84 <__aeabi_ui2f>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <main+0xa3c>)
 80022c4:	601a      	str	r2, [r3, #0]
	 	   }

	 	 X_estimate = X + Kalman*(ADC_val-X);
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <main+0xa40>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fcde 	bl	8000c8c <__aeabi_i2f>
 80022d0:	4605      	mov	r5, r0
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <main+0xa3c>)
 80022d4:	681c      	ldr	r4, [r3, #0]
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <main+0xa40>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fcd6 	bl	8000c8c <__aeabi_i2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7fe fc1b 	bl	8000b20 <__aeabi_fsub>
 80022ea:	4603      	mov	r3, r0
 80022ec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fd20 	bl	8000d34 <__aeabi_fmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4628      	mov	r0, r5
 80022fa:	f7fe fc13 	bl	8000b24 <__addsf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fedd 	bl	80010c0 <__aeabi_f2iz>
 8002306:	4602      	mov	r2, r0
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <main+0xa44>)
 800230a:	601a      	str	r2, [r3, #0]
	 		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 800230c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800230e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002312:	f7fe fc05 	bl	8000b20 <__aeabi_fsub>
 8002316:	4603      	mov	r3, r0
 8002318:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fd0a 	bl	8000d34 <__aeabi_fmul>
 8002320:	4603      	mov	r3, r0
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f878 	bl	8000418 <__aeabi_f2d>
 8002328:	4605      	mov	r5, r0
 800232a:	460e      	mov	r6, r1
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <main+0xa40>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b40      	ldr	r3, [pc, #256]	; (8002434 <main+0xa44>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f85c 	bl	80003f4 <__aeabi_i2d>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	a323      	add	r3, pc, #140	; (adr r3, 80023d8 <main+0x9e8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002352:	f7fe f8b9 	bl	80004c8 <__aeabi_dmul>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	461a      	mov	r2, r3
 800235c:	4623      	mov	r3, r4
 800235e:	4628      	mov	r0, r5
 8002360:	4631      	mov	r1, r6
 8002362:	f7fd fefb 	bl	800015c <__adddf3>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	f7fe fb83 	bl	8000a78 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 		 	  X = X_estimate;
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <main+0xa44>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <main+0xa40>)
 800237e:	6013      	str	r3, [r2, #0]
	 		 	  X_estimate =(X_estimate)/10 -20;
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <main+0xa44>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <main+0xa48>)
 8002386:	fb82 1203 	smull	r1, r2, r2, r3
 800238a:	1092      	asrs	r2, r2, #2
 800238c:	17db      	asrs	r3, r3, #31
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	3b14      	subs	r3, #20
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <main+0xa44>)
 8002394:	6013      	str	r3, [r2, #0]


	 //UART
	 		 	char  ese[] = "s";
 8002396:	2373      	movs	r3, #115	; 0x73
 8002398:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 		 	char  eMe[] = "M";
 800239a:	234d      	movs	r3, #77	; 0x4d
 800239c:	853b      	strh	r3, [r7, #40]	; 0x28
	 		 	char  eme[] = "m";
 800239e:	236d      	movs	r3, #109	; 0x6d
 80023a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	 		 	char  eSe[] = "S";
 80023a2:	2353      	movs	r3, #83	; 0x53
 80023a4:	843b      	strh	r3, [r7, #32]
// 		   KalmanAngle5 =  (KalmanAngle5 +300 )/2;//servo
//	 		 	 KalmanAngle4 =  KalmanAngle4*(-2) + 150;//base
//	 		 	 KalmanAngle1=  KalmanAngle1*(-4) + 300;//codo


	 		 	 gcvt(angulo_x,10,palabra);
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <main+0xa4c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f834 	bl	8000418 <__aeabi_f2d>
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <main+0xa50>)
 80023b2:	220a      	movs	r2, #10
 80023b4:	f003 fb74 	bl	8005aa0 <gcvt>
	 		 	 gcvt(KalmanAngle1,10,palabra2);
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <main+0xa54>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f82b 	bl	8000418 <__aeabi_f2d>
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <main+0xa58>)
 80023c4:	220a      	movs	r2, #10
 80023c6:	f003 fb6b 	bl	8005aa0 <gcvt>
	 		 	 gcvt(KalmanAngle2,10,palabra3);
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <main+0xa5c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	e03e      	b.n	8002450 <main+0xa60>
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	47ae147b 	.word	0x47ae147b
 80023dc:	3f847ae1 	.word	0x3f847ae1
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	3feccccc 	.word	0x3feccccc
 80023e8:	66666666 	.word	0x66666666
 80023ec:	40026666 	.word	0x40026666
 80023f0:	20000300 	.word	0x20000300
 80023f4:	200000e4 	.word	0x200000e4
 80023f8:	200003cc 	.word	0x200003cc
 80023fc:	200003e0 	.word	0x200003e0
 8002400:	200000e0 	.word	0x200000e0
 8002404:	20000174 	.word	0x20000174
 8002408:	2000035c 	.word	0x2000035c
 800240c:	200003e4 	.word	0x200003e4
 8002410:	20000328 	.word	0x20000328
 8002414:	20000380 	.word	0x20000380
 8002418:	447a0000 	.word	0x447a0000
 800241c:	200002c4 	.word	0x200002c4
 8002420:	42b40000 	.word	0x42b40000
 8002424:	c2b40000 	.word	0xc2b40000
 8002428:	20000248 	.word	0x20000248
 800242c:	20000310 	.word	0x20000310
 8002430:	20000430 	.word	0x20000430
 8002434:	20000304 	.word	0x20000304
 8002438:	66666667 	.word	0x66666667
 800243c:	20000308 	.word	0x20000308
 8002440:	20000360 	.word	0x20000360
 8002444:	20000244 	.word	0x20000244
 8002448:	200000e8 	.word	0x200000e8
 800244c:	20000354 	.word	0x20000354
 8002450:	f7fd ffe2 	bl	8000418 <__aeabi_f2d>
 8002454:	4bce      	ldr	r3, [pc, #824]	; (8002790 <main+0xda0>)
 8002456:	220a      	movs	r2, #10
 8002458:	f003 fb22 	bl	8005aa0 <gcvt>
	 		 	 gcvt(KalmanAngle3,10,palabra4);
 800245c:	4bcd      	ldr	r3, [pc, #820]	; (8002794 <main+0xda4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd ffd9 	bl	8000418 <__aeabi_f2d>
 8002466:	4bcc      	ldr	r3, [pc, #816]	; (8002798 <main+0xda8>)
 8002468:	220a      	movs	r2, #10
 800246a:	f003 fb19 	bl	8005aa0 <gcvt>
	 		 	 gcvt(KalmanAngle4,10,palabra5);
 800246e:	4bcb      	ldr	r3, [pc, #812]	; (800279c <main+0xdac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd ffd0 	bl	8000418 <__aeabi_f2d>
 8002478:	4bc9      	ldr	r3, [pc, #804]	; (80027a0 <main+0xdb0>)
 800247a:	220a      	movs	r2, #10
 800247c:	f003 fb10 	bl	8005aa0 <gcvt>
	 		 	 gcvt(KalmanAngle5,10,palabra6);
 8002480:	4bc8      	ldr	r3, [pc, #800]	; (80027a4 <main+0xdb4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ffc7 	bl	8000418 <__aeabi_f2d>
 800248a:	4bc7      	ldr	r3, [pc, #796]	; (80027a8 <main+0xdb8>)
 800248c:	220a      	movs	r2, #10
 800248e:	f003 fb07 	bl	8005aa0 <gcvt>
	 		 	  itoa(X_estimate,info_kalman,10);
 8002492:	4bc6      	ldr	r3, [pc, #792]	; (80027ac <main+0xdbc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800249a:	220a      	movs	r2, #10
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fb65 	bl	8005b6c <itoa>
	 		 	  itoa(ADC_val,info_real,10);
 80024a2:	4bc3      	ldr	r3, [pc, #780]	; (80027b0 <main+0xdc0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fe0a 	bl	80010c0 <__aeabi_f2iz>
 80024ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024b0:	220a      	movs	r2, #10
 80024b2:	4619      	mov	r1, r3
 80024b4:	f003 fb5a 	bl	8005b6c <itoa>



	 		 	  //MODELO CINEMATICO

	 		 	   X_c = cos(KalmanAngle5*(3.14/180)) * (L1*cos(KalmanAngle4*(3.14/180)) + L2*cos(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180))   );
 80024b8:	4bba      	ldr	r3, [pc, #744]	; (80027a4 <main+0xdb4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd ffab 	bl	8000418 <__aeabi_f2d>
 80024c2:	a3b1      	add	r3, pc, #708	; (adr r3, 8002788 <main+0xd98>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fd fffe 	bl	80004c8 <__aeabi_dmul>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	4618      	mov	r0, r3
 80024d2:	4621      	mov	r1, r4
 80024d4:	f005 f832 	bl	800753c <cos>
 80024d8:	4680      	mov	r8, r0
 80024da:	4689      	mov	r9, r1
 80024dc:	4bb5      	ldr	r3, [pc, #724]	; (80027b4 <main+0xdc4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ff87 	bl	80003f4 <__aeabi_i2d>
 80024e6:	4604      	mov	r4, r0
 80024e8:	460d      	mov	r5, r1
 80024ea:	4bac      	ldr	r3, [pc, #688]	; (800279c <main+0xdac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd ff92 	bl	8000418 <__aeabi_f2d>
 80024f4:	a3a4      	add	r3, pc, #656	; (adr r3, 8002788 <main+0xd98>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fd ffe5 	bl	80004c8 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f005 f819 	bl	800753c <cos>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd ffd9 	bl	80004c8 <__aeabi_dmul>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	469a      	mov	sl, r3
 800251c:	46a3      	mov	fp, r4
 800251e:	4ba6      	ldr	r3, [pc, #664]	; (80027b8 <main+0xdc8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ff66 	bl	80003f4 <__aeabi_i2d>
 8002528:	e9c7 0100 	strd	r0, r1, [r7]
 800252c:	4b9b      	ldr	r3, [pc, #620]	; (800279c <main+0xdac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ff71 	bl	8000418 <__aeabi_f2d>
 8002536:	a394      	add	r3, pc, #592	; (adr r3, 8002788 <main+0xd98>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fd ffc4 	bl	80004c8 <__aeabi_dmul>
 8002540:	4603      	mov	r3, r0
 8002542:	460c      	mov	r4, r1
 8002544:	461d      	mov	r5, r3
 8002546:	4626      	mov	r6, r4
 8002548:	4b9c      	ldr	r3, [pc, #624]	; (80027bc <main+0xdcc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd ff63 	bl	8000418 <__aeabi_f2d>
 8002552:	a38d      	add	r3, pc, #564	; (adr r3, 8002788 <main+0xd98>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fd ffb6 	bl	80004c8 <__aeabi_dmul>
 800255c:	4603      	mov	r3, r0
 800255e:	460c      	mov	r4, r1
 8002560:	461a      	mov	r2, r3
 8002562:	4623      	mov	r3, r4
 8002564:	4628      	mov	r0, r5
 8002566:	4631      	mov	r1, r6
 8002568:	f7fd fdf8 	bl	800015c <__adddf3>
 800256c:	4603      	mov	r3, r0
 800256e:	460c      	mov	r4, r1
 8002570:	4618      	mov	r0, r3
 8002572:	4621      	mov	r1, r4
 8002574:	f004 ffe2 	bl	800753c <cos>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	461a      	mov	r2, r3
 800257e:	4623      	mov	r3, r4
 8002580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002584:	f7fd ffa0 	bl	80004c8 <__aeabi_dmul>
 8002588:	4603      	mov	r3, r0
 800258a:	460c      	mov	r4, r1
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	4650      	mov	r0, sl
 8002592:	4659      	mov	r1, fp
 8002594:	f7fd fde2 	bl	800015c <__adddf3>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	461a      	mov	r2, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	4640      	mov	r0, r8
 80025a2:	4649      	mov	r1, r9
 80025a4:	f7fd ff90 	bl	80004c8 <__aeabi_dmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	4618      	mov	r0, r3
 80025ae:	4621      	mov	r1, r4
 80025b0:	f7fe fa62 	bl	8000a78 <__aeabi_d2f>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <main+0xdd0>)
 80025b8:	601a      	str	r2, [r3, #0]
	 		 	   Y_c = sin(KalmanAngle5*(3.14/180)) * (L1*cos(KalmanAngle4*(3.14/180)) + L2*cos(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180))   );
 80025ba:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <main+0xdb4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff2a 	bl	8000418 <__aeabi_f2d>
 80025c4:	a370      	add	r3, pc, #448	; (adr r3, 8002788 <main+0xd98>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd ff7d 	bl	80004c8 <__aeabi_dmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	f004 ffeb 	bl	80075b0 <sin>
 80025da:	4680      	mov	r8, r0
 80025dc:	4689      	mov	r9, r1
 80025de:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <main+0xdc4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff06 	bl	80003f4 <__aeabi_i2d>
 80025e8:	4604      	mov	r4, r0
 80025ea:	460d      	mov	r5, r1
 80025ec:	4b6b      	ldr	r3, [pc, #428]	; (800279c <main+0xdac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ff11 	bl	8000418 <__aeabi_f2d>
 80025f6:	a364      	add	r3, pc, #400	; (adr r3, 8002788 <main+0xd98>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fd ff64 	bl	80004c8 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f004 ff98 	bl	800753c <cos>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4620      	mov	r0, r4
 8002612:	4629      	mov	r1, r5
 8002614:	f7fd ff58 	bl	80004c8 <__aeabi_dmul>
 8002618:	4603      	mov	r3, r0
 800261a:	460c      	mov	r4, r1
 800261c:	469a      	mov	sl, r3
 800261e:	46a3      	mov	fp, r4
 8002620:	4b65      	ldr	r3, [pc, #404]	; (80027b8 <main+0xdc8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd fee5 	bl	80003f4 <__aeabi_i2d>
 800262a:	e9c7 0100 	strd	r0, r1, [r7]
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <main+0xdac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fef0 	bl	8000418 <__aeabi_f2d>
 8002638:	a353      	add	r3, pc, #332	; (adr r3, 8002788 <main+0xd98>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ff43 	bl	80004c8 <__aeabi_dmul>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	461d      	mov	r5, r3
 8002648:	4626      	mov	r6, r4
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <main+0xdcc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fee2 	bl	8000418 <__aeabi_f2d>
 8002654:	a34c      	add	r3, pc, #304	; (adr r3, 8002788 <main+0xd98>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ff35 	bl	80004c8 <__aeabi_dmul>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	461a      	mov	r2, r3
 8002664:	4623      	mov	r3, r4
 8002666:	4628      	mov	r0, r5
 8002668:	4631      	mov	r1, r6
 800266a:	f7fd fd77 	bl	800015c <__adddf3>
 800266e:	4603      	mov	r3, r0
 8002670:	460c      	mov	r4, r1
 8002672:	4618      	mov	r0, r3
 8002674:	4621      	mov	r1, r4
 8002676:	f004 ff61 	bl	800753c <cos>
 800267a:	4603      	mov	r3, r0
 800267c:	460c      	mov	r4, r1
 800267e:	461a      	mov	r2, r3
 8002680:	4623      	mov	r3, r4
 8002682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002686:	f7fd ff1f 	bl	80004c8 <__aeabi_dmul>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	461a      	mov	r2, r3
 8002690:	4623      	mov	r3, r4
 8002692:	4650      	mov	r0, sl
 8002694:	4659      	mov	r1, fp
 8002696:	f7fd fd61 	bl	800015c <__adddf3>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	461a      	mov	r2, r3
 80026a0:	4623      	mov	r3, r4
 80026a2:	4640      	mov	r0, r8
 80026a4:	4649      	mov	r1, r9
 80026a6:	f7fd ff0f 	bl	80004c8 <__aeabi_dmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	4618      	mov	r0, r3
 80026b0:	4621      	mov	r1, r4
 80026b2:	f7fe f9e1 	bl	8000a78 <__aeabi_d2f>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <main+0xdd4>)
 80026ba:	601a      	str	r2, [r3, #0]
	 		 	   Z_c = (L1*sin(KalmanAngle4*(3.14/180))) + (L2*sin(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180)));
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <main+0xdc4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fe97 	bl	80003f4 <__aeabi_i2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <main+0xdac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fea2 	bl	8000418 <__aeabi_f2d>
 80026d4:	a32c      	add	r3, pc, #176	; (adr r3, 8002788 <main+0xd98>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fd fef5 	bl	80004c8 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f004 ff63 	bl	80075b0 <sin>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fd fee9 	bl	80004c8 <__aeabi_dmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	4625      	mov	r5, r4
 80026fc:	461c      	mov	r4, r3
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <main+0xdc8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd fe76 	bl	80003f4 <__aeabi_i2d>
 8002708:	4680      	mov	r8, r0
 800270a:	4689      	mov	r9, r1
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <main+0xdac>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fe81 	bl	8000418 <__aeabi_f2d>
 8002716:	a31c      	add	r3, pc, #112	; (adr r3, 8002788 <main+0xd98>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd fed4 	bl	80004c8 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4692      	mov	sl, r2
 8002726:	469b      	mov	fp, r3
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <main+0xdcc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fe73 	bl	8000418 <__aeabi_f2d>
 8002732:	a315      	add	r3, pc, #84	; (adr r3, 8002788 <main+0xd98>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fec6 	bl	80004c8 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4650      	mov	r0, sl
 8002742:	4659      	mov	r1, fp
 8002744:	f7fd fd0a 	bl	800015c <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f004 ff2e 	bl	80075b0 <sin>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4640      	mov	r0, r8
 800275a:	4649      	mov	r1, r9
 800275c:	f7fd feb4 	bl	80004c8 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4620      	mov	r0, r4
 8002766:	4629      	mov	r1, r5
 8002768:	f7fd fcf8 	bl	800015c <__adddf3>
 800276c:	4603      	mov	r3, r0
 800276e:	460c      	mov	r4, r1
 8002770:	4618      	mov	r0, r3
 8002772:	4621      	mov	r1, r4
 8002774:	f7fe f980 	bl	8000a78 <__aeabi_d2f>
 8002778:	4602      	mov	r2, r0
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <main+0xdd8>)
 800277c:	601a      	str	r2, [r3, #0]

	 		 	if( HAL_GetTick() -trans_time > 50){
 800277e:	f000 fbc9 	bl	8002f14 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	e022      	b.n	80027cc <main+0xddc>
 8002786:	bf00      	nop
 8002788:	d98b0955 	.word	0xd98b0955
 800278c:	3f91dcf4 	.word	0x3f91dcf4
 8002790:	20000334 	.word	0x20000334
 8002794:	200001dc 	.word	0x200001dc
 8002798:	200002cc 	.word	0x200002cc
 800279c:	20000300 	.word	0x20000300
 80027a0:	200003ac 	.word	0x200003ac
 80027a4:	200002c4 	.word	0x200002c4
 80027a8:	20000388 	.word	0x20000388
 80027ac:	20000304 	.word	0x20000304
 80027b0:	20000310 	.word	0x20000310
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004
 80027bc:	20000244 	.word	0x20000244
 80027c0:	2000027c 	.word	0x2000027c
 80027c4:	200002ec 	.word	0x200002ec
 80027c8:	20000330 	.word	0x20000330
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <main+0xe54>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b32      	cmp	r3, #50	; 0x32
 80027d4:	f67f a96e 	bls.w	8001ab4 <main+0xc4>

	    HAL_UART_Transmit(&huart1, (uint8_t*)eMe, sizeof(char), 100);
 80027d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	2201      	movs	r2, #1
 80027e0:	4819      	ldr	r0, [pc, #100]	; (8002848 <main+0xe58>)
 80027e2:	f002 fff2 	bl	80057ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra5,sizeof(float ), 100);//palabra
 80027e6:	2364      	movs	r3, #100	; 0x64
 80027e8:	2204      	movs	r2, #4
 80027ea:	4918      	ldr	r1, [pc, #96]	; (800284c <main+0xe5c>)
 80027ec:	4816      	ldr	r0, [pc, #88]	; (8002848 <main+0xe58>)
 80027ee:	f002 ffec 	bl	80057ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)ese, sizeof(char), 100);
 80027f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80027f6:	2364      	movs	r3, #100	; 0x64
 80027f8:	2201      	movs	r2, #1
 80027fa:	4813      	ldr	r0, [pc, #76]	; (8002848 <main+0xe58>)
 80027fc:	f002 ffe5 	bl	80057ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra6,sizeof(float ), 100);
 8002800:	2364      	movs	r3, #100	; 0x64
 8002802:	2204      	movs	r2, #4
 8002804:	4912      	ldr	r1, [pc, #72]	; (8002850 <main+0xe60>)
 8002806:	4810      	ldr	r0, [pc, #64]	; (8002848 <main+0xe58>)
 8002808:	f002 ffdf 	bl	80057ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)eme, sizeof(char), 100);
 800280c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002810:	2364      	movs	r3, #100	; 0x64
 8002812:	2201      	movs	r2, #1
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <main+0xe58>)
 8002816:	f002 ffd8 	bl	80057ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra2,sizeof(float ), 100);
 800281a:	2364      	movs	r3, #100	; 0x64
 800281c:	2204      	movs	r2, #4
 800281e:	490d      	ldr	r1, [pc, #52]	; (8002854 <main+0xe64>)
 8002820:	4809      	ldr	r0, [pc, #36]	; (8002848 <main+0xe58>)
 8002822:	f002 ffd2 	bl	80057ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)ln, sizeof(comma), 100);
 8002826:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800282a:	2364      	movs	r3, #100	; 0x64
 800282c:	2202      	movs	r2, #2
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <main+0xe58>)
 8002830:	f002 ffcb 	bl	80057ca <HAL_UART_Transmit>

				trans_time = HAL_GetTick();
 8002834:	f000 fb6e 	bl	8002f14 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	4b02      	ldr	r3, [pc, #8]	; (8002844 <main+0xe54>)
 800283c:	601a      	str	r2, [r3, #0]
  {
 800283e:	f7ff b939 	b.w	8001ab4 <main+0xc4>
 8002842:	bf00      	nop
 8002844:	2000011c 	.word	0x2000011c
 8002848:	20000280 	.word	0x20000280
 800284c:	200003ac 	.word	0x200003ac
 8002850:	20000388 	.word	0x20000388
 8002854:	200000e8 	.word	0x200000e8

08002858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b094      	sub	sp, #80	; 0x50
 800285c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002862:	2228      	movs	r2, #40	; 0x28
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f98d 	bl	8005b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002888:	2302      	movs	r3, #2
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800288c:	2301      	movs	r3, #1
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002890:	2310      	movs	r3, #16
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002894:	2300      	movs	r3, #0
 8002896:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289c:	4618      	mov	r0, r3
 800289e:	f002 f9b9 	bl	8004c14 <HAL_RCC_OscConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80028a8:	f000 f928 	bl	8002afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ac:	230f      	movs	r3, #15
 80028ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fc24 	bl	8005114 <HAL_RCC_ClockConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80028d2:	f000 f913 	bl	8002afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028d6:	2302      	movs	r3, #2
 80028d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fdb3 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028ec:	f000 f906 	bl	8002afc <Error_Handler>
  }
}
 80028f0:	bf00      	nop
 80028f2:	3750      	adds	r7, #80	; 0x50
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_ADC1_Init+0x74>)
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <MX_ADC1_Init+0x78>)
 800290c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <MX_ADC1_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_ADC1_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <MX_ADC1_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_ADC1_Init+0x74>)
 8002922:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002926:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_ADC1_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_ADC1_Init+0x74>)
 8002930:	2201      	movs	r2, #1
 8002932:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <MX_ADC1_Init+0x74>)
 8002936:	f000 fb19 	bl	8002f6c <HAL_ADC_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002940:	f000 f8dc 	bl	8002afc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002948:	2301      	movs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_ADC1_Init+0x74>)
 8002956:	f000 fd95 	bl	8003484 <HAL_ADC_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002960:	f000 f8cc 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000248 	.word	0x20000248
 8002970:	40012400 	.word	0x40012400

08002974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_I2C1_Init+0x50>)
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <MX_I2C1_Init+0x54>)
 800297c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <MX_I2C1_Init+0x58>)
 8002982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_I2C1_Init+0x50>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002996:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <MX_I2C1_Init+0x50>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029b2:	f001 f941 	bl	8003c38 <HAL_I2C_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029bc:	f000 f89e 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000120 	.word	0x20000120
 80029c8:	40005400 	.word	0x40005400
 80029cc:	000186a0 	.word	0x000186a0

080029d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <MX_I2C2_Init+0x54>)
 80029d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <MX_I2C2_Init+0x58>)
 80029de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a0e:	f001 f913 	bl	8003c38 <HAL_I2C_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a18:	f000 f870 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000178 	.word	0x20000178
 8002a24:	40005800 	.word	0x40005800
 8002a28:	000186a0 	.word	0x000186a0

08002a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <MX_USART1_UART_Init+0x50>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a64:	f002 fe64 	bl	8005730 <HAL_UART_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a6e:	f000 f845 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000280 	.word	0x20000280
 8002a7c:	40013800 	.word	0x40013800

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6193      	str	r3, [r2, #24]
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_GPIO_Init+0x74>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <MX_GPIO_Init+0x78>)
 8002aca:	f001 f89d 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2302      	movs	r3, #2
 8002adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_GPIO_Init+0x78>)
 8002ae6:	f000 ff35 	bl	8003954 <HAL_GPIO_Init>

}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b02:	e7fe      	b.n	8002b02 <Error_Handler+0x6>

08002b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6193      	str	r3, [r2, #24]
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_MspInit+0x60>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_MspInit+0x60>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000

08002b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_ADC_MspInit+0x6c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d121      	bne.n	8002bcc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_ADC_MspInit+0x74>)
 8002bc8:	f000 fec4 	bl	8003954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40012400 	.word	0x40012400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010800 	.word	0x40010800

08002be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0318 	add.w	r3, r7, #24
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_I2C_MspInit+0xc8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d124      	bne.n	8002c4a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c18:	23c0      	movs	r3, #192	; 0xc0
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	f107 0318 	add.w	r3, r7, #24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4821      	ldr	r0, [pc, #132]	; (8002cb0 <HAL_I2C_MspInit+0xd0>)
 8002c2c:	f000 fe92 	bl	8003954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3a:	61d3      	str	r3, [r2, #28]
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c48:	e029      	b.n	8002c9e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_I2C_MspInit+0xd4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d124      	bne.n	8002c9e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c72:	2312      	movs	r3, #18
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f107 0318 	add.w	r3, r7, #24
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <HAL_I2C_MspInit+0xd0>)
 8002c82:	f000 fe67 	bl	8003954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c90:	61d3      	str	r3, [r2, #28]
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_I2C_MspInit+0xcc>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010c00 	.word	0x40010c00
 8002cb4:	40005800 	.word	0x40005800

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_UART_MspInit+0x8c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d131      	bne.n	8002d3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_UART_MspInit+0x90>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_UART_MspInit+0x94>)
 8002d1e:	f000 fe19 	bl	8003954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	4805      	ldr	r0, [pc, #20]	; (8002d4c <HAL_UART_MspInit+0x94>)
 8002d38:	f000 fe0c 	bl	8003954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40013800 	.word	0x40013800
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40010800 	.word	0x40010800

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <NMI_Handler+0x4>

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d96:	f000 f8ab 	bl	8002ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <_sbrk+0x5c>)
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <_sbrk+0x60>)
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <_sbrk+0x64>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <_sbrk+0x68>)
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d207      	bcs.n	8002de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd0:	f002 fe8a 	bl	8005ae8 <__errno>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	e009      	b.n	8002df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <_sbrk+0x64>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <_sbrk+0x64>)
 8002df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20005000 	.word	0x20005000
 8002e00:	00000400 	.word	0x00000400
 8002e04:	200000d4 	.word	0x200000d4
 8002e08:	20000440 	.word	0x20000440

08002e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e1a:	e003      	b.n	8002e24 <LoopCopyDataInit>

08002e1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e22:	3104      	adds	r1, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e2c:	d3f6      	bcc.n	8002e1c <CopyDataInit>
  ldr r2, =_sbss
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e30:	e002      	b.n	8002e38 <LoopFillZerobss>

08002e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e34:	f842 3b04 	str.w	r3, [r2], #4

08002e38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e3c:	d3f9      	bcc.n	8002e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e3e:	f7ff ffe5 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e42:	f002 fe57 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e46:	f7fe fdd3 	bl	80019f0 <main>
  bx lr
 8002e4a:	4770      	bx	lr
  ldr r3, =_sidata
 8002e4c:	08009988 	.word	0x08009988
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e54:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002e58:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002e5c:	2000043c 	.word	0x2000043c

08002e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC1_2_IRQHandler>
	...

08002e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_Init+0x28>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_Init+0x28>)
 8002e6e:	f043 0310 	orr.w	r3, r3, #16
 8002e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f000 fd39 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 f808 	bl	8002e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e80:	f7ff fe40 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_InitTick+0x54>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_InitTick+0x58>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd43 	bl	800393a <HAL_SYSTICK_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00e      	b.n	8002edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d80a      	bhi.n	8002eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f000 fd19 	bl	8003902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed0:	4a06      	ldr	r2, [pc, #24]	; (8002eec <HAL_InitTick+0x5c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000014 	.word	0x20000014
 8002ee8:	2000001c 	.word	0x2000001c
 8002eec:	20000018 	.word	0x20000018

08002ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_IncTick+0x1c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_IncTick+0x20>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <HAL_IncTick+0x20>)
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	2000001c 	.word	0x2000001c
 8002f10:	20000434 	.word	0x20000434

08002f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <HAL_GetTick+0x10>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000434 	.word	0x20000434

08002f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7ff fff0 	bl	8002f14 <HAL_GetTick>
 8002f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d005      	beq.n	8002f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_Delay+0x40>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f4e:	bf00      	nop
 8002f50:	f7ff ffe0 	bl	8002f14 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d8f7      	bhi.n	8002f50 <HAL_Delay+0x28>
  {
  }
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000001c 	.word	0x2000001c

08002f6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0be      	b.n	800310c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fddc 	bl	8002b68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fbb1 	bl	8003718 <ADC_ConversionStop_Disable>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8099 	bne.w	80030fa <HAL_ADC_Init+0x18e>
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 8095 	bne.w	80030fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fd8:	f023 0302 	bic.w	r3, r3, #2
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7b1b      	ldrb	r3, [r3, #12]
 8002ff2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ff4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003004:	d003      	beq.n	800300e <HAL_ADC_Init+0xa2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_ADC_Init+0xa8>
 800300e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003012:	e000      	b.n	8003016 <HAL_ADC_Init+0xaa>
 8003014:	2300      	movs	r3, #0
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7d1b      	ldrb	r3, [r3, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d119      	bne.n	8003058 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7b1b      	ldrb	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	3b01      	subs	r3, #1
 8003032:	035a      	lsls	r2, r3, #13
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e00b      	b.n	8003058 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <HAL_ADC_Init+0x1a8>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	430b      	orrs	r3, r1
 800307e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003088:	d003      	beq.n	8003092 <HAL_ADC_Init+0x126>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d104      	bne.n	800309c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	3b01      	subs	r3, #1
 8003098:	051b      	lsls	r3, r3, #20
 800309a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_ADC_Init+0x1ac>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d10b      	bne.n	80030d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030d6:	e018      	b.n	800310a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f023 0312 	bic.w	r3, r3, #18
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f8:	e007      	b.n	800310a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	ffe1f7fd 	.word	0xffe1f7fd
 8003118:	ff1f0efe 	.word	0xff1f0efe

0800311c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Start+0x1a>
 8003132:	2302      	movs	r3, #2
 8003134:	e098      	b.n	8003268 <HAL_ADC_Start+0x14c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa98 	bl	8003674 <ADC_Enable>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8087 	bne.w	800325e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a41      	ldr	r2, [pc, #260]	; (8003270 <HAL_ADC_Start+0x154>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d105      	bne.n	800317a <HAL_ADC_Start+0x5e>
 800316e:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_ADC_Start+0x158>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d026      	beq.n	80031e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800319c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031a4:	e01d      	b.n	80031e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_ADC_Start+0x158>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Start+0xaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <HAL_ADC_Start+0x154>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10d      	bne.n	80031e2 <HAL_ADC_Start+0xc6>
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_ADC_Start+0x158>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f023 0206 	bic.w	r2, r3, #6
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031fa:	e002      	b.n	8003202 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f06f 0202 	mvn.w	r2, #2
 8003212:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800321e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003222:	d113      	bne.n	800324c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_ADC_Start+0x154>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d105      	bne.n	800323a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_ADC_Start+0x158>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	e00c      	b.n	8003266 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e003      	b.n	8003266 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012800 	.word	0x40012800
 8003274:	40012400 	.word	0x40012400

08003278 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800328e:	f7ff fe41 	bl	8002f14 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0c8      	b.n	800344c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12a      	bne.n	800331e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d123      	bne.n	800331e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032d6:	e01a      	b.n	800330e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d016      	beq.n	800330e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_ADC_PollForConversion+0x7e>
 80032e6:	f7ff fe15 	bl	8002f14 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d20b      	bcs.n	800330e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e09e      	b.n	800344c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0dd      	beq.n	80032d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800331c:	e06c      	b.n	80033f8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800331e:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_ADC_PollForConversion+0x1dc>)
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	2002      	movs	r0, #2
 8003324:	f002 f948 	bl	80055b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003328:	4603      	mov	r3, r0
 800332a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_ADC_PollForConversion+0x1e0>)
 8003336:	400b      	ands	r3, r1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d118      	bne.n	800336e <HAL_ADC_PollForConversion+0xf6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	4b46      	ldr	r3, [pc, #280]	; (800345c <HAL_ADC_PollForConversion+0x1e4>)
 8003344:	400b      	ands	r3, r1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d111      	bne.n	800336e <HAL_ADC_PollForConversion+0xf6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_ADC_PollForConversion+0x1e8>)
 8003352:	400b      	ands	r3, r1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <HAL_ADC_PollForConversion+0xf2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_ADC_PollForConversion+0x1ec>)
 8003360:	400b      	ands	r3, r1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_ADC_PollForConversion+0xf2>
 8003366:	2314      	movs	r3, #20
 8003368:	e020      	b.n	80033ac <HAL_ADC_PollForConversion+0x134>
 800336a:	2329      	movs	r3, #41	; 0x29
 800336c:	e01e      	b.n	80033ac <HAL_ADC_PollForConversion+0x134>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6919      	ldr	r1, [r3, #16]
 8003374:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_ADC_PollForConversion+0x1e8>)
 8003376:	400b      	ands	r3, r1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_ADC_PollForConversion+0x112>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_ADC_PollForConversion+0x1ec>)
 8003384:	400b      	ands	r3, r1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x12e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6919      	ldr	r1, [r3, #16]
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_ADC_PollForConversion+0x1f0>)
 8003392:	400b      	ands	r3, r1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <HAL_ADC_PollForConversion+0x132>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <HAL_ADC_PollForConversion+0x1f0>)
 80033a0:	400b      	ands	r3, r1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_PollForConversion+0x132>
 80033a6:	2354      	movs	r3, #84	; 0x54
 80033a8:	e000      	b.n	80033ac <HAL_ADC_PollForConversion+0x134>
 80033aa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033b2:	e01d      	b.n	80033f0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d016      	beq.n	80033ea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_ADC_PollForConversion+0x15a>
 80033c2:	f7ff fda7 	bl	8002f14 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d20b      	bcs.n	80033ea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f043 0204 	orr.w	r2, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e030      	b.n	800344c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8dd      	bhi.n	80033b4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0212 	mvn.w	r2, #18
 8003400:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003418:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800341c:	d115      	bne.n	800344a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003422:	2b00      	cmp	r3, #0
 8003424:	d111      	bne.n	800344a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	20000014 	.word	0x20000014
 8003458:	24924924 	.word	0x24924924
 800345c:	00924924 	.word	0x00924924
 8003460:	12492492 	.word	0x12492492
 8003464:	00492492 	.word	0x00492492
 8003468:	00249249 	.word	0x00249249

0800346c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x20>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0dc      	b.n	800365e <HAL_ADC_ConfigChannel+0x1da>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d81c      	bhi.n	80034ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	3b05      	subs	r3, #5
 80034c6:	221f      	movs	r2, #31
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4019      	ands	r1, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b05      	subs	r3, #5
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34
 80034ec:	e03c      	b.n	8003568 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d81c      	bhi.n	8003530 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b23      	subs	r3, #35	; 0x23
 8003508:	221f      	movs	r2, #31
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	4019      	ands	r1, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3b23      	subs	r3, #35	; 0x23
 8003522:	fa00 f203 	lsl.w	r2, r0, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
 800352e:	e01b      	b.n	8003568 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b41      	subs	r3, #65	; 0x41
 8003542:	221f      	movs	r2, #31
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	4019      	ands	r1, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	3b41      	subs	r3, #65	; 0x41
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b09      	cmp	r3, #9
 800356e:	d91c      	bls.n	80035aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	2207      	movs	r2, #7
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	4019      	ands	r1, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	3b1e      	subs	r3, #30
 800359c:	fa00 f203 	lsl.w	r2, r0, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	e019      	b.n	80035de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6919      	ldr	r1, [r3, #16]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	2207      	movs	r2, #7
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	4019      	ands	r1, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6898      	ldr	r0, [r3, #8]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	fa00 f203 	lsl.w	r2, r0, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d003      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ea:	2b11      	cmp	r3, #17
 80035ec:	d132      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_ADC_ConfigChannel+0x1e4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d126      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003614:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d11a      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_ADC_ConfigChannel+0x1e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a13      	ldr	r2, [pc, #76]	; (8003670 <HAL_ADC_ConfigChannel+0x1ec>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0c9a      	lsrs	r2, r3, #18
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003634:	e002      	b.n	800363c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x1b2>
 8003642:	e007      	b.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40012400 	.word	0x40012400
 800366c:	20000014 	.word	0x20000014
 8003670:	431bde83 	.word	0x431bde83

08003674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d039      	beq.n	8003706 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <ADC_Enable+0x9c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <ADC_Enable+0xa0>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b0:	e002      	b.n	80036b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f9      	bne.n	80036b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036be:	f7ff fc29 	bl	8002f14 <HAL_GetTick>
 80036c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036c4:	e018      	b.n	80036f8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c6:	f7ff fc25 	bl	8002f14 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d911      	bls.n	80036f8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f043 0210 	orr.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d1df      	bne.n	80036c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000014 	.word	0x20000014
 8003714:	431bde83 	.word	0x431bde83

08003718 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d127      	bne.n	8003782 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003742:	f7ff fbe7 	bl	8002f14 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003748:	e014      	b.n	8003774 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800374a:	f7ff fbe3 	bl	8002f14 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d90d      	bls.n	8003774 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f043 0210 	orr.w	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d0e3      	beq.n	800374a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a8:	4013      	ands	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	60d3      	str	r3, [r2, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <__NVIC_GetPriorityGrouping+0x18>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0307 	and.w	r3, r3, #7
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b8:	d301      	bcc.n	80038be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <SysTick_Config+0x40>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c6:	210f      	movs	r1, #15
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	f7ff ff90 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Config+0x40>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SysTick_Config+0x40>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff49 	bl	800378c <__NVIC_SetPriorityGrouping>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003914:	f7ff ff5e 	bl	80037d4 <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff90 	bl	8003844 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5f 	bl	80037f0 <__NVIC_SetPriority>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffb0 	bl	80038a8 <SysTick_Config>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003954:	b480      	push	{r7}
 8003956:	b08b      	sub	sp, #44	; 0x2c
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003966:	e127      	b.n	8003bb8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003968:	2201      	movs	r2, #1
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	f040 8116 	bne.w	8003bb2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b12      	cmp	r3, #18
 800398c:	d034      	beq.n	80039f8 <HAL_GPIO_Init+0xa4>
 800398e:	2b12      	cmp	r3, #18
 8003990:	d80d      	bhi.n	80039ae <HAL_GPIO_Init+0x5a>
 8003992:	2b02      	cmp	r3, #2
 8003994:	d02b      	beq.n	80039ee <HAL_GPIO_Init+0x9a>
 8003996:	2b02      	cmp	r3, #2
 8003998:	d804      	bhi.n	80039a4 <HAL_GPIO_Init+0x50>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d031      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d01c      	beq.n	80039dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039a2:	e048      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d043      	beq.n	8003a30 <HAL_GPIO_Init+0xdc>
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d01b      	beq.n	80039e4 <HAL_GPIO_Init+0x90>
          break;
 80039ac:	e043      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039ae:	4a89      	ldr	r2, [pc, #548]	; (8003bd4 <HAL_GPIO_Init+0x280>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d026      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
 80039b4:	4a87      	ldr	r2, [pc, #540]	; (8003bd4 <HAL_GPIO_Init+0x280>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d806      	bhi.n	80039c8 <HAL_GPIO_Init+0x74>
 80039ba:	4a87      	ldr	r2, [pc, #540]	; (8003bd8 <HAL_GPIO_Init+0x284>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d020      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
 80039c0:	4a86      	ldr	r2, [pc, #536]	; (8003bdc <HAL_GPIO_Init+0x288>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01d      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
          break;
 80039c6:	e036      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039c8:	4a85      	ldr	r2, [pc, #532]	; (8003be0 <HAL_GPIO_Init+0x28c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
 80039ce:	4a85      	ldr	r2, [pc, #532]	; (8003be4 <HAL_GPIO_Init+0x290>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d016      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
 80039d4:	4a84      	ldr	r2, [pc, #528]	; (8003be8 <HAL_GPIO_Init+0x294>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_GPIO_Init+0xae>
          break;
 80039da:	e02c      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	623b      	str	r3, [r7, #32]
          break;
 80039e2:	e028      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	623b      	str	r3, [r7, #32]
          break;
 80039ec:	e023      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	3308      	adds	r3, #8
 80039f4:	623b      	str	r3, [r7, #32]
          break;
 80039f6:	e01e      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	330c      	adds	r3, #12
 80039fe:	623b      	str	r3, [r7, #32]
          break;
 8003a00:	e019      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	623b      	str	r3, [r7, #32]
          break;
 8003a0e:	e012      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a18:	2308      	movs	r3, #8
 8003a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	611a      	str	r2, [r3, #16]
          break;
 8003a22:	e008      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a24:	2308      	movs	r3, #8
 8003a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	615a      	str	r2, [r3, #20]
          break;
 8003a2e:	e002      	b.n	8003a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a30:	2300      	movs	r3, #0
 8003a32:	623b      	str	r3, [r7, #32]
          break;
 8003a34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2bff      	cmp	r3, #255	; 0xff
 8003a3a:	d801      	bhi.n	8003a40 <HAL_GPIO_Init+0xec>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	e001      	b.n	8003a44 <HAL_GPIO_Init+0xf0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2bff      	cmp	r3, #255	; 0xff
 8003a4a:	d802      	bhi.n	8003a52 <HAL_GPIO_Init+0xfe>
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x104>
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3b08      	subs	r3, #8
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	210f      	movs	r1, #15
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	401a      	ands	r2, r3
 8003a6a:	6a39      	ldr	r1, [r7, #32]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	431a      	orrs	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8096 	beq.w	8003bb2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_GPIO_Init+0x298>)
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_GPIO_Init+0x298>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6193      	str	r3, [r2, #24]
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_GPIO_Init+0x298>)
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a9e:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_GPIO_Init+0x29c>)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <HAL_GPIO_Init+0x2a0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x19e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4a      	ldr	r2, [pc, #296]	; (8003bf8 <HAL_GPIO_Init+0x2a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x19a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a49      	ldr	r2, [pc, #292]	; (8003bfc <HAL_GPIO_Init+0x2a8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x196>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a48      	ldr	r2, [pc, #288]	; (8003c00 <HAL_GPIO_Init+0x2ac>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x192>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e006      	b.n	8003af4 <HAL_GPIO_Init+0x1a0>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	e004      	b.n	8003af4 <HAL_GPIO_Init+0x1a0>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e002      	b.n	8003af4 <HAL_GPIO_Init+0x1a0>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_GPIO_Init+0x1a0>
 8003af2:	2300      	movs	r3, #0
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	f002 0203 	and.w	r2, r2, #3
 8003afa:	0092      	lsls	r2, r2, #2
 8003afc:	4093      	lsls	r3, r2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b04:	493a      	ldr	r1, [pc, #232]	; (8003bf0 <HAL_GPIO_Init+0x29c>)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4938      	ldr	r1, [pc, #224]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
 8003b2a:	e006      	b.n	8003b3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4933      	ldr	r1, [pc, #204]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	492e      	ldr	r1, [pc, #184]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
 8003b52:	e006      	b.n	8003b62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4929      	ldr	r1, [pc, #164]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	4924      	ldr	r1, [pc, #144]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	491f      	ldr	r1, [pc, #124]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	491a      	ldr	r1, [pc, #104]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
 8003ba2:	e006      	b.n	8003bb2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	4915      	ldr	r1, [pc, #84]	; (8003c04 <HAL_GPIO_Init+0x2b0>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f47f aed0 	bne.w	8003968 <HAL_GPIO_Init+0x14>
  }
}
 8003bc8:	bf00      	nop
 8003bca:	372c      	adds	r7, #44	; 0x2c
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	10210000 	.word	0x10210000
 8003bd8:	10110000 	.word	0x10110000
 8003bdc:	10120000 	.word	0x10120000
 8003be0:	10310000 	.word	0x10310000
 8003be4:	10320000 	.word	0x10320000
 8003be8:	10220000 	.word	0x10220000
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40010800 	.word	0x40010800
 8003bf8:	40010c00 	.word	0x40010c00
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40011400 	.word	0x40011400
 8003c04:	40010400 	.word	0x40010400

08003c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
 8003c14:	4613      	mov	r3, r2
 8003c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c18:	787b      	ldrb	r3, [r7, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c24:	e003      	b.n	8003c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	041a      	lsls	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	611a      	str	r2, [r3, #16]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e11f      	b.n	8003e8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe ffbe 	bl	8002be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f001 fb90 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a7b      	ldr	r2, [pc, #492]	; (8003e94 <HAL_I2C_Init+0x25c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d807      	bhi.n	8003cbc <HAL_I2C_Init+0x84>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a7a      	ldr	r2, [pc, #488]	; (8003e98 <HAL_I2C_Init+0x260>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e006      	b.n	8003cca <HAL_I2C_Init+0x92>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a77      	ldr	r2, [pc, #476]	; (8003e9c <HAL_I2C_Init+0x264>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0db      	b.n	8003e8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a72      	ldr	r2, [pc, #456]	; (8003ea0 <HAL_I2C_Init+0x268>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9b      	lsrs	r3, r3, #18
 8003cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a64      	ldr	r2, [pc, #400]	; (8003e94 <HAL_I2C_Init+0x25c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <HAL_I2C_Init+0xd4>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	e009      	b.n	8003d20 <HAL_I2C_Init+0xe8>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	4a63      	ldr	r2, [pc, #396]	; (8003ea4 <HAL_I2C_Init+0x26c>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4956      	ldr	r1, [pc, #344]	; (8003e94 <HAL_I2C_Init+0x25c>)
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	d80d      	bhi.n	8003d5c <HAL_I2C_Init+0x124>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e59      	subs	r1, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	bf38      	it	cc
 8003d58:	2304      	movcc	r3, #4
 8003d5a:	e04f      	b.n	8003dfc <HAL_I2C_Init+0x1c4>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_I2C_Init+0x150>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e012      	b.n	8003dae <HAL_I2C_Init+0x176>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e58      	subs	r0, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	0099      	lsls	r1, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Init+0x17e>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e022      	b.n	8003dfc <HAL_I2C_Init+0x1c4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <HAL_I2C_Init+0x1a4>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1e58      	subs	r0, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	440b      	add	r3, r1
 8003dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_Init+0x1c4>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	0099      	lsls	r1, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6911      	ldr	r1, [r2, #16]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	000186a0 	.word	0x000186a0
 8003e98:	001e847f 	.word	0x001e847f
 8003e9c:	003d08ff 	.word	0x003d08ff
 8003ea0:	431bde83 	.word	0x431bde83
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	817b      	strh	r3, [r7, #10]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	813b      	strh	r3, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec2:	f7ff f827 	bl	8002f14 <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	f040 80d9 	bne.w	8004088 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2319      	movs	r3, #25
 8003edc:	2201      	movs	r2, #1
 8003ede:	496d      	ldr	r1, [pc, #436]	; (8004094 <HAL_I2C_Mem_Write+0x1ec>)
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fcbb 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	e0cc      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Mem_Write+0x56>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0c5      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d007      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a4d      	ldr	r2, [pc, #308]	; (8004098 <HAL_I2C_Mem_Write+0x1f0>)
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f66:	88f8      	ldrh	r0, [r7, #6]
 8003f68:	893a      	ldrh	r2, [r7, #8]
 8003f6a:	8979      	ldrh	r1, [r7, #10]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 faf2 	bl	8004560 <I2C_RequestMemoryWrite>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d052      	beq.n	8004028 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e081      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fd3c 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d107      	bne.n	8003fae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06b      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_I2C_Mem_Write+0x180>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d017      	beq.n	8004028 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1aa      	bne.n	8003f86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fd28 	bl	8004a8a <I2C_WaitOnBTFFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e016      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000

0800409c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	460b      	mov	r3, r1
 80040b0:	813b      	strh	r3, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ba:	f7fe ff2b 	bl	8002f14 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	f040 823d 	bne.w	8004548 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2319      	movs	r3, #25
 80040d4:	2201      	movs	r2, #1
 80040d6:	4981      	ldr	r1, [pc, #516]	; (80042dc <HAL_I2C_Mem_Read+0x240>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fbbf 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
 80040e6:	e230      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x5a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e229      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d007      	beq.n	800411c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2222      	movs	r2, #34	; 0x22
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a61      	ldr	r2, [pc, #388]	; (80042e0 <HAL_I2C_Mem_Read+0x244>)
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415e:	88f8      	ldrh	r0, [r7, #6]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4603      	mov	r3, r0
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa8c 	bl	800468c <I2C_RequestMemoryRead>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1e5      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d113      	bne.n	80041ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e1b9      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d11d      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041c6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041ee:	b662      	cpsie	i
 80041f0:	e197      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d11d      	bne.n	8004236 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800420a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004232:	b662      	cpsie	i
 8004234:	e175      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800425c:	e161      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	2b03      	cmp	r3, #3
 8004264:	f200 811a 	bhi.w	800449c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	2b01      	cmp	r3, #1
 800426e:	d123      	bne.n	80042b8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fc49 	bl	8004b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e162      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b6:	e134      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d150      	bne.n	8004362 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	2200      	movs	r2, #0
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <HAL_I2C_Mem_Read+0x248>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fac6 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e137      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
 80042da:	bf00      	nop
 80042dc:	00100002 	.word	0x00100002
 80042e0:	ffff0000 	.word	0xffff0000
 80042e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80042e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800432c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004360:	e0df      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2200      	movs	r2, #0
 800436a:	497a      	ldr	r1, [pc, #488]	; (8004554 <HAL_I2C_Mem_Read+0x4b8>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa75 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0e6      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800438c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043c0:	4b65      	ldr	r3, [pc, #404]	; (8004558 <HAL_I2C_Mem_Read+0x4bc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	4a65      	ldr	r2, [pc, #404]	; (800455c <HAL_I2C_Mem_Read+0x4c0>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	0a1a      	lsrs	r2, r3, #8
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00da      	lsls	r2, r3, #3
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	3b01      	subs	r3, #1
 80043de:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d117      	bne.n	8004416 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004408:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e099      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d1da      	bne.n	80043da <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004466:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449a:	e042      	b.n	8004522 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fb33 	bl	8004b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e04c      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d118      	bne.n	8004522 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	f47f ae99 	bne.w	800425e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e000      	b.n	800454a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00010004 	.word	0x00010004
 8004558:	20000014 	.word	0x20000014
 800455c:	14f8b589 	.word	0x14f8b589

08004560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2200      	movs	r2, #0
 8004592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f960 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d103      	bne.n	80045ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e05f      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	492d      	ldr	r1, [pc, #180]	; (8004688 <I2C_RequestMemoryWrite+0x128>)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f998 	bl	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e04c      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fc:	6a39      	ldr	r1, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa02 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b04      	cmp	r3, #4
 8004610:	d107      	bne.n	8004622 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e02b      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]
 8004636:	e021      	b.n	800467c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	b29b      	uxth	r3, r3
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f9dc 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b04      	cmp	r3, #4
 800465c:	d107      	bne.n	800466e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e005      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	00010002 	.word	0x00010002

0800468c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	4603      	mov	r3, r0
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	460b      	mov	r3, r1
 80046a0:	813b      	strh	r3, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8c2 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d103      	bne.n	80046f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0aa      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	4952      	ldr	r1, [pc, #328]	; (8004858 <I2C_RequestMemoryRead+0x1cc>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f8fa 	bl	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e097      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	6a39      	ldr	r1, [r7, #32]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f964 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e076      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	611a      	str	r2, [r3, #16]
 8004772:	e021      	b.n	80047b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	b29b      	uxth	r3, r3
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f93e 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	2b04      	cmp	r3, #4
 8004798:	d107      	bne.n	80047aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e050      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	6a39      	ldr	r1, [r7, #32]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f923 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d107      	bne.n	80047e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e035      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f82b 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481a:	d103      	bne.n	8004824 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e013      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004828:	897b      	ldrh	r3, [r7, #10]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	4906      	ldr	r1, [pc, #24]	; (8004858 <I2C_RequestMemoryRead+0x1cc>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f863 	bl	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010002 	.word	0x00010002

0800485c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800486c:	e025      	b.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d021      	beq.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004876:	f7fe fb4d 	bl	8002f14 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e023      	b.n	8004902 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10d      	bne.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	e00c      	b.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d0b6      	beq.n	800486e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004918:	e051      	b.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d123      	bne.n	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004942:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e046      	b.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d021      	beq.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497a:	f7fe facb 	bl	8002f14 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d302      	bcc.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d116      	bne.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e020      	b.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10c      	bne.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e00b      	b.n	80049fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d18d      	bne.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a14:	e02d      	b.n	8004a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8ce 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e02d      	b.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d021      	beq.n	8004a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe fa71 	bl	8002f14 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d116      	bne.n	8004a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e007      	b.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d1ca      	bne.n	8004a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a96:	e02d      	b.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f88d 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e02d      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d021      	beq.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab0:	f7fe fa30 	bl	8002f14 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d116      	bne.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d1ca      	bne.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b18:	e042      	b.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d119      	bne.n	8004b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0210 	mvn.w	r2, #16
 8004b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e029      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5c:	f7fe f9da 	bl	8002f14 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d302      	bcc.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d116      	bne.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e007      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d1b5      	bne.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d11b      	bne.n	8004c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f043 0204 	orr.w	r2, r3, #4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e26c      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c40:	4b8f      	ldr	r3, [pc, #572]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_OscConfig+0x5e>
 8004c4c:	4b8c      	ldr	r3, [pc, #560]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x12c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e246      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x76>
 8004c7c:	4b80      	ldr	r3, [pc, #512]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a7f      	ldr	r2, [pc, #508]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02e      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd4>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x98>
 8004c92:	4b7b      	ldr	r3, [pc, #492]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7a      	ldr	r2, [pc, #488]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b78      	ldr	r3, [pc, #480]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a77      	ldr	r2, [pc, #476]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd4>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xbc>
 8004cb6:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a71      	ldr	r2, [pc, #452]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6e      	ldr	r2, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd4>
 8004cd0:	4b6b      	ldr	r3, [pc, #428]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6a      	ldr	r2, [pc, #424]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a67      	ldr	r2, [pc, #412]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fe f910 	bl	8002f14 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fe f90c 	bl	8002f14 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1fa      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe4>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fe f8fc 	bl	8002f14 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe f8f8 	bl	8002f14 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1e6      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x10c>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d063      	beq.n	8004e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4e:	4b4c      	ldr	r3, [pc, #304]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x18c>
 8004d66:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x176>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1ba      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4939      	ldr	r1, [pc, #228]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e03a      	b.n	8004e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_RCC_OscConfig+0x270>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fe f8b1 	bl	8002f14 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db6:	f7fe f8ad 	bl	8002f14 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e19b      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4927      	ldr	r1, [pc, #156]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	e015      	b.n	8004e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <HAL_RCC_OscConfig+0x270>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fe f890 	bl	8002f14 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fe f88c 	bl	8002f14 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e17a      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03a      	beq.n	8004e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d019      	beq.n	8004e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e30:	f7fe f870 	bl	8002f14 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e38:	f7fe f86c 	bl	8002f14 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e15a      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e56:	2001      	movs	r0, #1
 8004e58:	f000 fada 	bl	8005410 <RCC_Delay>
 8004e5c:	e01c      	b.n	8004e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e64:	f7fe f856 	bl	8002f14 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6a:	e00f      	b.n	8004e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fe f852 	bl	8002f14 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d908      	bls.n	8004e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e140      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	42420000 	.word	0x42420000
 8004e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e9      	bne.n	8004e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a6 	beq.w	8004ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eaa:	4b97      	ldr	r3, [pc, #604]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10d      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	4b94      	ldr	r3, [pc, #592]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	4a93      	ldr	r2, [pc, #588]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	61d3      	str	r3, [r2, #28]
 8004ec2:	4b91      	ldr	r3, [pc, #580]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	4b8e      	ldr	r3, [pc, #568]	; (800510c <HAL_RCC_OscConfig+0x4f8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d118      	bne.n	8004f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ede:	4b8b      	ldr	r3, [pc, #556]	; (800510c <HAL_RCC_OscConfig+0x4f8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a8a      	ldr	r2, [pc, #552]	; (800510c <HAL_RCC_OscConfig+0x4f8>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eea:	f7fe f813 	bl	8002f14 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef2:	f7fe f80f 	bl	8002f14 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b64      	cmp	r3, #100	; 0x64
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e0fd      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f04:	4b81      	ldr	r3, [pc, #516]	; (800510c <HAL_RCC_OscConfig+0x4f8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x312>
 8004f18:	4b7b      	ldr	r3, [pc, #492]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	4a7a      	ldr	r2, [pc, #488]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6213      	str	r3, [r2, #32]
 8004f24:	e02d      	b.n	8004f82 <HAL_RCC_OscConfig+0x36e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x334>
 8004f2e:	4b76      	ldr	r3, [pc, #472]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4a75      	ldr	r2, [pc, #468]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	6213      	str	r3, [r2, #32]
 8004f3a:	4b73      	ldr	r3, [pc, #460]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4a72      	ldr	r2, [pc, #456]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	6213      	str	r3, [r2, #32]
 8004f46:	e01c      	b.n	8004f82 <HAL_RCC_OscConfig+0x36e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d10c      	bne.n	8004f6a <HAL_RCC_OscConfig+0x356>
 8004f50:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a6c      	ldr	r2, [pc, #432]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	6213      	str	r3, [r2, #32]
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4a69      	ldr	r2, [pc, #420]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6213      	str	r3, [r2, #32]
 8004f68:	e00b      	b.n	8004f82 <HAL_RCC_OscConfig+0x36e>
 8004f6a:	4b67      	ldr	r3, [pc, #412]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4a66      	ldr	r2, [pc, #408]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	6213      	str	r3, [r2, #32]
 8004f76:	4b64      	ldr	r3, [pc, #400]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4a63      	ldr	r2, [pc, #396]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d015      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8a:	f7fd ffc3 	bl	8002f14 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7fd ffbf 	bl	8002f14 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0ab      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa8:	4b57      	ldr	r3, [pc, #348]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ee      	beq.n	8004f92 <HAL_RCC_OscConfig+0x37e>
 8004fb4:	e014      	b.n	8004fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fd ffad 	bl	8002f14 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fd ffa9 	bl	8002f14 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e095      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ee      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe6:	4b48      	ldr	r3, [pc, #288]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4a47      	ldr	r2, [pc, #284]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8081 	beq.w	80050fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffc:	4b42      	ldr	r3, [pc, #264]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b08      	cmp	r3, #8
 8005006:	d061      	beq.n	80050cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d146      	bne.n	800509e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005010:	4b3f      	ldr	r3, [pc, #252]	; (8005110 <HAL_RCC_OscConfig+0x4fc>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd ff7d 	bl	8002f14 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd ff79 	bl	8002f14 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e067      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d108      	bne.n	8005058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005046:	4b30      	ldr	r3, [pc, #192]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	492d      	ldr	r1, [pc, #180]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a19      	ldr	r1, [r3, #32]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	430b      	orrs	r3, r1
 800506a:	4927      	ldr	r1, [pc, #156]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005070:	4b27      	ldr	r3, [pc, #156]	; (8005110 <HAL_RCC_OscConfig+0x4fc>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005076:	f7fd ff4d 	bl	8002f14 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fd ff49 	bl	8002f14 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e037      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x46a>
 800509c:	e02f      	b.n	80050fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <HAL_RCC_OscConfig+0x4fc>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fd ff36 	bl	8002f14 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd ff32 	bl	8002f14 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e020      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x498>
 80050ca:	e018      	b.n	80050fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e013      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_OscConfig+0x4f4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	40007000 	.word	0x40007000
 8005110:	42420060 	.word	0x42420060

08005114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0d0      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d910      	bls.n	8005158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 0207 	bic.w	r2, r3, #7
 800513e:	4965      	ldr	r1, [pc, #404]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b63      	ldr	r3, [pc, #396]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0b8      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005170:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800517a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005188:	4b53      	ldr	r3, [pc, #332]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a52      	ldr	r2, [pc, #328]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	494d      	ldr	r1, [pc, #308]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d040      	beq.n	8005234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d115      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d2:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e073      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e2:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e06b      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4936      	ldr	r1, [pc, #216]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005204:	f7fd fe86 	bl	8002f14 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fd fe82 	bl	8002f14 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e053      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d210      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 0207 	bic.w	r2, r3, #7
 800524a:	4922      	ldr	r1, [pc, #136]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e032      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4916      	ldr	r1, [pc, #88]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	490e      	ldr	r1, [pc, #56]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052a2:	f000 f821 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a6:	4601      	mov	r1, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
 80052b6:	fa21 f303 	lsr.w	r3, r1, r3
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1cc>)
 80052bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1d0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fde4 	bl	8002e90 <HAL_InitTick>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40021000 	.word	0x40021000
 80052dc:	080095c4 	.word	0x080095c4
 80052e0:	20000014 	.word	0x20000014
 80052e4:	20000018 	.word	0x20000018

080052e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	b490      	push	{r4, r7}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80052ee:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052f0:	1d3c      	adds	r4, r7, #4
 80052f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80052f8:	4b28      	ldr	r3, [pc, #160]	; (800539c <HAL_RCC_GetSysClockFreq+0xb4>)
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005312:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b04      	cmp	r3, #4
 8005320:	d002      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x40>
 8005322:	2b08      	cmp	r3, #8
 8005324:	d003      	beq.n	800532e <HAL_RCC_GetSysClockFreq+0x46>
 8005326:	e02d      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800532a:	623b      	str	r3, [r7, #32]
      break;
 800532c:	e02d      	b.n	800538a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	0c9b      	lsrs	r3, r3, #18
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800533a:	4413      	add	r3, r2
 800533c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005340:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	0c5b      	lsrs	r3, r3, #17
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800535a:	4413      	add	r3, r2
 800535c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005366:	fb02 f203 	mul.w	r2, r2, r3
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e004      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	623b      	str	r3, [r7, #32]
      break;
 8005382:	e002      	b.n	800538a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005386:	623b      	str	r3, [r7, #32]
      break;
 8005388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538a:	6a3b      	ldr	r3, [r7, #32]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bc90      	pop	{r4, r7}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	0800959c 	.word	0x0800959c
 800539c:	080095ac 	.word	0x080095ac
 80053a0:	40021000 	.word	0x40021000
 80053a4:	007a1200 	.word	0x007a1200
 80053a8:	003d0900 	.word	0x003d0900

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <HAL_RCC_GetHCLKFreq+0x10>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	20000014 	.word	0x20000014

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c4:	f7ff fff2 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053c8:	4601      	mov	r1, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4a03      	ldr	r2, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	080095d4 	.word	0x080095d4

080053e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ec:	f7ff ffde 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053f0:	4601      	mov	r1, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	0adb      	lsrs	r3, r3, #11
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4a03      	ldr	r2, [pc, #12]	; (800540c <HAL_RCC_GetPCLK2Freq+0x24>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	080095d4 	.word	0x080095d4

08005410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <RCC_Delay+0x34>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <RCC_Delay+0x38>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0a5b      	lsrs	r3, r3, #9
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800542c:	bf00      	nop
  }
  while (Delay --);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e5a      	subs	r2, r3, #1
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f9      	bne.n	800542c <RCC_Delay+0x1c>
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000014 	.word	0x20000014
 8005448:	10624dd3 	.word	0x10624dd3

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d07d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10d      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4a4b      	ldr	r2, [pc, #300]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	61d3      	str	r3, [r2, #28]
 8005484:	4b49      	ldr	r3, [pc, #292]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	4b46      	ldr	r3, [pc, #280]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d118      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a0:	4b43      	ldr	r3, [pc, #268]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a42      	ldr	r2, [pc, #264]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ac:	f7fd fd32 	bl	8002f14 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fd fd2e 	bl	8002f14 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e06d      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d2:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02e      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d027      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f0:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005506:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d014      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fd fcfd 	bl	8002f14 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551c:	e00a      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fd fcf9 	bl	8002f14 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	; 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e036      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ee      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4917      	ldr	r1, [pc, #92]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	4313      	orrs	r3, r2
 8005550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	490b      	ldr	r1, [pc, #44]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4904      	ldr	r1, [pc, #16]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
 80055b4:	42420440 	.word	0x42420440

080055b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b08d      	sub	sp, #52	; 0x34
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80055c0:	4b55      	ldr	r3, [pc, #340]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80055c2:	f107 040c 	add.w	r4, r7, #12
 80055c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80055cc:	4b53      	ldr	r3, [pc, #332]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	2300      	movs	r3, #0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	2300      	movs	r3, #0
 80055dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	2300      	movs	r3, #0
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d07f      	beq.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d002      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d048      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80055f4:	e08b      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80055f6:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055fc:	4b48      	ldr	r3, [pc, #288]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d07f      	beq.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	0c9b      	lsrs	r3, r3, #18
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005614:	4413      	add	r3, r2
 8005616:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800561a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005626:	4b3e      	ldr	r3, [pc, #248]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0c5b      	lsrs	r3, r3, #17
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005634:	4413      	add	r3, r2
 8005636:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005646:	4a37      	ldr	r2, [pc, #220]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	fbb2 f2f3 	udiv	r2, r2, r3
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005656:	e004      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	4a33      	ldr	r2, [pc, #204]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005662:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005674:	e048      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4a2c      	ldr	r2, [pc, #176]	; (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005684:	e040      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d108      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80056a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a8:	e01f      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d109      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80056b6:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80056c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c8:	e00f      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d4:	d11a      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80056d6:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80056e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80056e8:	e010      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80056ea:	e00f      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80056ec:	f7ff fe7c 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	0b9b      	lsrs	r3, r3, #14
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	3301      	adds	r3, #1
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005706:	e002      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800570c:	bf00      	nop
    }
  }
  return (frequency);
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005710:	4618      	mov	r0, r3
 8005712:	3734      	adds	r7, #52	; 0x34
 8005714:	46bd      	mov	sp, r7
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	080095b0 	.word	0x080095b0
 800571c:	080095c0 	.word	0x080095c0
 8005720:	40021000 	.word	0x40021000
 8005724:	007a1200 	.word	0x007a1200
 8005728:	003d0900 	.word	0x003d0900
 800572c:	aaaaaaab 	.word	0xaaaaaaab

08005730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e03f      	b.n	80057c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fd faae 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f905 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08a      	sub	sp, #40	; 0x28
 80057ce:	af02      	add	r7, sp, #8
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d17c      	bne.n	80058e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_UART_Transmit+0x2c>
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e075      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UART_Transmit+0x3e>
 8005804:	2302      	movs	r3, #2
 8005806:	e06e      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2221      	movs	r2, #33	; 0x21
 800581a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800581e:	f7fd fb79 	bl	8002f14 <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d108      	bne.n	800584c <HAL_UART_Transmit+0x82>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e003      	b.n	8005854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800585c:	e02a      	b.n	80058b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f840 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e036      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3302      	adds	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e007      	b.n	80058a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cf      	bne.n	800585e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f810 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e02c      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d028      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0x30>
 800590e:	f7fd fb01 	bl	8002f14 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	429a      	cmp	r2, r3
 800591c:	d21d      	bcs.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800592c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00f      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d0c3      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059be:	f023 030c 	bic.w	r3, r3, #12
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <UART_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d103      	bne.n	80059f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7ff fcfc 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	e002      	b.n	80059fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7ff fce4 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80059f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <UART_SetConfig+0x118>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	0119      	lsls	r1, r3, #4
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <UART_SetConfig+0x118>)
 8005a32:	fba3 0302 	umull	r0, r3, r3, r2
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2064      	movs	r0, #100	; 0x64
 8005a3a:	fb00 f303 	mul.w	r3, r0, r3
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	3332      	adds	r3, #50	; 0x32
 8005a44:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <UART_SetConfig+0x118>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a50:	4419      	add	r1, r3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009a      	lsls	r2, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <UART_SetConfig+0x118>)
 8005a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2064      	movs	r0, #100	; 0x64
 8005a72:	fb00 f303 	mul.w	r3, r0, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <UART_SetConfig+0x118>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40013800 	.word	0x40013800
 8005a9c:	51eb851f 	.word	0x51eb851f

08005aa0 <gcvt>:
 8005aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	f7fa ff7c 	bl	80009ac <__aeabi_dcmplt>
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	b118      	cbz	r0, 8005ac0 <gcvt+0x20>
 8005ab8:	222d      	movs	r2, #45	; 0x2d
 8005aba:	3d01      	subs	r5, #1
 8005abc:	f803 2b01 	strb.w	r2, [r3], #1
 8005ac0:	2267      	movs	r2, #103	; 0x67
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	e9cd 5300 	strd	r5, r3, [sp]
 8005ac8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8005acc:	4905      	ldr	r1, [pc, #20]	; (8005ae4 <gcvt+0x44>)
 8005ace:	4632      	mov	r2, r6
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	6808      	ldr	r0, [r1, #0]
 8005ad4:	f000 f914 	bl	8005d00 <_gcvt>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	bf14      	ite	ne
 8005adc:	4620      	movne	r0, r4
 8005ade:	2000      	moveq	r0, #0
 8005ae0:	b005      	add	sp, #20
 8005ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae4:	20000020 	.word	0x20000020

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000020 	.word	0x20000020

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	2500      	movs	r5, #0
 8005af8:	4e0c      	ldr	r6, [pc, #48]	; (8005b2c <__libc_init_array+0x38>)
 8005afa:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afc:	1ba4      	subs	r4, r4, r6
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	42a5      	cmp	r5, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	f003 fd3c 	bl	8009580 <_init>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	4e0a      	ldr	r6, [pc, #40]	; (8005b34 <__libc_init_array+0x40>)
 8005b0c:	4c0a      	ldr	r4, [pc, #40]	; (8005b38 <__libc_init_array+0x44>)
 8005b0e:	1ba4      	subs	r4, r4, r6
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	42a5      	cmp	r5, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b1c:	4798      	blx	r3
 8005b1e:	3501      	adds	r5, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b26:	4798      	blx	r3
 8005b28:	3501      	adds	r5, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08009980 	.word	0x08009980
 8005b30:	08009980 	.word	0x08009980
 8005b34:	08009980 	.word	0x08009980
 8005b38:	08009984 	.word	0x08009984

08005b3c <__itoa>:
 8005b3c:	1e93      	subs	r3, r2, #2
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	b510      	push	{r4, lr}
 8005b42:	460c      	mov	r4, r1
 8005b44:	d904      	bls.n	8005b50 <__itoa+0x14>
 8005b46:	2300      	movs	r3, #0
 8005b48:	461c      	mov	r4, r3
 8005b4a:	700b      	strb	r3, [r1, #0]
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	bd10      	pop	{r4, pc}
 8005b50:	2a0a      	cmp	r2, #10
 8005b52:	d109      	bne.n	8005b68 <__itoa+0x2c>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	da07      	bge.n	8005b68 <__itoa+0x2c>
 8005b58:	232d      	movs	r3, #45	; 0x2d
 8005b5a:	700b      	strb	r3, [r1, #0]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4240      	negs	r0, r0
 8005b60:	4421      	add	r1, r4
 8005b62:	f000 f819 	bl	8005b98 <__utoa>
 8005b66:	e7f1      	b.n	8005b4c <__itoa+0x10>
 8005b68:	2100      	movs	r1, #0
 8005b6a:	e7f9      	b.n	8005b60 <__itoa+0x24>

08005b6c <itoa>:
 8005b6c:	f7ff bfe6 	b.w	8005b3c <__itoa>

08005b70 <memcpy>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	1e43      	subs	r3, r0, #1
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	bd10      	pop	{r4, pc}
 8005b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b84:	e7f7      	b.n	8005b76 <memcpy+0x6>

08005b86 <memset>:
 8005b86:	4603      	mov	r3, r0
 8005b88:	4402      	add	r2, r0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d100      	bne.n	8005b90 <memset+0xa>
 8005b8e:	4770      	bx	lr
 8005b90:	f803 1b01 	strb.w	r1, [r3], #1
 8005b94:	e7f9      	b.n	8005b8a <memset+0x4>
	...

08005b98 <__utoa>:
 8005b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9a:	b08b      	sub	sp, #44	; 0x2c
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	466e      	mov	r6, sp
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <__utoa+0x78>)
 8005ba4:	f103 0c20 	add.w	ip, r3, #32
 8005ba8:	4637      	mov	r7, r6
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	c703      	stmia	r7!, {r0, r1}
 8005bb2:	4563      	cmp	r3, ip
 8005bb4:	463e      	mov	r6, r7
 8005bb6:	d1f7      	bne.n	8005ba8 <__utoa+0x10>
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	6038      	str	r0, [r7, #0]
 8005bbe:	713b      	strb	r3, [r7, #4]
 8005bc0:	1e93      	subs	r3, r2, #2
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	d904      	bls.n	8005bd4 <__utoa+0x3c>
 8005bca:	7023      	strb	r3, [r4, #0]
 8005bcc:	461c      	mov	r4, r3
 8005bce:	4620      	mov	r0, r4
 8005bd0:	b00b      	add	sp, #44	; 0x2c
 8005bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd4:	1e66      	subs	r6, r4, #1
 8005bd6:	fbb5 f0f2 	udiv	r0, r5, r2
 8005bda:	fb02 5510 	mls	r5, r2, r0, r5
 8005bde:	af0a      	add	r7, sp, #40	; 0x28
 8005be0:	443d      	add	r5, r7
 8005be2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005bec:	4605      	mov	r5, r0
 8005bee:	b968      	cbnz	r0, 8005c0c <__utoa+0x74>
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	5460      	strb	r0, [r4, r1]
 8005bf4:	4423      	add	r3, r4
 8005bf6:	1b19      	subs	r1, r3, r4
 8005bf8:	1b10      	subs	r0, r2, r4
 8005bfa:	4281      	cmp	r1, r0
 8005bfc:	dde7      	ble.n	8005bce <__utoa+0x36>
 8005bfe:	7811      	ldrb	r1, [r2, #0]
 8005c00:	7818      	ldrb	r0, [r3, #0]
 8005c02:	f802 0b01 	strb.w	r0, [r2], #1
 8005c06:	f803 1901 	strb.w	r1, [r3], #-1
 8005c0a:	e7f4      	b.n	8005bf6 <__utoa+0x5e>
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	e7e2      	b.n	8005bd6 <__utoa+0x3e>
 8005c10:	080095dc 	.word	0x080095dc

08005c14 <print_e>:
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	b08b      	sub	sp, #44	; 0x2c
 8005c18:	460f      	mov	r7, r1
 8005c1a:	a908      	add	r1, sp, #32
 8005c1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005c1e:	9104      	str	r1, [sp, #16]
 8005c20:	a907      	add	r1, sp, #28
 8005c22:	9103      	str	r1, [sp, #12]
 8005c24:	a909      	add	r1, sp, #36	; 0x24
 8005c26:	9102      	str	r1, [sp, #8]
 8005c28:	1c61      	adds	r1, r4, #1
 8005c2a:	9101      	str	r1, [sp, #4]
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	9100      	str	r1, [sp, #0]
 8005c30:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8005c34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005c36:	f000 fd37 	bl	80066a8 <_dtoa_r>
 8005c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c3e:	4601      	mov	r1, r0
 8005c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c42:	4298      	cmp	r0, r3
 8005c44:	d104      	bne.n	8005c50 <print_e+0x3c>
 8005c46:	4638      	mov	r0, r7
 8005c48:	f000 fc98 	bl	800657c <strcpy>
 8005c4c:	b00b      	add	sp, #44	; 0x2c
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	780b      	ldrb	r3, [r1, #0]
 8005c52:	703b      	strb	r3, [r7, #0]
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	d142      	bne.n	8005cde <print_e+0xca>
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d140      	bne.n	8005cde <print_e+0xca>
 8005c5c:	1c7b      	adds	r3, r7, #1
 8005c5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005c62:	b10a      	cbz	r2, 8005c68 <print_e+0x54>
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	dc3e      	bgt.n	8005ce6 <print_e+0xd2>
 8005c68:	2e67      	cmp	r6, #103	; 0x67
 8005c6a:	d043      	beq.n	8005cf4 <print_e+0xe0>
 8005c6c:	2e47      	cmp	r6, #71	; 0x47
 8005c6e:	d043      	beq.n	8005cf8 <print_e+0xe4>
 8005c70:	461a      	mov	r2, r3
 8005c72:	2730      	movs	r7, #48	; 0x30
 8005c74:	191d      	adds	r5, r3, r4
 8005c76:	1aa9      	subs	r1, r5, r2
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	dc38      	bgt.n	8005cee <print_e+0xda>
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	bfa8      	it	ge
 8005c80:	191b      	addge	r3, r3, r4
 8005c82:	1e41      	subs	r1, r0, #1
 8005c84:	2900      	cmp	r1, #0
 8005c86:	9109      	str	r1, [sp, #36]	; 0x24
 8005c88:	461a      	mov	r2, r3
 8005c8a:	bfb7      	itett	lt
 8005c8c:	212d      	movlt	r1, #45	; 0x2d
 8005c8e:	212b      	movge	r1, #43	; 0x2b
 8005c90:	f1c0 0001 	rsblt	r0, r0, #1
 8005c94:	9009      	strlt	r0, [sp, #36]	; 0x24
 8005c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c98:	f802 6b02 	strb.w	r6, [r2], #2
 8005c9c:	bfb4      	ite	lt
 8005c9e:	7059      	strblt	r1, [r3, #1]
 8005ca0:	7059      	strbge	r1, [r3, #1]
 8005ca2:	2863      	cmp	r0, #99	; 0x63
 8005ca4:	dd0b      	ble.n	8005cbe <print_e+0xaa>
 8005ca6:	2164      	movs	r1, #100	; 0x64
 8005ca8:	fb90 f1f1 	sdiv	r1, r0, r1
 8005cac:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005cb0:	1cda      	adds	r2, r3, #3
 8005cb2:	709c      	strb	r4, [r3, #2]
 8005cb4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005cb8:	fb03 0101 	mla	r1, r3, r1, r0
 8005cbc:	9109      	str	r1, [sp, #36]	; 0x24
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cc2:	fb91 f3f3 	sdiv	r3, r1, r3
 8005cc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005cca:	7010      	strb	r0, [r2, #0]
 8005ccc:	f06f 0009 	mvn.w	r0, #9
 8005cd0:	fb00 1303 	mla	r3, r0, r3, r1
 8005cd4:	3330      	adds	r3, #48	; 0x30
 8005cd6:	7053      	strb	r3, [r2, #1]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	7093      	strb	r3, [r2, #2]
 8005cdc:	e7b6      	b.n	8005c4c <print_e+0x38>
 8005cde:	222e      	movs	r2, #46	; 0x2e
 8005ce0:	1cbb      	adds	r3, r7, #2
 8005ce2:	707a      	strb	r2, [r7, #1]
 8005ce4:	e7bb      	b.n	8005c5e <print_e+0x4a>
 8005ce6:	f803 2b01 	strb.w	r2, [r3], #1
 8005cea:	3c01      	subs	r4, #1
 8005cec:	e7b7      	b.n	8005c5e <print_e+0x4a>
 8005cee:	f802 7b01 	strb.w	r7, [r2], #1
 8005cf2:	e7c0      	b.n	8005c76 <print_e+0x62>
 8005cf4:	2665      	movs	r6, #101	; 0x65
 8005cf6:	e7c4      	b.n	8005c82 <print_e+0x6e>
 8005cf8:	2645      	movs	r6, #69	; 0x45
 8005cfa:	e7c2      	b.n	8005c82 <print_e+0x6e>
 8005cfc:	0000      	movs	r0, r0
	...

08005d00 <_gcvt>:
 8005d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4617      	mov	r7, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	b08b      	sub	sp, #44	; 0x2c
 8005d0a:	4681      	mov	r9, r0
 8005d0c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8005d10:	2200      	movs	r2, #0
 8005d12:	2300      	movs	r3, #0
 8005d14:	4638      	mov	r0, r7
 8005d16:	4629      	mov	r1, r5
 8005d18:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8005d1c:	f7fa fe46 	bl	80009ac <__aeabi_dcmplt>
 8005d20:	b108      	cbz	r0, 8005d26 <_gcvt+0x26>
 8005d22:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005d26:	2200      	movs	r2, #0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fe33 	bl	8000998 <__aeabi_dcmpeq>
 8005d32:	b138      	cbz	r0, 8005d44 <_gcvt+0x44>
 8005d34:	2330      	movs	r3, #48	; 0x30
 8005d36:	7023      	strb	r3, [r4, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	7063      	strb	r3, [r4, #1]
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	b00b      	add	sp, #44	; 0x2c
 8005d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d44:	a352      	add	r3, pc, #328	; (adr r3, 8005e90 <_gcvt+0x190>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fe37 	bl	80009c0 <__aeabi_dcmple>
 8005d52:	b168      	cbz	r0, 8005d70 <_gcvt+0x70>
 8005d54:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005d60:	9600      	str	r6, [sp, #0]
 8005d62:	463a      	mov	r2, r7
 8005d64:	462b      	mov	r3, r5
 8005d66:	4621      	mov	r1, r4
 8005d68:	4648      	mov	r0, r9
 8005d6a:	f7ff ff53 	bl	8005c14 <print_e>
 8005d6e:	e7e5      	b.n	8005d3c <_gcvt+0x3c>
 8005d70:	4630      	mov	r0, r6
 8005d72:	f000 fb6f 	bl	8006454 <_mprec_log10>
 8005d76:	463a      	mov	r2, r7
 8005d78:	462b      	mov	r3, r5
 8005d7a:	f7fa fe21 	bl	80009c0 <__aeabi_dcmple>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1e8      	bne.n	8005d54 <_gcvt+0x54>
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <_gcvt+0x198>)
 8005d86:	4629      	mov	r1, r5
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7fa fe0f 	bl	80009ac <__aeabi_dcmplt>
 8005d8e:	a909      	add	r1, sp, #36	; 0x24
 8005d90:	aa08      	add	r2, sp, #32
 8005d92:	ab07      	add	r3, sp, #28
 8005d94:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8005d98:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005d9c:	b388      	cbz	r0, 8005e02 <_gcvt+0x102>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	463a      	mov	r2, r7
 8005da4:	462b      	mov	r3, r5
 8005da6:	4648      	mov	r0, r9
 8005da8:	f000 fc7e 	bl	80066a8 <_dtoa_r>
 8005dac:	f242 730f 	movw	r3, #9999	; 0x270f
 8005db0:	9a07      	ldr	r2, [sp, #28]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d027      	beq.n	8005e06 <_gcvt+0x106>
 8005db6:	4623      	mov	r3, r4
 8005db8:	4426      	add	r6, r4
 8005dba:	4607      	mov	r7, r0
 8005dbc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005dc0:	1af2      	subs	r2, r6, r3
 8005dc2:	9d07      	ldr	r5, [sp, #28]
 8005dc4:	b349      	cbz	r1, 8005e1a <_gcvt+0x11a>
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	dc22      	bgt.n	8005e10 <_gcvt+0x110>
 8005dca:	f1b8 0f00 	cmp.w	r8, #0
 8005dce:	d102      	bne.n	8005dd6 <_gcvt+0xd6>
 8005dd0:	7839      	ldrb	r1, [r7, #0]
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d049      	beq.n	8005e6a <_gcvt+0x16a>
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	bf04      	itt	eq
 8005dda:	2130      	moveq	r1, #48	; 0x30
 8005ddc:	7021      	strbeq	r1, [r4, #0]
 8005dde:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0630 	mov.w	r6, #48	; 0x30
 8005dea:	bf08      	it	eq
 8005dec:	1c63      	addeq	r3, r4, #1
 8005dee:	7019      	strb	r1, [r3, #0]
 8005df0:	9907      	ldr	r1, [sp, #28]
 8005df2:	3301      	adds	r3, #1
 8005df4:	2900      	cmp	r1, #0
 8005df6:	460d      	mov	r5, r1
 8005df8:	db24      	blt.n	8005e44 <_gcvt+0x144>
 8005dfa:	b100      	cbz	r0, 8005dfe <_gcvt+0xfe>
 8005dfc:	9107      	str	r1, [sp, #28]
 8005dfe:	1e79      	subs	r1, r7, #1
 8005e00:	e02b      	b.n	8005e5a <_gcvt+0x15a>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e7cc      	b.n	8005da0 <_gcvt+0xa0>
 8005e06:	4601      	mov	r1, r0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fbb7 	bl	800657c <strcpy>
 8005e0e:	e795      	b.n	8005d3c <_gcvt+0x3c>
 8005e10:	3d01      	subs	r5, #1
 8005e12:	f803 1b01 	strb.w	r1, [r3], #1
 8005e16:	9507      	str	r5, [sp, #28]
 8005e18:	e7cf      	b.n	8005dba <_gcvt+0xba>
 8005e1a:	1aad      	subs	r5, r5, r2
 8005e1c:	2630      	movs	r6, #48	; 0x30
 8005e1e:	e005      	b.n	8005e2c <_gcvt+0x12c>
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	dd06      	ble.n	8005e32 <_gcvt+0x132>
 8005e24:	2101      	movs	r1, #1
 8005e26:	f803 6b01 	strb.w	r6, [r3], #1
 8005e2a:	3a01      	subs	r2, #1
 8005e2c:	18a8      	adds	r0, r5, r2
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	dcf6      	bgt.n	8005e20 <_gcvt+0x120>
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d0c9      	beq.n	8005dca <_gcvt+0xca>
 8005e36:	9007      	str	r0, [sp, #28]
 8005e38:	e7c7      	b.n	8005dca <_gcvt+0xca>
 8005e3a:	f803 6b01 	strb.w	r6, [r3], #1
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	2001      	movs	r0, #1
 8005e42:	e7d7      	b.n	8005df4 <_gcvt+0xf4>
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	f101 0101 	add.w	r1, r1, #1
 8005e4a:	dcf6      	bgt.n	8005e3a <_gcvt+0x13a>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0d6      	beq.n	8005dfe <_gcvt+0xfe>
 8005e50:	9507      	str	r5, [sp, #28]
 8005e52:	e7d4      	b.n	8005dfe <_gcvt+0xfe>
 8005e54:	f803 0b01 	strb.w	r0, [r3], #1
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005e5e:	b108      	cbz	r0, 8005e64 <_gcvt+0x164>
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	dcf7      	bgt.n	8005e54 <_gcvt+0x154>
 8005e64:	f1b8 0f00 	cmp.w	r8, #0
 8005e68:	d10b      	bne.n	8005e82 <_gcvt+0x182>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e765      	b.n	8005d3c <_gcvt+0x3c>
 8005e70:	f801 6b01 	strb.w	r6, [r1], #1
 8005e74:	1a68      	subs	r0, r5, r1
 8005e76:	2800      	cmp	r0, #0
 8005e78:	dcfa      	bgt.n	8005e70 <_gcvt+0x170>
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	bfa8      	it	ge
 8005e7e:	189b      	addge	r3, r3, r2
 8005e80:	e7f3      	b.n	8005e6a <_gcvt+0x16a>
 8005e82:	4619      	mov	r1, r3
 8005e84:	189d      	adds	r5, r3, r2
 8005e86:	2630      	movs	r6, #48	; 0x30
 8005e88:	e7f4      	b.n	8005e74 <_gcvt+0x174>
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w
 8005e90:	eb1c432d 	.word	0xeb1c432d
 8005e94:	3f1a36e2 	.word	0x3f1a36e2
 8005e98:	3ff00000 	.word	0x3ff00000

08005e9c <_Balloc>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	460e      	mov	r6, r1
 8005ea4:	b93d      	cbnz	r5, 8005eb6 <_Balloc+0x1a>
 8005ea6:	2010      	movs	r0, #16
 8005ea8:	f001 f9b2 	bl	8007210 <malloc>
 8005eac:	6260      	str	r0, [r4, #36]	; 0x24
 8005eae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005eb2:	6005      	str	r5, [r0, #0]
 8005eb4:	60c5      	str	r5, [r0, #12]
 8005eb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005eb8:	68eb      	ldr	r3, [r5, #12]
 8005eba:	b183      	cbz	r3, 8005ede <_Balloc+0x42>
 8005ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ec4:	b9b8      	cbnz	r0, 8005ef6 <_Balloc+0x5a>
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f506 	lsl.w	r5, r1, r6
 8005ecc:	1d6a      	adds	r2, r5, #5
 8005ece:	0092      	lsls	r2, r2, #2
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fadb 	bl	800648c <_calloc_r>
 8005ed6:	b160      	cbz	r0, 8005ef2 <_Balloc+0x56>
 8005ed8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005edc:	e00e      	b.n	8005efc <_Balloc+0x60>
 8005ede:	2221      	movs	r2, #33	; 0x21
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fad2 	bl	800648c <_calloc_r>
 8005ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eea:	60e8      	str	r0, [r5, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e4      	bne.n	8005ebc <_Balloc+0x20>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
 8005ef6:	6802      	ldr	r2, [r0, #0]
 8005ef8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005efc:	2300      	movs	r3, #0
 8005efe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f02:	e7f7      	b.n	8005ef4 <_Balloc+0x58>

08005f04 <_Bfree>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	b93c      	cbnz	r4, 8005f1e <_Bfree+0x1a>
 8005f0e:	2010      	movs	r0, #16
 8005f10:	f001 f97e 	bl	8007210 <malloc>
 8005f14:	6270      	str	r0, [r6, #36]	; 0x24
 8005f16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f1a:	6004      	str	r4, [r0, #0]
 8005f1c:	60c4      	str	r4, [r0, #12]
 8005f1e:	b13d      	cbz	r5, 8005f30 <_Bfree+0x2c>
 8005f20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f22:	686a      	ldr	r2, [r5, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f30:	bd70      	pop	{r4, r5, r6, pc}

08005f32 <__multadd>:
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	461f      	mov	r7, r3
 8005f38:	4606      	mov	r6, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	690d      	ldr	r5, [r1, #16]
 8005f40:	f101 0c14 	add.w	ip, r1, #20
 8005f44:	f8dc 0000 	ldr.w	r0, [ip]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	b281      	uxth	r1, r0
 8005f4c:	fb02 7101 	mla	r1, r2, r1, r7
 8005f50:	0c00      	lsrs	r0, r0, #16
 8005f52:	0c0f      	lsrs	r7, r1, #16
 8005f54:	fb02 7000 	mla	r0, r2, r0, r7
 8005f58:	b289      	uxth	r1, r1
 8005f5a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f5e:	429d      	cmp	r5, r3
 8005f60:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f64:	f84c 1b04 	str.w	r1, [ip], #4
 8005f68:	dcec      	bgt.n	8005f44 <__multadd+0x12>
 8005f6a:	b1d7      	cbz	r7, 8005fa2 <__multadd+0x70>
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	42ab      	cmp	r3, r5
 8005f70:	dc12      	bgt.n	8005f98 <__multadd+0x66>
 8005f72:	6861      	ldr	r1, [r4, #4]
 8005f74:	4630      	mov	r0, r6
 8005f76:	3101      	adds	r1, #1
 8005f78:	f7ff ff90 	bl	8005e9c <_Balloc>
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	6922      	ldr	r2, [r4, #16]
 8005f80:	f104 010c 	add.w	r1, r4, #12
 8005f84:	3202      	adds	r2, #2
 8005f86:	0092      	lsls	r2, r2, #2
 8005f88:	300c      	adds	r0, #12
 8005f8a:	f7ff fdf1 	bl	8005b70 <memcpy>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7ff ffb7 	bl	8005f04 <_Bfree>
 8005f96:	4644      	mov	r4, r8
 8005f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	615f      	str	r7, [r3, #20]
 8005fa0:	6125      	str	r5, [r4, #16]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fa8 <__hi0bits>:
 8005fa8:	0c02      	lsrs	r2, r0, #16
 8005faa:	0412      	lsls	r2, r2, #16
 8005fac:	4603      	mov	r3, r0
 8005fae:	b9b2      	cbnz	r2, 8005fde <__hi0bits+0x36>
 8005fb0:	0403      	lsls	r3, r0, #16
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fb8:	bf04      	itt	eq
 8005fba:	021b      	lsleq	r3, r3, #8
 8005fbc:	3008      	addeq	r0, #8
 8005fbe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fc2:	bf04      	itt	eq
 8005fc4:	011b      	lsleq	r3, r3, #4
 8005fc6:	3004      	addeq	r0, #4
 8005fc8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005fcc:	bf04      	itt	eq
 8005fce:	009b      	lsleq	r3, r3, #2
 8005fd0:	3002      	addeq	r0, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db06      	blt.n	8005fe4 <__hi0bits+0x3c>
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	d503      	bpl.n	8005fe2 <__hi0bits+0x3a>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	4770      	bx	lr
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e7e8      	b.n	8005fb4 <__hi0bits+0xc>
 8005fe2:	2020      	movs	r0, #32
 8005fe4:	4770      	bx	lr

08005fe6 <__lo0bits>:
 8005fe6:	6803      	ldr	r3, [r0, #0]
 8005fe8:	4601      	mov	r1, r0
 8005fea:	f013 0207 	ands.w	r2, r3, #7
 8005fee:	d00b      	beq.n	8006008 <__lo0bits+0x22>
 8005ff0:	07da      	lsls	r2, r3, #31
 8005ff2:	d423      	bmi.n	800603c <__lo0bits+0x56>
 8005ff4:	0798      	lsls	r0, r3, #30
 8005ff6:	bf49      	itett	mi
 8005ff8:	085b      	lsrmi	r3, r3, #1
 8005ffa:	089b      	lsrpl	r3, r3, #2
 8005ffc:	2001      	movmi	r0, #1
 8005ffe:	600b      	strmi	r3, [r1, #0]
 8006000:	bf5c      	itt	pl
 8006002:	600b      	strpl	r3, [r1, #0]
 8006004:	2002      	movpl	r0, #2
 8006006:	4770      	bx	lr
 8006008:	b298      	uxth	r0, r3
 800600a:	b9a8      	cbnz	r0, 8006038 <__lo0bits+0x52>
 800600c:	2010      	movs	r0, #16
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006014:	bf04      	itt	eq
 8006016:	0a1b      	lsreq	r3, r3, #8
 8006018:	3008      	addeq	r0, #8
 800601a:	071a      	lsls	r2, r3, #28
 800601c:	bf04      	itt	eq
 800601e:	091b      	lsreq	r3, r3, #4
 8006020:	3004      	addeq	r0, #4
 8006022:	079a      	lsls	r2, r3, #30
 8006024:	bf04      	itt	eq
 8006026:	089b      	lsreq	r3, r3, #2
 8006028:	3002      	addeq	r0, #2
 800602a:	07da      	lsls	r2, r3, #31
 800602c:	d402      	bmi.n	8006034 <__lo0bits+0x4e>
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	d006      	beq.n	8006040 <__lo0bits+0x5a>
 8006032:	3001      	adds	r0, #1
 8006034:	600b      	str	r3, [r1, #0]
 8006036:	4770      	bx	lr
 8006038:	4610      	mov	r0, r2
 800603a:	e7e9      	b.n	8006010 <__lo0bits+0x2a>
 800603c:	2000      	movs	r0, #0
 800603e:	4770      	bx	lr
 8006040:	2020      	movs	r0, #32
 8006042:	4770      	bx	lr

08006044 <__i2b>:
 8006044:	b510      	push	{r4, lr}
 8006046:	460c      	mov	r4, r1
 8006048:	2101      	movs	r1, #1
 800604a:	f7ff ff27 	bl	8005e9c <_Balloc>
 800604e:	2201      	movs	r2, #1
 8006050:	6144      	str	r4, [r0, #20]
 8006052:	6102      	str	r2, [r0, #16]
 8006054:	bd10      	pop	{r4, pc}

08006056 <__multiply>:
 8006056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	4614      	mov	r4, r2
 800605c:	690a      	ldr	r2, [r1, #16]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	4688      	mov	r8, r1
 8006062:	429a      	cmp	r2, r3
 8006064:	bfbe      	ittt	lt
 8006066:	460b      	movlt	r3, r1
 8006068:	46a0      	movlt	r8, r4
 800606a:	461c      	movlt	r4, r3
 800606c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006070:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006074:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006078:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800607c:	eb07 0609 	add.w	r6, r7, r9
 8006080:	42b3      	cmp	r3, r6
 8006082:	bfb8      	it	lt
 8006084:	3101      	addlt	r1, #1
 8006086:	f7ff ff09 	bl	8005e9c <_Balloc>
 800608a:	f100 0514 	add.w	r5, r0, #20
 800608e:	462b      	mov	r3, r5
 8006090:	2200      	movs	r2, #0
 8006092:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006096:	4573      	cmp	r3, lr
 8006098:	d316      	bcc.n	80060c8 <__multiply+0x72>
 800609a:	f104 0214 	add.w	r2, r4, #20
 800609e:	f108 0114 	add.w	r1, r8, #20
 80060a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80060a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	9201      	str	r2, [sp, #4]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d80c      	bhi.n	80060ce <__multiply+0x78>
 80060b4:	2e00      	cmp	r6, #0
 80060b6:	dd03      	ble.n	80060c0 <__multiply+0x6a>
 80060b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d05d      	beq.n	800617c <__multiply+0x126>
 80060c0:	6106      	str	r6, [r0, #16]
 80060c2:	b003      	add	sp, #12
 80060c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	f843 2b04 	str.w	r2, [r3], #4
 80060cc:	e7e3      	b.n	8006096 <__multiply+0x40>
 80060ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80060d2:	f1bb 0f00 	cmp.w	fp, #0
 80060d6:	d023      	beq.n	8006120 <__multiply+0xca>
 80060d8:	4689      	mov	r9, r1
 80060da:	46ac      	mov	ip, r5
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80060e4:	f8dc a000 	ldr.w	sl, [ip]
 80060e8:	b2a3      	uxth	r3, r4
 80060ea:	fa1f fa8a 	uxth.w	sl, sl
 80060ee:	fb0b a303 	mla	r3, fp, r3, sl
 80060f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80060f6:	f8dc 4000 	ldr.w	r4, [ip]
 80060fa:	4443      	add	r3, r8
 80060fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006100:	fb0b 840a 	mla	r4, fp, sl, r8
 8006104:	46e2      	mov	sl, ip
 8006106:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006110:	454f      	cmp	r7, r9
 8006112:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006116:	f84a 3b04 	str.w	r3, [sl], #4
 800611a:	d82b      	bhi.n	8006174 <__multiply+0x11e>
 800611c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	3204      	adds	r2, #4
 8006124:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d020      	beq.n	8006170 <__multiply+0x11a>
 800612e:	4689      	mov	r9, r1
 8006130:	46a8      	mov	r8, r5
 8006132:	f04f 0b00 	mov.w	fp, #0
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	f8b9 c000 	ldrh.w	ip, [r9]
 800613c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006140:	b29b      	uxth	r3, r3
 8006142:	fb0a 440c 	mla	r4, sl, ip, r4
 8006146:	46c4      	mov	ip, r8
 8006148:	445c      	add	r4, fp
 800614a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800614e:	f84c 3b04 	str.w	r3, [ip], #4
 8006152:	f859 3b04 	ldr.w	r3, [r9], #4
 8006156:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	fb0a b303 	mla	r3, sl, r3, fp
 8006160:	454f      	cmp	r7, r9
 8006162:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006166:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800616a:	d805      	bhi.n	8006178 <__multiply+0x122>
 800616c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006170:	3504      	adds	r5, #4
 8006172:	e79b      	b.n	80060ac <__multiply+0x56>
 8006174:	46d4      	mov	ip, sl
 8006176:	e7b3      	b.n	80060e0 <__multiply+0x8a>
 8006178:	46e0      	mov	r8, ip
 800617a:	e7dd      	b.n	8006138 <__multiply+0xe2>
 800617c:	3e01      	subs	r6, #1
 800617e:	e799      	b.n	80060b4 <__multiply+0x5e>

08006180 <__pow5mult>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4615      	mov	r5, r2
 8006186:	f012 0203 	ands.w	r2, r2, #3
 800618a:	4606      	mov	r6, r0
 800618c:	460f      	mov	r7, r1
 800618e:	d007      	beq.n	80061a0 <__pow5mult+0x20>
 8006190:	4c21      	ldr	r4, [pc, #132]	; (8006218 <__pow5mult+0x98>)
 8006192:	3a01      	subs	r2, #1
 8006194:	2300      	movs	r3, #0
 8006196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800619a:	f7ff feca 	bl	8005f32 <__multadd>
 800619e:	4607      	mov	r7, r0
 80061a0:	10ad      	asrs	r5, r5, #2
 80061a2:	d035      	beq.n	8006210 <__pow5mult+0x90>
 80061a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061a6:	b93c      	cbnz	r4, 80061b8 <__pow5mult+0x38>
 80061a8:	2010      	movs	r0, #16
 80061aa:	f001 f831 	bl	8007210 <malloc>
 80061ae:	6270      	str	r0, [r6, #36]	; 0x24
 80061b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061b4:	6004      	str	r4, [r0, #0]
 80061b6:	60c4      	str	r4, [r0, #12]
 80061b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061c0:	b94c      	cbnz	r4, 80061d6 <__pow5mult+0x56>
 80061c2:	f240 2171 	movw	r1, #625	; 0x271
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ff3c 	bl	8006044 <__i2b>
 80061cc:	2300      	movs	r3, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80061d4:	6003      	str	r3, [r0, #0]
 80061d6:	f04f 0800 	mov.w	r8, #0
 80061da:	07eb      	lsls	r3, r5, #31
 80061dc:	d50a      	bpl.n	80061f4 <__pow5mult+0x74>
 80061de:	4639      	mov	r1, r7
 80061e0:	4622      	mov	r2, r4
 80061e2:	4630      	mov	r0, r6
 80061e4:	f7ff ff37 	bl	8006056 <__multiply>
 80061e8:	4681      	mov	r9, r0
 80061ea:	4639      	mov	r1, r7
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff fe89 	bl	8005f04 <_Bfree>
 80061f2:	464f      	mov	r7, r9
 80061f4:	106d      	asrs	r5, r5, #1
 80061f6:	d00b      	beq.n	8006210 <__pow5mult+0x90>
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	b938      	cbnz	r0, 800620c <__pow5mult+0x8c>
 80061fc:	4622      	mov	r2, r4
 80061fe:	4621      	mov	r1, r4
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff ff28 	bl	8006056 <__multiply>
 8006206:	6020      	str	r0, [r4, #0]
 8006208:	f8c0 8000 	str.w	r8, [r0]
 800620c:	4604      	mov	r4, r0
 800620e:	e7e4      	b.n	80061da <__pow5mult+0x5a>
 8006210:	4638      	mov	r0, r7
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006216:	bf00      	nop
 8006218:	080096f8 	.word	0x080096f8

0800621c <__lshift>:
 800621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	460c      	mov	r4, r1
 8006222:	4607      	mov	r7, r0
 8006224:	4616      	mov	r6, r2
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800622c:	eb0a 0903 	add.w	r9, sl, r3
 8006230:	6849      	ldr	r1, [r1, #4]
 8006232:	68a3      	ldr	r3, [r4, #8]
 8006234:	f109 0501 	add.w	r5, r9, #1
 8006238:	42ab      	cmp	r3, r5
 800623a:	db32      	blt.n	80062a2 <__lshift+0x86>
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff fe2d 	bl	8005e9c <_Balloc>
 8006242:	2300      	movs	r3, #0
 8006244:	4680      	mov	r8, r0
 8006246:	461a      	mov	r2, r3
 8006248:	f100 0114 	add.w	r1, r0, #20
 800624c:	4553      	cmp	r3, sl
 800624e:	db2b      	blt.n	80062a8 <__lshift+0x8c>
 8006250:	6920      	ldr	r0, [r4, #16]
 8006252:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006256:	f104 0314 	add.w	r3, r4, #20
 800625a:	f016 021f 	ands.w	r2, r6, #31
 800625e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006262:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006266:	d025      	beq.n	80062b4 <__lshift+0x98>
 8006268:	2000      	movs	r0, #0
 800626a:	f1c2 0e20 	rsb	lr, r2, #32
 800626e:	468a      	mov	sl, r1
 8006270:	681e      	ldr	r6, [r3, #0]
 8006272:	4096      	lsls	r6, r2
 8006274:	4330      	orrs	r0, r6
 8006276:	f84a 0b04 	str.w	r0, [sl], #4
 800627a:	f853 0b04 	ldr.w	r0, [r3], #4
 800627e:	459c      	cmp	ip, r3
 8006280:	fa20 f00e 	lsr.w	r0, r0, lr
 8006284:	d814      	bhi.n	80062b0 <__lshift+0x94>
 8006286:	6048      	str	r0, [r1, #4]
 8006288:	b108      	cbz	r0, 800628e <__lshift+0x72>
 800628a:	f109 0502 	add.w	r5, r9, #2
 800628e:	3d01      	subs	r5, #1
 8006290:	4638      	mov	r0, r7
 8006292:	f8c8 5010 	str.w	r5, [r8, #16]
 8006296:	4621      	mov	r1, r4
 8006298:	f7ff fe34 	bl	8005f04 <_Bfree>
 800629c:	4640      	mov	r0, r8
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a2:	3101      	adds	r1, #1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	e7c7      	b.n	8006238 <__lshift+0x1c>
 80062a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80062ac:	3301      	adds	r3, #1
 80062ae:	e7cd      	b.n	800624c <__lshift+0x30>
 80062b0:	4651      	mov	r1, sl
 80062b2:	e7dc      	b.n	800626e <__lshift+0x52>
 80062b4:	3904      	subs	r1, #4
 80062b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ba:	459c      	cmp	ip, r3
 80062bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80062c0:	d8f9      	bhi.n	80062b6 <__lshift+0x9a>
 80062c2:	e7e4      	b.n	800628e <__lshift+0x72>

080062c4 <__mcmp>:
 80062c4:	6903      	ldr	r3, [r0, #16]
 80062c6:	690a      	ldr	r2, [r1, #16]
 80062c8:	b530      	push	{r4, r5, lr}
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	d10c      	bne.n	80062e8 <__mcmp+0x24>
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	3014      	adds	r0, #20
 80062d2:	3114      	adds	r1, #20
 80062d4:	1884      	adds	r4, r0, r2
 80062d6:	4411      	add	r1, r2
 80062d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062e0:	4295      	cmp	r5, r2
 80062e2:	d003      	beq.n	80062ec <__mcmp+0x28>
 80062e4:	d305      	bcc.n	80062f2 <__mcmp+0x2e>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd30      	pop	{r4, r5, pc}
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d3f3      	bcc.n	80062d8 <__mcmp+0x14>
 80062f0:	e7fa      	b.n	80062e8 <__mcmp+0x24>
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295
 80062f6:	e7f7      	b.n	80062e8 <__mcmp+0x24>

080062f8 <__mdiff>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	460d      	mov	r5, r1
 80062fe:	4607      	mov	r7, r0
 8006300:	4611      	mov	r1, r2
 8006302:	4628      	mov	r0, r5
 8006304:	4614      	mov	r4, r2
 8006306:	f7ff ffdd 	bl	80062c4 <__mcmp>
 800630a:	1e06      	subs	r6, r0, #0
 800630c:	d108      	bne.n	8006320 <__mdiff+0x28>
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff fdc3 	bl	8005e9c <_Balloc>
 8006316:	2301      	movs	r3, #1
 8006318:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006320:	bfa4      	itt	ge
 8006322:	4623      	movge	r3, r4
 8006324:	462c      	movge	r4, r5
 8006326:	4638      	mov	r0, r7
 8006328:	6861      	ldr	r1, [r4, #4]
 800632a:	bfa6      	itte	ge
 800632c:	461d      	movge	r5, r3
 800632e:	2600      	movge	r6, #0
 8006330:	2601      	movlt	r6, #1
 8006332:	f7ff fdb3 	bl	8005e9c <_Balloc>
 8006336:	f04f 0e00 	mov.w	lr, #0
 800633a:	60c6      	str	r6, [r0, #12]
 800633c:	692b      	ldr	r3, [r5, #16]
 800633e:	6926      	ldr	r6, [r4, #16]
 8006340:	f104 0214 	add.w	r2, r4, #20
 8006344:	f105 0914 	add.w	r9, r5, #20
 8006348:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800634c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006350:	f100 0114 	add.w	r1, r0, #20
 8006354:	f852 ab04 	ldr.w	sl, [r2], #4
 8006358:	f859 5b04 	ldr.w	r5, [r9], #4
 800635c:	fa1f f38a 	uxth.w	r3, sl
 8006360:	4473      	add	r3, lr
 8006362:	b2ac      	uxth	r4, r5
 8006364:	1b1b      	subs	r3, r3, r4
 8006366:	0c2c      	lsrs	r4, r5, #16
 8006368:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800636c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006376:	45c8      	cmp	r8, r9
 8006378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800637c:	4694      	mov	ip, r2
 800637e:	f841 4b04 	str.w	r4, [r1], #4
 8006382:	d8e7      	bhi.n	8006354 <__mdiff+0x5c>
 8006384:	45bc      	cmp	ip, r7
 8006386:	d304      	bcc.n	8006392 <__mdiff+0x9a>
 8006388:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800638c:	b183      	cbz	r3, 80063b0 <__mdiff+0xb8>
 800638e:	6106      	str	r6, [r0, #16]
 8006390:	e7c4      	b.n	800631c <__mdiff+0x24>
 8006392:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006396:	b2a2      	uxth	r2, r4
 8006398:	4472      	add	r2, lr
 800639a:	1413      	asrs	r3, r2, #16
 800639c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80063a0:	b292      	uxth	r2, r2
 80063a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063aa:	f841 2b04 	str.w	r2, [r1], #4
 80063ae:	e7e9      	b.n	8006384 <__mdiff+0x8c>
 80063b0:	3e01      	subs	r6, #1
 80063b2:	e7e9      	b.n	8006388 <__mdiff+0x90>

080063b4 <__d2b>:
 80063b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80063b8:	461c      	mov	r4, r3
 80063ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80063be:	2101      	movs	r1, #1
 80063c0:	4690      	mov	r8, r2
 80063c2:	f7ff fd6b 	bl	8005e9c <_Balloc>
 80063c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80063ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80063ce:	4607      	mov	r7, r0
 80063d0:	bb34      	cbnz	r4, 8006420 <__d2b+0x6c>
 80063d2:	9201      	str	r2, [sp, #4]
 80063d4:	f1b8 0200 	subs.w	r2, r8, #0
 80063d8:	d027      	beq.n	800642a <__d2b+0x76>
 80063da:	a802      	add	r0, sp, #8
 80063dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80063e0:	f7ff fe01 	bl	8005fe6 <__lo0bits>
 80063e4:	9900      	ldr	r1, [sp, #0]
 80063e6:	b1f0      	cbz	r0, 8006426 <__d2b+0x72>
 80063e8:	9a01      	ldr	r2, [sp, #4]
 80063ea:	f1c0 0320 	rsb	r3, r0, #32
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	430b      	orrs	r3, r1
 80063f4:	40c2      	lsrs	r2, r0
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2102      	movne	r1, #2
 8006402:	2101      	moveq	r1, #1
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	6139      	str	r1, [r7, #16]
 8006408:	b1c4      	cbz	r4, 800643c <__d2b+0x88>
 800640a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800640e:	4404      	add	r4, r0
 8006410:	6034      	str	r4, [r6, #0]
 8006412:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006416:	6028      	str	r0, [r5, #0]
 8006418:	4638      	mov	r0, r7
 800641a:	b002      	add	sp, #8
 800641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006424:	e7d5      	b.n	80063d2 <__d2b+0x1e>
 8006426:	6179      	str	r1, [r7, #20]
 8006428:	e7e7      	b.n	80063fa <__d2b+0x46>
 800642a:	a801      	add	r0, sp, #4
 800642c:	f7ff fddb 	bl	8005fe6 <__lo0bits>
 8006430:	2101      	movs	r1, #1
 8006432:	9b01      	ldr	r3, [sp, #4]
 8006434:	6139      	str	r1, [r7, #16]
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	3020      	adds	r0, #32
 800643a:	e7e5      	b.n	8006408 <__d2b+0x54>
 800643c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006440:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006444:	6030      	str	r0, [r6, #0]
 8006446:	6918      	ldr	r0, [r3, #16]
 8006448:	f7ff fdae 	bl	8005fa8 <__hi0bits>
 800644c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006450:	e7e1      	b.n	8006416 <__d2b+0x62>
	...

08006454 <_mprec_log10>:
 8006454:	2817      	cmp	r0, #23
 8006456:	b5d0      	push	{r4, r6, r7, lr}
 8006458:	4604      	mov	r4, r0
 800645a:	dc05      	bgt.n	8006468 <_mprec_log10+0x14>
 800645c:	4b08      	ldr	r3, [pc, #32]	; (8006480 <_mprec_log10+0x2c>)
 800645e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8006462:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006466:	bdd0      	pop	{r4, r6, r7, pc}
 8006468:	2000      	movs	r0, #0
 800646a:	2600      	movs	r6, #0
 800646c:	4905      	ldr	r1, [pc, #20]	; (8006484 <_mprec_log10+0x30>)
 800646e:	4f06      	ldr	r7, [pc, #24]	; (8006488 <_mprec_log10+0x34>)
 8006470:	4632      	mov	r2, r6
 8006472:	463b      	mov	r3, r7
 8006474:	f7fa f828 	bl	80004c8 <__aeabi_dmul>
 8006478:	3c01      	subs	r4, #1
 800647a:	d1f9      	bne.n	8006470 <_mprec_log10+0x1c>
 800647c:	e7f3      	b.n	8006466 <_mprec_log10+0x12>
 800647e:	bf00      	nop
 8006480:	08009630 	.word	0x08009630
 8006484:	3ff00000 	.word	0x3ff00000
 8006488:	40240000 	.word	0x40240000

0800648c <_calloc_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	fb02 f401 	mul.w	r4, r2, r1
 8006492:	4621      	mov	r1, r4
 8006494:	f000 f808 	bl	80064a8 <_malloc_r>
 8006498:	4605      	mov	r5, r0
 800649a:	b118      	cbz	r0, 80064a4 <_calloc_r+0x18>
 800649c:	4622      	mov	r2, r4
 800649e:	2100      	movs	r1, #0
 80064a0:	f7ff fb71 	bl	8005b86 <memset>
 80064a4:	4628      	mov	r0, r5
 80064a6:	bd38      	pop	{r3, r4, r5, pc}

080064a8 <_malloc_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	1ccd      	adds	r5, r1, #3
 80064ac:	f025 0503 	bic.w	r5, r5, #3
 80064b0:	3508      	adds	r5, #8
 80064b2:	2d0c      	cmp	r5, #12
 80064b4:	bf38      	it	cc
 80064b6:	250c      	movcc	r5, #12
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	4606      	mov	r6, r0
 80064bc:	db01      	blt.n	80064c2 <_malloc_r+0x1a>
 80064be:	42a9      	cmp	r1, r5
 80064c0:	d903      	bls.n	80064ca <_malloc_r+0x22>
 80064c2:	230c      	movs	r3, #12
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	2000      	movs	r0, #0
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	f000 fea9 	bl	8007220 <__malloc_lock>
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <_malloc_r+0xac>)
 80064d0:	6814      	ldr	r4, [r2, #0]
 80064d2:	4621      	mov	r1, r4
 80064d4:	b991      	cbnz	r1, 80064fc <_malloc_r+0x54>
 80064d6:	4c20      	ldr	r4, [pc, #128]	; (8006558 <_malloc_r+0xb0>)
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	b91b      	cbnz	r3, 80064e4 <_malloc_r+0x3c>
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 f83d 	bl	800655c <_sbrk_r>
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 f838 	bl	800655c <_sbrk_r>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d124      	bne.n	800653a <_malloc_r+0x92>
 80064f0:	230c      	movs	r3, #12
 80064f2:	4630      	mov	r0, r6
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	f000 fe94 	bl	8007222 <__malloc_unlock>
 80064fa:	e7e4      	b.n	80064c6 <_malloc_r+0x1e>
 80064fc:	680b      	ldr	r3, [r1, #0]
 80064fe:	1b5b      	subs	r3, r3, r5
 8006500:	d418      	bmi.n	8006534 <_malloc_r+0x8c>
 8006502:	2b0b      	cmp	r3, #11
 8006504:	d90f      	bls.n	8006526 <_malloc_r+0x7e>
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	18cc      	adds	r4, r1, r3
 800650a:	50cd      	str	r5, [r1, r3]
 800650c:	4630      	mov	r0, r6
 800650e:	f000 fe88 	bl	8007222 <__malloc_unlock>
 8006512:	f104 000b 	add.w	r0, r4, #11
 8006516:	1d23      	adds	r3, r4, #4
 8006518:	f020 0007 	bic.w	r0, r0, #7
 800651c:	1ac3      	subs	r3, r0, r3
 800651e:	d0d3      	beq.n	80064c8 <_malloc_r+0x20>
 8006520:	425a      	negs	r2, r3
 8006522:	50e2      	str	r2, [r4, r3]
 8006524:	e7d0      	b.n	80064c8 <_malloc_r+0x20>
 8006526:	684b      	ldr	r3, [r1, #4]
 8006528:	428c      	cmp	r4, r1
 800652a:	bf16      	itet	ne
 800652c:	6063      	strne	r3, [r4, #4]
 800652e:	6013      	streq	r3, [r2, #0]
 8006530:	460c      	movne	r4, r1
 8006532:	e7eb      	b.n	800650c <_malloc_r+0x64>
 8006534:	460c      	mov	r4, r1
 8006536:	6849      	ldr	r1, [r1, #4]
 8006538:	e7cc      	b.n	80064d4 <_malloc_r+0x2c>
 800653a:	1cc4      	adds	r4, r0, #3
 800653c:	f024 0403 	bic.w	r4, r4, #3
 8006540:	42a0      	cmp	r0, r4
 8006542:	d005      	beq.n	8006550 <_malloc_r+0xa8>
 8006544:	1a21      	subs	r1, r4, r0
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f808 	bl	800655c <_sbrk_r>
 800654c:	3001      	adds	r0, #1
 800654e:	d0cf      	beq.n	80064f0 <_malloc_r+0x48>
 8006550:	6025      	str	r5, [r4, #0]
 8006552:	e7db      	b.n	800650c <_malloc_r+0x64>
 8006554:	200000d8 	.word	0x200000d8
 8006558:	200000dc 	.word	0x200000dc

0800655c <_sbrk_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	2300      	movs	r3, #0
 8006560:	4c05      	ldr	r4, [pc, #20]	; (8006578 <_sbrk_r+0x1c>)
 8006562:	4605      	mov	r5, r0
 8006564:	4608      	mov	r0, r1
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	f7fc fc1a 	bl	8002da0 <_sbrk>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_sbrk_r+0x1a>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	b103      	cbz	r3, 8006576 <_sbrk_r+0x1a>
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000438 	.word	0x20000438

0800657c <strcpy>:
 800657c:	4603      	mov	r3, r0
 800657e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006582:	f803 2b01 	strb.w	r2, [r3], #1
 8006586:	2a00      	cmp	r2, #0
 8006588:	d1f9      	bne.n	800657e <strcpy+0x2>
 800658a:	4770      	bx	lr

0800658c <quorem>:
 800658c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	6903      	ldr	r3, [r0, #16]
 8006592:	690c      	ldr	r4, [r1, #16]
 8006594:	4680      	mov	r8, r0
 8006596:	42a3      	cmp	r3, r4
 8006598:	f2c0 8084 	blt.w	80066a4 <quorem+0x118>
 800659c:	3c01      	subs	r4, #1
 800659e:	f101 0714 	add.w	r7, r1, #20
 80065a2:	f100 0614 	add.w	r6, r0, #20
 80065a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80065aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80065ae:	3501      	adds	r5, #1
 80065b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80065b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80065b8:	eb06 030c 	add.w	r3, r6, ip
 80065bc:	eb07 090c 	add.w	r9, r7, ip
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	b39d      	cbz	r5, 800662c <quorem+0xa0>
 80065c4:	f04f 0a00 	mov.w	sl, #0
 80065c8:	4638      	mov	r0, r7
 80065ca:	46b6      	mov	lr, r6
 80065cc:	46d3      	mov	fp, sl
 80065ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80065d2:	b293      	uxth	r3, r2
 80065d4:	fb05 a303 	mla	r3, r5, r3, sl
 80065d8:	0c12      	lsrs	r2, r2, #16
 80065da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065de:	fb05 a202 	mla	r2, r5, r2, sl
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ebab 0303 	sub.w	r3, fp, r3
 80065e8:	f8de b000 	ldr.w	fp, [lr]
 80065ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80065f0:	fa1f fb8b 	uxth.w	fp, fp
 80065f4:	445b      	add	r3, fp
 80065f6:	fa1f fb82 	uxth.w	fp, r2
 80065fa:	f8de 2000 	ldr.w	r2, [lr]
 80065fe:	4581      	cmp	r9, r0
 8006600:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800660e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006612:	f84e 3b04 	str.w	r3, [lr], #4
 8006616:	d2da      	bcs.n	80065ce <quorem+0x42>
 8006618:	f856 300c 	ldr.w	r3, [r6, ip]
 800661c:	b933      	cbnz	r3, 800662c <quorem+0xa0>
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	3b04      	subs	r3, #4
 8006622:	429e      	cmp	r6, r3
 8006624:	461a      	mov	r2, r3
 8006626:	d331      	bcc.n	800668c <quorem+0x100>
 8006628:	f8c8 4010 	str.w	r4, [r8, #16]
 800662c:	4640      	mov	r0, r8
 800662e:	f7ff fe49 	bl	80062c4 <__mcmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	db26      	blt.n	8006684 <quorem+0xf8>
 8006636:	4630      	mov	r0, r6
 8006638:	f04f 0c00 	mov.w	ip, #0
 800663c:	3501      	adds	r5, #1
 800663e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006642:	f8d0 e000 	ldr.w	lr, [r0]
 8006646:	b28b      	uxth	r3, r1
 8006648:	ebac 0303 	sub.w	r3, ip, r3
 800664c:	fa1f f28e 	uxth.w	r2, lr
 8006650:	4413      	add	r3, r2
 8006652:	0c0a      	lsrs	r2, r1, #16
 8006654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006662:	45b9      	cmp	r9, r7
 8006664:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006668:	f840 3b04 	str.w	r3, [r0], #4
 800666c:	d2e7      	bcs.n	800663e <quorem+0xb2>
 800666e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006672:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006676:	b92a      	cbnz	r2, 8006684 <quorem+0xf8>
 8006678:	3b04      	subs	r3, #4
 800667a:	429e      	cmp	r6, r3
 800667c:	461a      	mov	r2, r3
 800667e:	d30b      	bcc.n	8006698 <quorem+0x10c>
 8006680:	f8c8 4010 	str.w	r4, [r8, #16]
 8006684:	4628      	mov	r0, r5
 8006686:	b003      	add	sp, #12
 8006688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	3b04      	subs	r3, #4
 8006690:	2a00      	cmp	r2, #0
 8006692:	d1c9      	bne.n	8006628 <quorem+0x9c>
 8006694:	3c01      	subs	r4, #1
 8006696:	e7c4      	b.n	8006622 <quorem+0x96>
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	3b04      	subs	r3, #4
 800669c:	2a00      	cmp	r2, #0
 800669e:	d1ef      	bne.n	8006680 <quorem+0xf4>
 80066a0:	3c01      	subs	r4, #1
 80066a2:	e7ea      	b.n	800667a <quorem+0xee>
 80066a4:	2000      	movs	r0, #0
 80066a6:	e7ee      	b.n	8006686 <quorem+0xfa>

080066a8 <_dtoa_r>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	4616      	mov	r6, r2
 80066ae:	461f      	mov	r7, r3
 80066b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066b2:	b095      	sub	sp, #84	; 0x54
 80066b4:	4604      	mov	r4, r0
 80066b6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80066ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80066be:	b93d      	cbnz	r5, 80066d0 <_dtoa_r+0x28>
 80066c0:	2010      	movs	r0, #16
 80066c2:	f000 fda5 	bl	8007210 <malloc>
 80066c6:	6260      	str	r0, [r4, #36]	; 0x24
 80066c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066cc:	6005      	str	r5, [r0, #0]
 80066ce:	60c5      	str	r5, [r0, #12]
 80066d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	b151      	cbz	r1, 80066ec <_dtoa_r+0x44>
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	2301      	movs	r3, #1
 80066da:	4093      	lsls	r3, r2
 80066dc:	604a      	str	r2, [r1, #4]
 80066de:	608b      	str	r3, [r1, #8]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7ff fc0f 	bl	8005f04 <_Bfree>
 80066e6:	2200      	movs	r2, #0
 80066e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	1e3b      	subs	r3, r7, #0
 80066ee:	bfaf      	iteee	ge
 80066f0:	2300      	movge	r3, #0
 80066f2:	2201      	movlt	r2, #1
 80066f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	9303      	strlt	r3, [sp, #12]
 80066fa:	bfac      	ite	ge
 80066fc:	f8c8 3000 	strge.w	r3, [r8]
 8006700:	f8c8 2000 	strlt.w	r2, [r8]
 8006704:	4bae      	ldr	r3, [pc, #696]	; (80069c0 <_dtoa_r+0x318>)
 8006706:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800670a:	ea33 0308 	bics.w	r3, r3, r8
 800670e:	d11b      	bne.n	8006748 <_dtoa_r+0xa0>
 8006710:	f242 730f 	movw	r3, #9999	; 0x270f
 8006714:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	b923      	cbnz	r3, 8006726 <_dtoa_r+0x7e>
 800671c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006720:	2800      	cmp	r0, #0
 8006722:	f000 8545 	beq.w	80071b0 <_dtoa_r+0xb08>
 8006726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006728:	b953      	cbnz	r3, 8006740 <_dtoa_r+0x98>
 800672a:	4ba6      	ldr	r3, [pc, #664]	; (80069c4 <_dtoa_r+0x31c>)
 800672c:	e021      	b.n	8006772 <_dtoa_r+0xca>
 800672e:	4ba6      	ldr	r3, [pc, #664]	; (80069c8 <_dtoa_r+0x320>)
 8006730:	9306      	str	r3, [sp, #24]
 8006732:	3308      	adds	r3, #8
 8006734:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	9806      	ldr	r0, [sp, #24]
 800673a:	b015      	add	sp, #84	; 0x54
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	4ba0      	ldr	r3, [pc, #640]	; (80069c4 <_dtoa_r+0x31c>)
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	3303      	adds	r3, #3
 8006746:	e7f5      	b.n	8006734 <_dtoa_r+0x8c>
 8006748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	2300      	movs	r3, #0
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	f7fa f920 	bl	8000998 <__aeabi_dcmpeq>
 8006758:	4682      	mov	sl, r0
 800675a:	b160      	cbz	r0, 8006776 <_dtoa_r+0xce>
 800675c:	2301      	movs	r3, #1
 800675e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8520 	beq.w	80071aa <_dtoa_r+0xb02>
 800676a:	4b98      	ldr	r3, [pc, #608]	; (80069cc <_dtoa_r+0x324>)
 800676c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	9306      	str	r3, [sp, #24]
 8006774:	e7e0      	b.n	8006738 <_dtoa_r+0x90>
 8006776:	ab12      	add	r3, sp, #72	; 0x48
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	ab13      	add	r3, sp, #76	; 0x4c
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4632      	mov	r2, r6
 8006780:	463b      	mov	r3, r7
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fe16 	bl	80063b4 <__d2b>
 8006788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800678c:	4683      	mov	fp, r0
 800678e:	2d00      	cmp	r5, #0
 8006790:	d07d      	beq.n	800688e <_dtoa_r+0x1e6>
 8006792:	46b0      	mov	r8, r6
 8006794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006798:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800679c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80067a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80067a8:	2200      	movs	r2, #0
 80067aa:	4b89      	ldr	r3, [pc, #548]	; (80069d0 <_dtoa_r+0x328>)
 80067ac:	4640      	mov	r0, r8
 80067ae:	4649      	mov	r1, r9
 80067b0:	f7f9 fcd2 	bl	8000158 <__aeabi_dsub>
 80067b4:	a37c      	add	r3, pc, #496	; (adr r3, 80069a8 <_dtoa_r+0x300>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 fe85 	bl	80004c8 <__aeabi_dmul>
 80067be:	a37c      	add	r3, pc, #496	; (adr r3, 80069b0 <_dtoa_r+0x308>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7f9 fcca 	bl	800015c <__adddf3>
 80067c8:	4606      	mov	r6, r0
 80067ca:	4628      	mov	r0, r5
 80067cc:	460f      	mov	r7, r1
 80067ce:	f7f9 fe11 	bl	80003f4 <__aeabi_i2d>
 80067d2:	a379      	add	r3, pc, #484	; (adr r3, 80069b8 <_dtoa_r+0x310>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fe76 	bl	80004c8 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fcba 	bl	800015c <__adddf3>
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	f7fa f91c 	bl	8000a28 <__aeabi_d2iz>
 80067f0:	2200      	movs	r2, #0
 80067f2:	4682      	mov	sl, r0
 80067f4:	2300      	movs	r3, #0
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f8d7 	bl	80009ac <__aeabi_dcmplt>
 80067fe:	b148      	cbz	r0, 8006814 <_dtoa_r+0x16c>
 8006800:	4650      	mov	r0, sl
 8006802:	f7f9 fdf7 	bl	80003f4 <__aeabi_i2d>
 8006806:	4632      	mov	r2, r6
 8006808:	463b      	mov	r3, r7
 800680a:	f7fa f8c5 	bl	8000998 <__aeabi_dcmpeq>
 800680e:	b908      	cbnz	r0, 8006814 <_dtoa_r+0x16c>
 8006810:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006814:	f1ba 0f16 	cmp.w	sl, #22
 8006818:	d85a      	bhi.n	80068d0 <_dtoa_r+0x228>
 800681a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800681e:	496d      	ldr	r1, [pc, #436]	; (80069d4 <_dtoa_r+0x32c>)
 8006820:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006828:	f7fa f8de 	bl	80009e8 <__aeabi_dcmpgt>
 800682c:	2800      	cmp	r0, #0
 800682e:	d051      	beq.n	80068d4 <_dtoa_r+0x22c>
 8006830:	2300      	movs	r3, #0
 8006832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006836:	930d      	str	r3, [sp, #52]	; 0x34
 8006838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800683a:	1b5d      	subs	r5, r3, r5
 800683c:	1e6b      	subs	r3, r5, #1
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	bf43      	ittte	mi
 8006842:	2300      	movmi	r3, #0
 8006844:	f1c5 0901 	rsbmi	r9, r5, #1
 8006848:	9307      	strmi	r3, [sp, #28]
 800684a:	f04f 0900 	movpl.w	r9, #0
 800684e:	f1ba 0f00 	cmp.w	sl, #0
 8006852:	db41      	blt.n	80068d8 <_dtoa_r+0x230>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800685a:	4453      	add	r3, sl
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	2300      	movs	r3, #0
 8006860:	9308      	str	r3, [sp, #32]
 8006862:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006864:	2b09      	cmp	r3, #9
 8006866:	f200 808f 	bhi.w	8006988 <_dtoa_r+0x2e0>
 800686a:	2b05      	cmp	r3, #5
 800686c:	bfc4      	itt	gt
 800686e:	3b04      	subgt	r3, #4
 8006870:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006872:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006874:	bfc8      	it	gt
 8006876:	2500      	movgt	r5, #0
 8006878:	f1a3 0302 	sub.w	r3, r3, #2
 800687c:	bfd8      	it	le
 800687e:	2501      	movle	r5, #1
 8006880:	2b03      	cmp	r3, #3
 8006882:	f200 808d 	bhi.w	80069a0 <_dtoa_r+0x2f8>
 8006886:	e8df f003 	tbb	[pc, r3]
 800688a:	7d7b      	.short	0x7d7b
 800688c:	6f2f      	.short	0x6f2f
 800688e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006892:	441d      	add	r5, r3
 8006894:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006898:	2820      	cmp	r0, #32
 800689a:	dd13      	ble.n	80068c4 <_dtoa_r+0x21c>
 800689c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	fa08 f800 	lsl.w	r8, r8, r0
 80068a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80068aa:	fa23 f000 	lsr.w	r0, r3, r0
 80068ae:	ea48 0000 	orr.w	r0, r8, r0
 80068b2:	f7f9 fd8f 	bl	80003d4 <__aeabi_ui2d>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4680      	mov	r8, r0
 80068ba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80068be:	3d01      	subs	r5, #1
 80068c0:	9310      	str	r3, [sp, #64]	; 0x40
 80068c2:	e771      	b.n	80067a8 <_dtoa_r+0x100>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	f1c0 0020 	rsb	r0, r0, #32
 80068ca:	fa03 f000 	lsl.w	r0, r3, r0
 80068ce:	e7f0      	b.n	80068b2 <_dtoa_r+0x20a>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7b0      	b.n	8006836 <_dtoa_r+0x18e>
 80068d4:	900d      	str	r0, [sp, #52]	; 0x34
 80068d6:	e7af      	b.n	8006838 <_dtoa_r+0x190>
 80068d8:	f1ca 0300 	rsb	r3, sl, #0
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	2300      	movs	r3, #0
 80068e0:	eba9 090a 	sub.w	r9, r9, sl
 80068e4:	930c      	str	r3, [sp, #48]	; 0x30
 80068e6:	e7bc      	b.n	8006862 <_dtoa_r+0x1ba>
 80068e8:	2301      	movs	r3, #1
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dd74      	ble.n	80069dc <_dtoa_r+0x334>
 80068f2:	4698      	mov	r8, r3
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	2200      	movs	r2, #0
 80068f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068fa:	6072      	str	r2, [r6, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	f102 0014 	add.w	r0, r2, #20
 8006902:	4298      	cmp	r0, r3
 8006904:	6871      	ldr	r1, [r6, #4]
 8006906:	d96e      	bls.n	80069e6 <_dtoa_r+0x33e>
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff fac7 	bl	8005e9c <_Balloc>
 800690e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006910:	6030      	str	r0, [r6, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f1b8 0f0e 	cmp.w	r8, #14
 8006918:	9306      	str	r3, [sp, #24]
 800691a:	f200 80ed 	bhi.w	8006af8 <_dtoa_r+0x450>
 800691e:	2d00      	cmp	r5, #0
 8006920:	f000 80ea 	beq.w	8006af8 <_dtoa_r+0x450>
 8006924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006928:	f1ba 0f00 	cmp.w	sl, #0
 800692c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006930:	dd77      	ble.n	8006a22 <_dtoa_r+0x37a>
 8006932:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <_dtoa_r+0x32c>)
 8006934:	f00a 030f 	and.w	r3, sl, #15
 8006938:	ea4f 162a 	mov.w	r6, sl, asr #4
 800693c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006940:	06f0      	lsls	r0, r6, #27
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800694a:	d568      	bpl.n	8006a1e <_dtoa_r+0x376>
 800694c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006950:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <_dtoa_r+0x330>)
 8006952:	2503      	movs	r5, #3
 8006954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006958:	f7f9 fee0 	bl	800071c <__aeabi_ddiv>
 800695c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006960:	f006 060f 	and.w	r6, r6, #15
 8006964:	4f1c      	ldr	r7, [pc, #112]	; (80069d8 <_dtoa_r+0x330>)
 8006966:	e04f      	b.n	8006a08 <_dtoa_r+0x360>
 8006968:	2301      	movs	r3, #1
 800696a:	9309      	str	r3, [sp, #36]	; 0x24
 800696c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800696e:	4453      	add	r3, sl
 8006970:	f103 0801 	add.w	r8, r3, #1
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	4643      	mov	r3, r8
 8006978:	2b01      	cmp	r3, #1
 800697a:	bfb8      	it	lt
 800697c:	2301      	movlt	r3, #1
 800697e:	e7ba      	b.n	80068f6 <_dtoa_r+0x24e>
 8006980:	2300      	movs	r3, #0
 8006982:	e7b2      	b.n	80068ea <_dtoa_r+0x242>
 8006984:	2300      	movs	r3, #0
 8006986:	e7f0      	b.n	800696a <_dtoa_r+0x2c2>
 8006988:	2501      	movs	r5, #1
 800698a:	2300      	movs	r3, #0
 800698c:	9509      	str	r5, [sp, #36]	; 0x24
 800698e:	931e      	str	r3, [sp, #120]	; 0x78
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	2200      	movs	r2, #0
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	4698      	mov	r8, r3
 800699a:	2312      	movs	r3, #18
 800699c:	921f      	str	r2, [sp, #124]	; 0x7c
 800699e:	e7aa      	b.n	80068f6 <_dtoa_r+0x24e>
 80069a0:	2301      	movs	r3, #1
 80069a2:	9309      	str	r3, [sp, #36]	; 0x24
 80069a4:	e7f4      	b.n	8006990 <_dtoa_r+0x2e8>
 80069a6:	bf00      	nop
 80069a8:	636f4361 	.word	0x636f4361
 80069ac:	3fd287a7 	.word	0x3fd287a7
 80069b0:	8b60c8b3 	.word	0x8b60c8b3
 80069b4:	3fc68a28 	.word	0x3fc68a28
 80069b8:	509f79fb 	.word	0x509f79fb
 80069bc:	3fd34413 	.word	0x3fd34413
 80069c0:	7ff00000 	.word	0x7ff00000
 80069c4:	0800970d 	.word	0x0800970d
 80069c8:	08009704 	.word	0x08009704
 80069cc:	08009712 	.word	0x08009712
 80069d0:	3ff80000 	.word	0x3ff80000
 80069d4:	08009630 	.word	0x08009630
 80069d8:	08009608 	.word	0x08009608
 80069dc:	2301      	movs	r3, #1
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	4698      	mov	r8, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	e7da      	b.n	800699c <_dtoa_r+0x2f4>
 80069e6:	3101      	adds	r1, #1
 80069e8:	6071      	str	r1, [r6, #4]
 80069ea:	0052      	lsls	r2, r2, #1
 80069ec:	e787      	b.n	80068fe <_dtoa_r+0x256>
 80069ee:	07f1      	lsls	r1, r6, #31
 80069f0:	d508      	bpl.n	8006a04 <_dtoa_r+0x35c>
 80069f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fa:	f7f9 fd65 	bl	80004c8 <__aeabi_dmul>
 80069fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a02:	3501      	adds	r5, #1
 8006a04:	1076      	asrs	r6, r6, #1
 8006a06:	3708      	adds	r7, #8
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	d1f0      	bne.n	80069ee <_dtoa_r+0x346>
 8006a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a14:	f7f9 fe82 	bl	800071c <__aeabi_ddiv>
 8006a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1c:	e01b      	b.n	8006a56 <_dtoa_r+0x3ae>
 8006a1e:	2502      	movs	r5, #2
 8006a20:	e7a0      	b.n	8006964 <_dtoa_r+0x2bc>
 8006a22:	f000 80a4 	beq.w	8006b6e <_dtoa_r+0x4c6>
 8006a26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a2a:	f1ca 0600 	rsb	r6, sl, #0
 8006a2e:	4ba0      	ldr	r3, [pc, #640]	; (8006cb0 <_dtoa_r+0x608>)
 8006a30:	f006 020f 	and.w	r2, r6, #15
 8006a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7f9 fd44 	bl	80004c8 <__aeabi_dmul>
 8006a40:	2502      	movs	r5, #2
 8006a42:	2300      	movs	r3, #0
 8006a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a48:	4f9a      	ldr	r7, [pc, #616]	; (8006cb4 <_dtoa_r+0x60c>)
 8006a4a:	1136      	asrs	r6, r6, #4
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	f040 8083 	bne.w	8006b58 <_dtoa_r+0x4b0>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e0      	bne.n	8006a18 <_dtoa_r+0x370>
 8006a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 808a 	beq.w	8006b72 <_dtoa_r+0x4ca>
 8006a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4b92      	ldr	r3, [pc, #584]	; (8006cb8 <_dtoa_r+0x610>)
 8006a6e:	f7f9 ff9d 	bl	80009ac <__aeabi_dcmplt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d07d      	beq.n	8006b72 <_dtoa_r+0x4ca>
 8006a76:	f1b8 0f00 	cmp.w	r8, #0
 8006a7a:	d07a      	beq.n	8006b72 <_dtoa_r+0x4ca>
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd36      	ble.n	8006af0 <_dtoa_r+0x448>
 8006a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a86:	2200      	movs	r2, #0
 8006a88:	4b8c      	ldr	r3, [pc, #560]	; (8006cbc <_dtoa_r+0x614>)
 8006a8a:	f7f9 fd1d 	bl	80004c8 <__aeabi_dmul>
 8006a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a92:	9e04      	ldr	r6, [sp, #16]
 8006a94:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006a98:	3501      	adds	r5, #1
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7f9 fcaa 	bl	80003f4 <__aeabi_i2d>
 8006aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa4:	f7f9 fd10 	bl	80004c8 <__aeabi_dmul>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4b85      	ldr	r3, [pc, #532]	; (8006cc0 <_dtoa_r+0x618>)
 8006aac:	f7f9 fb56 	bl	800015c <__adddf3>
 8006ab0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006ab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ab8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	d15c      	bne.n	8006b78 <_dtoa_r+0x4d0>
 8006abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	4b7f      	ldr	r3, [pc, #508]	; (8006cc4 <_dtoa_r+0x61c>)
 8006ac6:	f7f9 fb47 	bl	8000158 <__aeabi_dsub>
 8006aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006acc:	462b      	mov	r3, r5
 8006ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad2:	f7f9 ff89 	bl	80009e8 <__aeabi_dcmpgt>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f040 8281 	bne.w	8006fde <_dtoa_r+0x936>
 8006adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006ae6:	f7f9 ff61 	bl	80009ac <__aeabi_dcmplt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 8275 	bne.w	8006fda <_dtoa_r+0x932>
 8006af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f2c0 814b 	blt.w	8006d96 <_dtoa_r+0x6ee>
 8006b00:	f1ba 0f0e 	cmp.w	sl, #14
 8006b04:	f300 8147 	bgt.w	8006d96 <_dtoa_r+0x6ee>
 8006b08:	4b69      	ldr	r3, [pc, #420]	; (8006cb0 <_dtoa_r+0x608>)
 8006b0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f280 80d7 	bge.w	8006ccc <_dtoa_r+0x624>
 8006b1e:	f1b8 0f00 	cmp.w	r8, #0
 8006b22:	f300 80d3 	bgt.w	8006ccc <_dtoa_r+0x624>
 8006b26:	f040 8257 	bne.w	8006fd8 <_dtoa_r+0x930>
 8006b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4b64      	ldr	r3, [pc, #400]	; (8006cc4 <_dtoa_r+0x61c>)
 8006b32:	f7f9 fcc9 	bl	80004c8 <__aeabi_dmul>
 8006b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b3a:	f7f9 ff4b 	bl	80009d4 <__aeabi_dcmpge>
 8006b3e:	4646      	mov	r6, r8
 8006b40:	4647      	mov	r7, r8
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f040 822d 	bne.w	8006fa2 <_dtoa_r+0x8fa>
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	9a06      	ldr	r2, [sp, #24]
 8006b4c:	1c5d      	adds	r5, r3, #1
 8006b4e:	2331      	movs	r3, #49	; 0x31
 8006b50:	f10a 0a01 	add.w	sl, sl, #1
 8006b54:	7013      	strb	r3, [r2, #0]
 8006b56:	e228      	b.n	8006faa <_dtoa_r+0x902>
 8006b58:	07f2      	lsls	r2, r6, #31
 8006b5a:	d505      	bpl.n	8006b68 <_dtoa_r+0x4c0>
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	f7f9 fcb2 	bl	80004c8 <__aeabi_dmul>
 8006b64:	2301      	movs	r3, #1
 8006b66:	3501      	adds	r5, #1
 8006b68:	1076      	asrs	r6, r6, #1
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	e76e      	b.n	8006a4c <_dtoa_r+0x3a4>
 8006b6e:	2502      	movs	r5, #2
 8006b70:	e771      	b.n	8006a56 <_dtoa_r+0x3ae>
 8006b72:	4657      	mov	r7, sl
 8006b74:	4646      	mov	r6, r8
 8006b76:	e790      	b.n	8006a9a <_dtoa_r+0x3f2>
 8006b78:	4b4d      	ldr	r3, [pc, #308]	; (8006cb0 <_dtoa_r+0x608>)
 8006b7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b7e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d048      	beq.n	8006c1a <_dtoa_r+0x572>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	494e      	ldr	r1, [pc, #312]	; (8006cc8 <_dtoa_r+0x620>)
 8006b90:	f7f9 fdc4 	bl	800071c <__aeabi_ddiv>
 8006b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b98:	f7f9 fade 	bl	8000158 <__aeabi_dsub>
 8006b9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ba0:	9d06      	ldr	r5, [sp, #24]
 8006ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba6:	f7f9 ff3f 	bl	8000a28 <__aeabi_d2iz>
 8006baa:	9011      	str	r0, [sp, #68]	; 0x44
 8006bac:	f7f9 fc22 	bl	80003f4 <__aeabi_i2d>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb8:	f7f9 face 	bl	8000158 <__aeabi_dsub>
 8006bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc2:	3330      	adds	r3, #48	; 0x30
 8006bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8006bc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bcc:	f7f9 feee 	bl	80009ac <__aeabi_dcmplt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d163      	bne.n	8006c9c <_dtoa_r+0x5f4>
 8006bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4937      	ldr	r1, [pc, #220]	; (8006cb8 <_dtoa_r+0x610>)
 8006bdc:	f7f9 fabc 	bl	8000158 <__aeabi_dsub>
 8006be0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006be4:	f7f9 fee2 	bl	80009ac <__aeabi_dcmplt>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f040 80b5 	bne.w	8006d58 <_dtoa_r+0x6b0>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	1aeb      	subs	r3, r5, r3
 8006bf2:	429e      	cmp	r6, r3
 8006bf4:	f77f af7c 	ble.w	8006af0 <_dtoa_r+0x448>
 8006bf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	; (8006cbc <_dtoa_r+0x614>)
 8006c00:	f7f9 fc62 	bl	80004c8 <__aeabi_dmul>
 8006c04:	2200      	movs	r2, #0
 8006c06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0e:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <_dtoa_r+0x614>)
 8006c10:	f7f9 fc5a 	bl	80004c8 <__aeabi_dmul>
 8006c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c18:	e7c3      	b.n	8006ba2 <_dtoa_r+0x4fa>
 8006c1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c1e:	f7f9 fc53 	bl	80004c8 <__aeabi_dmul>
 8006c22:	9b06      	ldr	r3, [sp, #24]
 8006c24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c28:	199d      	adds	r5, r3, r6
 8006c2a:	461e      	mov	r6, r3
 8006c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c30:	f7f9 fefa 	bl	8000a28 <__aeabi_d2iz>
 8006c34:	9011      	str	r0, [sp, #68]	; 0x44
 8006c36:	f7f9 fbdd 	bl	80003f4 <__aeabi_i2d>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c42:	f7f9 fa89 	bl	8000158 <__aeabi_dsub>
 8006c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4c:	3330      	adds	r3, #48	; 0x30
 8006c4e:	f806 3b01 	strb.w	r3, [r6], #1
 8006c52:	42ae      	cmp	r6, r5
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	d124      	bne.n	8006ca4 <_dtoa_r+0x5fc>
 8006c5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <_dtoa_r+0x620>)
 8006c60:	f7f9 fa7c 	bl	800015c <__adddf3>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6c:	f7f9 febc 	bl	80009e8 <__aeabi_dcmpgt>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d171      	bne.n	8006d58 <_dtoa_r+0x6b0>
 8006c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c78:	2000      	movs	r0, #0
 8006c7a:	4913      	ldr	r1, [pc, #76]	; (8006cc8 <_dtoa_r+0x620>)
 8006c7c:	f7f9 fa6c 	bl	8000158 <__aeabi_dsub>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c88:	f7f9 fe90 	bl	80009ac <__aeabi_dcmplt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f af2f 	beq.w	8006af0 <_dtoa_r+0x448>
 8006c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c96:	1e6a      	subs	r2, r5, #1
 8006c98:	2b30      	cmp	r3, #48	; 0x30
 8006c9a:	d001      	beq.n	8006ca0 <_dtoa_r+0x5f8>
 8006c9c:	46ba      	mov	sl, r7
 8006c9e:	e04a      	b.n	8006d36 <_dtoa_r+0x68e>
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	e7f6      	b.n	8006c92 <_dtoa_r+0x5ea>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <_dtoa_r+0x614>)
 8006ca6:	f7f9 fc0f 	bl	80004c8 <__aeabi_dmul>
 8006caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cae:	e7bd      	b.n	8006c2c <_dtoa_r+0x584>
 8006cb0:	08009630 	.word	0x08009630
 8006cb4:	08009608 	.word	0x08009608
 8006cb8:	3ff00000 	.word	0x3ff00000
 8006cbc:	40240000 	.word	0x40240000
 8006cc0:	401c0000 	.word	0x401c0000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	3fe00000 	.word	0x3fe00000
 8006ccc:	9d06      	ldr	r5, [sp, #24]
 8006cce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fd1f 	bl	800071c <__aeabi_ddiv>
 8006cde:	f7f9 fea3 	bl	8000a28 <__aeabi_d2iz>
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	f7f9 fb86 	bl	80003f4 <__aeabi_i2d>
 8006ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cec:	f7f9 fbec 	bl	80004c8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fa2e 	bl	8000158 <__aeabi_dsub>
 8006cfc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006d00:	f805 6b01 	strb.w	r6, [r5], #1
 8006d04:	9e06      	ldr	r6, [sp, #24]
 8006d06:	4602      	mov	r2, r0
 8006d08:	1bae      	subs	r6, r5, r6
 8006d0a:	45b0      	cmp	r8, r6
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	d135      	bne.n	8006d7c <_dtoa_r+0x6d4>
 8006d10:	f7f9 fa24 	bl	800015c <__adddf3>
 8006d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d18:	4606      	mov	r6, r0
 8006d1a:	460f      	mov	r7, r1
 8006d1c:	f7f9 fe64 	bl	80009e8 <__aeabi_dcmpgt>
 8006d20:	b9c8      	cbnz	r0, 8006d56 <_dtoa_r+0x6ae>
 8006d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 fe35 	bl	8000998 <__aeabi_dcmpeq>
 8006d2e:	b110      	cbz	r0, 8006d36 <_dtoa_r+0x68e>
 8006d30:	f019 0f01 	tst.w	r9, #1
 8006d34:	d10f      	bne.n	8006d56 <_dtoa_r+0x6ae>
 8006d36:	4659      	mov	r1, fp
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff f8e3 	bl	8005f04 <_Bfree>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d42:	702b      	strb	r3, [r5, #0]
 8006d44:	f10a 0301 	add.w	r3, sl, #1
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f43f acf3 	beq.w	8006738 <_dtoa_r+0x90>
 8006d52:	601d      	str	r5, [r3, #0]
 8006d54:	e4f0      	b.n	8006738 <_dtoa_r+0x90>
 8006d56:	4657      	mov	r7, sl
 8006d58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d5c:	1e6b      	subs	r3, r5, #1
 8006d5e:	2a39      	cmp	r2, #57	; 0x39
 8006d60:	d106      	bne.n	8006d70 <_dtoa_r+0x6c8>
 8006d62:	9a06      	ldr	r2, [sp, #24]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d107      	bne.n	8006d78 <_dtoa_r+0x6d0>
 8006d68:	2330      	movs	r3, #48	; 0x30
 8006d6a:	7013      	strb	r3, [r2, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	3701      	adds	r7, #1
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	3201      	adds	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e791      	b.n	8006c9c <_dtoa_r+0x5f4>
 8006d78:	461d      	mov	r5, r3
 8006d7a:	e7ed      	b.n	8006d58 <_dtoa_r+0x6b0>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4b99      	ldr	r3, [pc, #612]	; (8006fe4 <_dtoa_r+0x93c>)
 8006d80:	f7f9 fba2 	bl	80004c8 <__aeabi_dmul>
 8006d84:	2200      	movs	r2, #0
 8006d86:	2300      	movs	r3, #0
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	f7f9 fe04 	bl	8000998 <__aeabi_dcmpeq>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d09e      	beq.n	8006cd2 <_dtoa_r+0x62a>
 8006d94:	e7cf      	b.n	8006d36 <_dtoa_r+0x68e>
 8006d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	f000 8088 	beq.w	8006eae <_dtoa_r+0x806>
 8006d9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006da0:	2a01      	cmp	r2, #1
 8006da2:	dc6d      	bgt.n	8006e80 <_dtoa_r+0x7d8>
 8006da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	d066      	beq.n	8006e78 <_dtoa_r+0x7d0>
 8006daa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dae:	464d      	mov	r5, r9
 8006db0:	9e08      	ldr	r6, [sp, #32]
 8006db2:	9a07      	ldr	r2, [sp, #28]
 8006db4:	2101      	movs	r1, #1
 8006db6:	441a      	add	r2, r3
 8006db8:	4620      	mov	r0, r4
 8006dba:	4499      	add	r9, r3
 8006dbc:	9207      	str	r2, [sp, #28]
 8006dbe:	f7ff f941 	bl	8006044 <__i2b>
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	dd0b      	ble.n	8006de0 <_dtoa_r+0x738>
 8006dc8:	9b07      	ldr	r3, [sp, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dd08      	ble.n	8006de0 <_dtoa_r+0x738>
 8006dce:	42ab      	cmp	r3, r5
 8006dd0:	bfa8      	it	ge
 8006dd2:	462b      	movge	r3, r5
 8006dd4:	9a07      	ldr	r2, [sp, #28]
 8006dd6:	eba9 0903 	sub.w	r9, r9, r3
 8006dda:	1aed      	subs	r5, r5, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	b1eb      	cbz	r3, 8006e20 <_dtoa_r+0x778>
 8006de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d065      	beq.n	8006eb6 <_dtoa_r+0x80e>
 8006dea:	b18e      	cbz	r6, 8006e10 <_dtoa_r+0x768>
 8006dec:	4639      	mov	r1, r7
 8006dee:	4632      	mov	r2, r6
 8006df0:	4620      	mov	r0, r4
 8006df2:	f7ff f9c5 	bl	8006180 <__pow5mult>
 8006df6:	465a      	mov	r2, fp
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff f92a 	bl	8006056 <__multiply>
 8006e02:	4659      	mov	r1, fp
 8006e04:	900a      	str	r0, [sp, #40]	; 0x28
 8006e06:	4620      	mov	r0, r4
 8006e08:	f7ff f87c 	bl	8005f04 <_Bfree>
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0e:	469b      	mov	fp, r3
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	1b9a      	subs	r2, r3, r6
 8006e14:	d004      	beq.n	8006e20 <_dtoa_r+0x778>
 8006e16:	4659      	mov	r1, fp
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff f9b1 	bl	8006180 <__pow5mult>
 8006e1e:	4683      	mov	fp, r0
 8006e20:	2101      	movs	r1, #1
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff f90e 	bl	8006044 <__i2b>
 8006e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 81c6 	beq.w	80071be <_dtoa_r+0xb16>
 8006e32:	461a      	mov	r2, r3
 8006e34:	4601      	mov	r1, r0
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7ff f9a2 	bl	8006180 <__pow5mult>
 8006e3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e3e:	4606      	mov	r6, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	dc3e      	bgt.n	8006ec2 <_dtoa_r+0x81a>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d137      	bne.n	8006eba <_dtoa_r+0x812>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d134      	bne.n	8006ebe <_dtoa_r+0x816>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e5a:	0d1b      	lsrs	r3, r3, #20
 8006e5c:	051b      	lsls	r3, r3, #20
 8006e5e:	b12b      	cbz	r3, 8006e6c <_dtoa_r+0x7c4>
 8006e60:	9b07      	ldr	r3, [sp, #28]
 8006e62:	f109 0901 	add.w	r9, r9, #1
 8006e66:	3301      	adds	r3, #1
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	9308      	str	r3, [sp, #32]
 8006e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d128      	bne.n	8006ec6 <_dtoa_r+0x81e>
 8006e74:	2001      	movs	r0, #1
 8006e76:	e02e      	b.n	8006ed6 <_dtoa_r+0x82e>
 8006e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e7e:	e796      	b.n	8006dae <_dtoa_r+0x706>
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	f108 36ff 	add.w	r6, r8, #4294967295
 8006e86:	42b3      	cmp	r3, r6
 8006e88:	bfb7      	itett	lt
 8006e8a:	9b08      	ldrlt	r3, [sp, #32]
 8006e8c:	1b9e      	subge	r6, r3, r6
 8006e8e:	1af2      	sublt	r2, r6, r3
 8006e90:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006e92:	bfbf      	itttt	lt
 8006e94:	9608      	strlt	r6, [sp, #32]
 8006e96:	189b      	addlt	r3, r3, r2
 8006e98:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006e9a:	2600      	movlt	r6, #0
 8006e9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ea0:	bfb9      	ittee	lt
 8006ea2:	eba9 0508 	sublt.w	r5, r9, r8
 8006ea6:	2300      	movlt	r3, #0
 8006ea8:	464d      	movge	r5, r9
 8006eaa:	4643      	movge	r3, r8
 8006eac:	e781      	b.n	8006db2 <_dtoa_r+0x70a>
 8006eae:	9e08      	ldr	r6, [sp, #32]
 8006eb0:	464d      	mov	r5, r9
 8006eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006eb4:	e786      	b.n	8006dc4 <_dtoa_r+0x71c>
 8006eb6:	9a08      	ldr	r2, [sp, #32]
 8006eb8:	e7ad      	b.n	8006e16 <_dtoa_r+0x76e>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e7d6      	b.n	8006e6c <_dtoa_r+0x7c4>
 8006ebe:	9b02      	ldr	r3, [sp, #8]
 8006ec0:	e7d4      	b.n	8006e6c <_dtoa_r+0x7c4>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9308      	str	r3, [sp, #32]
 8006ec6:	6933      	ldr	r3, [r6, #16]
 8006ec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ecc:	6918      	ldr	r0, [r3, #16]
 8006ece:	f7ff f86b 	bl	8005fa8 <__hi0bits>
 8006ed2:	f1c0 0020 	rsb	r0, r0, #32
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	4418      	add	r0, r3
 8006eda:	f010 001f 	ands.w	r0, r0, #31
 8006ede:	d047      	beq.n	8006f70 <_dtoa_r+0x8c8>
 8006ee0:	f1c0 0320 	rsb	r3, r0, #32
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	dd3b      	ble.n	8006f60 <_dtoa_r+0x8b8>
 8006ee8:	9b07      	ldr	r3, [sp, #28]
 8006eea:	f1c0 001c 	rsb	r0, r0, #28
 8006eee:	4481      	add	r9, r0
 8006ef0:	4405      	add	r5, r0
 8006ef2:	4403      	add	r3, r0
 8006ef4:	9307      	str	r3, [sp, #28]
 8006ef6:	f1b9 0f00 	cmp.w	r9, #0
 8006efa:	dd05      	ble.n	8006f08 <_dtoa_r+0x860>
 8006efc:	4659      	mov	r1, fp
 8006efe:	464a      	mov	r2, r9
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7ff f98b 	bl	800621c <__lshift>
 8006f06:	4683      	mov	fp, r0
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dd05      	ble.n	8006f1a <_dtoa_r+0x872>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	461a      	mov	r2, r3
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff f982 	bl	800621c <__lshift>
 8006f18:	4606      	mov	r6, r0
 8006f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f1c:	b353      	cbz	r3, 8006f74 <_dtoa_r+0x8cc>
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4658      	mov	r0, fp
 8006f22:	f7ff f9cf 	bl	80062c4 <__mcmp>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	da24      	bge.n	8006f74 <_dtoa_r+0x8cc>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	220a      	movs	r2, #10
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7fe fffe 	bl	8005f32 <__multadd>
 8006f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f3c:	4683      	mov	fp, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8144 	beq.w	80071cc <_dtoa_r+0xb24>
 8006f44:	2300      	movs	r3, #0
 8006f46:	4639      	mov	r1, r7
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7fe fff1 	bl	8005f32 <__multadd>
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	4607      	mov	r7, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dc4d      	bgt.n	8006ff4 <_dtoa_r+0x94c>
 8006f58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	dd4a      	ble.n	8006ff4 <_dtoa_r+0x94c>
 8006f5e:	e011      	b.n	8006f84 <_dtoa_r+0x8dc>
 8006f60:	d0c9      	beq.n	8006ef6 <_dtoa_r+0x84e>
 8006f62:	9a07      	ldr	r2, [sp, #28]
 8006f64:	331c      	adds	r3, #28
 8006f66:	441a      	add	r2, r3
 8006f68:	4499      	add	r9, r3
 8006f6a:	441d      	add	r5, r3
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	e7c1      	b.n	8006ef4 <_dtoa_r+0x84c>
 8006f70:	4603      	mov	r3, r0
 8006f72:	e7f6      	b.n	8006f62 <_dtoa_r+0x8ba>
 8006f74:	f1b8 0f00 	cmp.w	r8, #0
 8006f78:	dc36      	bgt.n	8006fe8 <_dtoa_r+0x940>
 8006f7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	dd33      	ble.n	8006fe8 <_dtoa_r+0x940>
 8006f80:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	b963      	cbnz	r3, 8006fa2 <_dtoa_r+0x8fa>
 8006f88:	4631      	mov	r1, r6
 8006f8a:	2205      	movs	r2, #5
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f7fe ffd0 	bl	8005f32 <__multadd>
 8006f92:	4601      	mov	r1, r0
 8006f94:	4606      	mov	r6, r0
 8006f96:	4658      	mov	r0, fp
 8006f98:	f7ff f994 	bl	80062c4 <__mcmp>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f73f add3 	bgt.w	8006b48 <_dtoa_r+0x4a0>
 8006fa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fa4:	9d06      	ldr	r5, [sp, #24]
 8006fa6:	ea6f 0a03 	mvn.w	sl, r3
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7fe ffa7 	bl	8005f04 <_Bfree>
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	f43f aebd 	beq.w	8006d36 <_dtoa_r+0x68e>
 8006fbc:	f1b9 0f00 	cmp.w	r9, #0
 8006fc0:	d005      	beq.n	8006fce <_dtoa_r+0x926>
 8006fc2:	45b9      	cmp	r9, r7
 8006fc4:	d003      	beq.n	8006fce <_dtoa_r+0x926>
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7fe ff9b 	bl	8005f04 <_Bfree>
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7fe ff97 	bl	8005f04 <_Bfree>
 8006fd6:	e6ae      	b.n	8006d36 <_dtoa_r+0x68e>
 8006fd8:	2600      	movs	r6, #0
 8006fda:	4637      	mov	r7, r6
 8006fdc:	e7e1      	b.n	8006fa2 <_dtoa_r+0x8fa>
 8006fde:	46ba      	mov	sl, r7
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	e5b1      	b.n	8006b48 <_dtoa_r+0x4a0>
 8006fe4:	40240000 	.word	0x40240000
 8006fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fea:	f8cd 8010 	str.w	r8, [sp, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 80f3 	beq.w	80071da <_dtoa_r+0xb32>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	dd05      	ble.n	8007004 <_dtoa_r+0x95c>
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f7ff f90d 	bl	800621c <__lshift>
 8007002:	4607      	mov	r7, r0
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d04c      	beq.n	80070a4 <_dtoa_r+0x9fc>
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4620      	mov	r0, r4
 800700e:	f7fe ff45 	bl	8005e9c <_Balloc>
 8007012:	4605      	mov	r5, r0
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	f107 010c 	add.w	r1, r7, #12
 800701a:	3202      	adds	r2, #2
 800701c:	0092      	lsls	r2, r2, #2
 800701e:	300c      	adds	r0, #12
 8007020:	f7fe fda6 	bl	8005b70 <memcpy>
 8007024:	2201      	movs	r2, #1
 8007026:	4629      	mov	r1, r5
 8007028:	4620      	mov	r0, r4
 800702a:	f7ff f8f7 	bl	800621c <__lshift>
 800702e:	46b9      	mov	r9, r7
 8007030:	4607      	mov	r7, r0
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	4631      	mov	r1, r6
 8007040:	4658      	mov	r0, fp
 8007042:	f7ff faa3 	bl	800658c <quorem>
 8007046:	4649      	mov	r1, r9
 8007048:	4605      	mov	r5, r0
 800704a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800704e:	4658      	mov	r0, fp
 8007050:	f7ff f938 	bl	80062c4 <__mcmp>
 8007054:	463a      	mov	r2, r7
 8007056:	9002      	str	r0, [sp, #8]
 8007058:	4631      	mov	r1, r6
 800705a:	4620      	mov	r0, r4
 800705c:	f7ff f94c 	bl	80062f8 <__mdiff>
 8007060:	68c3      	ldr	r3, [r0, #12]
 8007062:	4602      	mov	r2, r0
 8007064:	bb03      	cbnz	r3, 80070a8 <_dtoa_r+0xa00>
 8007066:	4601      	mov	r1, r0
 8007068:	9009      	str	r0, [sp, #36]	; 0x24
 800706a:	4658      	mov	r0, fp
 800706c:	f7ff f92a 	bl	80062c4 <__mcmp>
 8007070:	4603      	mov	r3, r0
 8007072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007074:	4611      	mov	r1, r2
 8007076:	4620      	mov	r0, r4
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	f7fe ff43 	bl	8005f04 <_Bfree>
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	b9a3      	cbnz	r3, 80070ac <_dtoa_r+0xa04>
 8007082:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007084:	b992      	cbnz	r2, 80070ac <_dtoa_r+0xa04>
 8007086:	9a08      	ldr	r2, [sp, #32]
 8007088:	b982      	cbnz	r2, 80070ac <_dtoa_r+0xa04>
 800708a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800708e:	d029      	beq.n	80070e4 <_dtoa_r+0xa3c>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd01      	ble.n	800709a <_dtoa_r+0x9f2>
 8007096:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800709a:	9b07      	ldr	r3, [sp, #28]
 800709c:	1c5d      	adds	r5, r3, #1
 800709e:	f883 8000 	strb.w	r8, [r3]
 80070a2:	e784      	b.n	8006fae <_dtoa_r+0x906>
 80070a4:	4638      	mov	r0, r7
 80070a6:	e7c2      	b.n	800702e <_dtoa_r+0x986>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7e3      	b.n	8007074 <_dtoa_r+0x9cc>
 80070ac:	9a02      	ldr	r2, [sp, #8]
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	db04      	blt.n	80070bc <_dtoa_r+0xa14>
 80070b2:	d123      	bne.n	80070fc <_dtoa_r+0xa54>
 80070b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070b6:	bb0a      	cbnz	r2, 80070fc <_dtoa_r+0xa54>
 80070b8:	9a08      	ldr	r2, [sp, #32]
 80070ba:	b9fa      	cbnz	r2, 80070fc <_dtoa_r+0xa54>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	ddec      	ble.n	800709a <_dtoa_r+0x9f2>
 80070c0:	4659      	mov	r1, fp
 80070c2:	2201      	movs	r2, #1
 80070c4:	4620      	mov	r0, r4
 80070c6:	f7ff f8a9 	bl	800621c <__lshift>
 80070ca:	4631      	mov	r1, r6
 80070cc:	4683      	mov	fp, r0
 80070ce:	f7ff f8f9 	bl	80062c4 <__mcmp>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	dc03      	bgt.n	80070de <_dtoa_r+0xa36>
 80070d6:	d1e0      	bne.n	800709a <_dtoa_r+0x9f2>
 80070d8:	f018 0f01 	tst.w	r8, #1
 80070dc:	d0dd      	beq.n	800709a <_dtoa_r+0x9f2>
 80070de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070e2:	d1d8      	bne.n	8007096 <_dtoa_r+0x9ee>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	9a07      	ldr	r2, [sp, #28]
 80070e8:	1c5d      	adds	r5, r3, #1
 80070ea:	2339      	movs	r3, #57	; 0x39
 80070ec:	7013      	strb	r3, [r2, #0]
 80070ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070f2:	1e6a      	subs	r2, r5, #1
 80070f4:	2b39      	cmp	r3, #57	; 0x39
 80070f6:	d04d      	beq.n	8007194 <_dtoa_r+0xaec>
 80070f8:	3301      	adds	r3, #1
 80070fa:	e052      	b.n	80071a2 <_dtoa_r+0xafa>
 80070fc:	9a07      	ldr	r2, [sp, #28]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f102 0501 	add.w	r5, r2, #1
 8007104:	dd06      	ble.n	8007114 <_dtoa_r+0xa6c>
 8007106:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800710a:	d0eb      	beq.n	80070e4 <_dtoa_r+0xa3c>
 800710c:	f108 0801 	add.w	r8, r8, #1
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	e7c4      	b.n	800709e <_dtoa_r+0x9f6>
 8007114:	9b06      	ldr	r3, [sp, #24]
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	1aeb      	subs	r3, r5, r3
 800711a:	4293      	cmp	r3, r2
 800711c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007120:	d021      	beq.n	8007166 <_dtoa_r+0xabe>
 8007122:	4659      	mov	r1, fp
 8007124:	2300      	movs	r3, #0
 8007126:	220a      	movs	r2, #10
 8007128:	4620      	mov	r0, r4
 800712a:	f7fe ff02 	bl	8005f32 <__multadd>
 800712e:	45b9      	cmp	r9, r7
 8007130:	4683      	mov	fp, r0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	f04f 020a 	mov.w	r2, #10
 800713a:	4649      	mov	r1, r9
 800713c:	4620      	mov	r0, r4
 800713e:	d105      	bne.n	800714c <_dtoa_r+0xaa4>
 8007140:	f7fe fef7 	bl	8005f32 <__multadd>
 8007144:	4681      	mov	r9, r0
 8007146:	4607      	mov	r7, r0
 8007148:	9507      	str	r5, [sp, #28]
 800714a:	e778      	b.n	800703e <_dtoa_r+0x996>
 800714c:	f7fe fef1 	bl	8005f32 <__multadd>
 8007150:	4639      	mov	r1, r7
 8007152:	4681      	mov	r9, r0
 8007154:	2300      	movs	r3, #0
 8007156:	220a      	movs	r2, #10
 8007158:	4620      	mov	r0, r4
 800715a:	f7fe feea 	bl	8005f32 <__multadd>
 800715e:	4607      	mov	r7, r0
 8007160:	e7f2      	b.n	8007148 <_dtoa_r+0xaa0>
 8007162:	f04f 0900 	mov.w	r9, #0
 8007166:	4659      	mov	r1, fp
 8007168:	2201      	movs	r2, #1
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff f856 	bl	800621c <__lshift>
 8007170:	4631      	mov	r1, r6
 8007172:	4683      	mov	fp, r0
 8007174:	f7ff f8a6 	bl	80062c4 <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	dcb8      	bgt.n	80070ee <_dtoa_r+0xa46>
 800717c:	d102      	bne.n	8007184 <_dtoa_r+0xadc>
 800717e:	f018 0f01 	tst.w	r8, #1
 8007182:	d1b4      	bne.n	80070ee <_dtoa_r+0xa46>
 8007184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007188:	1e6a      	subs	r2, r5, #1
 800718a:	2b30      	cmp	r3, #48	; 0x30
 800718c:	f47f af0f 	bne.w	8006fae <_dtoa_r+0x906>
 8007190:	4615      	mov	r5, r2
 8007192:	e7f7      	b.n	8007184 <_dtoa_r+0xadc>
 8007194:	9b06      	ldr	r3, [sp, #24]
 8007196:	4293      	cmp	r3, r2
 8007198:	d105      	bne.n	80071a6 <_dtoa_r+0xafe>
 800719a:	2331      	movs	r3, #49	; 0x31
 800719c:	9a06      	ldr	r2, [sp, #24]
 800719e:	f10a 0a01 	add.w	sl, sl, #1
 80071a2:	7013      	strb	r3, [r2, #0]
 80071a4:	e703      	b.n	8006fae <_dtoa_r+0x906>
 80071a6:	4615      	mov	r5, r2
 80071a8:	e7a1      	b.n	80070ee <_dtoa_r+0xa46>
 80071aa:	4b17      	ldr	r3, [pc, #92]	; (8007208 <_dtoa_r+0xb60>)
 80071ac:	f7ff bae1 	b.w	8006772 <_dtoa_r+0xca>
 80071b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f aabb 	bne.w	800672e <_dtoa_r+0x86>
 80071b8:	4b14      	ldr	r3, [pc, #80]	; (800720c <_dtoa_r+0xb64>)
 80071ba:	f7ff bada 	b.w	8006772 <_dtoa_r+0xca>
 80071be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f77f ae3f 	ble.w	8006e44 <_dtoa_r+0x79c>
 80071c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071c8:	9308      	str	r3, [sp, #32]
 80071ca:	e653      	b.n	8006e74 <_dtoa_r+0x7cc>
 80071cc:	9b04      	ldr	r3, [sp, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dc03      	bgt.n	80071da <_dtoa_r+0xb32>
 80071d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	f73f aed5 	bgt.w	8006f84 <_dtoa_r+0x8dc>
 80071da:	9d06      	ldr	r5, [sp, #24]
 80071dc:	4631      	mov	r1, r6
 80071de:	4658      	mov	r0, fp
 80071e0:	f7ff f9d4 	bl	800658c <quorem>
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80071ea:	f805 8b01 	strb.w	r8, [r5], #1
 80071ee:	9a04      	ldr	r2, [sp, #16]
 80071f0:	1aeb      	subs	r3, r5, r3
 80071f2:	429a      	cmp	r2, r3
 80071f4:	ddb5      	ble.n	8007162 <_dtoa_r+0xaba>
 80071f6:	4659      	mov	r1, fp
 80071f8:	2300      	movs	r3, #0
 80071fa:	220a      	movs	r2, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f7fe fe98 	bl	8005f32 <__multadd>
 8007202:	4683      	mov	fp, r0
 8007204:	e7ea      	b.n	80071dc <_dtoa_r+0xb34>
 8007206:	bf00      	nop
 8007208:	08009711 	.word	0x08009711
 800720c:	08009704 	.word	0x08009704

08007210 <malloc>:
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <malloc+0xc>)
 8007212:	4601      	mov	r1, r0
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f7ff b947 	b.w	80064a8 <_malloc_r>
 800721a:	bf00      	nop
 800721c:	20000020 	.word	0x20000020

08007220 <__malloc_lock>:
 8007220:	4770      	bx	lr

08007222 <__malloc_unlock>:
 8007222:	4770      	bx	lr
 8007224:	0000      	movs	r0, r0
	...

08007228 <atan>:
 8007228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	4bb6      	ldr	r3, [pc, #728]	; (8007508 <atan+0x2e0>)
 800722e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007232:	429e      	cmp	r6, r3
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	468b      	mov	fp, r1
 800723a:	dd17      	ble.n	800726c <atan+0x44>
 800723c:	4bb3      	ldr	r3, [pc, #716]	; (800750c <atan+0x2e4>)
 800723e:	429e      	cmp	r6, r3
 8007240:	dc01      	bgt.n	8007246 <atan+0x1e>
 8007242:	d109      	bne.n	8007258 <atan+0x30>
 8007244:	b140      	cbz	r0, 8007258 <atan+0x30>
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	4620      	mov	r0, r4
 800724c:	4629      	mov	r1, r5
 800724e:	f7f8 ff85 	bl	800015c <__adddf3>
 8007252:	4604      	mov	r4, r0
 8007254:	460d      	mov	r5, r1
 8007256:	e005      	b.n	8007264 <atan+0x3c>
 8007258:	f1bb 0f00 	cmp.w	fp, #0
 800725c:	4cac      	ldr	r4, [pc, #688]	; (8007510 <atan+0x2e8>)
 800725e:	f340 8121 	ble.w	80074a4 <atan+0x27c>
 8007262:	4dac      	ldr	r5, [pc, #688]	; (8007514 <atan+0x2ec>)
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	4baa      	ldr	r3, [pc, #680]	; (8007518 <atan+0x2f0>)
 800726e:	429e      	cmp	r6, r3
 8007270:	dc11      	bgt.n	8007296 <atan+0x6e>
 8007272:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007276:	429e      	cmp	r6, r3
 8007278:	dc0a      	bgt.n	8007290 <atan+0x68>
 800727a:	a38b      	add	r3, pc, #556	; (adr r3, 80074a8 <atan+0x280>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f8 ff6c 	bl	800015c <__adddf3>
 8007284:	2200      	movs	r2, #0
 8007286:	4ba5      	ldr	r3, [pc, #660]	; (800751c <atan+0x2f4>)
 8007288:	f7f9 fbae 	bl	80009e8 <__aeabi_dcmpgt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d1e9      	bne.n	8007264 <atan+0x3c>
 8007290:	f04f 3aff 	mov.w	sl, #4294967295
 8007294:	e027      	b.n	80072e6 <atan+0xbe>
 8007296:	f000 f987 	bl	80075a8 <fabs>
 800729a:	4ba1      	ldr	r3, [pc, #644]	; (8007520 <atan+0x2f8>)
 800729c:	4604      	mov	r4, r0
 800729e:	429e      	cmp	r6, r3
 80072a0:	460d      	mov	r5, r1
 80072a2:	f300 80b8 	bgt.w	8007416 <atan+0x1ee>
 80072a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80072aa:	429e      	cmp	r6, r3
 80072ac:	f300 809c 	bgt.w	80073e8 <atan+0x1c0>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	f7f8 ff52 	bl	800015c <__adddf3>
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b98      	ldr	r3, [pc, #608]	; (800751c <atan+0x2f4>)
 80072bc:	f7f8 ff4c 	bl	8000158 <__aeabi_dsub>
 80072c0:	2200      	movs	r2, #0
 80072c2:	4606      	mov	r6, r0
 80072c4:	460f      	mov	r7, r1
 80072c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f8 ff45 	bl	800015c <__adddf3>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 fa1f 	bl	800071c <__aeabi_ddiv>
 80072de:	f04f 0a00 	mov.w	sl, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	460d      	mov	r5, r1
 80072e6:	4622      	mov	r2, r4
 80072e8:	462b      	mov	r3, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 f8eb 	bl	80004c8 <__aeabi_dmul>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4680      	mov	r8, r0
 80072f8:	4689      	mov	r9, r1
 80072fa:	f7f9 f8e5 	bl	80004c8 <__aeabi_dmul>
 80072fe:	a36c      	add	r3, pc, #432	; (adr r3, 80074b0 <atan+0x288>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	4606      	mov	r6, r0
 8007306:	460f      	mov	r7, r1
 8007308:	f7f9 f8de 	bl	80004c8 <__aeabi_dmul>
 800730c:	a36a      	add	r3, pc, #424	; (adr r3, 80074b8 <atan+0x290>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f8 ff23 	bl	800015c <__adddf3>
 8007316:	4632      	mov	r2, r6
 8007318:	463b      	mov	r3, r7
 800731a:	f7f9 f8d5 	bl	80004c8 <__aeabi_dmul>
 800731e:	a368      	add	r3, pc, #416	; (adr r3, 80074c0 <atan+0x298>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f8 ff1a 	bl	800015c <__adddf3>
 8007328:	4632      	mov	r2, r6
 800732a:	463b      	mov	r3, r7
 800732c:	f7f9 f8cc 	bl	80004c8 <__aeabi_dmul>
 8007330:	a365      	add	r3, pc, #404	; (adr r3, 80074c8 <atan+0x2a0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f8 ff11 	bl	800015c <__adddf3>
 800733a:	4632      	mov	r2, r6
 800733c:	463b      	mov	r3, r7
 800733e:	f7f9 f8c3 	bl	80004c8 <__aeabi_dmul>
 8007342:	a363      	add	r3, pc, #396	; (adr r3, 80074d0 <atan+0x2a8>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f8 ff08 	bl	800015c <__adddf3>
 800734c:	4632      	mov	r2, r6
 800734e:	463b      	mov	r3, r7
 8007350:	f7f9 f8ba 	bl	80004c8 <__aeabi_dmul>
 8007354:	a360      	add	r3, pc, #384	; (adr r3, 80074d8 <atan+0x2b0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f8 feff 	bl	800015c <__adddf3>
 800735e:	4642      	mov	r2, r8
 8007360:	464b      	mov	r3, r9
 8007362:	f7f9 f8b1 	bl	80004c8 <__aeabi_dmul>
 8007366:	a35e      	add	r3, pc, #376	; (adr r3, 80074e0 <atan+0x2b8>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	4680      	mov	r8, r0
 800736e:	4689      	mov	r9, r1
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	f7f9 f8a8 	bl	80004c8 <__aeabi_dmul>
 8007378:	a35b      	add	r3, pc, #364	; (adr r3, 80074e8 <atan+0x2c0>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f8 feeb 	bl	8000158 <__aeabi_dsub>
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	f7f9 f89f 	bl	80004c8 <__aeabi_dmul>
 800738a:	a359      	add	r3, pc, #356	; (adr r3, 80074f0 <atan+0x2c8>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 fee2 	bl	8000158 <__aeabi_dsub>
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	f7f9 f896 	bl	80004c8 <__aeabi_dmul>
 800739c:	a356      	add	r3, pc, #344	; (adr r3, 80074f8 <atan+0x2d0>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 fed9 	bl	8000158 <__aeabi_dsub>
 80073a6:	4632      	mov	r2, r6
 80073a8:	463b      	mov	r3, r7
 80073aa:	f7f9 f88d 	bl	80004c8 <__aeabi_dmul>
 80073ae:	a354      	add	r3, pc, #336	; (adr r3, 8007500 <atan+0x2d8>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f8 fed0 	bl	8000158 <__aeabi_dsub>
 80073b8:	4632      	mov	r2, r6
 80073ba:	463b      	mov	r3, r7
 80073bc:	f7f9 f884 	bl	80004c8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f8 fec8 	bl	800015c <__adddf3>
 80073cc:	4622      	mov	r2, r4
 80073ce:	462b      	mov	r3, r5
 80073d0:	f7f9 f87a 	bl	80004c8 <__aeabi_dmul>
 80073d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	d144      	bne.n	8007468 <atan+0x240>
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f8 feb9 	bl	8000158 <__aeabi_dsub>
 80073e6:	e734      	b.n	8007252 <atan+0x2a>
 80073e8:	2200      	movs	r2, #0
 80073ea:	4b4c      	ldr	r3, [pc, #304]	; (800751c <atan+0x2f4>)
 80073ec:	f7f8 feb4 	bl	8000158 <__aeabi_dsub>
 80073f0:	2200      	movs	r2, #0
 80073f2:	4606      	mov	r6, r0
 80073f4:	460f      	mov	r7, r1
 80073f6:	4b49      	ldr	r3, [pc, #292]	; (800751c <atan+0x2f4>)
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 feae 	bl	800015c <__adddf3>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 f988 	bl	800071c <__aeabi_ddiv>
 800740c:	f04f 0a01 	mov.w	sl, #1
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	e767      	b.n	80072e6 <atan+0xbe>
 8007416:	4b43      	ldr	r3, [pc, #268]	; (8007524 <atan+0x2fc>)
 8007418:	429e      	cmp	r6, r3
 800741a:	dc1a      	bgt.n	8007452 <atan+0x22a>
 800741c:	2200      	movs	r2, #0
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <atan+0x300>)
 8007420:	f7f8 fe9a 	bl	8000158 <__aeabi_dsub>
 8007424:	2200      	movs	r2, #0
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <atan+0x300>)
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f9 f84a 	bl	80004c8 <__aeabi_dmul>
 8007434:	2200      	movs	r2, #0
 8007436:	4b39      	ldr	r3, [pc, #228]	; (800751c <atan+0x2f4>)
 8007438:	f7f8 fe90 	bl	800015c <__adddf3>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 f96a 	bl	800071c <__aeabi_ddiv>
 8007448:	f04f 0a02 	mov.w	sl, #2
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	e749      	b.n	80072e6 <atan+0xbe>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	2000      	movs	r0, #0
 8007458:	4934      	ldr	r1, [pc, #208]	; (800752c <atan+0x304>)
 800745a:	f7f9 f95f 	bl	800071c <__aeabi_ddiv>
 800745e:	f04f 0a03 	mov.w	sl, #3
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	e73e      	b.n	80072e6 <atan+0xbe>
 8007468:	4b31      	ldr	r3, [pc, #196]	; (8007530 <atan+0x308>)
 800746a:	4e32      	ldr	r6, [pc, #200]	; (8007534 <atan+0x30c>)
 800746c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007470:	4456      	add	r6, sl
 8007472:	449a      	add	sl, r3
 8007474:	e9da 2300 	ldrd	r2, r3, [sl]
 8007478:	f7f8 fe6e 	bl	8000158 <__aeabi_dsub>
 800747c:	4622      	mov	r2, r4
 800747e:	462b      	mov	r3, r5
 8007480:	f7f8 fe6a 	bl	8000158 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	e9d6 0100 	ldrd	r0, r1, [r6]
 800748c:	f7f8 fe64 	bl	8000158 <__aeabi_dsub>
 8007490:	f1bb 0f00 	cmp.w	fp, #0
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	f6bf aee4 	bge.w	8007264 <atan+0x3c>
 800749c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074a0:	461d      	mov	r5, r3
 80074a2:	e6df      	b.n	8007264 <atan+0x3c>
 80074a4:	4d24      	ldr	r5, [pc, #144]	; (8007538 <atan+0x310>)
 80074a6:	e6dd      	b.n	8007264 <atan+0x3c>
 80074a8:	8800759c 	.word	0x8800759c
 80074ac:	7e37e43c 	.word	0x7e37e43c
 80074b0:	e322da11 	.word	0xe322da11
 80074b4:	3f90ad3a 	.word	0x3f90ad3a
 80074b8:	24760deb 	.word	0x24760deb
 80074bc:	3fa97b4b 	.word	0x3fa97b4b
 80074c0:	a0d03d51 	.word	0xa0d03d51
 80074c4:	3fb10d66 	.word	0x3fb10d66
 80074c8:	c54c206e 	.word	0xc54c206e
 80074cc:	3fb745cd 	.word	0x3fb745cd
 80074d0:	920083ff 	.word	0x920083ff
 80074d4:	3fc24924 	.word	0x3fc24924
 80074d8:	5555550d 	.word	0x5555550d
 80074dc:	3fd55555 	.word	0x3fd55555
 80074e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80074e4:	bfa2b444 	.word	0xbfa2b444
 80074e8:	52defd9a 	.word	0x52defd9a
 80074ec:	3fadde2d 	.word	0x3fadde2d
 80074f0:	af749a6d 	.word	0xaf749a6d
 80074f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80074f8:	fe231671 	.word	0xfe231671
 80074fc:	3fbc71c6 	.word	0x3fbc71c6
 8007500:	9998ebc4 	.word	0x9998ebc4
 8007504:	3fc99999 	.word	0x3fc99999
 8007508:	440fffff 	.word	0x440fffff
 800750c:	7ff00000 	.word	0x7ff00000
 8007510:	54442d18 	.word	0x54442d18
 8007514:	3ff921fb 	.word	0x3ff921fb
 8007518:	3fdbffff 	.word	0x3fdbffff
 800751c:	3ff00000 	.word	0x3ff00000
 8007520:	3ff2ffff 	.word	0x3ff2ffff
 8007524:	40037fff 	.word	0x40037fff
 8007528:	3ff80000 	.word	0x3ff80000
 800752c:	bff00000 	.word	0xbff00000
 8007530:	08009738 	.word	0x08009738
 8007534:	08009718 	.word	0x08009718
 8007538:	bff921fb 	.word	0xbff921fb

0800753c <cos>:
 800753c:	b530      	push	{r4, r5, lr}
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <cos+0x64>)
 8007540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007544:	4293      	cmp	r3, r2
 8007546:	b087      	sub	sp, #28
 8007548:	dc04      	bgt.n	8007554 <cos+0x18>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	f001 f9c3 	bl	80088d8 <__kernel_cos>
 8007552:	e006      	b.n	8007562 <cos+0x26>
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <cos+0x68>)
 8007556:	4293      	cmp	r3, r2
 8007558:	dd05      	ble.n	8007566 <cos+0x2a>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	f7f8 fdfb 	bl	8000158 <__aeabi_dsub>
 8007562:	b007      	add	sp, #28
 8007564:	bd30      	pop	{r4, r5, pc}
 8007566:	aa02      	add	r2, sp, #8
 8007568:	f000 ff1a 	bl	80083a0 <__ieee754_rem_pio2>
 800756c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007570:	f000 0403 	and.w	r4, r0, #3
 8007574:	2c01      	cmp	r4, #1
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	d008      	beq.n	800758e <cos+0x52>
 800757c:	2c02      	cmp	r4, #2
 800757e:	d00c      	beq.n	800759a <cos+0x5e>
 8007580:	2c00      	cmp	r4, #0
 8007582:	d0e4      	beq.n	800754e <cos+0x12>
 8007584:	2401      	movs	r4, #1
 8007586:	9400      	str	r4, [sp, #0]
 8007588:	f001 fdae 	bl	80090e8 <__kernel_sin>
 800758c:	e7e9      	b.n	8007562 <cos+0x26>
 800758e:	9400      	str	r4, [sp, #0]
 8007590:	f001 fdaa 	bl	80090e8 <__kernel_sin>
 8007594:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007598:	e7e3      	b.n	8007562 <cos+0x26>
 800759a:	f001 f99d 	bl	80088d8 <__kernel_cos>
 800759e:	e7f9      	b.n	8007594 <cos+0x58>
 80075a0:	3fe921fb 	.word	0x3fe921fb
 80075a4:	7fefffff 	.word	0x7fefffff

080075a8 <fabs>:
 80075a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075ac:	4619      	mov	r1, r3
 80075ae:	4770      	bx	lr

080075b0 <sin>:
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	4a1a      	ldr	r2, [pc, #104]	; (800761c <sin+0x6c>)
 80075b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075b8:	4293      	cmp	r3, r2
 80075ba:	b087      	sub	sp, #28
 80075bc:	dc06      	bgt.n	80075cc <sin+0x1c>
 80075be:	2300      	movs	r3, #0
 80075c0:	2200      	movs	r2, #0
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	f001 fd8f 	bl	80090e8 <__kernel_sin>
 80075ca:	e006      	b.n	80075da <sin+0x2a>
 80075cc:	4a14      	ldr	r2, [pc, #80]	; (8007620 <sin+0x70>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	dd05      	ble.n	80075de <sin+0x2e>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	f7f8 fdbf 	bl	8000158 <__aeabi_dsub>
 80075da:	b007      	add	sp, #28
 80075dc:	bd30      	pop	{r4, r5, pc}
 80075de:	aa02      	add	r2, sp, #8
 80075e0:	f000 fede 	bl	80083a0 <__ieee754_rem_pio2>
 80075e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e8:	f000 0403 	and.w	r4, r0, #3
 80075ec:	2c01      	cmp	r4, #1
 80075ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f2:	d005      	beq.n	8007600 <sin+0x50>
 80075f4:	2c02      	cmp	r4, #2
 80075f6:	d006      	beq.n	8007606 <sin+0x56>
 80075f8:	b964      	cbnz	r4, 8007614 <sin+0x64>
 80075fa:	2401      	movs	r4, #1
 80075fc:	9400      	str	r4, [sp, #0]
 80075fe:	e7e2      	b.n	80075c6 <sin+0x16>
 8007600:	f001 f96a 	bl	80088d8 <__kernel_cos>
 8007604:	e7e9      	b.n	80075da <sin+0x2a>
 8007606:	2401      	movs	r4, #1
 8007608:	9400      	str	r4, [sp, #0]
 800760a:	f001 fd6d 	bl	80090e8 <__kernel_sin>
 800760e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007612:	e7e2      	b.n	80075da <sin+0x2a>
 8007614:	f001 f960 	bl	80088d8 <__kernel_cos>
 8007618:	e7f9      	b.n	800760e <sin+0x5e>
 800761a:	bf00      	nop
 800761c:	3fe921fb 	.word	0x3fe921fb
 8007620:	7fefffff 	.word	0x7fefffff

08007624 <pow>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	b08f      	sub	sp, #60	; 0x3c
 800762a:	461d      	mov	r5, r3
 800762c:	4680      	mov	r8, r0
 800762e:	4689      	mov	r9, r1
 8007630:	4614      	mov	r4, r2
 8007632:	f000 f9a9 	bl	8007988 <__ieee754_pow>
 8007636:	4fa1      	ldr	r7, [pc, #644]	; (80078bc <pow+0x298>)
 8007638:	e9cd 0100 	strd	r0, r1, [sp]
 800763c:	f997 3000 	ldrsb.w	r3, [r7]
 8007640:	463e      	mov	r6, r7
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	3301      	adds	r3, #1
 8007646:	d05f      	beq.n	8007708 <pow+0xe4>
 8007648:	4622      	mov	r2, r4
 800764a:	462b      	mov	r3, r5
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f7f9 f9d4 	bl	80009fc <__aeabi_dcmpun>
 8007654:	4682      	mov	sl, r0
 8007656:	2800      	cmp	r0, #0
 8007658:	d156      	bne.n	8007708 <pow+0xe4>
 800765a:	4642      	mov	r2, r8
 800765c:	464b      	mov	r3, r9
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f9 f9cb 	bl	80009fc <__aeabi_dcmpun>
 8007666:	9003      	str	r0, [sp, #12]
 8007668:	b1e8      	cbz	r0, 80076a6 <pow+0x82>
 800766a:	2200      	movs	r2, #0
 800766c:	2300      	movs	r3, #0
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 f991 	bl	8000998 <__aeabi_dcmpeq>
 8007676:	2800      	cmp	r0, #0
 8007678:	d046      	beq.n	8007708 <pow+0xe4>
 800767a:	2301      	movs	r3, #1
 800767c:	2200      	movs	r2, #0
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	4b8f      	ldr	r3, [pc, #572]	; (80078c0 <pow+0x29c>)
 8007682:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007686:	9305      	str	r3, [sp, #20]
 8007688:	4b8e      	ldr	r3, [pc, #568]	; (80078c4 <pow+0x2a0>)
 800768a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800768e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007692:	9b02      	ldr	r3, [sp, #8]
 8007694:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d031      	beq.n	8007700 <pow+0xdc>
 800769c:	a804      	add	r0, sp, #16
 800769e:	f001 fe63 	bl	8009368 <matherr>
 80076a2:	bb38      	cbnz	r0, 80076f4 <pow+0xd0>
 80076a4:	e058      	b.n	8007758 <pow+0x134>
 80076a6:	f04f 0a00 	mov.w	sl, #0
 80076aa:	f04f 0b00 	mov.w	fp, #0
 80076ae:	4652      	mov	r2, sl
 80076b0:	465b      	mov	r3, fp
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f7f9 f96f 	bl	8000998 <__aeabi_dcmpeq>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d051      	beq.n	8007762 <pow+0x13e>
 80076be:	4652      	mov	r2, sl
 80076c0:	465b      	mov	r3, fp
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f9 f967 	bl	8000998 <__aeabi_dcmpeq>
 80076ca:	4606      	mov	r6, r0
 80076cc:	b308      	cbz	r0, 8007712 <pow+0xee>
 80076ce:	2301      	movs	r3, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	4b7b      	ldr	r3, [pc, #492]	; (80078c0 <pow+0x29c>)
 80076d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80076e0:	930c      	str	r3, [sp, #48]	; 0x30
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0d7      	beq.n	800769c <pow+0x78>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4b75      	ldr	r3, [pc, #468]	; (80078c4 <pow+0x2a0>)
 80076f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80076f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076f6:	b11b      	cbz	r3, 8007700 <pow+0xdc>
 80076f8:	f7fe f9f6 	bl	8005ae8 <__errno>
 80076fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076fe:	6003      	str	r3, [r0, #0]
 8007700:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8007704:	e9cd 3400 	strd	r3, r4, [sp]
 8007708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800770c:	b00f      	add	sp, #60	; 0x3c
 800770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f001 fd9d 	bl	8009254 <finite>
 800771a:	2800      	cmp	r0, #0
 800771c:	d0f4      	beq.n	8007708 <pow+0xe4>
 800771e:	4652      	mov	r2, sl
 8007720:	465b      	mov	r3, fp
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f9 f941 	bl	80009ac <__aeabi_dcmplt>
 800772a:	2800      	cmp	r0, #0
 800772c:	d0ec      	beq.n	8007708 <pow+0xe4>
 800772e:	2301      	movs	r3, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	4b63      	ldr	r3, [pc, #396]	; (80078c0 <pow+0x29c>)
 8007734:	960c      	str	r6, [sp, #48]	; 0x30
 8007736:	9305      	str	r3, [sp, #20]
 8007738:	f997 3000 	ldrsb.w	r3, [r7]
 800773c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007740:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007744:	b913      	cbnz	r3, 800774c <pow+0x128>
 8007746:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800774a:	e7a7      	b.n	800769c <pow+0x78>
 800774c:	2000      	movs	r0, #0
 800774e:	495e      	ldr	r1, [pc, #376]	; (80078c8 <pow+0x2a4>)
 8007750:	2b02      	cmp	r3, #2
 8007752:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007756:	d1a1      	bne.n	800769c <pow+0x78>
 8007758:	f7fe f9c6 	bl	8005ae8 <__errno>
 800775c:	2321      	movs	r3, #33	; 0x21
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	e7c8      	b.n	80076f4 <pow+0xd0>
 8007762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007766:	f001 fd75 	bl	8009254 <finite>
 800776a:	9002      	str	r0, [sp, #8]
 800776c:	2800      	cmp	r0, #0
 800776e:	d177      	bne.n	8007860 <pow+0x23c>
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f001 fd6e 	bl	8009254 <finite>
 8007778:	2800      	cmp	r0, #0
 800777a:	d071      	beq.n	8007860 <pow+0x23c>
 800777c:	4620      	mov	r0, r4
 800777e:	4629      	mov	r1, r5
 8007780:	f001 fd68 	bl	8009254 <finite>
 8007784:	2800      	cmp	r0, #0
 8007786:	d06b      	beq.n	8007860 <pow+0x23c>
 8007788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f7f9 f934 	bl	80009fc <__aeabi_dcmpun>
 8007794:	f997 7000 	ldrsb.w	r7, [r7]
 8007798:	4b49      	ldr	r3, [pc, #292]	; (80078c0 <pow+0x29c>)
 800779a:	b1a0      	cbz	r0, 80077c6 <pow+0x1a2>
 800779c:	2201      	movs	r2, #1
 800779e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077a2:	9b02      	ldr	r3, [sp, #8]
 80077a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077a8:	930c      	str	r3, [sp, #48]	; 0x30
 80077aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	d0c9      	beq.n	8007746 <pow+0x122>
 80077b2:	4652      	mov	r2, sl
 80077b4:	465b      	mov	r3, fp
 80077b6:	4650      	mov	r0, sl
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f8 ffaf 	bl	800071c <__aeabi_ddiv>
 80077be:	2f02      	cmp	r7, #2
 80077c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077c4:	e7c7      	b.n	8007756 <pow+0x132>
 80077c6:	2203      	movs	r2, #3
 80077c8:	900c      	str	r0, [sp, #48]	; 0x30
 80077ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077ce:	4620      	mov	r0, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	2200      	movs	r2, #0
 80077d4:	4b3d      	ldr	r3, [pc, #244]	; (80078cc <pow+0x2a8>)
 80077d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80077da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077de:	f7f8 fe73 	bl	80004c8 <__aeabi_dmul>
 80077e2:	4604      	mov	r4, r0
 80077e4:	460d      	mov	r5, r1
 80077e6:	bb17      	cbnz	r7, 800782e <pow+0x20a>
 80077e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80077ec:	4b38      	ldr	r3, [pc, #224]	; (80078d0 <pow+0x2ac>)
 80077ee:	4640      	mov	r0, r8
 80077f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80077f4:	4649      	mov	r1, r9
 80077f6:	4652      	mov	r2, sl
 80077f8:	465b      	mov	r3, fp
 80077fa:	f7f9 f8d7 	bl	80009ac <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d054      	beq.n	80078ac <pow+0x288>
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	f001 fdb7 	bl	8009378 <rint>
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f7f9 f8c3 	bl	8000998 <__aeabi_dcmpeq>
 8007812:	b920      	cbnz	r0, 800781e <pow+0x1fa>
 8007814:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007818:	4b2e      	ldr	r3, [pc, #184]	; (80078d4 <pow+0x2b0>)
 800781a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800781e:	f996 3000 	ldrsb.w	r3, [r6]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d142      	bne.n	80078ac <pow+0x288>
 8007826:	f7fe f95f 	bl	8005ae8 <__errno>
 800782a:	2322      	movs	r3, #34	; 0x22
 800782c:	e797      	b.n	800775e <pow+0x13a>
 800782e:	2200      	movs	r2, #0
 8007830:	4b29      	ldr	r3, [pc, #164]	; (80078d8 <pow+0x2b4>)
 8007832:	4640      	mov	r0, r8
 8007834:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007838:	4649      	mov	r1, r9
 800783a:	4652      	mov	r2, sl
 800783c:	465b      	mov	r3, fp
 800783e:	f7f9 f8b5 	bl	80009ac <__aeabi_dcmplt>
 8007842:	2800      	cmp	r0, #0
 8007844:	d0eb      	beq.n	800781e <pow+0x1fa>
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f001 fd95 	bl	8009378 <rint>
 800784e:	4622      	mov	r2, r4
 8007850:	462b      	mov	r3, r5
 8007852:	f7f9 f8a1 	bl	8000998 <__aeabi_dcmpeq>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1e1      	bne.n	800781e <pow+0x1fa>
 800785a:	2200      	movs	r2, #0
 800785c:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <pow+0x2a4>)
 800785e:	e7dc      	b.n	800781a <pow+0x1f6>
 8007860:	2200      	movs	r2, #0
 8007862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007866:	2300      	movs	r3, #0
 8007868:	f7f9 f896 	bl	8000998 <__aeabi_dcmpeq>
 800786c:	2800      	cmp	r0, #0
 800786e:	f43f af4b 	beq.w	8007708 <pow+0xe4>
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f001 fced 	bl	8009254 <finite>
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f af44 	beq.w	8007708 <pow+0xe4>
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	f001 fce6 	bl	8009254 <finite>
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f af3d 	beq.w	8007708 <pow+0xe4>
 800788e:	2304      	movs	r3, #4
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <pow+0x29c>)
 8007894:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007898:	9305      	str	r3, [sp, #20]
 800789a:	2300      	movs	r3, #0
 800789c:	2400      	movs	r4, #0
 800789e:	930c      	str	r3, [sp, #48]	; 0x30
 80078a0:	2300      	movs	r3, #0
 80078a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80078a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80078aa:	e7b8      	b.n	800781e <pow+0x1fa>
 80078ac:	a804      	add	r0, sp, #16
 80078ae:	f001 fd5b 	bl	8009368 <matherr>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f47f af1e 	bne.w	80076f4 <pow+0xd0>
 80078b8:	e7b5      	b.n	8007826 <pow+0x202>
 80078ba:	bf00      	nop
 80078bc:	20000084 	.word	0x20000084
 80078c0:	08009758 	.word	0x08009758
 80078c4:	3ff00000 	.word	0x3ff00000
 80078c8:	fff00000 	.word	0xfff00000
 80078cc:	3fe00000 	.word	0x3fe00000
 80078d0:	47efffff 	.word	0x47efffff
 80078d4:	c7efffff 	.word	0xc7efffff
 80078d8:	7ff00000 	.word	0x7ff00000

080078dc <sqrt>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	b08b      	sub	sp, #44	; 0x2c
 80078e2:	4604      	mov	r4, r0
 80078e4:	460d      	mov	r5, r1
 80078e6:	f000 ff4b 	bl	8008780 <__ieee754_sqrt>
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <sqrt+0xa0>)
 80078ec:	4680      	mov	r8, r0
 80078ee:	f993 a000 	ldrsb.w	sl, [r3]
 80078f2:	4689      	mov	r9, r1
 80078f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80078f8:	d02b      	beq.n	8007952 <sqrt+0x76>
 80078fa:	4622      	mov	r2, r4
 80078fc:	462b      	mov	r3, r5
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f9 f87b 	bl	80009fc <__aeabi_dcmpun>
 8007906:	4683      	mov	fp, r0
 8007908:	bb18      	cbnz	r0, 8007952 <sqrt+0x76>
 800790a:	2600      	movs	r6, #0
 800790c:	2700      	movs	r7, #0
 800790e:	4632      	mov	r2, r6
 8007910:	463b      	mov	r3, r7
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f9 f849 	bl	80009ac <__aeabi_dcmplt>
 800791a:	b1d0      	cbz	r0, 8007952 <sqrt+0x76>
 800791c:	2301      	movs	r3, #1
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	4b17      	ldr	r3, [pc, #92]	; (8007980 <sqrt+0xa4>)
 8007922:	f8cd b020 	str.w	fp, [sp, #32]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800792c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007930:	f1ba 0f00 	cmp.w	sl, #0
 8007934:	d112      	bne.n	800795c <sqrt+0x80>
 8007936:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800793a:	4668      	mov	r0, sp
 800793c:	f001 fd14 	bl	8009368 <matherr>
 8007940:	b1b8      	cbz	r0, 8007972 <sqrt+0x96>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	b11b      	cbz	r3, 800794e <sqrt+0x72>
 8007946:	f7fe f8cf 	bl	8005ae8 <__errno>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	b00b      	add	sp, #44	; 0x2c
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f8 feda 	bl	800071c <__aeabi_ddiv>
 8007968:	f1ba 0f02 	cmp.w	sl, #2
 800796c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007970:	d1e3      	bne.n	800793a <sqrt+0x5e>
 8007972:	f7fe f8b9 	bl	8005ae8 <__errno>
 8007976:	2321      	movs	r3, #33	; 0x21
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	e7e2      	b.n	8007942 <sqrt+0x66>
 800797c:	20000084 	.word	0x20000084
 8007980:	0800975c 	.word	0x0800975c
 8007984:	00000000 	.word	0x00000000

08007988 <__ieee754_pow>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	b091      	sub	sp, #68	; 0x44
 800798e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007992:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8007996:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800799a:	ea55 0302 	orrs.w	r3, r5, r2
 800799e:	4607      	mov	r7, r0
 80079a0:	4688      	mov	r8, r1
 80079a2:	f000 84b7 	beq.w	8008314 <__ieee754_pow+0x98c>
 80079a6:	4b80      	ldr	r3, [pc, #512]	; (8007ba8 <__ieee754_pow+0x220>)
 80079a8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80079ac:	429c      	cmp	r4, r3
 80079ae:	4689      	mov	r9, r1
 80079b0:	4682      	mov	sl, r0
 80079b2:	dc09      	bgt.n	80079c8 <__ieee754_pow+0x40>
 80079b4:	d103      	bne.n	80079be <__ieee754_pow+0x36>
 80079b6:	b938      	cbnz	r0, 80079c8 <__ieee754_pow+0x40>
 80079b8:	42a5      	cmp	r5, r4
 80079ba:	dc0d      	bgt.n	80079d8 <__ieee754_pow+0x50>
 80079bc:	e001      	b.n	80079c2 <__ieee754_pow+0x3a>
 80079be:	429d      	cmp	r5, r3
 80079c0:	dc02      	bgt.n	80079c8 <__ieee754_pow+0x40>
 80079c2:	429d      	cmp	r5, r3
 80079c4:	d10e      	bne.n	80079e4 <__ieee754_pow+0x5c>
 80079c6:	b16a      	cbz	r2, 80079e4 <__ieee754_pow+0x5c>
 80079c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80079cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80079d0:	ea54 030a 	orrs.w	r3, r4, sl
 80079d4:	f000 849e 	beq.w	8008314 <__ieee754_pow+0x98c>
 80079d8:	4874      	ldr	r0, [pc, #464]	; (8007bac <__ieee754_pow+0x224>)
 80079da:	b011      	add	sp, #68	; 0x44
 80079dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	f001 bcc4 	b.w	800936c <nan>
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	da53      	bge.n	8007a92 <__ieee754_pow+0x10a>
 80079ea:	4b71      	ldr	r3, [pc, #452]	; (8007bb0 <__ieee754_pow+0x228>)
 80079ec:	429d      	cmp	r5, r3
 80079ee:	dc4e      	bgt.n	8007a8e <__ieee754_pow+0x106>
 80079f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80079f4:	429d      	cmp	r5, r3
 80079f6:	dd4c      	ble.n	8007a92 <__ieee754_pow+0x10a>
 80079f8:	152b      	asrs	r3, r5, #20
 80079fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079fe:	2b14      	cmp	r3, #20
 8007a00:	dd28      	ble.n	8007a54 <__ieee754_pow+0xcc>
 8007a02:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a06:	fa22 f103 	lsr.w	r1, r2, r3
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d13f      	bne.n	8007a92 <__ieee754_pow+0x10a>
 8007a12:	f001 0101 	and.w	r1, r1, #1
 8007a16:	f1c1 0302 	rsb	r3, r1, #2
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	d15c      	bne.n	8007ada <__ieee754_pow+0x152>
 8007a20:	4b61      	ldr	r3, [pc, #388]	; (8007ba8 <__ieee754_pow+0x220>)
 8007a22:	429d      	cmp	r5, r3
 8007a24:	d126      	bne.n	8007a74 <__ieee754_pow+0xec>
 8007a26:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007a2a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007a2e:	ea53 030a 	orrs.w	r3, r3, sl
 8007a32:	f000 846f 	beq.w	8008314 <__ieee754_pow+0x98c>
 8007a36:	4b5f      	ldr	r3, [pc, #380]	; (8007bb4 <__ieee754_pow+0x22c>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	dd2c      	ble.n	8007a96 <__ieee754_pow+0x10e>
 8007a3c:	2e00      	cmp	r6, #0
 8007a3e:	f280 846f 	bge.w	8008320 <__ieee754_pow+0x998>
 8007a42:	f04f 0b00 	mov.w	fp, #0
 8007a46:	f04f 0c00 	mov.w	ip, #0
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	4661      	mov	r1, ip
 8007a4e:	b011      	add	sp, #68	; 0x44
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	d13e      	bne.n	8007ad6 <__ieee754_pow+0x14e>
 8007a58:	f1c3 0314 	rsb	r3, r3, #20
 8007a5c:	fa45 f103 	asr.w	r1, r5, r3
 8007a60:	fa01 f303 	lsl.w	r3, r1, r3
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	f040 8463 	bne.w	8008330 <__ieee754_pow+0x9a8>
 8007a6a:	f001 0101 	and.w	r1, r1, #1
 8007a6e:	f1c1 0302 	rsb	r3, r1, #2
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <__ieee754_pow+0x230>)
 8007a76:	429d      	cmp	r5, r3
 8007a78:	d114      	bne.n	8007aa4 <__ieee754_pow+0x11c>
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	f280 8454 	bge.w	8008328 <__ieee754_pow+0x9a0>
 8007a80:	463a      	mov	r2, r7
 8007a82:	4643      	mov	r3, r8
 8007a84:	2000      	movs	r0, #0
 8007a86:	494c      	ldr	r1, [pc, #304]	; (8007bb8 <__ieee754_pow+0x230>)
 8007a88:	f7f8 fe48 	bl	800071c <__aeabi_ddiv>
 8007a8c:	e013      	b.n	8007ab6 <__ieee754_pow+0x12e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e7c3      	b.n	8007a1a <__ieee754_pow+0x92>
 8007a92:	2300      	movs	r3, #0
 8007a94:	e7c1      	b.n	8007a1a <__ieee754_pow+0x92>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	dad3      	bge.n	8007a42 <__ieee754_pow+0xba>
 8007a9a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007a9e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007aa2:	e7d2      	b.n	8007a4a <__ieee754_pow+0xc2>
 8007aa4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007aa8:	d108      	bne.n	8007abc <__ieee754_pow+0x134>
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4643      	mov	r3, r8
 8007aae:	4638      	mov	r0, r7
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	f7f8 fd09 	bl	80004c8 <__aeabi_dmul>
 8007ab6:	4683      	mov	fp, r0
 8007ab8:	468c      	mov	ip, r1
 8007aba:	e7c6      	b.n	8007a4a <__ieee754_pow+0xc2>
 8007abc:	4b3f      	ldr	r3, [pc, #252]	; (8007bbc <__ieee754_pow+0x234>)
 8007abe:	429e      	cmp	r6, r3
 8007ac0:	d10b      	bne.n	8007ada <__ieee754_pow+0x152>
 8007ac2:	f1b9 0f00 	cmp.w	r9, #0
 8007ac6:	db08      	blt.n	8007ada <__ieee754_pow+0x152>
 8007ac8:	4638      	mov	r0, r7
 8007aca:	4641      	mov	r1, r8
 8007acc:	b011      	add	sp, #68	; 0x44
 8007ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad2:	f000 be55 	b.w	8008780 <__ieee754_sqrt>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	4638      	mov	r0, r7
 8007adc:	4641      	mov	r1, r8
 8007ade:	f7ff fd63 	bl	80075a8 <fabs>
 8007ae2:	4683      	mov	fp, r0
 8007ae4:	468c      	mov	ip, r1
 8007ae6:	f1ba 0f00 	cmp.w	sl, #0
 8007aea:	d12b      	bne.n	8007b44 <__ieee754_pow+0x1bc>
 8007aec:	b124      	cbz	r4, 8007af8 <__ieee754_pow+0x170>
 8007aee:	4b32      	ldr	r3, [pc, #200]	; (8007bb8 <__ieee754_pow+0x230>)
 8007af0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d125      	bne.n	8007b44 <__ieee754_pow+0x1bc>
 8007af8:	2e00      	cmp	r6, #0
 8007afa:	da07      	bge.n	8007b0c <__ieee754_pow+0x184>
 8007afc:	465a      	mov	r2, fp
 8007afe:	4663      	mov	r3, ip
 8007b00:	2000      	movs	r0, #0
 8007b02:	492d      	ldr	r1, [pc, #180]	; (8007bb8 <__ieee754_pow+0x230>)
 8007b04:	f7f8 fe0a 	bl	800071c <__aeabi_ddiv>
 8007b08:	4683      	mov	fp, r0
 8007b0a:	468c      	mov	ip, r1
 8007b0c:	f1b9 0f00 	cmp.w	r9, #0
 8007b10:	da9b      	bge.n	8007a4a <__ieee754_pow+0xc2>
 8007b12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b16:	9b00      	ldr	r3, [sp, #0]
 8007b18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b1c:	4323      	orrs	r3, r4
 8007b1e:	d108      	bne.n	8007b32 <__ieee754_pow+0x1aa>
 8007b20:	465a      	mov	r2, fp
 8007b22:	4663      	mov	r3, ip
 8007b24:	4658      	mov	r0, fp
 8007b26:	4661      	mov	r1, ip
 8007b28:	f7f8 fb16 	bl	8000158 <__aeabi_dsub>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	e7aa      	b.n	8007a88 <__ieee754_pow+0x100>
 8007b32:	9b00      	ldr	r3, [sp, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d188      	bne.n	8007a4a <__ieee754_pow+0xc2>
 8007b38:	4658      	mov	r0, fp
 8007b3a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007b3e:	4683      	mov	fp, r0
 8007b40:	469c      	mov	ip, r3
 8007b42:	e782      	b.n	8007a4a <__ieee754_pow+0xc2>
 8007b44:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007b48:	f109 33ff 	add.w	r3, r9, #4294967295
 8007b4c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b50:	9b00      	ldr	r3, [sp, #0]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d104      	bne.n	8007b60 <__ieee754_pow+0x1d8>
 8007b56:	463a      	mov	r2, r7
 8007b58:	4643      	mov	r3, r8
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	e7e3      	b.n	8007b28 <__ieee754_pow+0x1a0>
 8007b60:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <__ieee754_pow+0x238>)
 8007b62:	429d      	cmp	r5, r3
 8007b64:	f340 80fe 	ble.w	8007d64 <__ieee754_pow+0x3dc>
 8007b68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007b6c:	429d      	cmp	r5, r3
 8007b6e:	dd0b      	ble.n	8007b88 <__ieee754_pow+0x200>
 8007b70:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <__ieee754_pow+0x22c>)
 8007b72:	429c      	cmp	r4, r3
 8007b74:	dc0e      	bgt.n	8007b94 <__ieee754_pow+0x20c>
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	f6bf af63 	bge.w	8007a42 <__ieee754_pow+0xba>
 8007b7c:	a308      	add	r3, pc, #32	; (adr r3, 8007ba0 <__ieee754_pow+0x218>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	e794      	b.n	8007ab2 <__ieee754_pow+0x12a>
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	ddf3      	ble.n	8007b76 <__ieee754_pow+0x1ee>
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <__ieee754_pow+0x230>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	dd19      	ble.n	8007bc8 <__ieee754_pow+0x240>
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	dcf1      	bgt.n	8007b7c <__ieee754_pow+0x1f4>
 8007b98:	e753      	b.n	8007a42 <__ieee754_pow+0xba>
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
 8007ba0:	8800759c 	.word	0x8800759c
 8007ba4:	7e37e43c 	.word	0x7e37e43c
 8007ba8:	7ff00000 	.word	0x7ff00000
 8007bac:	08009712 	.word	0x08009712
 8007bb0:	433fffff 	.word	0x433fffff
 8007bb4:	3fefffff 	.word	0x3fefffff
 8007bb8:	3ff00000 	.word	0x3ff00000
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	41e00000 	.word	0x41e00000
 8007bc4:	3feffffe 	.word	0x3feffffe
 8007bc8:	4661      	mov	r1, ip
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <__ieee754_pow+0x3c8>)
 8007bce:	4658      	mov	r0, fp
 8007bd0:	f7f8 fac2 	bl	8000158 <__aeabi_dsub>
 8007bd4:	a354      	add	r3, pc, #336	; (adr r3, 8007d28 <__ieee754_pow+0x3a0>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	4604      	mov	r4, r0
 8007bdc:	460d      	mov	r5, r1
 8007bde:	f7f8 fc73 	bl	80004c8 <__aeabi_dmul>
 8007be2:	a353      	add	r3, pc, #332	; (adr r3, 8007d30 <__ieee754_pow+0x3a8>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 fc6a 	bl	80004c8 <__aeabi_dmul>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	468b      	mov	fp, r1
 8007bfa:	4b56      	ldr	r3, [pc, #344]	; (8007d54 <__ieee754_pow+0x3cc>)
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 fc62 	bl	80004c8 <__aeabi_dmul>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	a14b      	add	r1, pc, #300	; (adr r1, 8007d38 <__ieee754_pow+0x3b0>)
 8007c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c0e:	f7f8 faa3 	bl	8000158 <__aeabi_dsub>
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	f7f8 fc57 	bl	80004c8 <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	2000      	movs	r0, #0
 8007c20:	494d      	ldr	r1, [pc, #308]	; (8007d58 <__ieee754_pow+0x3d0>)
 8007c22:	f7f8 fa99 	bl	8000158 <__aeabi_dsub>
 8007c26:	4622      	mov	r2, r4
 8007c28:	462b      	mov	r3, r5
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fc49 	bl	80004c8 <__aeabi_dmul>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	f7f8 fc43 	bl	80004c8 <__aeabi_dmul>
 8007c42:	a33f      	add	r3, pc, #252	; (adr r3, 8007d40 <__ieee754_pow+0x3b8>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fc3e 	bl	80004c8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	f7f8 fa80 	bl	8000158 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 fa7a 	bl	800015c <__adddf3>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	468b      	mov	fp, r1
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	f7f8 fa71 	bl	8000158 <__aeabi_dsub>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 fa6b 	bl	8000158 <__aeabi_dsub>
 8007c82:	9b00      	ldr	r3, [sp, #0]
 8007c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c86:	3b01      	subs	r3, #1
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	bf0c      	ite	eq
 8007c90:	4c32      	ldreq	r4, [pc, #200]	; (8007d5c <__ieee754_pow+0x3d4>)
 8007c92:	4c2f      	ldrne	r4, [pc, #188]	; (8007d50 <__ieee754_pow+0x3c8>)
 8007c94:	4606      	mov	r6, r0
 8007c96:	e9cd 3400 	strd	r3, r4, [sp]
 8007c9a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c9e:	2400      	movs	r4, #0
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fa55 	bl	8000158 <__aeabi_dsub>
 8007cae:	4652      	mov	r2, sl
 8007cb0:	465b      	mov	r3, fp
 8007cb2:	f7f8 fc09 	bl	80004c8 <__aeabi_dmul>
 8007cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 fc01 	bl	80004c8 <__aeabi_dmul>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	f7f8 fa45 	bl	800015c <__adddf3>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	4689      	mov	r9, r1
 8007cda:	4650      	mov	r0, sl
 8007cdc:	4659      	mov	r1, fp
 8007cde:	f7f8 fbf3 	bl	80004c8 <__aeabi_dmul>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4649      	mov	r1, r9
 8007cec:	4640      	mov	r0, r8
 8007cee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007cf2:	f7f8 fa33 	bl	800015c <__adddf3>
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <__ieee754_pow+0x3d8>)
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	4299      	cmp	r1, r3
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	460e      	mov	r6, r1
 8007d00:	f340 82e1 	ble.w	80082c6 <__ieee754_pow+0x93e>
 8007d04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d0c:	4303      	orrs	r3, r0
 8007d0e:	f000 81db 	beq.w	80080c8 <__ieee754_pow+0x740>
 8007d12:	a30d      	add	r3, pc, #52	; (adr r3, 8007d48 <__ieee754_pow+0x3c0>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d1c:	f7f8 fbd4 	bl	80004c8 <__aeabi_dmul>
 8007d20:	a309      	add	r3, pc, #36	; (adr r3, 8007d48 <__ieee754_pow+0x3c0>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	e6c4      	b.n	8007ab2 <__ieee754_pow+0x12a>
 8007d28:	60000000 	.word	0x60000000
 8007d2c:	3ff71547 	.word	0x3ff71547
 8007d30:	f85ddf44 	.word	0xf85ddf44
 8007d34:	3e54ae0b 	.word	0x3e54ae0b
 8007d38:	55555555 	.word	0x55555555
 8007d3c:	3fd55555 	.word	0x3fd55555
 8007d40:	652b82fe 	.word	0x652b82fe
 8007d44:	3ff71547 	.word	0x3ff71547
 8007d48:	8800759c 	.word	0x8800759c
 8007d4c:	7e37e43c 	.word	0x7e37e43c
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	3fd00000 	.word	0x3fd00000
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	bff00000 	.word	0xbff00000
 8007d60:	408fffff 	.word	0x408fffff
 8007d64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	da08      	bge.n	8007d80 <__ieee754_pow+0x3f8>
 8007d6e:	4658      	mov	r0, fp
 8007d70:	4bcd      	ldr	r3, [pc, #820]	; (80080a8 <__ieee754_pow+0x720>)
 8007d72:	4661      	mov	r1, ip
 8007d74:	f7f8 fba8 	bl	80004c8 <__aeabi_dmul>
 8007d78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007d7c:	4683      	mov	fp, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	1523      	asrs	r3, r4, #20
 8007d82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d86:	4413      	add	r3, r2
 8007d88:	930c      	str	r3, [sp, #48]	; 0x30
 8007d8a:	4bc8      	ldr	r3, [pc, #800]	; (80080ac <__ieee754_pow+0x724>)
 8007d8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d94:	429c      	cmp	r4, r3
 8007d96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d9a:	dd08      	ble.n	8007dae <__ieee754_pow+0x426>
 8007d9c:	4bc4      	ldr	r3, [pc, #784]	; (80080b0 <__ieee754_pow+0x728>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	f340 815b 	ble.w	800805a <__ieee754_pow+0x6d2>
 8007da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007daa:	3301      	adds	r3, #1
 8007dac:	930c      	str	r3, [sp, #48]	; 0x30
 8007dae:	f04f 0800 	mov.w	r8, #0
 8007db2:	4658      	mov	r0, fp
 8007db4:	4629      	mov	r1, r5
 8007db6:	4bbf      	ldr	r3, [pc, #764]	; (80080b4 <__ieee754_pow+0x72c>)
 8007db8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007dbc:	444b      	add	r3, r9
 8007dbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dc2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4623      	mov	r3, r4
 8007dca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007dce:	f7f8 f9c3 	bl	8000158 <__aeabi_dsub>
 8007dd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dde:	f7f8 f9bd 	bl	800015c <__adddf3>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	2000      	movs	r0, #0
 8007de8:	49b3      	ldr	r1, [pc, #716]	; (80080b8 <__ieee754_pow+0x730>)
 8007dea:	f7f8 fc97 	bl	800071c <__aeabi_ddiv>
 8007dee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fb65 	bl	80004c8 <__aeabi_dmul>
 8007dfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e02:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007e06:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	106d      	asrs	r5, r5, #1
 8007e10:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007e1e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	4614      	mov	r4, r2
 8007e28:	461d      	mov	r5, r3
 8007e2a:	f7f8 fb4d 	bl	80004c8 <__aeabi_dmul>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 f98f 	bl	8000158 <__aeabi_dsub>
 8007e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460f      	mov	r7, r1
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 f987 	bl	8000158 <__aeabi_dsub>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e52:	f7f8 f981 	bl	8000158 <__aeabi_dsub>
 8007e56:	4652      	mov	r2, sl
 8007e58:	465b      	mov	r3, fp
 8007e5a:	f7f8 fb35 	bl	80004c8 <__aeabi_dmul>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4630      	mov	r0, r6
 8007e64:	4639      	mov	r1, r7
 8007e66:	f7f8 f977 	bl	8000158 <__aeabi_dsub>
 8007e6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e6e:	f7f8 fb2b 	bl	80004c8 <__aeabi_dmul>
 8007e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f7f8 fb23 	bl	80004c8 <__aeabi_dmul>
 8007e82:	a377      	add	r3, pc, #476	; (adr r3, 8008060 <__ieee754_pow+0x6d8>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	4604      	mov	r4, r0
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	f7f8 fb1c 	bl	80004c8 <__aeabi_dmul>
 8007e90:	a375      	add	r3, pc, #468	; (adr r3, 8008068 <__ieee754_pow+0x6e0>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f7f8 f961 	bl	800015c <__adddf3>
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	f7f8 fb13 	bl	80004c8 <__aeabi_dmul>
 8007ea2:	a373      	add	r3, pc, #460	; (adr r3, 8008070 <__ieee754_pow+0x6e8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 f958 	bl	800015c <__adddf3>
 8007eac:	4622      	mov	r2, r4
 8007eae:	462b      	mov	r3, r5
 8007eb0:	f7f8 fb0a 	bl	80004c8 <__aeabi_dmul>
 8007eb4:	a370      	add	r3, pc, #448	; (adr r3, 8008078 <__ieee754_pow+0x6f0>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 f94f 	bl	800015c <__adddf3>
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	f7f8 fb01 	bl	80004c8 <__aeabi_dmul>
 8007ec6:	a36e      	add	r3, pc, #440	; (adr r3, 8008080 <__ieee754_pow+0x6f8>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 f946 	bl	800015c <__adddf3>
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	f7f8 faf8 	bl	80004c8 <__aeabi_dmul>
 8007ed8:	a36b      	add	r3, pc, #428	; (adr r3, 8008088 <__ieee754_pow+0x700>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 f93d 	bl	800015c <__adddf3>
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	462b      	mov	r3, r5
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 faeb 	bl	80004c8 <__aeabi_dmul>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 fae5 	bl	80004c8 <__aeabi_dmul>
 8007efe:	4604      	mov	r4, r0
 8007f00:	460d      	mov	r5, r1
 8007f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f06:	4652      	mov	r2, sl
 8007f08:	465b      	mov	r3, fp
 8007f0a:	f7f8 f927 	bl	800015c <__adddf3>
 8007f0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f12:	f7f8 fad9 	bl	80004c8 <__aeabi_dmul>
 8007f16:	4622      	mov	r2, r4
 8007f18:	462b      	mov	r3, r5
 8007f1a:	f7f8 f91f 	bl	800015c <__adddf3>
 8007f1e:	4652      	mov	r2, sl
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	465b      	mov	r3, fp
 8007f26:	4650      	mov	r0, sl
 8007f28:	4659      	mov	r1, fp
 8007f2a:	f7f8 facd 	bl	80004c8 <__aeabi_dmul>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4b62      	ldr	r3, [pc, #392]	; (80080bc <__ieee754_pow+0x734>)
 8007f32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f36:	f7f8 f911 	bl	800015c <__adddf3>
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	f7f8 f90d 	bl	800015c <__adddf3>
 8007f42:	9804      	ldr	r0, [sp, #16]
 8007f44:	460d      	mov	r5, r1
 8007f46:	4604      	mov	r4, r0
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	4659      	mov	r1, fp
 8007f50:	f7f8 faba 	bl	80004c8 <__aeabi_dmul>
 8007f54:	2200      	movs	r2, #0
 8007f56:	4682      	mov	sl, r0
 8007f58:	468b      	mov	fp, r1
 8007f5a:	4b58      	ldr	r3, [pc, #352]	; (80080bc <__ieee754_pow+0x734>)
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 f8fa 	bl	8000158 <__aeabi_dsub>
 8007f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f68:	f7f8 f8f6 	bl	8000158 <__aeabi_dsub>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 f8f0 	bl	8000158 <__aeabi_dsub>
 8007f78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f7c:	f7f8 faa4 	bl	80004c8 <__aeabi_dmul>
 8007f80:	4622      	mov	r2, r4
 8007f82:	4606      	mov	r6, r0
 8007f84:	460f      	mov	r7, r1
 8007f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	f7f8 fa9c 	bl	80004c8 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f8e0 	bl	800015c <__adddf3>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	f7f8 f8d8 	bl	800015c <__adddf3>
 8007fac:	a338      	add	r3, pc, #224	; (adr r3, 8008090 <__ieee754_pow+0x708>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	9804      	ldr	r0, [sp, #16]
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	f7f8 fa86 	bl	80004c8 <__aeabi_dmul>
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f8c6 	bl	8000158 <__aeabi_dsub>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 f8c0 	bl	8000158 <__aeabi_dsub>
 8007fd8:	a32f      	add	r3, pc, #188	; (adr r3, 8008098 <__ieee754_pow+0x710>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fa73 	bl	80004c8 <__aeabi_dmul>
 8007fe2:	a32f      	add	r3, pc, #188	; (adr r3, 80080a0 <__ieee754_pow+0x718>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 fa6a 	bl	80004c8 <__aeabi_dmul>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 f8ae 	bl	800015c <__adddf3>
 8008000:	4b2f      	ldr	r3, [pc, #188]	; (80080c0 <__ieee754_pow+0x738>)
 8008002:	444b      	add	r3, r9
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 f8a8 	bl	800015c <__adddf3>
 800800c:	4604      	mov	r4, r0
 800800e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008010:	460d      	mov	r5, r1
 8008012:	f7f8 f9ef 	bl	80003f4 <__aeabi_i2d>
 8008016:	4606      	mov	r6, r0
 8008018:	460f      	mov	r7, r1
 800801a:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <__ieee754_pow+0x73c>)
 800801c:	4622      	mov	r2, r4
 800801e:	444b      	add	r3, r9
 8008020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008024:	462b      	mov	r3, r5
 8008026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802a:	f7f8 f897 	bl	800015c <__adddf3>
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	f7f8 f893 	bl	800015c <__adddf3>
 8008036:	4632      	mov	r2, r6
 8008038:	463b      	mov	r3, r7
 800803a:	f7f8 f88f 	bl	800015c <__adddf3>
 800803e:	9804      	ldr	r0, [sp, #16]
 8008040:	4632      	mov	r2, r6
 8008042:	463b      	mov	r3, r7
 8008044:	4682      	mov	sl, r0
 8008046:	468b      	mov	fp, r1
 8008048:	f7f8 f886 	bl	8000158 <__aeabi_dsub>
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	f7f8 f882 	bl	8000158 <__aeabi_dsub>
 8008054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008058:	e60b      	b.n	8007c72 <__ieee754_pow+0x2ea>
 800805a:	f04f 0801 	mov.w	r8, #1
 800805e:	e6a8      	b.n	8007db2 <__ieee754_pow+0x42a>
 8008060:	4a454eef 	.word	0x4a454eef
 8008064:	3fca7e28 	.word	0x3fca7e28
 8008068:	93c9db65 	.word	0x93c9db65
 800806c:	3fcd864a 	.word	0x3fcd864a
 8008070:	a91d4101 	.word	0xa91d4101
 8008074:	3fd17460 	.word	0x3fd17460
 8008078:	518f264d 	.word	0x518f264d
 800807c:	3fd55555 	.word	0x3fd55555
 8008080:	db6fabff 	.word	0xdb6fabff
 8008084:	3fdb6db6 	.word	0x3fdb6db6
 8008088:	33333303 	.word	0x33333303
 800808c:	3fe33333 	.word	0x3fe33333
 8008090:	e0000000 	.word	0xe0000000
 8008094:	3feec709 	.word	0x3feec709
 8008098:	dc3a03fd 	.word	0xdc3a03fd
 800809c:	3feec709 	.word	0x3feec709
 80080a0:	145b01f5 	.word	0x145b01f5
 80080a4:	be3e2fe0 	.word	0xbe3e2fe0
 80080a8:	43400000 	.word	0x43400000
 80080ac:	0003988e 	.word	0x0003988e
 80080b0:	000bb679 	.word	0x000bb679
 80080b4:	08009768 	.word	0x08009768
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	40080000 	.word	0x40080000
 80080c0:	08009788 	.word	0x08009788
 80080c4:	08009778 	.word	0x08009778
 80080c8:	a39b      	add	r3, pc, #620	; (adr r3, 8008338 <__ieee754_pow+0x9b0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	4640      	mov	r0, r8
 80080d0:	4649      	mov	r1, r9
 80080d2:	f7f8 f843 	bl	800015c <__adddf3>
 80080d6:	4622      	mov	r2, r4
 80080d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080dc:	462b      	mov	r3, r5
 80080de:	4650      	mov	r0, sl
 80080e0:	4639      	mov	r1, r7
 80080e2:	f7f8 f839 	bl	8000158 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ee:	f7f8 fc7b 	bl	80009e8 <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f47f ae0d 	bne.w	8007d12 <__ieee754_pow+0x38a>
 80080f8:	4aa3      	ldr	r2, [pc, #652]	; (8008388 <__ieee754_pow+0xa00>)
 80080fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80080fe:	4293      	cmp	r3, r2
 8008100:	f340 8103 	ble.w	800830a <__ieee754_pow+0x982>
 8008104:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008108:	2000      	movs	r0, #0
 800810a:	151b      	asrs	r3, r3, #20
 800810c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008110:	fa4a f303 	asr.w	r3, sl, r3
 8008114:	4433      	add	r3, r6
 8008116:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800811a:	4f9c      	ldr	r7, [pc, #624]	; (800838c <__ieee754_pow+0xa04>)
 800811c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008120:	4117      	asrs	r7, r2
 8008122:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008126:	ea23 0107 	bic.w	r1, r3, r7
 800812a:	f1c2 0214 	rsb	r2, r2, #20
 800812e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008132:	fa4a fa02 	asr.w	sl, sl, r2
 8008136:	2e00      	cmp	r6, #0
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	bfb8      	it	lt
 8008142:	f1ca 0a00 	rsblt	sl, sl, #0
 8008146:	f7f8 f807 	bl	8000158 <__aeabi_dsub>
 800814a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008152:	4642      	mov	r2, r8
 8008154:	464b      	mov	r3, r9
 8008156:	f7f8 f801 	bl	800015c <__adddf3>
 800815a:	a379      	add	r3, pc, #484	; (adr r3, 8008340 <__ieee754_pow+0x9b8>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	2000      	movs	r0, #0
 8008162:	460d      	mov	r5, r1
 8008164:	4604      	mov	r4, r0
 8008166:	f7f8 f9af 	bl	80004c8 <__aeabi_dmul>
 800816a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	4620      	mov	r0, r4
 8008174:	4629      	mov	r1, r5
 8008176:	f7f7 ffef 	bl	8000158 <__aeabi_dsub>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4640      	mov	r0, r8
 8008180:	4649      	mov	r1, r9
 8008182:	f7f7 ffe9 	bl	8000158 <__aeabi_dsub>
 8008186:	a370      	add	r3, pc, #448	; (adr r3, 8008348 <__ieee754_pow+0x9c0>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f99c 	bl	80004c8 <__aeabi_dmul>
 8008190:	a36f      	add	r3, pc, #444	; (adr r3, 8008350 <__ieee754_pow+0x9c8>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	4680      	mov	r8, r0
 8008198:	4689      	mov	r9, r1
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 f993 	bl	80004c8 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4640      	mov	r0, r8
 80081a8:	4649      	mov	r1, r9
 80081aa:	f7f7 ffd7 	bl	800015c <__adddf3>
 80081ae:	4604      	mov	r4, r0
 80081b0:	460d      	mov	r5, r1
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4630      	mov	r0, r6
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f7 ffcf 	bl	800015c <__adddf3>
 80081be:	4632      	mov	r2, r6
 80081c0:	463b      	mov	r3, r7
 80081c2:	4680      	mov	r8, r0
 80081c4:	4689      	mov	r9, r1
 80081c6:	f7f7 ffc7 	bl	8000158 <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f7 ffc1 	bl	8000158 <__aeabi_dsub>
 80081d6:	4642      	mov	r2, r8
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	464b      	mov	r3, r9
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 f971 	bl	80004c8 <__aeabi_dmul>
 80081e6:	a35c      	add	r3, pc, #368	; (adr r3, 8008358 <__ieee754_pow+0x9d0>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	f7f8 f96a 	bl	80004c8 <__aeabi_dmul>
 80081f4:	a35a      	add	r3, pc, #360	; (adr r3, 8008360 <__ieee754_pow+0x9d8>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f7 ffad 	bl	8000158 <__aeabi_dsub>
 80081fe:	4622      	mov	r2, r4
 8008200:	462b      	mov	r3, r5
 8008202:	f7f8 f961 	bl	80004c8 <__aeabi_dmul>
 8008206:	a358      	add	r3, pc, #352	; (adr r3, 8008368 <__ieee754_pow+0x9e0>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f7 ffa6 	bl	800015c <__adddf3>
 8008210:	4622      	mov	r2, r4
 8008212:	462b      	mov	r3, r5
 8008214:	f7f8 f958 	bl	80004c8 <__aeabi_dmul>
 8008218:	a355      	add	r3, pc, #340	; (adr r3, 8008370 <__ieee754_pow+0x9e8>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f7 ff9b 	bl	8000158 <__aeabi_dsub>
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	f7f8 f94f 	bl	80004c8 <__aeabi_dmul>
 800822a:	a353      	add	r3, pc, #332	; (adr r3, 8008378 <__ieee754_pow+0x9f0>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f7 ff94 	bl	800015c <__adddf3>
 8008234:	4622      	mov	r2, r4
 8008236:	462b      	mov	r3, r5
 8008238:	f7f8 f946 	bl	80004c8 <__aeabi_dmul>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4640      	mov	r0, r8
 8008242:	4649      	mov	r1, r9
 8008244:	f7f7 ff88 	bl	8000158 <__aeabi_dsub>
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f938 	bl	80004c8 <__aeabi_dmul>
 8008258:	2200      	movs	r2, #0
 800825a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800825e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008262:	4620      	mov	r0, r4
 8008264:	4629      	mov	r1, r5
 8008266:	f7f7 ff77 	bl	8000158 <__aeabi_dsub>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008272:	f7f8 fa53 	bl	800071c <__aeabi_ddiv>
 8008276:	4632      	mov	r2, r6
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	463b      	mov	r3, r7
 800827e:	4640      	mov	r0, r8
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 f921 	bl	80004c8 <__aeabi_dmul>
 8008286:	4632      	mov	r2, r6
 8008288:	463b      	mov	r3, r7
 800828a:	f7f7 ff67 	bl	800015c <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f7 ff5f 	bl	8000158 <__aeabi_dsub>
 800829a:	4642      	mov	r2, r8
 800829c:	464b      	mov	r3, r9
 800829e:	f7f7 ff5b 	bl	8000158 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	2000      	movs	r0, #0
 80082a8:	4939      	ldr	r1, [pc, #228]	; (8008390 <__ieee754_pow+0xa08>)
 80082aa:	f7f7 ff55 	bl	8000158 <__aeabi_dsub>
 80082ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80082b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80082b6:	da2b      	bge.n	8008310 <__ieee754_pow+0x988>
 80082b8:	4652      	mov	r2, sl
 80082ba:	f001 f8e9 	bl	8009490 <scalbn>
 80082be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c2:	f7ff bbf6 	b.w	8007ab2 <__ieee754_pow+0x12a>
 80082c6:	4b33      	ldr	r3, [pc, #204]	; (8008394 <__ieee754_pow+0xa0c>)
 80082c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80082cc:	429f      	cmp	r7, r3
 80082ce:	f77f af13 	ble.w	80080f8 <__ieee754_pow+0x770>
 80082d2:	4b31      	ldr	r3, [pc, #196]	; (8008398 <__ieee754_pow+0xa10>)
 80082d4:	440b      	add	r3, r1
 80082d6:	4303      	orrs	r3, r0
 80082d8:	d00b      	beq.n	80082f2 <__ieee754_pow+0x96a>
 80082da:	a329      	add	r3, pc, #164	; (adr r3, 8008380 <__ieee754_pow+0x9f8>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e4:	f7f8 f8f0 	bl	80004c8 <__aeabi_dmul>
 80082e8:	a325      	add	r3, pc, #148	; (adr r3, 8008380 <__ieee754_pow+0x9f8>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7ff bbe0 	b.w	8007ab2 <__ieee754_pow+0x12a>
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f7 ff2f 	bl	8000158 <__aeabi_dsub>
 80082fa:	4642      	mov	r2, r8
 80082fc:	464b      	mov	r3, r9
 80082fe:	f7f8 fb69 	bl	80009d4 <__aeabi_dcmpge>
 8008302:	2800      	cmp	r0, #0
 8008304:	f43f aef8 	beq.w	80080f8 <__ieee754_pow+0x770>
 8008308:	e7e7      	b.n	80082da <__ieee754_pow+0x952>
 800830a:	f04f 0a00 	mov.w	sl, #0
 800830e:	e71e      	b.n	800814e <__ieee754_pow+0x7c6>
 8008310:	4621      	mov	r1, r4
 8008312:	e7d4      	b.n	80082be <__ieee754_pow+0x936>
 8008314:	f04f 0b00 	mov.w	fp, #0
 8008318:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008390 <__ieee754_pow+0xa08>
 800831c:	f7ff bb95 	b.w	8007a4a <__ieee754_pow+0xc2>
 8008320:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008324:	f7ff bb91 	b.w	8007a4a <__ieee754_pow+0xc2>
 8008328:	4638      	mov	r0, r7
 800832a:	4641      	mov	r1, r8
 800832c:	f7ff bbc3 	b.w	8007ab6 <__ieee754_pow+0x12e>
 8008330:	9200      	str	r2, [sp, #0]
 8008332:	f7ff bb9f 	b.w	8007a74 <__ieee754_pow+0xec>
 8008336:	bf00      	nop
 8008338:	652b82fe 	.word	0x652b82fe
 800833c:	3c971547 	.word	0x3c971547
 8008340:	00000000 	.word	0x00000000
 8008344:	3fe62e43 	.word	0x3fe62e43
 8008348:	fefa39ef 	.word	0xfefa39ef
 800834c:	3fe62e42 	.word	0x3fe62e42
 8008350:	0ca86c39 	.word	0x0ca86c39
 8008354:	be205c61 	.word	0xbe205c61
 8008358:	72bea4d0 	.word	0x72bea4d0
 800835c:	3e663769 	.word	0x3e663769
 8008360:	c5d26bf1 	.word	0xc5d26bf1
 8008364:	3ebbbd41 	.word	0x3ebbbd41
 8008368:	af25de2c 	.word	0xaf25de2c
 800836c:	3f11566a 	.word	0x3f11566a
 8008370:	16bebd93 	.word	0x16bebd93
 8008374:	3f66c16c 	.word	0x3f66c16c
 8008378:	5555553e 	.word	0x5555553e
 800837c:	3fc55555 	.word	0x3fc55555
 8008380:	c2f8f359 	.word	0xc2f8f359
 8008384:	01a56e1f 	.word	0x01a56e1f
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	000fffff 	.word	0x000fffff
 8008390:	3ff00000 	.word	0x3ff00000
 8008394:	4090cbff 	.word	0x4090cbff
 8008398:	3f6f3400 	.word	0x3f6f3400
 800839c:	00000000 	.word	0x00000000

080083a0 <__ieee754_rem_pio2>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4614      	mov	r4, r2
 80083a6:	4ac2      	ldr	r2, [pc, #776]	; (80086b0 <__ieee754_rem_pio2+0x310>)
 80083a8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80083ac:	4592      	cmp	sl, r2
 80083ae:	b08d      	sub	sp, #52	; 0x34
 80083b0:	468b      	mov	fp, r1
 80083b2:	dc07      	bgt.n	80083c4 <__ieee754_rem_pio2+0x24>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	e9c4 0100 	strd	r0, r1, [r4]
 80083bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80083c0:	2500      	movs	r5, #0
 80083c2:	e023      	b.n	800840c <__ieee754_rem_pio2+0x6c>
 80083c4:	4abb      	ldr	r2, [pc, #748]	; (80086b4 <__ieee754_rem_pio2+0x314>)
 80083c6:	4592      	cmp	sl, r2
 80083c8:	dc71      	bgt.n	80084ae <__ieee754_rem_pio2+0x10e>
 80083ca:	a3ab      	add	r3, pc, #684	; (adr r3, 8008678 <__ieee754_rem_pio2+0x2d8>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	2900      	cmp	r1, #0
 80083d2:	4db9      	ldr	r5, [pc, #740]	; (80086b8 <__ieee754_rem_pio2+0x318>)
 80083d4:	dd36      	ble.n	8008444 <__ieee754_rem_pio2+0xa4>
 80083d6:	f7f7 febf 	bl	8000158 <__aeabi_dsub>
 80083da:	45aa      	cmp	sl, r5
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	d018      	beq.n	8008414 <__ieee754_rem_pio2+0x74>
 80083e2:	a3a7      	add	r3, pc, #668	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2e0>)
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f7 feb6 	bl	8000158 <__aeabi_dsub>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	e9c4 2300 	strd	r2, r3, [r4]
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f7 feae 	bl	8000158 <__aeabi_dsub>
 80083fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2e0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 fea9 	bl	8000158 <__aeabi_dsub>
 8008406:	2501      	movs	r5, #1
 8008408:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800840c:	4628      	mov	r0, r5
 800840e:	b00d      	add	sp, #52	; 0x34
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	a39c      	add	r3, pc, #624	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e8>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 fe9d 	bl	8000158 <__aeabi_dsub>
 800841e:	a39c      	add	r3, pc, #624	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2f0>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f7f7 fe96 	bl	8000158 <__aeabi_dsub>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4630      	mov	r0, r6
 8008432:	e9c4 2300 	strd	r2, r3, [r4]
 8008436:	4639      	mov	r1, r7
 8008438:	f7f7 fe8e 	bl	8000158 <__aeabi_dsub>
 800843c:	a394      	add	r3, pc, #592	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2f0>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	e7de      	b.n	8008402 <__ieee754_rem_pio2+0x62>
 8008444:	f7f7 fe8a 	bl	800015c <__adddf3>
 8008448:	45aa      	cmp	sl, r5
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	d016      	beq.n	800847e <__ieee754_rem_pio2+0xde>
 8008450:	a38b      	add	r3, pc, #556	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2e0>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f7 fe81 	bl	800015c <__adddf3>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4630      	mov	r0, r6
 8008460:	e9c4 2300 	strd	r2, r3, [r4]
 8008464:	4639      	mov	r1, r7
 8008466:	f7f7 fe77 	bl	8000158 <__aeabi_dsub>
 800846a:	a385      	add	r3, pc, #532	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2e0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 fe74 	bl	800015c <__adddf3>
 8008474:	f04f 35ff 	mov.w	r5, #4294967295
 8008478:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800847c:	e7c6      	b.n	800840c <__ieee754_rem_pio2+0x6c>
 800847e:	a382      	add	r3, pc, #520	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e8>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f7 fe6a 	bl	800015c <__adddf3>
 8008488:	a381      	add	r3, pc, #516	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2f0>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	f7f7 fe63 	bl	800015c <__adddf3>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4630      	mov	r0, r6
 800849c:	e9c4 2300 	strd	r2, r3, [r4]
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 fe59 	bl	8000158 <__aeabi_dsub>
 80084a6:	a37a      	add	r3, pc, #488	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2f0>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	e7e0      	b.n	8008470 <__ieee754_rem_pio2+0xd0>
 80084ae:	4a83      	ldr	r2, [pc, #524]	; (80086bc <__ieee754_rem_pio2+0x31c>)
 80084b0:	4592      	cmp	sl, r2
 80084b2:	f300 80d2 	bgt.w	800865a <__ieee754_rem_pio2+0x2ba>
 80084b6:	f7ff f877 	bl	80075a8 <fabs>
 80084ba:	a377      	add	r3, pc, #476	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	4606      	mov	r6, r0
 80084c2:	460f      	mov	r7, r1
 80084c4:	f7f8 f800 	bl	80004c8 <__aeabi_dmul>
 80084c8:	2200      	movs	r2, #0
 80084ca:	4b7d      	ldr	r3, [pc, #500]	; (80086c0 <__ieee754_rem_pio2+0x320>)
 80084cc:	f7f7 fe46 	bl	800015c <__adddf3>
 80084d0:	f7f8 faaa 	bl	8000a28 <__aeabi_d2iz>
 80084d4:	4605      	mov	r5, r0
 80084d6:	f7f7 ff8d 	bl	80003f4 <__aeabi_i2d>
 80084da:	a367      	add	r3, pc, #412	; (adr r3, 8008678 <__ieee754_rem_pio2+0x2d8>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e4:	f7f7 fff0 	bl	80004c8 <__aeabi_dmul>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f7 fe32 	bl	8000158 <__aeabi_dsub>
 80084f4:	a362      	add	r3, pc, #392	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2e0>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008502:	f7f7 ffe1 	bl	80004c8 <__aeabi_dmul>
 8008506:	2d1f      	cmp	r5, #31
 8008508:	4680      	mov	r8, r0
 800850a:	4689      	mov	r9, r1
 800850c:	dc0e      	bgt.n	800852c <__ieee754_rem_pio2+0x18c>
 800850e:	4b6d      	ldr	r3, [pc, #436]	; (80086c4 <__ieee754_rem_pio2+0x324>)
 8008510:	1e6a      	subs	r2, r5, #1
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	4553      	cmp	r3, sl
 8008518:	d008      	beq.n	800852c <__ieee754_rem_pio2+0x18c>
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f7 fe19 	bl	8000158 <__aeabi_dsub>
 8008526:	e9c4 0100 	strd	r0, r1, [r4]
 800852a:	e011      	b.n	8008550 <__ieee754_rem_pio2+0x1b0>
 800852c:	464b      	mov	r3, r9
 800852e:	4642      	mov	r2, r8
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 fe10 	bl	8000158 <__aeabi_dsub>
 8008538:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800853c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008540:	ebaa 0303 	sub.w	r3, sl, r3
 8008544:	2b10      	cmp	r3, #16
 8008546:	dc1f      	bgt.n	8008588 <__ieee754_rem_pio2+0x1e8>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	e9c4 2300 	strd	r2, r3, [r4]
 8008550:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008554:	4630      	mov	r0, r6
 8008556:	4653      	mov	r3, sl
 8008558:	4639      	mov	r1, r7
 800855a:	f7f7 fdfd 	bl	8000158 <__aeabi_dsub>
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	f7f7 fdf9 	bl	8000158 <__aeabi_dsub>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	f1bb 0f00 	cmp.w	fp, #0
 800856e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008572:	f6bf af4b 	bge.w	800840c <__ieee754_rem_pio2+0x6c>
 8008576:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800857a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800857e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008582:	60e1      	str	r1, [r4, #12]
 8008584:	426d      	negs	r5, r5
 8008586:	e741      	b.n	800840c <__ieee754_rem_pio2+0x6c>
 8008588:	a33f      	add	r3, pc, #252	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e8>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008592:	f7f7 ff99 	bl	80004c8 <__aeabi_dmul>
 8008596:	4680      	mov	r8, r0
 8008598:	4689      	mov	r9, r1
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4630      	mov	r0, r6
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f7 fdd9 	bl	8000158 <__aeabi_dsub>
 80085a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4630      	mov	r0, r6
 80085b0:	4639      	mov	r1, r7
 80085b2:	f7f7 fdd1 	bl	8000158 <__aeabi_dsub>
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	f7f7 fdcd 	bl	8000158 <__aeabi_dsub>
 80085be:	a334      	add	r3, pc, #208	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2f0>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085cc:	f7f7 ff7c 	bl	80004c8 <__aeabi_dmul>
 80085d0:	4632      	mov	r2, r6
 80085d2:	463b      	mov	r3, r7
 80085d4:	f7f7 fdc0 	bl	8000158 <__aeabi_dsub>
 80085d8:	460b      	mov	r3, r1
 80085da:	4602      	mov	r2, r0
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e4:	f7f7 fdb8 	bl	8000158 <__aeabi_dsub>
 80085e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085ec:	ebaa 0a03 	sub.w	sl, sl, r3
 80085f0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 80085f4:	dc06      	bgt.n	8008604 <__ieee754_rem_pio2+0x264>
 80085f6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	e9c4 2300 	strd	r2, r3, [r4]
 8008602:	e7a5      	b.n	8008550 <__ieee754_rem_pio2+0x1b0>
 8008604:	a326      	add	r3, pc, #152	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x300>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860e:	f7f7 ff5b 	bl	80004c8 <__aeabi_dmul>
 8008612:	4680      	mov	r8, r0
 8008614:	4689      	mov	r9, r1
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800861e:	f7f7 fd9b 	bl	8000158 <__aeabi_dsub>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862e:	f7f7 fd93 	bl	8000158 <__aeabi_dsub>
 8008632:	4642      	mov	r2, r8
 8008634:	464b      	mov	r3, r9
 8008636:	f7f7 fd8f 	bl	8000158 <__aeabi_dsub>
 800863a:	a31b      	add	r3, pc, #108	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x308>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	4680      	mov	r8, r0
 8008642:	4689      	mov	r9, r1
 8008644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008648:	f7f7 ff3e 	bl	80004c8 <__aeabi_dmul>
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	f7f7 fd82 	bl	8000158 <__aeabi_dsub>
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	e75f      	b.n	800851a <__ieee754_rem_pio2+0x17a>
 800865a:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <__ieee754_rem_pio2+0x328>)
 800865c:	4592      	cmp	sl, r2
 800865e:	dd35      	ble.n	80086cc <__ieee754_rem_pio2+0x32c>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	f7f7 fd78 	bl	8000158 <__aeabi_dsub>
 8008668:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800866c:	e9c4 0100 	strd	r0, r1, [r4]
 8008670:	e6a6      	b.n	80083c0 <__ieee754_rem_pio2+0x20>
 8008672:	bf00      	nop
 8008674:	f3af 8000 	nop.w
 8008678:	54400000 	.word	0x54400000
 800867c:	3ff921fb 	.word	0x3ff921fb
 8008680:	1a626331 	.word	0x1a626331
 8008684:	3dd0b461 	.word	0x3dd0b461
 8008688:	1a600000 	.word	0x1a600000
 800868c:	3dd0b461 	.word	0x3dd0b461
 8008690:	2e037073 	.word	0x2e037073
 8008694:	3ba3198a 	.word	0x3ba3198a
 8008698:	6dc9c883 	.word	0x6dc9c883
 800869c:	3fe45f30 	.word	0x3fe45f30
 80086a0:	2e000000 	.word	0x2e000000
 80086a4:	3ba3198a 	.word	0x3ba3198a
 80086a8:	252049c1 	.word	0x252049c1
 80086ac:	397b839a 	.word	0x397b839a
 80086b0:	3fe921fb 	.word	0x3fe921fb
 80086b4:	4002d97b 	.word	0x4002d97b
 80086b8:	3ff921fb 	.word	0x3ff921fb
 80086bc:	413921fb 	.word	0x413921fb
 80086c0:	3fe00000 	.word	0x3fe00000
 80086c4:	08009798 	.word	0x08009798
 80086c8:	7fefffff 	.word	0x7fefffff
 80086cc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80086d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80086d4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80086d8:	460f      	mov	r7, r1
 80086da:	4606      	mov	r6, r0
 80086dc:	f7f8 f9a4 	bl	8000a28 <__aeabi_d2iz>
 80086e0:	f7f7 fe88 	bl	80003f4 <__aeabi_i2d>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086f0:	f7f7 fd32 	bl	8000158 <__aeabi_dsub>
 80086f4:	2200      	movs	r2, #0
 80086f6:	4b20      	ldr	r3, [pc, #128]	; (8008778 <__ieee754_rem_pio2+0x3d8>)
 80086f8:	f7f7 fee6 	bl	80004c8 <__aeabi_dmul>
 80086fc:	460f      	mov	r7, r1
 80086fe:	4606      	mov	r6, r0
 8008700:	f7f8 f992 	bl	8000a28 <__aeabi_d2iz>
 8008704:	f7f7 fe76 	bl	80003f4 <__aeabi_i2d>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008714:	f7f7 fd20 	bl	8000158 <__aeabi_dsub>
 8008718:	2200      	movs	r2, #0
 800871a:	4b17      	ldr	r3, [pc, #92]	; (8008778 <__ieee754_rem_pio2+0x3d8>)
 800871c:	f7f7 fed4 	bl	80004c8 <__aeabi_dmul>
 8008720:	f04f 0803 	mov.w	r8, #3
 8008724:	2600      	movs	r6, #0
 8008726:	2700      	movs	r7, #0
 8008728:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800872c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008730:	4632      	mov	r2, r6
 8008732:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008736:	463b      	mov	r3, r7
 8008738:	f108 3aff 	add.w	sl, r8, #4294967295
 800873c:	f7f8 f92c 	bl	8000998 <__aeabi_dcmpeq>
 8008740:	b9b8      	cbnz	r0, 8008772 <__ieee754_rem_pio2+0x3d2>
 8008742:	4b0e      	ldr	r3, [pc, #56]	; (800877c <__ieee754_rem_pio2+0x3dc>)
 8008744:	462a      	mov	r2, r5
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	2302      	movs	r3, #2
 800874a:	4621      	mov	r1, r4
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	a806      	add	r0, sp, #24
 8008750:	4643      	mov	r3, r8
 8008752:	f000 f97f 	bl	8008a54 <__kernel_rem_pio2>
 8008756:	f1bb 0f00 	cmp.w	fp, #0
 800875a:	4605      	mov	r5, r0
 800875c:	f6bf ae56 	bge.w	800840c <__ieee754_rem_pio2+0x6c>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	68e3      	ldr	r3, [r4, #12]
 800876a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800876e:	60e3      	str	r3, [r4, #12]
 8008770:	e708      	b.n	8008584 <__ieee754_rem_pio2+0x1e4>
 8008772:	46d0      	mov	r8, sl
 8008774:	e7dc      	b.n	8008730 <__ieee754_rem_pio2+0x390>
 8008776:	bf00      	nop
 8008778:	41700000 	.word	0x41700000
 800877c:	08009818 	.word	0x08009818

08008780 <__ieee754_sqrt>:
 8008780:	4b54      	ldr	r3, [pc, #336]	; (80088d4 <__ieee754_sqrt+0x154>)
 8008782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008786:	438b      	bics	r3, r1
 8008788:	4606      	mov	r6, r0
 800878a:	460d      	mov	r5, r1
 800878c:	460a      	mov	r2, r1
 800878e:	460c      	mov	r4, r1
 8008790:	d10f      	bne.n	80087b2 <__ieee754_sqrt+0x32>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	f7f7 fe97 	bl	80004c8 <__aeabi_dmul>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4630      	mov	r0, r6
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f7 fcdb 	bl	800015c <__adddf3>
 80087a6:	4606      	mov	r6, r0
 80087a8:	460d      	mov	r5, r1
 80087aa:	4630      	mov	r0, r6
 80087ac:	4629      	mov	r1, r5
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b2:	2900      	cmp	r1, #0
 80087b4:	4607      	mov	r7, r0
 80087b6:	4603      	mov	r3, r0
 80087b8:	dc0e      	bgt.n	80087d8 <__ieee754_sqrt+0x58>
 80087ba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80087be:	ea5c 0707 	orrs.w	r7, ip, r7
 80087c2:	d0f2      	beq.n	80087aa <__ieee754_sqrt+0x2a>
 80087c4:	b141      	cbz	r1, 80087d8 <__ieee754_sqrt+0x58>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	f7f7 fcc5 	bl	8000158 <__aeabi_dsub>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	f7f7 ffa3 	bl	800071c <__aeabi_ddiv>
 80087d6:	e7e6      	b.n	80087a6 <__ieee754_sqrt+0x26>
 80087d8:	1512      	asrs	r2, r2, #20
 80087da:	d074      	beq.n	80088c6 <__ieee754_sqrt+0x146>
 80087dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087e0:	07d5      	lsls	r5, r2, #31
 80087e2:	f04f 0500 	mov.w	r5, #0
 80087e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80087ea:	bf48      	it	mi
 80087ec:	0fd9      	lsrmi	r1, r3, #31
 80087ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80087f2:	bf44      	itt	mi
 80087f4:	005b      	lslmi	r3, r3, #1
 80087f6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80087fa:	1051      	asrs	r1, r2, #1
 80087fc:	0fda      	lsrs	r2, r3, #31
 80087fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008802:	4628      	mov	r0, r5
 8008804:	2216      	movs	r2, #22
 8008806:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	1987      	adds	r7, r0, r6
 800880e:	42a7      	cmp	r7, r4
 8008810:	bfde      	ittt	le
 8008812:	19b8      	addle	r0, r7, r6
 8008814:	1be4      	suble	r4, r4, r7
 8008816:	19ad      	addle	r5, r5, r6
 8008818:	0fdf      	lsrs	r7, r3, #31
 800881a:	3a01      	subs	r2, #1
 800881c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008824:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008828:	d1f0      	bne.n	800880c <__ieee754_sqrt+0x8c>
 800882a:	f04f 0c20 	mov.w	ip, #32
 800882e:	4696      	mov	lr, r2
 8008830:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008834:	4284      	cmp	r4, r0
 8008836:	eb06 070e 	add.w	r7, r6, lr
 800883a:	dc02      	bgt.n	8008842 <__ieee754_sqrt+0xc2>
 800883c:	d112      	bne.n	8008864 <__ieee754_sqrt+0xe4>
 800883e:	429f      	cmp	r7, r3
 8008840:	d810      	bhi.n	8008864 <__ieee754_sqrt+0xe4>
 8008842:	2f00      	cmp	r7, #0
 8008844:	eb07 0e06 	add.w	lr, r7, r6
 8008848:	da42      	bge.n	80088d0 <__ieee754_sqrt+0x150>
 800884a:	f1be 0f00 	cmp.w	lr, #0
 800884e:	db3f      	blt.n	80088d0 <__ieee754_sqrt+0x150>
 8008850:	f100 0801 	add.w	r8, r0, #1
 8008854:	1a24      	subs	r4, r4, r0
 8008856:	4640      	mov	r0, r8
 8008858:	429f      	cmp	r7, r3
 800885a:	bf88      	it	hi
 800885c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008860:	1bdb      	subs	r3, r3, r7
 8008862:	4432      	add	r2, r6
 8008864:	0064      	lsls	r4, r4, #1
 8008866:	f1bc 0c01 	subs.w	ip, ip, #1
 800886a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800886e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008876:	d1dd      	bne.n	8008834 <__ieee754_sqrt+0xb4>
 8008878:	4323      	orrs	r3, r4
 800887a:	d006      	beq.n	800888a <__ieee754_sqrt+0x10a>
 800887c:	1c54      	adds	r4, r2, #1
 800887e:	bf0b      	itete	eq
 8008880:	4662      	moveq	r2, ip
 8008882:	3201      	addne	r2, #1
 8008884:	3501      	addeq	r5, #1
 8008886:	f022 0201 	bicne.w	r2, r2, #1
 800888a:	106b      	asrs	r3, r5, #1
 800888c:	0852      	lsrs	r2, r2, #1
 800888e:	07e8      	lsls	r0, r5, #31
 8008890:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008894:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008898:	bf48      	it	mi
 800889a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800889e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80088a2:	4616      	mov	r6, r2
 80088a4:	e781      	b.n	80087aa <__ieee754_sqrt+0x2a>
 80088a6:	0adc      	lsrs	r4, r3, #11
 80088a8:	3915      	subs	r1, #21
 80088aa:	055b      	lsls	r3, r3, #21
 80088ac:	2c00      	cmp	r4, #0
 80088ae:	d0fa      	beq.n	80088a6 <__ieee754_sqrt+0x126>
 80088b0:	02e6      	lsls	r6, r4, #11
 80088b2:	d50a      	bpl.n	80088ca <__ieee754_sqrt+0x14a>
 80088b4:	f1c2 0020 	rsb	r0, r2, #32
 80088b8:	fa23 f000 	lsr.w	r0, r3, r0
 80088bc:	1e55      	subs	r5, r2, #1
 80088be:	4093      	lsls	r3, r2
 80088c0:	4304      	orrs	r4, r0
 80088c2:	1b4a      	subs	r2, r1, r5
 80088c4:	e78a      	b.n	80087dc <__ieee754_sqrt+0x5c>
 80088c6:	4611      	mov	r1, r2
 80088c8:	e7f0      	b.n	80088ac <__ieee754_sqrt+0x12c>
 80088ca:	0064      	lsls	r4, r4, #1
 80088cc:	3201      	adds	r2, #1
 80088ce:	e7ef      	b.n	80088b0 <__ieee754_sqrt+0x130>
 80088d0:	4680      	mov	r8, r0
 80088d2:	e7bf      	b.n	8008854 <__ieee754_sqrt+0xd4>
 80088d4:	7ff00000 	.word	0x7ff00000

080088d8 <__kernel_cos>:
 80088d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80088e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80088e4:	4680      	mov	r8, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	e9cd 2300 	strd	r2, r3, [sp]
 80088ec:	da04      	bge.n	80088f8 <__kernel_cos+0x20>
 80088ee:	f7f8 f89b 	bl	8000a28 <__aeabi_d2iz>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f000 8086 	beq.w	8008a04 <__kernel_cos+0x12c>
 80088f8:	4642      	mov	r2, r8
 80088fa:	463b      	mov	r3, r7
 80088fc:	4640      	mov	r0, r8
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f7 fde2 	bl	80004c8 <__aeabi_dmul>
 8008904:	2200      	movs	r2, #0
 8008906:	4b4e      	ldr	r3, [pc, #312]	; (8008a40 <__kernel_cos+0x168>)
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	f7f7 fddc 	bl	80004c8 <__aeabi_dmul>
 8008910:	a33f      	add	r3, pc, #252	; (adr r3, 8008a10 <__kernel_cos+0x138>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4682      	mov	sl, r0
 8008918:	468b      	mov	fp, r1
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f7 fdd3 	bl	80004c8 <__aeabi_dmul>
 8008922:	a33d      	add	r3, pc, #244	; (adr r3, 8008a18 <__kernel_cos+0x140>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fc18 	bl	800015c <__adddf3>
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	f7f7 fdca 	bl	80004c8 <__aeabi_dmul>
 8008934:	a33a      	add	r3, pc, #232	; (adr r3, 8008a20 <__kernel_cos+0x148>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 fc0d 	bl	8000158 <__aeabi_dsub>
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	f7f7 fdc1 	bl	80004c8 <__aeabi_dmul>
 8008946:	a338      	add	r3, pc, #224	; (adr r3, 8008a28 <__kernel_cos+0x150>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f7 fc06 	bl	800015c <__adddf3>
 8008950:	4622      	mov	r2, r4
 8008952:	462b      	mov	r3, r5
 8008954:	f7f7 fdb8 	bl	80004c8 <__aeabi_dmul>
 8008958:	a335      	add	r3, pc, #212	; (adr r3, 8008a30 <__kernel_cos+0x158>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fbfb 	bl	8000158 <__aeabi_dsub>
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fdaf 	bl	80004c8 <__aeabi_dmul>
 800896a:	a333      	add	r3, pc, #204	; (adr r3, 8008a38 <__kernel_cos+0x160>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fbf4 	bl	800015c <__adddf3>
 8008974:	4622      	mov	r2, r4
 8008976:	462b      	mov	r3, r5
 8008978:	f7f7 fda6 	bl	80004c8 <__aeabi_dmul>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fda2 	bl	80004c8 <__aeabi_dmul>
 8008984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	4640      	mov	r0, r8
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fd9a 	bl	80004c8 <__aeabi_dmul>
 8008994:	460b      	mov	r3, r1
 8008996:	4602      	mov	r2, r0
 8008998:	4629      	mov	r1, r5
 800899a:	4620      	mov	r0, r4
 800899c:	f7f7 fbdc 	bl	8000158 <__aeabi_dsub>
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <__kernel_cos+0x16c>)
 80089a2:	4680      	mov	r8, r0
 80089a4:	429e      	cmp	r6, r3
 80089a6:	4689      	mov	r9, r1
 80089a8:	dc0e      	bgt.n	80089c8 <__kernel_cos+0xf0>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4650      	mov	r0, sl
 80089b0:	4659      	mov	r1, fp
 80089b2:	f7f7 fbd1 	bl	8000158 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	2000      	movs	r0, #0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4922      	ldr	r1, [pc, #136]	; (8008a48 <__kernel_cos+0x170>)
 80089be:	f7f7 fbcb 	bl	8000158 <__aeabi_dsub>
 80089c2:	b003      	add	sp, #12
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	2400      	movs	r4, #0
 80089ca:	4b20      	ldr	r3, [pc, #128]	; (8008a4c <__kernel_cos+0x174>)
 80089cc:	4622      	mov	r2, r4
 80089ce:	429e      	cmp	r6, r3
 80089d0:	bfcc      	ite	gt
 80089d2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008a50 <__kernel_cos+0x178>)
 80089d4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80089d8:	462b      	mov	r3, r5
 80089da:	2000      	movs	r0, #0
 80089dc:	491a      	ldr	r1, [pc, #104]	; (8008a48 <__kernel_cos+0x170>)
 80089de:	f7f7 fbbb 	bl	8000158 <__aeabi_dsub>
 80089e2:	4622      	mov	r2, r4
 80089e4:	4606      	mov	r6, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	462b      	mov	r3, r5
 80089ea:	4650      	mov	r0, sl
 80089ec:	4659      	mov	r1, fp
 80089ee:	f7f7 fbb3 	bl	8000158 <__aeabi_dsub>
 80089f2:	4642      	mov	r2, r8
 80089f4:	464b      	mov	r3, r9
 80089f6:	f7f7 fbaf 	bl	8000158 <__aeabi_dsub>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	e7dc      	b.n	80089be <__kernel_cos+0xe6>
 8008a04:	2000      	movs	r0, #0
 8008a06:	4910      	ldr	r1, [pc, #64]	; (8008a48 <__kernel_cos+0x170>)
 8008a08:	e7db      	b.n	80089c2 <__kernel_cos+0xea>
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w
 8008a10:	be8838d4 	.word	0xbe8838d4
 8008a14:	bda8fae9 	.word	0xbda8fae9
 8008a18:	bdb4b1c4 	.word	0xbdb4b1c4
 8008a1c:	3e21ee9e 	.word	0x3e21ee9e
 8008a20:	809c52ad 	.word	0x809c52ad
 8008a24:	3e927e4f 	.word	0x3e927e4f
 8008a28:	19cb1590 	.word	0x19cb1590
 8008a2c:	3efa01a0 	.word	0x3efa01a0
 8008a30:	16c15177 	.word	0x16c15177
 8008a34:	3f56c16c 	.word	0x3f56c16c
 8008a38:	5555554c 	.word	0x5555554c
 8008a3c:	3fa55555 	.word	0x3fa55555
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	3fd33332 	.word	0x3fd33332
 8008a48:	3ff00000 	.word	0x3ff00000
 8008a4c:	3fe90000 	.word	0x3fe90000
 8008a50:	3fd20000 	.word	0x3fd20000

08008a54 <__kernel_rem_pio2>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008a5c:	9307      	str	r3, [sp, #28]
 8008a5e:	9104      	str	r1, [sp, #16]
 8008a60:	4bbf      	ldr	r3, [pc, #764]	; (8008d60 <__kernel_rem_pio2+0x30c>)
 8008a62:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008a64:	1ed4      	subs	r4, r2, #3
 8008a66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	9302      	str	r3, [sp, #8]
 8008a6e:	9b07      	ldr	r3, [sp, #28]
 8008a70:	9008      	str	r0, [sp, #32]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	9306      	str	r3, [sp, #24]
 8008a76:	2318      	movs	r3, #24
 8008a78:	fb94 f4f3 	sdiv	r4, r4, r3
 8008a7c:	f06f 0317 	mvn.w	r3, #23
 8008a80:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008a84:	fb04 3303 	mla	r3, r4, r3, r3
 8008a88:	eb03 0a02 	add.w	sl, r3, r2
 8008a8c:	9a06      	ldr	r2, [sp, #24]
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	1aa7      	subs	r7, r4, r2
 8008a92:	eb03 0802 	add.w	r8, r3, r2
 8008a96:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008a98:	2200      	movs	r2, #0
 8008a9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	ae1e      	add	r6, sp, #120	; 0x78
 8008aa2:	4545      	cmp	r5, r8
 8008aa4:	dd14      	ble.n	8008ad0 <__kernel_rem_pio2+0x7c>
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	429e      	cmp	r6, r3
 8008ab0:	dc39      	bgt.n	8008b26 <__kernel_rem_pio2+0xd2>
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	f04f 0800 	mov.w	r8, #0
 8008ab8:	3b08      	subs	r3, #8
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	9b07      	ldr	r3, [sp, #28]
 8008abe:	f04f 0900 	mov.w	r9, #0
 8008ac2:	199d      	adds	r5, r3, r6
 8008ac4:	ab20      	add	r3, sp, #128	; 0x80
 8008ac6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	2700      	movs	r7, #0
 8008ace:	e023      	b.n	8008b18 <__kernel_rem_pio2+0xc4>
 8008ad0:	42ef      	cmn	r7, r5
 8008ad2:	d40b      	bmi.n	8008aec <__kernel_rem_pio2+0x98>
 8008ad4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008ad8:	e9cd 2300 	strd	r2, r3, [sp]
 8008adc:	f7f7 fc8a 	bl	80003f4 <__aeabi_i2d>
 8008ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8008ae8:	3501      	adds	r5, #1
 8008aea:	e7da      	b.n	8008aa2 <__kernel_rem_pio2+0x4e>
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	e7f8      	b.n	8008ae4 <__kernel_rem_pio2+0x90>
 8008af2:	9905      	ldr	r1, [sp, #20]
 8008af4:	9d00      	ldr	r5, [sp, #0]
 8008af6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008b00:	9500      	str	r5, [sp, #0]
 8008b02:	f7f7 fce1 	bl	80004c8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	f7f7 fb25 	bl	800015c <__adddf3>
 8008b12:	4680      	mov	r8, r0
 8008b14:	4689      	mov	r9, r1
 8008b16:	3701      	adds	r7, #1
 8008b18:	9b06      	ldr	r3, [sp, #24]
 8008b1a:	429f      	cmp	r7, r3
 8008b1c:	dde9      	ble.n	8008af2 <__kernel_rem_pio2+0x9e>
 8008b1e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7c2      	b.n	8008aac <__kernel_rem_pio2+0x58>
 8008b26:	9b02      	ldr	r3, [sp, #8]
 8008b28:	aa0c      	add	r2, sp, #48	; 0x30
 8008b2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b30:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008b32:	9f02      	ldr	r7, [sp, #8]
 8008b34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b38:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	ab98      	add	r3, sp, #608	; 0x260
 8008b3e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8008b42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b4a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008b4e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008b52:	ab98      	add	r3, sp, #608	; 0x260
 8008b54:	445b      	add	r3, fp
 8008b56:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8008b5a:	1bbb      	subs	r3, r7, r6
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dc71      	bgt.n	8008c44 <__kernel_rem_pio2+0x1f0>
 8008b60:	4652      	mov	r2, sl
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	f000 fc93 	bl	8009490 <scalbn>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b70:	4604      	mov	r4, r0
 8008b72:	460d      	mov	r5, r1
 8008b74:	f7f7 fca8 	bl	80004c8 <__aeabi_dmul>
 8008b78:	f000 fb72 	bl	8009260 <floor>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4b79      	ldr	r3, [pc, #484]	; (8008d64 <__kernel_rem_pio2+0x310>)
 8008b80:	f7f7 fca2 	bl	80004c8 <__aeabi_dmul>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	f7f7 fae4 	bl	8000158 <__aeabi_dsub>
 8008b90:	460d      	mov	r5, r1
 8008b92:	4604      	mov	r4, r0
 8008b94:	f7f7 ff48 	bl	8000a28 <__aeabi_d2iz>
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	f7f7 fc2b 	bl	80003f4 <__aeabi_i2d>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f7f7 fad7 	bl	8000158 <__aeabi_dsub>
 8008baa:	f1ba 0f00 	cmp.w	sl, #0
 8008bae:	4680      	mov	r8, r0
 8008bb0:	4689      	mov	r9, r1
 8008bb2:	dd6c      	ble.n	8008c8e <__kernel_rem_pio2+0x23a>
 8008bb4:	1e7a      	subs	r2, r7, #1
 8008bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8008bb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008bbc:	f1ca 0118 	rsb	r1, sl, #24
 8008bc0:	9c05      	ldr	r4, [sp, #20]
 8008bc2:	fa40 f301 	asr.w	r3, r0, r1
 8008bc6:	441c      	add	r4, r3
 8008bc8:	408b      	lsls	r3, r1
 8008bca:	1ac0      	subs	r0, r0, r3
 8008bcc:	ab0c      	add	r3, sp, #48	; 0x30
 8008bce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008bd2:	f1ca 0317 	rsb	r3, sl, #23
 8008bd6:	9405      	str	r4, [sp, #20]
 8008bd8:	fa40 f303 	asr.w	r3, r0, r3
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dd62      	ble.n	8008caa <__kernel_rem_pio2+0x256>
 8008be4:	2200      	movs	r2, #0
 8008be6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008bea:	4614      	mov	r4, r2
 8008bec:	9b05      	ldr	r3, [sp, #20]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	4297      	cmp	r7, r2
 8008bf4:	f300 809f 	bgt.w	8008d36 <__kernel_rem_pio2+0x2e2>
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	dd07      	ble.n	8008c0e <__kernel_rem_pio2+0x1ba>
 8008bfe:	f1ba 0f01 	cmp.w	sl, #1
 8008c02:	f000 80bb 	beq.w	8008d7c <__kernel_rem_pio2+0x328>
 8008c06:	f1ba 0f02 	cmp.w	sl, #2
 8008c0a:	f000 80c1 	beq.w	8008d90 <__kernel_rem_pio2+0x33c>
 8008c0e:	9b00      	ldr	r3, [sp, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d14a      	bne.n	8008caa <__kernel_rem_pio2+0x256>
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4953      	ldr	r1, [pc, #332]	; (8008d68 <__kernel_rem_pio2+0x314>)
 8008c1c:	f7f7 fa9c 	bl	8000158 <__aeabi_dsub>
 8008c20:	4680      	mov	r8, r0
 8008c22:	4689      	mov	r9, r1
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	d040      	beq.n	8008caa <__kernel_rem_pio2+0x256>
 8008c28:	4652      	mov	r2, sl
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	494e      	ldr	r1, [pc, #312]	; (8008d68 <__kernel_rem_pio2+0x314>)
 8008c2e:	f000 fc2f 	bl	8009490 <scalbn>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 fa8d 	bl	8000158 <__aeabi_dsub>
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	e032      	b.n	8008caa <__kernel_rem_pio2+0x256>
 8008c44:	2200      	movs	r2, #0
 8008c46:	4b49      	ldr	r3, [pc, #292]	; (8008d6c <__kernel_rem_pio2+0x318>)
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 fc3c 	bl	80004c8 <__aeabi_dmul>
 8008c50:	f7f7 feea 	bl	8000a28 <__aeabi_d2iz>
 8008c54:	f7f7 fbce 	bl	80003f4 <__aeabi_i2d>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4b45      	ldr	r3, [pc, #276]	; (8008d70 <__kernel_rem_pio2+0x31c>)
 8008c5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c60:	f7f7 fc32 	bl	80004c8 <__aeabi_dmul>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 fa74 	bl	8000158 <__aeabi_dsub>
 8008c70:	f7f7 feda 	bl	8000a28 <__aeabi_d2iz>
 8008c74:	ab0c      	add	r3, sp, #48	; 0x30
 8008c76:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008c7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c82:	f7f7 fa6b 	bl	800015c <__adddf3>
 8008c86:	3601      	adds	r6, #1
 8008c88:	4680      	mov	r8, r0
 8008c8a:	4689      	mov	r9, r1
 8008c8c:	e765      	b.n	8008b5a <__kernel_rem_pio2+0x106>
 8008c8e:	d105      	bne.n	8008c9c <__kernel_rem_pio2+0x248>
 8008c90:	1e7b      	subs	r3, r7, #1
 8008c92:	aa0c      	add	r2, sp, #48	; 0x30
 8008c94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c98:	15c3      	asrs	r3, r0, #23
 8008c9a:	e79f      	b.n	8008bdc <__kernel_rem_pio2+0x188>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <__kernel_rem_pio2+0x320>)
 8008ca0:	f7f7 fe98 	bl	80009d4 <__aeabi_dcmpge>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d143      	bne.n	8008d30 <__kernel_rem_pio2+0x2dc>
 8008ca8:	9000      	str	r0, [sp, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 fe71 	bl	8000998 <__aeabi_dcmpeq>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f000 80c3 	beq.w	8008e42 <__kernel_rem_pio2+0x3ee>
 8008cbc:	1e7c      	subs	r4, r7, #1
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	9902      	ldr	r1, [sp, #8]
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	da6a      	bge.n	8008d9e <__kernel_rem_pio2+0x34a>
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	f000 8084 	beq.w	8008dd6 <__kernel_rem_pio2+0x382>
 8008cce:	ab0c      	add	r3, sp, #48	; 0x30
 8008cd0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008cd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80b0 	beq.w	8008e3e <__kernel_rem_pio2+0x3ea>
 8008cde:	4652      	mov	r2, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4921      	ldr	r1, [pc, #132]	; (8008d68 <__kernel_rem_pio2+0x314>)
 8008ce4:	f000 fbd4 	bl	8009490 <scalbn>
 8008ce8:	4625      	mov	r5, r4
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	f04f 0a00 	mov.w	sl, #0
 8008cf2:	00e3      	lsls	r3, r4, #3
 8008cf4:	aa98      	add	r2, sp, #608	; 0x260
 8008cf6:	eb02 0803 	add.w	r8, r2, r3
 8008cfa:	f8df b070 	ldr.w	fp, [pc, #112]	; 8008d6c <__kernel_rem_pio2+0x318>
 8008cfe:	9306      	str	r3, [sp, #24]
 8008d00:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	f280 80d2 	bge.w	8008eae <__kernel_rem_pio2+0x45a>
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	9a06      	ldr	r2, [sp, #24]
 8008d0e:	ab98      	add	r3, sp, #608	; 0x260
 8008d10:	189e      	adds	r6, r3, r2
 8008d12:	3ea8      	subs	r6, #168	; 0xa8
 8008d14:	1b63      	subs	r3, r4, r5
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f2c0 80f9 	blt.w	8008f0e <__kernel_rem_pio2+0x4ba>
 8008d1c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008d78 <__kernel_rem_pio2+0x324>
 8008d20:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8008d24:	f04f 0a00 	mov.w	sl, #0
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	2700      	movs	r7, #0
 8008d2e:	e0e2      	b.n	8008ef6 <__kernel_rem_pio2+0x4a2>
 8008d30:	2302      	movs	r3, #2
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	e756      	b.n	8008be4 <__kernel_rem_pio2+0x190>
 8008d36:	ab0c      	add	r3, sp, #48	; 0x30
 8008d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3c:	b94c      	cbnz	r4, 8008d52 <__kernel_rem_pio2+0x2fe>
 8008d3e:	b12b      	cbz	r3, 8008d4c <__kernel_rem_pio2+0x2f8>
 8008d40:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d44:	a80c      	add	r0, sp, #48	; 0x30
 8008d46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	461c      	mov	r4, r3
 8008d50:	e74f      	b.n	8008bf2 <__kernel_rem_pio2+0x19e>
 8008d52:	1acb      	subs	r3, r1, r3
 8008d54:	a80c      	add	r0, sp, #48	; 0x30
 8008d56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008d5a:	4623      	mov	r3, r4
 8008d5c:	e7f6      	b.n	8008d4c <__kernel_rem_pio2+0x2f8>
 8008d5e:	bf00      	nop
 8008d60:	08009960 	.word	0x08009960
 8008d64:	40200000 	.word	0x40200000
 8008d68:	3ff00000 	.word	0x3ff00000
 8008d6c:	3e700000 	.word	0x3e700000
 8008d70:	41700000 	.word	0x41700000
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	08009918 	.word	0x08009918
 8008d7c:	1e7a      	subs	r2, r7, #1
 8008d7e:	ab0c      	add	r3, sp, #48	; 0x30
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d88:	a90c      	add	r1, sp, #48	; 0x30
 8008d8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d8e:	e73e      	b.n	8008c0e <__kernel_rem_pio2+0x1ba>
 8008d90:	1e7a      	subs	r2, r7, #1
 8008d92:	ab0c      	add	r3, sp, #48	; 0x30
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d9c:	e7f4      	b.n	8008d88 <__kernel_rem_pio2+0x334>
 8008d9e:	a90c      	add	r1, sp, #48	; 0x30
 8008da0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	430a      	orrs	r2, r1
 8008da8:	e78b      	b.n	8008cc2 <__kernel_rem_pio2+0x26e>
 8008daa:	3401      	adds	r4, #1
 8008dac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	d0fa      	beq.n	8008daa <__kernel_rem_pio2+0x356>
 8008db4:	ab98      	add	r3, sp, #608	; 0x260
 8008db6:	449b      	add	fp, r3
 8008db8:	9b07      	ldr	r3, [sp, #28]
 8008dba:	1c7e      	adds	r6, r7, #1
 8008dbc:	19dd      	adds	r5, r3, r7
 8008dbe:	ab98      	add	r3, sp, #608	; 0x260
 8008dc0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008dc4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8008dc8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8008dcc:	443c      	add	r4, r7
 8008dce:	42b4      	cmp	r4, r6
 8008dd0:	da04      	bge.n	8008ddc <__kernel_rem_pio2+0x388>
 8008dd2:	4627      	mov	r7, r4
 8008dd4:	e6b1      	b.n	8008b3a <__kernel_rem_pio2+0xe6>
 8008dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd8:	2401      	movs	r4, #1
 8008dda:	e7e7      	b.n	8008dac <__kernel_rem_pio2+0x358>
 8008ddc:	f105 0308 	add.w	r3, r5, #8
 8008de0:	9309      	str	r3, [sp, #36]	; 0x24
 8008de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de4:	2700      	movs	r7, #0
 8008de6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dea:	f7f7 fb03 	bl	80003f4 <__aeabi_i2d>
 8008dee:	f04f 0800 	mov.w	r8, #0
 8008df2:	f04f 0900 	mov.w	r9, #0
 8008df6:	9b08      	ldr	r3, [sp, #32]
 8008df8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008dfc:	3b08      	subs	r3, #8
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	f105 0310 	add.w	r3, r5, #16
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	9b06      	ldr	r3, [sp, #24]
 8008e08:	429f      	cmp	r7, r3
 8008e0a:	dd04      	ble.n	8008e16 <__kernel_rem_pio2+0x3c2>
 8008e0c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008e10:	3601      	adds	r6, #1
 8008e12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e14:	e7db      	b.n	8008dce <__kernel_rem_pio2+0x37a>
 8008e16:	9905      	ldr	r1, [sp, #20]
 8008e18:	9d00      	ldr	r5, [sp, #0]
 8008e1a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008e1e:	9105      	str	r1, [sp, #20]
 8008e20:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008e24:	9500      	str	r5, [sp, #0]
 8008e26:	f7f7 fb4f 	bl	80004c8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 f993 	bl	800015c <__adddf3>
 8008e36:	3701      	adds	r7, #1
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4689      	mov	r9, r1
 8008e3c:	e7e3      	b.n	8008e06 <__kernel_rem_pio2+0x3b2>
 8008e3e:	3c01      	subs	r4, #1
 8008e40:	e745      	b.n	8008cce <__kernel_rem_pio2+0x27a>
 8008e42:	f1ca 0200 	rsb	r2, sl, #0
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	f000 fb21 	bl	8009490 <scalbn>
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4ba3      	ldr	r3, [pc, #652]	; (80090e0 <__kernel_rem_pio2+0x68c>)
 8008e52:	4604      	mov	r4, r0
 8008e54:	460d      	mov	r5, r1
 8008e56:	f7f7 fdbd 	bl	80009d4 <__aeabi_dcmpge>
 8008e5a:	b1f8      	cbz	r0, 8008e9c <__kernel_rem_pio2+0x448>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4ba1      	ldr	r3, [pc, #644]	; (80090e4 <__kernel_rem_pio2+0x690>)
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7f7 fb30 	bl	80004c8 <__aeabi_dmul>
 8008e68:	f7f7 fdde 	bl	8000a28 <__aeabi_d2iz>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	f7f7 fac1 	bl	80003f4 <__aeabi_i2d>
 8008e72:	2200      	movs	r2, #0
 8008e74:	4b9a      	ldr	r3, [pc, #616]	; (80090e0 <__kernel_rem_pio2+0x68c>)
 8008e76:	f7f7 fb27 	bl	80004c8 <__aeabi_dmul>
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7f7 f969 	bl	8000158 <__aeabi_dsub>
 8008e86:	f7f7 fdcf 	bl	8000a28 <__aeabi_d2iz>
 8008e8a:	1c7c      	adds	r4, r7, #1
 8008e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e8e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008e92:	f10a 0a18 	add.w	sl, sl, #24
 8008e96:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008e9a:	e720      	b.n	8008cde <__kernel_rem_pio2+0x28a>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 fdc2 	bl	8000a28 <__aeabi_d2iz>
 8008ea4:	ab0c      	add	r3, sp, #48	; 0x30
 8008ea6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008eaa:	463c      	mov	r4, r7
 8008eac:	e717      	b.n	8008cde <__kernel_rem_pio2+0x28a>
 8008eae:	ab0c      	add	r3, sp, #48	; 0x30
 8008eb0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eb4:	f7f7 fa9e 	bl	80003f4 <__aeabi_i2d>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	f7f7 fb04 	bl	80004c8 <__aeabi_dmul>
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fafc 	bl	80004c8 <__aeabi_dmul>
 8008ed0:	3d01      	subs	r5, #1
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	e715      	b.n	8008d04 <__kernel_rem_pio2+0x2b0>
 8008ed8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8008edc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008ee0:	f7f7 faf2 	bl	80004c8 <__aeabi_dmul>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	f7f7 f936 	bl	800015c <__adddf3>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	3701      	adds	r7, #1
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	429f      	cmp	r7, r3
 8008efa:	dc01      	bgt.n	8008f00 <__kernel_rem_pio2+0x4ac>
 8008efc:	42bd      	cmp	r5, r7
 8008efe:	daeb      	bge.n	8008ed8 <__kernel_rem_pio2+0x484>
 8008f00:	ab48      	add	r3, sp, #288	; 0x120
 8008f02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f06:	e9c3 ab00 	strd	sl, fp, [r3]
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	e702      	b.n	8008d14 <__kernel_rem_pio2+0x2c0>
 8008f0e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d86c      	bhi.n	8008fee <__kernel_rem_pio2+0x59a>
 8008f14:	e8df f003 	tbb	[pc, r3]
 8008f18:	022f2f59 	.word	0x022f2f59
 8008f1c:	9a06      	ldr	r2, [sp, #24]
 8008f1e:	ab48      	add	r3, sp, #288	; 0x120
 8008f20:	189d      	adds	r5, r3, r2
 8008f22:	46aa      	mov	sl, r5
 8008f24:	46a3      	mov	fp, r4
 8008f26:	f1bb 0f00 	cmp.w	fp, #0
 8008f2a:	f300 8087 	bgt.w	800903c <__kernel_rem_pio2+0x5e8>
 8008f2e:	46a2      	mov	sl, r4
 8008f30:	f1ba 0f01 	cmp.w	sl, #1
 8008f34:	f300 809f 	bgt.w	8009076 <__kernel_rem_pio2+0x622>
 8008f38:	2700      	movs	r7, #0
 8008f3a:	463e      	mov	r6, r7
 8008f3c:	9d06      	ldr	r5, [sp, #24]
 8008f3e:	ab48      	add	r3, sp, #288	; 0x120
 8008f40:	3508      	adds	r5, #8
 8008f42:	441d      	add	r5, r3
 8008f44:	2c01      	cmp	r4, #1
 8008f46:	f300 80b3 	bgt.w	80090b0 <__kernel_rem_pio2+0x65c>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8008f4e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8008f50:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8008f52:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 80b5 	bne.w	80090c4 <__kernel_rem_pio2+0x670>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	9804      	ldr	r0, [sp, #16]
 8008f60:	e9c0 2300 	strd	r2, r3, [r0]
 8008f64:	4622      	mov	r2, r4
 8008f66:	460b      	mov	r3, r1
 8008f68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f6c:	463a      	mov	r2, r7
 8008f6e:	4633      	mov	r3, r6
 8008f70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008f74:	e03b      	b.n	8008fee <__kernel_rem_pio2+0x59a>
 8008f76:	f04f 0c00 	mov.w	ip, #0
 8008f7a:	4626      	mov	r6, r4
 8008f7c:	4667      	mov	r7, ip
 8008f7e:	9d06      	ldr	r5, [sp, #24]
 8008f80:	ab48      	add	r3, sp, #288	; 0x120
 8008f82:	3508      	adds	r5, #8
 8008f84:	441d      	add	r5, r3
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	da42      	bge.n	8009010 <__kernel_rem_pio2+0x5bc>
 8008f8a:	9b00      	ldr	r3, [sp, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d049      	beq.n	8009024 <__kernel_rem_pio2+0x5d0>
 8008f90:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8008f94:	4662      	mov	r2, ip
 8008f96:	460b      	mov	r3, r1
 8008f98:	9904      	ldr	r1, [sp, #16]
 8008f9a:	2601      	movs	r6, #1
 8008f9c:	e9c1 2300 	strd	r2, r3, [r1]
 8008fa0:	a948      	add	r1, sp, #288	; 0x120
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa8:	f7f7 f8d6 	bl	8000158 <__aeabi_dsub>
 8008fac:	4684      	mov	ip, r0
 8008fae:	460f      	mov	r7, r1
 8008fb0:	ad48      	add	r5, sp, #288	; 0x120
 8008fb2:	42b4      	cmp	r4, r6
 8008fb4:	da38      	bge.n	8009028 <__kernel_rem_pio2+0x5d4>
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	b10b      	cbz	r3, 8008fbe <__kernel_rem_pio2+0x56a>
 8008fba:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008fbe:	4662      	mov	r2, ip
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	9904      	ldr	r1, [sp, #16]
 8008fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008fc8:	e011      	b.n	8008fee <__kernel_rem_pio2+0x59a>
 8008fca:	2700      	movs	r7, #0
 8008fcc:	463d      	mov	r5, r7
 8008fce:	9b06      	ldr	r3, [sp, #24]
 8008fd0:	aa98      	add	r2, sp, #608	; 0x260
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8008fd8:	2c00      	cmp	r4, #0
 8008fda:	da0f      	bge.n	8008ffc <__kernel_rem_pio2+0x5a8>
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	b10b      	cbz	r3, 8008fe4 <__kernel_rem_pio2+0x590>
 8008fe0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008fe4:	463a      	mov	r2, r7
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	9904      	ldr	r1, [sp, #16]
 8008fea:	e9c1 2300 	strd	r2, r3, [r1]
 8008fee:	9b05      	ldr	r3, [sp, #20]
 8008ff0:	f003 0007 	and.w	r0, r3, #7
 8008ff4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009002:	4629      	mov	r1, r5
 8009004:	f7f7 f8aa 	bl	800015c <__adddf3>
 8009008:	3c01      	subs	r4, #1
 800900a:	4607      	mov	r7, r0
 800900c:	460d      	mov	r5, r1
 800900e:	e7e3      	b.n	8008fd8 <__kernel_rem_pio2+0x584>
 8009010:	4660      	mov	r0, ip
 8009012:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f8a0 	bl	800015c <__adddf3>
 800901c:	3e01      	subs	r6, #1
 800901e:	4684      	mov	ip, r0
 8009020:	460f      	mov	r7, r1
 8009022:	e7b0      	b.n	8008f86 <__kernel_rem_pio2+0x532>
 8009024:	4639      	mov	r1, r7
 8009026:	e7b5      	b.n	8008f94 <__kernel_rem_pio2+0x540>
 8009028:	4660      	mov	r0, ip
 800902a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800902e:	4639      	mov	r1, r7
 8009030:	f7f7 f894 	bl	800015c <__adddf3>
 8009034:	3601      	adds	r6, #1
 8009036:	4684      	mov	ip, r0
 8009038:	460f      	mov	r7, r1
 800903a:	e7ba      	b.n	8008fb2 <__kernel_rem_pio2+0x55e>
 800903c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8009040:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8009044:	4640      	mov	r0, r8
 8009046:	4649      	mov	r1, r9
 8009048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800904c:	f7f7 f886 	bl	800015c <__adddf3>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4606      	mov	r6, r0
 8009056:	460f      	mov	r7, r1
 8009058:	4640      	mov	r0, r8
 800905a:	4649      	mov	r1, r9
 800905c:	f7f7 f87c 	bl	8000158 <__aeabi_dsub>
 8009060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009064:	f7f7 f87a 	bl	800015c <__adddf3>
 8009068:	f10b 3bff 	add.w	fp, fp, #4294967295
 800906c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009070:	e9ca 6700 	strd	r6, r7, [sl]
 8009074:	e757      	b.n	8008f26 <__kernel_rem_pio2+0x4d2>
 8009076:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800907a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009086:	f7f7 f869 	bl	800015c <__adddf3>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4680      	mov	r8, r0
 8009090:	4689      	mov	r9, r1
 8009092:	4630      	mov	r0, r6
 8009094:	4639      	mov	r1, r7
 8009096:	f7f7 f85f 	bl	8000158 <__aeabi_dsub>
 800909a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800909e:	f7f7 f85d 	bl	800015c <__adddf3>
 80090a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80090aa:	e9c5 8900 	strd	r8, r9, [r5]
 80090ae:	e73f      	b.n	8008f30 <__kernel_rem_pio2+0x4dc>
 80090b0:	4638      	mov	r0, r7
 80090b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80090b6:	4631      	mov	r1, r6
 80090b8:	f7f7 f850 	bl	800015c <__adddf3>
 80090bc:	3c01      	subs	r4, #1
 80090be:	4607      	mov	r7, r0
 80090c0:	460e      	mov	r6, r1
 80090c2:	e73f      	b.n	8008f44 <__kernel_rem_pio2+0x4f0>
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80090ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80090ce:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80090d2:	601d      	str	r5, [r3, #0]
 80090d4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80090d8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80090dc:	615e      	str	r6, [r3, #20]
 80090de:	e786      	b.n	8008fee <__kernel_rem_pio2+0x59a>
 80090e0:	41700000 	.word	0x41700000
 80090e4:	3e700000 	.word	0x3e700000

080090e8 <__kernel_sin>:
 80090e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	e9cd 2300 	strd	r2, r3, [sp]
 80090f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80090fa:	4682      	mov	sl, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009100:	da03      	bge.n	800910a <__kernel_sin+0x22>
 8009102:	f7f7 fc91 	bl	8000a28 <__aeabi_d2iz>
 8009106:	2800      	cmp	r0, #0
 8009108:	d050      	beq.n	80091ac <__kernel_sin+0xc4>
 800910a:	4652      	mov	r2, sl
 800910c:	4623      	mov	r3, r4
 800910e:	4650      	mov	r0, sl
 8009110:	4621      	mov	r1, r4
 8009112:	f7f7 f9d9 	bl	80004c8 <__aeabi_dmul>
 8009116:	4606      	mov	r6, r0
 8009118:	460f      	mov	r7, r1
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4650      	mov	r0, sl
 8009120:	4621      	mov	r1, r4
 8009122:	f7f7 f9d1 	bl	80004c8 <__aeabi_dmul>
 8009126:	a33e      	add	r3, pc, #248	; (adr r3, 8009220 <__kernel_sin+0x138>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 f9c8 	bl	80004c8 <__aeabi_dmul>
 8009138:	a33b      	add	r3, pc, #236	; (adr r3, 8009228 <__kernel_sin+0x140>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 f80b 	bl	8000158 <__aeabi_dsub>
 8009142:	4632      	mov	r2, r6
 8009144:	463b      	mov	r3, r7
 8009146:	f7f7 f9bf 	bl	80004c8 <__aeabi_dmul>
 800914a:	a339      	add	r3, pc, #228	; (adr r3, 8009230 <__kernel_sin+0x148>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f804 	bl	800015c <__adddf3>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	f7f7 f9b6 	bl	80004c8 <__aeabi_dmul>
 800915c:	a336      	add	r3, pc, #216	; (adr r3, 8009238 <__kernel_sin+0x150>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f6 fff9 	bl	8000158 <__aeabi_dsub>
 8009166:	4632      	mov	r2, r6
 8009168:	463b      	mov	r3, r7
 800916a:	f7f7 f9ad 	bl	80004c8 <__aeabi_dmul>
 800916e:	a334      	add	r3, pc, #208	; (adr r3, 8009240 <__kernel_sin+0x158>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f6 fff2 	bl	800015c <__adddf3>
 8009178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917c:	b9dd      	cbnz	r5, 80091b6 <__kernel_sin+0xce>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	f7f7 f99f 	bl	80004c8 <__aeabi_dmul>
 800918a:	a32f      	add	r3, pc, #188	; (adr r3, 8009248 <__kernel_sin+0x160>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f6 ffe2 	bl	8000158 <__aeabi_dsub>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	f7f7 f996 	bl	80004c8 <__aeabi_dmul>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4650      	mov	r0, sl
 80091a2:	4621      	mov	r1, r4
 80091a4:	f7f6 ffda 	bl	800015c <__adddf3>
 80091a8:	4682      	mov	sl, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	4650      	mov	r0, sl
 80091ae:	4621      	mov	r1, r4
 80091b0:	b006      	add	sp, #24
 80091b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b6:	2200      	movs	r2, #0
 80091b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091bc:	4b24      	ldr	r3, [pc, #144]	; (8009250 <__kernel_sin+0x168>)
 80091be:	f7f7 f983 	bl	80004c8 <__aeabi_dmul>
 80091c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	f7f7 f97b 	bl	80004c8 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091da:	f7f6 ffbd 	bl	8000158 <__aeabi_dsub>
 80091de:	4632      	mov	r2, r6
 80091e0:	463b      	mov	r3, r7
 80091e2:	f7f7 f971 	bl	80004c8 <__aeabi_dmul>
 80091e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ea:	f7f6 ffb5 	bl	8000158 <__aeabi_dsub>
 80091ee:	a316      	add	r3, pc, #88	; (adr r3, 8009248 <__kernel_sin+0x160>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7f7 f964 	bl	80004c8 <__aeabi_dmul>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f6 ffa8 	bl	800015c <__adddf3>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4650      	mov	r0, sl
 8009212:	4621      	mov	r1, r4
 8009214:	f7f6 ffa0 	bl	8000158 <__aeabi_dsub>
 8009218:	e7c6      	b.n	80091a8 <__kernel_sin+0xc0>
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
 8009220:	5acfd57c 	.word	0x5acfd57c
 8009224:	3de5d93a 	.word	0x3de5d93a
 8009228:	8a2b9ceb 	.word	0x8a2b9ceb
 800922c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009230:	57b1fe7d 	.word	0x57b1fe7d
 8009234:	3ec71de3 	.word	0x3ec71de3
 8009238:	19c161d5 	.word	0x19c161d5
 800923c:	3f2a01a0 	.word	0x3f2a01a0
 8009240:	1110f8a6 	.word	0x1110f8a6
 8009244:	3f811111 	.word	0x3f811111
 8009248:	55555549 	.word	0x55555549
 800924c:	3fc55555 	.word	0x3fc55555
 8009250:	3fe00000 	.word	0x3fe00000

08009254 <finite>:
 8009254:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009258:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800925c:	0fc0      	lsrs	r0, r0, #31
 800925e:	4770      	bx	lr

08009260 <floor>:
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009268:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800926c:	2e13      	cmp	r6, #19
 800926e:	4607      	mov	r7, r0
 8009270:	460b      	mov	r3, r1
 8009272:	460c      	mov	r4, r1
 8009274:	4605      	mov	r5, r0
 8009276:	dc35      	bgt.n	80092e4 <floor+0x84>
 8009278:	2e00      	cmp	r6, #0
 800927a:	da16      	bge.n	80092aa <floor+0x4a>
 800927c:	a336      	add	r3, pc, #216	; (adr r3, 8009358 <floor+0xf8>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 ff6b 	bl	800015c <__adddf3>
 8009286:	2200      	movs	r2, #0
 8009288:	2300      	movs	r3, #0
 800928a:	f7f7 fbad 	bl	80009e8 <__aeabi_dcmpgt>
 800928e:	b148      	cbz	r0, 80092a4 <floor+0x44>
 8009290:	2c00      	cmp	r4, #0
 8009292:	da5b      	bge.n	800934c <floor+0xec>
 8009294:	2500      	movs	r5, #0
 8009296:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800929a:	4a31      	ldr	r2, [pc, #196]	; (8009360 <floor+0x100>)
 800929c:	433b      	orrs	r3, r7
 800929e:	42ab      	cmp	r3, r5
 80092a0:	bf18      	it	ne
 80092a2:	4614      	movne	r4, r2
 80092a4:	4623      	mov	r3, r4
 80092a6:	462f      	mov	r7, r5
 80092a8:	e026      	b.n	80092f8 <floor+0x98>
 80092aa:	4a2e      	ldr	r2, [pc, #184]	; (8009364 <floor+0x104>)
 80092ac:	fa42 f806 	asr.w	r8, r2, r6
 80092b0:	ea01 0208 	and.w	r2, r1, r8
 80092b4:	4302      	orrs	r2, r0
 80092b6:	d01f      	beq.n	80092f8 <floor+0x98>
 80092b8:	a327      	add	r3, pc, #156	; (adr r3, 8009358 <floor+0xf8>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ff4d 	bl	800015c <__adddf3>
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	f7f7 fb8f 	bl	80009e8 <__aeabi_dcmpgt>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d0ea      	beq.n	80092a4 <floor+0x44>
 80092ce:	2c00      	cmp	r4, #0
 80092d0:	bfbe      	ittt	lt
 80092d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80092da:	19a4      	addlt	r4, r4, r6
 80092dc:	ea24 0408 	bic.w	r4, r4, r8
 80092e0:	2500      	movs	r5, #0
 80092e2:	e7df      	b.n	80092a4 <floor+0x44>
 80092e4:	2e33      	cmp	r6, #51	; 0x33
 80092e6:	dd0b      	ble.n	8009300 <floor+0xa0>
 80092e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80092ec:	d104      	bne.n	80092f8 <floor+0x98>
 80092ee:	4602      	mov	r2, r0
 80092f0:	f7f6 ff34 	bl	800015c <__adddf3>
 80092f4:	4607      	mov	r7, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4638      	mov	r0, r7
 80092fa:	4619      	mov	r1, r3
 80092fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009300:	f04f 32ff 	mov.w	r2, #4294967295
 8009304:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009308:	fa22 f808 	lsr.w	r8, r2, r8
 800930c:	ea18 0f00 	tst.w	r8, r0
 8009310:	d0f2      	beq.n	80092f8 <floor+0x98>
 8009312:	a311      	add	r3, pc, #68	; (adr r3, 8009358 <floor+0xf8>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ff20 	bl	800015c <__adddf3>
 800931c:	2200      	movs	r2, #0
 800931e:	2300      	movs	r3, #0
 8009320:	f7f7 fb62 	bl	80009e8 <__aeabi_dcmpgt>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0bd      	beq.n	80092a4 <floor+0x44>
 8009328:	2c00      	cmp	r4, #0
 800932a:	da02      	bge.n	8009332 <floor+0xd2>
 800932c:	2e14      	cmp	r6, #20
 800932e:	d103      	bne.n	8009338 <floor+0xd8>
 8009330:	3401      	adds	r4, #1
 8009332:	ea25 0508 	bic.w	r5, r5, r8
 8009336:	e7b5      	b.n	80092a4 <floor+0x44>
 8009338:	2301      	movs	r3, #1
 800933a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800933e:	fa03 f606 	lsl.w	r6, r3, r6
 8009342:	4435      	add	r5, r6
 8009344:	42bd      	cmp	r5, r7
 8009346:	bf38      	it	cc
 8009348:	18e4      	addcc	r4, r4, r3
 800934a:	e7f2      	b.n	8009332 <floor+0xd2>
 800934c:	2500      	movs	r5, #0
 800934e:	462c      	mov	r4, r5
 8009350:	e7a8      	b.n	80092a4 <floor+0x44>
 8009352:	bf00      	nop
 8009354:	f3af 8000 	nop.w
 8009358:	8800759c 	.word	0x8800759c
 800935c:	7e37e43c 	.word	0x7e37e43c
 8009360:	bff00000 	.word	0xbff00000
 8009364:	000fffff 	.word	0x000fffff

08009368 <matherr>:
 8009368:	2000      	movs	r0, #0
 800936a:	4770      	bx	lr

0800936c <nan>:
 800936c:	2000      	movs	r0, #0
 800936e:	4901      	ldr	r1, [pc, #4]	; (8009374 <nan+0x8>)
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	7ff80000 	.word	0x7ff80000

08009378 <rint>:
 8009378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800937a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800937e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8009382:	f1bc 0f13 	cmp.w	ip, #19
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	460b      	mov	r3, r1
 800938c:	4606      	mov	r6, r0
 800938e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8009392:	dc5a      	bgt.n	800944a <rint+0xd2>
 8009394:	f1bc 0f00 	cmp.w	ip, #0
 8009398:	da2b      	bge.n	80093f2 <rint+0x7a>
 800939a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800939e:	4302      	orrs	r2, r0
 80093a0:	d023      	beq.n	80093ea <rint+0x72>
 80093a2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80093a6:	4302      	orrs	r2, r0
 80093a8:	4256      	negs	r6, r2
 80093aa:	4316      	orrs	r6, r2
 80093ac:	0c4b      	lsrs	r3, r1, #17
 80093ae:	0b36      	lsrs	r6, r6, #12
 80093b0:	4934      	ldr	r1, [pc, #208]	; (8009484 <rint+0x10c>)
 80093b2:	045b      	lsls	r3, r3, #17
 80093b4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80093b8:	ea46 0503 	orr.w	r5, r6, r3
 80093bc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80093c0:	4602      	mov	r2, r0
 80093c2:	462b      	mov	r3, r5
 80093c4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80093c8:	4620      	mov	r0, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	f7f6 fec6 	bl	800015c <__adddf3>
 80093d0:	e9cd 0100 	strd	r0, r1, [sp]
 80093d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d8:	462b      	mov	r3, r5
 80093da:	4622      	mov	r2, r4
 80093dc:	f7f6 febc 	bl	8000158 <__aeabi_dsub>
 80093e0:	4604      	mov	r4, r0
 80093e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093e6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	b003      	add	sp, #12
 80093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f2:	4a25      	ldr	r2, [pc, #148]	; (8009488 <rint+0x110>)
 80093f4:	fa42 f20c 	asr.w	r2, r2, ip
 80093f8:	4011      	ands	r1, r2
 80093fa:	4301      	orrs	r1, r0
 80093fc:	d0f5      	beq.n	80093ea <rint+0x72>
 80093fe:	0852      	lsrs	r2, r2, #1
 8009400:	ea05 0102 	and.w	r1, r5, r2
 8009404:	ea50 0601 	orrs.w	r6, r0, r1
 8009408:	d00c      	beq.n	8009424 <rint+0xac>
 800940a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800940e:	f1bc 0f13 	cmp.w	ip, #19
 8009412:	bf0c      	ite	eq
 8009414:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009418:	2600      	movne	r6, #0
 800941a:	ea25 0202 	bic.w	r2, r5, r2
 800941e:	fa43 f30c 	asr.w	r3, r3, ip
 8009422:	4313      	orrs	r3, r2
 8009424:	4917      	ldr	r1, [pc, #92]	; (8009484 <rint+0x10c>)
 8009426:	4632      	mov	r2, r6
 8009428:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800942c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 fe92 	bl	800015c <__adddf3>
 8009438:	e9cd 0100 	strd	r0, r1, [sp]
 800943c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	f7f6 fe88 	bl	8000158 <__aeabi_dsub>
 8009448:	e008      	b.n	800945c <rint+0xe4>
 800944a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800944e:	dd08      	ble.n	8009462 <rint+0xea>
 8009450:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8009454:	d1c9      	bne.n	80093ea <rint+0x72>
 8009456:	4602      	mov	r2, r0
 8009458:	f7f6 fe80 	bl	800015c <__adddf3>
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	e7c3      	b.n	80093ea <rint+0x72>
 8009462:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	40ca      	lsrs	r2, r1
 800946c:	4210      	tst	r0, r2
 800946e:	d0bc      	beq.n	80093ea <rint+0x72>
 8009470:	0852      	lsrs	r2, r2, #1
 8009472:	4210      	tst	r0, r2
 8009474:	bf1f      	itttt	ne
 8009476:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800947a:	ea20 0202 	bicne.w	r2, r0, r2
 800947e:	410e      	asrne	r6, r1
 8009480:	4316      	orrne	r6, r2
 8009482:	e7cf      	b.n	8009424 <rint+0xac>
 8009484:	08009970 	.word	0x08009970
 8009488:	000fffff 	.word	0x000fffff
 800948c:	00000000 	.word	0x00000000

08009490 <scalbn>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	4616      	mov	r6, r2
 8009494:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
 800949c:	460b      	mov	r3, r1
 800949e:	b982      	cbnz	r2, 80094c2 <scalbn+0x32>
 80094a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094a4:	4303      	orrs	r3, r0
 80094a6:	d034      	beq.n	8009512 <scalbn+0x82>
 80094a8:	4b2d      	ldr	r3, [pc, #180]	; (8009560 <scalbn+0xd0>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f7 f80c 	bl	80004c8 <__aeabi_dmul>
 80094b0:	4b2c      	ldr	r3, [pc, #176]	; (8009564 <scalbn+0xd4>)
 80094b2:	4604      	mov	r4, r0
 80094b4:	429e      	cmp	r6, r3
 80094b6:	460d      	mov	r5, r1
 80094b8:	da0d      	bge.n	80094d6 <scalbn+0x46>
 80094ba:	a325      	add	r3, pc, #148	; (adr r3, 8009550 <scalbn+0xc0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	e01c      	b.n	80094fc <scalbn+0x6c>
 80094c2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80094c6:	42ba      	cmp	r2, r7
 80094c8:	d109      	bne.n	80094de <scalbn+0x4e>
 80094ca:	4602      	mov	r2, r0
 80094cc:	f7f6 fe46 	bl	800015c <__adddf3>
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	e01d      	b.n	8009512 <scalbn+0x82>
 80094d6:	460b      	mov	r3, r1
 80094d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094dc:	3a36      	subs	r2, #54	; 0x36
 80094de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094e2:	4432      	add	r2, r6
 80094e4:	428a      	cmp	r2, r1
 80094e6:	dd0c      	ble.n	8009502 <scalbn+0x72>
 80094e8:	4622      	mov	r2, r4
 80094ea:	462b      	mov	r3, r5
 80094ec:	a11a      	add	r1, pc, #104	; (adr r1, 8009558 <scalbn+0xc8>)
 80094ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f2:	f000 f83b 	bl	800956c <copysign>
 80094f6:	a318      	add	r3, pc, #96	; (adr r3, 8009558 <scalbn+0xc8>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f6 ffe4 	bl	80004c8 <__aeabi_dmul>
 8009500:	e7e6      	b.n	80094d0 <scalbn+0x40>
 8009502:	2a00      	cmp	r2, #0
 8009504:	dd08      	ble.n	8009518 <scalbn+0x88>
 8009506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800950a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800950e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009512:	4620      	mov	r0, r4
 8009514:	4629      	mov	r1, r5
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009518:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800951c:	da0b      	bge.n	8009536 <scalbn+0xa6>
 800951e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009522:	429e      	cmp	r6, r3
 8009524:	4622      	mov	r2, r4
 8009526:	462b      	mov	r3, r5
 8009528:	dce0      	bgt.n	80094ec <scalbn+0x5c>
 800952a:	a109      	add	r1, pc, #36	; (adr r1, 8009550 <scalbn+0xc0>)
 800952c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009530:	f000 f81c 	bl	800956c <copysign>
 8009534:	e7c1      	b.n	80094ba <scalbn+0x2a>
 8009536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800953a:	3236      	adds	r2, #54	; 0x36
 800953c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009540:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	2200      	movs	r2, #0
 800954a:	4b07      	ldr	r3, [pc, #28]	; (8009568 <scalbn+0xd8>)
 800954c:	e7d6      	b.n	80094fc <scalbn+0x6c>
 800954e:	bf00      	nop
 8009550:	c2f8f359 	.word	0xc2f8f359
 8009554:	01a56e1f 	.word	0x01a56e1f
 8009558:	8800759c 	.word	0x8800759c
 800955c:	7e37e43c 	.word	0x7e37e43c
 8009560:	43500000 	.word	0x43500000
 8009564:	ffff3cb0 	.word	0xffff3cb0
 8009568:	3c900000 	.word	0x3c900000

0800956c <copysign>:
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009576:	ea42 0503 	orr.w	r5, r2, r3
 800957a:	4629      	mov	r1, r5
 800957c:	bd30      	pop	{r4, r5, pc}
	...

08009580 <_init>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr

0800958c <_fini>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr
