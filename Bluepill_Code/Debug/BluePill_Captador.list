
BluePill_Captador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008058  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008168  08008168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08008378  08008378  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008378  08008378  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000080  08008400  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08008400  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a611  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f2  00000000  00000000  0002a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178d9  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089c9  00000000  00000000  00044bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088ffd  00000000  00000000  0004d582  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d657f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000d65fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08008150 	.word	0x08008150

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08008150 	.word	0x08008150

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <MPU6050_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int MPU6050_Init (I2C_HandleTypeDef hi2c)
{
 8001020:	b084      	sub	sp, #16
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af04      	add	r7, sp, #16
 8001028:	f107 0c10 	add.w	ip, r7, #16
 800102c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t check;
	uint8_t Data;

		// check device ID WHO_AM_I
		Data = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	71bb      	strb	r3, [r7, #6]
		check= 0;
 8001034:	2300      	movs	r3, #0
 8001036:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1dbb      	adds	r3, r7, #6
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	226b      	movs	r2, #107	; 0x6b
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	f107 0010 	add.w	r0, r7, #16
 8001050:	f002 fcb6 	bl	80039c0 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2301      	movs	r3, #1
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	2275      	movs	r2, #117	; 0x75
 8001066:	21d0      	movs	r1, #208	; 0xd0
 8001068:	f107 0010 	add.w	r0, r7, #16
 800106c:	f002 fda2 	bl	8003bb4 <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b68      	cmp	r3, #104	; 0x68
 8001074:	d131      	bne.n	80010da <MPU6050_Init+0xba>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up


			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8001076:	2307      	movs	r3, #7
 8001078:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	2219      	movs	r2, #25
 800108c:	21d0      	movs	r1, #208	; 0xd0
 800108e:	f107 0010 	add.w	r0, r7, #16
 8001092:	f002 fc95 	bl	80039c0 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	221c      	movs	r2, #28
 80010ac:	21d0      	movs	r1, #208	; 0xd0
 80010ae:	f107 0010 	add.w	r0, r7, #16
 80010b2:	f002 fc85 	bl	80039c0 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	221b      	movs	r2, #27
 80010cc:	21d0      	movs	r1, #208	; 0xd0
 80010ce:	f107 0010 	add.w	r0, r7, #16
 80010d2:	f002 fc75 	bl	80039c0 <HAL_I2C_Mem_Write>
			return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <MPU6050_Init+0xbc>
		}
 return 0;
 80010da:	2300      	movs	r3, #0
	}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e6:	b004      	add	sp, #16
 80010e8:	4770      	bx	lr
	...

080010ec <MPU6050_Read_Accel>:

Accel MPU6050_Read_Accel (int selector)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b0a3      	sub	sp, #140	; 0x8c
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];
	Accel lectura;

	//valores en RAW temporales de GYRO Y ACCEL
	int16_t Accel_X_RAW = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Accel_Y_RAW = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Accel_Z_RAW = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	I2C_HandleTypeDef hi2c;

	if (selector == 1) hi2c = hi2c1;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <MPU6050_Read_Accel+0x32>
 800110e:	4a41      	ldr	r2, [pc, #260]	; (8001214 <MPU6050_Read_Accel+0x128>)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4611      	mov	r1, r2
 8001116:	2254      	movs	r2, #84	; 0x54
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fab5 	bl	8005688 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d107      	bne.n	8001134 <MPU6050_Read_Accel+0x48>
 8001124:	4a3c      	ldr	r2, [pc, #240]	; (8001218 <MPU6050_Read_Accel+0x12c>)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4611      	mov	r1, r2
 800112c:	2254      	movs	r2, #84	; 0x54
 800112e:	4618      	mov	r0, r3
 8001130:	f004 faaa 	bl	8005688 <memcpy>

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001134:	f107 000c 	add.w	r0, r7, #12
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2306      	movs	r3, #6
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	223b      	movs	r2, #59	; 0x3b
 800114c:	21d0      	movs	r1, #208	; 0xd0
 800114e:	f002 fd31 	bl	8003bb4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001152:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001166:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800117a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	lectura.Ax = Accel_X_RAW/16384.0;
 800118e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f92e 	bl	80003f4 <__aeabi_i2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MPU6050_Read_Accel+0x130>)
 800119e:	f7ff fabd 	bl	800071c <__aeabi_ddiv>
 80011a2:	4603      	mov	r3, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	4618      	mov	r0, r3
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc65 	bl	8000a78 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	663b      	str	r3, [r7, #96]	; 0x60
	lectura.Ay = Accel_Y_RAW/16384.0;
 80011b2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f91c 	bl	80003f4 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MPU6050_Read_Accel+0x130>)
 80011c2:	f7ff faab 	bl	800071c <__aeabi_ddiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fc53 	bl	8000a78 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Az = Accel_Z_RAW/16384.0;
 80011d6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f90a 	bl	80003f4 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MPU6050_Read_Accel+0x130>)
 80011e6:	f7ff fa99 	bl	800071c <__aeabi_ddiv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fc41 	bl	8000a78 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	66bb      	str	r3, [r7, #104]	; 0x68
	return lectura;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	461c      	mov	r4, r3
 80011fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	377c      	adds	r7, #124	; 0x7c
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	bf00      	nop
 8001214:	200000f0 	.word	0x200000f0
 8001218:	20000148 	.word	0x20000148
 800121c:	40d00000 	.word	0x40d00000

08001220 <MPU6050_Read_Gyro>:


Gyro MPU6050_Read_Gyro (int selector)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b0a3      	sub	sp, #140	; 0x8c
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	Gyro lectura;
	uint8_t Rec_Data[6];
	I2C_HandleTypeDef hi2c;

	int16_t Gyro_X_RAW = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Gyro_Y_RAW = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Gyro_Z_RAW = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	if (selector == 1) hi2c = hi2c1;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d107      	bne.n	8001252 <MPU6050_Read_Gyro+0x32>
 8001242:	4a43      	ldr	r2, [pc, #268]	; (8001350 <MPU6050_Read_Gyro+0x130>)
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4611      	mov	r1, r2
 800124a:	2254      	movs	r2, #84	; 0x54
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fa1b 	bl	8005688 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d107      	bne.n	8001268 <MPU6050_Read_Gyro+0x48>
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <MPU6050_Read_Gyro+0x134>)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4611      	mov	r1, r2
 8001260:	2254      	movs	r2, #84	; 0x54
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fa10 	bl	8005688 <memcpy>
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001268:	f107 0008 	add.w	r0, r7, #8
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2306      	movs	r3, #6
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2243      	movs	r2, #67	; 0x43
 8001280:	21d0      	movs	r1, #208	; 0xd0
 8001282:	f002 fc97 	bl	8003bb4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001286:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800129a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80012ae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	lectura.Gx = Gyro_X_RAW/131.0;
 80012c2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	a31e      	add	r3, pc, #120	; (adr r3, 8001348 <MPU6050_Read_Gyro+0x128>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_ddiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fbcb 	bl	8000a78 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Gy = Gyro_Y_RAW/131.0;
 80012e6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f882 	bl	80003f4 <__aeabi_i2d>
 80012f0:	a315      	add	r3, pc, #84	; (adr r3, 8001348 <MPU6050_Read_Gyro+0x128>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff fa11 	bl	800071c <__aeabi_ddiv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	4618      	mov	r0, r3
 8001300:	4621      	mov	r1, r4
 8001302:	f7ff fbb9 	bl	8000a78 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	66bb      	str	r3, [r7, #104]	; 0x68
	lectura.Gz = Gyro_Z_RAW/131.0;
 800130a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f870 	bl	80003f4 <__aeabi_i2d>
 8001314:	a30c      	add	r3, pc, #48	; (adr r3, 8001348 <MPU6050_Read_Gyro+0x128>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f9ff 	bl	800071c <__aeabi_ddiv>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff fba7 	bl	8000a78 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	66fb      	str	r3, [r7, #108]	; 0x6c

return lectura;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	461c      	mov	r4, r3
 8001332:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	377c      	adds	r7, #124	; 0x7c
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	00000000 	.word	0x00000000
 800134c:	40606000 	.word	0x40606000
 8001350:	200000f0 	.word	0x200000f0
 8001354:	20000148 	.word	0x20000148

08001358 <KalmanMPU>:


float KalmanMPU(float newAngle, float newRate, float dt,int identifier, int axis){  //1 x, 2 y , 3 z
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b09f      	sub	sp, #124	; 0x7c
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]

	float P[2][2];
	if(identifier == 1 && axis == 1 ){
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d126      	bne.n	80013ba <KalmanMPU+0x62>
 800136c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001370:	2b01      	cmp	r3, #1
 8001372:	d122      	bne.n	80013ba <KalmanMPU+0x62>
		for(int i = 0; i<2;i++){
 8001374:	2300      	movs	r3, #0
 8001376:	677b      	str	r3, [r7, #116]	; 0x74
 8001378:	e01c      	b.n	80013b4 <KalmanMPU+0x5c>
			for(int j=0;j<2;j++){
 800137a:	2300      	movs	r3, #0
 800137c:	673b      	str	r3, [r7, #112]	; 0x70
 800137e:	e013      	b.n	80013a8 <KalmanMPU+0x50>
				P[i][j]=P1[i][j];
 8001380:	493e      	ldr	r1, [pc, #248]	; (800147c <KalmanMPU+0x124>)
 8001382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001384:	005a      	lsls	r2, r3, #1
 8001386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001388:	4413      	add	r3, r2
 800138a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800138e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001390:	0059      	lsls	r1, r3, #1
 8001392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001394:	440b      	add	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800139c:	440b      	add	r3, r1
 800139e:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 80013a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a4:	3301      	adds	r3, #1
 80013a6:	673b      	str	r3, [r7, #112]	; 0x70
 80013a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	dde8      	ble.n	8001380 <KalmanMPU+0x28>
		for(int i = 0; i<2;i++){
 80013ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b0:	3301      	adds	r3, #1
 80013b2:	677b      	str	r3, [r7, #116]	; 0x74
 80013b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	dddf      	ble.n	800137a <KalmanMPU+0x22>
			}
		}
	}

	if(identifier == 2 && axis ==1){
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d126      	bne.n	800140e <KalmanMPU+0xb6>
 80013c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d122      	bne.n	800140e <KalmanMPU+0xb6>
		for(int i = 0; i<2;i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013cc:	e01c      	b.n	8001408 <KalmanMPU+0xb0>
			for(int j=0;j<2;j++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80013d2:	e013      	b.n	80013fc <KalmanMPU+0xa4>
				P[i][j]=P2[i][j];
 80013d4:	492a      	ldr	r1, [pc, #168]	; (8001480 <KalmanMPU+0x128>)
 80013d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d8:	005a      	lsls	r2, r3, #1
 80013da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013dc:	4413      	add	r3, r2
 80013de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80013e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e4:	0059      	lsls	r1, r3, #1
 80013e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013e8:	440b      	add	r3, r1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80013f0:	440b      	add	r3, r1
 80013f2:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 80013f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f8:	3301      	adds	r3, #1
 80013fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80013fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013fe:	2b01      	cmp	r3, #1
 8001400:	dde8      	ble.n	80013d4 <KalmanMPU+0x7c>
		for(int i = 0; i<2;i++){
 8001402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001404:	3301      	adds	r3, #1
 8001406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800140a:	2b01      	cmp	r3, #1
 800140c:	dddf      	ble.n	80013ce <KalmanMPU+0x76>
			}
		}
	}

	if(identifier == 1 && axis == 2){
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d126      	bne.n	8001462 <KalmanMPU+0x10a>
 8001414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001418:	2b02      	cmp	r3, #2
 800141a:	d122      	bne.n	8001462 <KalmanMPU+0x10a>
		for(int i = 0; i<2;i++){
 800141c:	2300      	movs	r3, #0
 800141e:	667b      	str	r3, [r7, #100]	; 0x64
 8001420:	e01c      	b.n	800145c <KalmanMPU+0x104>
			for(int j=0;j<2;j++){
 8001422:	2300      	movs	r3, #0
 8001424:	663b      	str	r3, [r7, #96]	; 0x60
 8001426:	e013      	b.n	8001450 <KalmanMPU+0xf8>
				P[i][j]=P3[i][j];
 8001428:	4916      	ldr	r1, [pc, #88]	; (8001484 <KalmanMPU+0x12c>)
 800142a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800142c:	005a      	lsls	r2, r3, #1
 800142e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001430:	4413      	add	r3, r2
 8001432:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001438:	0059      	lsls	r1, r3, #1
 800143a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143c:	440b      	add	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001444:	440b      	add	r3, r1
 8001446:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 800144a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800144c:	3301      	adds	r3, #1
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
 8001450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001452:	2b01      	cmp	r3, #1
 8001454:	dde8      	ble.n	8001428 <KalmanMPU+0xd0>
		for(int i = 0; i<2;i++){
 8001456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001458:	3301      	adds	r3, #1
 800145a:	667b      	str	r3, [r7, #100]	; 0x64
 800145c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800145e:	2b01      	cmp	r3, #1
 8001460:	dddf      	ble.n	8001422 <KalmanMPU+0xca>
			}
		}
	}

	if(identifier == 2 && axis==2){
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d12c      	bne.n	80014c2 <KalmanMPU+0x16a>
 8001468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146c:	2b02      	cmp	r3, #2
 800146e:	d128      	bne.n	80014c2 <KalmanMPU+0x16a>
		for(int i = 0; i<2;i++){
 8001470:	2300      	movs	r3, #0
 8001472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001474:	e022      	b.n	80014bc <KalmanMPU+0x164>
			for(int j=0;j<2;j++){
 8001476:	2300      	movs	r3, #0
 8001478:	65bb      	str	r3, [r7, #88]	; 0x58
 800147a:	e019      	b.n	80014b0 <KalmanMPU+0x158>
 800147c:	200000e0 	.word	0x200000e0
 8001480:	200001a0 	.word	0x200001a0
 8001484:	200002a4 	.word	0x200002a4
				P[i][j]=P4[i][j];
 8001488:	4987      	ldr	r1, [pc, #540]	; (80016a8 <KalmanMPU+0x350>)
 800148a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001490:	4413      	add	r3, r2
 8001492:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001498:	0059      	lsls	r1, r3, #1
 800149a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149c:	440b      	add	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80014a4:	440b      	add	r3, r1
 80014a6:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 80014aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ac:	3301      	adds	r3, #1
 80014ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80014b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	dde8      	ble.n	8001488 <KalmanMPU+0x130>
		for(int i = 0; i<2;i++){
 80014b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b8:	3301      	adds	r3, #1
 80014ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	ddd9      	ble.n	8001476 <KalmanMPU+0x11e>
		}
	}


	//1
	rate = newRate - bias;
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <KalmanMPU+0x354>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f7ff fb29 	bl	8000b20 <__aeabi_fsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <KalmanMPU+0x358>)
 80014d4:	601a      	str	r2, [r3, #0]
    angle += dt * rate;
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <KalmanMPU+0x358>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc29 	bl	8000d34 <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <KalmanMPU+0x35c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fb19 	bl	8000b24 <__addsf3>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <KalmanMPU+0x35c>)
 80014f8:	601a      	str	r2, [r3, #0]
	//2
    	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 80014fa:	69bc      	ldr	r4, [r7, #24]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fc17 	bl	8000d34 <__aeabi_fmul>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f7ff fb06 	bl	8000b20 <__aeabi_fsub>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f7ff faff 	bl	8000b20 <__aeabi_fsub>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <KalmanMPU+0x360>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4610      	mov	r0, r2
 800152e:	f7ff faf9 	bl	8000b24 <__addsf3>
 8001532:	4603      	mov	r3, r0
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fbfc 	bl	8000d34 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff faef 	bl	8000b24 <__addsf3>
 8001546:	4603      	mov	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
    	P[0][1] -= dt * P[1][1];
 800154a:	69fc      	ldr	r4, [r7, #28]
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fbef 	bl	8000d34 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fae0 	bl	8000b20 <__aeabi_fsub>
 8001560:	4603      	mov	r3, r0
 8001562:	61fb      	str	r3, [r7, #28]
    	P[1][0] -= dt * P[1][1];
 8001564:	6a3c      	ldr	r4, [r7, #32]
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fbe2 	bl	8000d34 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fad3 	bl	8000b20 <__aeabi_fsub>
 800157a:	4603      	mov	r3, r0
 800157c:	623b      	str	r3, [r7, #32]
    	P[1][1] += Q_bias * dt;
 800157e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001580:	4b4e      	ldr	r3, [pc, #312]	; (80016bc <KalmanMPU+0x364>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbd4 	bl	8000d34 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff fac7 	bl	8000b24 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
	 //3
    	float S = P[0][0] + R_measure; // Estimate error
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <KalmanMPU+0x368>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f7ff fabe 	bl	8000b24 <__addsf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
    	float K[2]; // Kalman gain - This is a 2x1 vector
    	K[0] = P[0][0] / S;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc73 	bl	8000e9c <__aeabi_fdiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	613b      	str	r3, [r7, #16]
    	K[1] = P[1][0] / S;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc6c 	bl	8000e9c <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
     //4
    	float y = newAngle - angle;
 80015c8:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <KalmanMPU+0x35c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff faa6 	bl	8000b20 <__aeabi_fsub>
 80015d4:	4603      	mov	r3, r0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
        angle += K[0] * y;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fba9 	bl	8000d34 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <KalmanMPU+0x35c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4610      	mov	r0, r2
 80015ee:	f7ff fa99 	bl	8000b24 <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <KalmanMPU+0x35c>)
 80015f8:	601a      	str	r2, [r3, #0]
        bias += K[1] * y;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb98 	bl	8000d34 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <KalmanMPU+0x354>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fa88 	bl	8000b24 <__addsf3>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <KalmanMPU+0x354>)
 800161a:	601a      	str	r2, [r3, #0]
     //5
         float P00_temp = P[0][0];
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
         float P01_temp = P[0][1];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28

         P[0][0] -= K[0] * P00_temp;
 8001624:	69bc      	ldr	r4, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb82 	bl	8000d34 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	4619      	mov	r1, r3
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff fa73 	bl	8000b20 <__aeabi_fsub>
 800163a:	4603      	mov	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
         P[0][1] -= K[0] * P01_temp;
 800163e:	69fc      	ldr	r4, [r7, #28]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb75 	bl	8000d34 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	4619      	mov	r1, r3
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff fa66 	bl	8000b20 <__aeabi_fsub>
 8001654:	4603      	mov	r3, r0
 8001656:	61fb      	str	r3, [r7, #28]
         P[1][0] -= K[1] * P00_temp;
 8001658:	6a3c      	ldr	r4, [r7, #32]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fb68 	bl	8000d34 <__aeabi_fmul>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fa59 	bl	8000b20 <__aeabi_fsub>
 800166e:	4603      	mov	r3, r0
 8001670:	623b      	str	r3, [r7, #32]
         P[1][1] -= K[1] * P01_temp;
 8001672:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb5b 	bl	8000d34 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fa4c 	bl	8000b20 <__aeabi_fsub>
 8001688:	4603      	mov	r3, r0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24


     	if(identifier == 1 && axis ==1){
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d135      	bne.n	80016fe <KalmanMPU+0x3a6>
 8001692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001696:	2b01      	cmp	r3, #1
 8001698:	d131      	bne.n	80016fe <KalmanMPU+0x3a6>
     		for(int i = 0; i<2;i++){
 800169a:	2300      	movs	r3, #0
 800169c:	657b      	str	r3, [r7, #84]	; 0x54
 800169e:	e02b      	b.n	80016f8 <KalmanMPU+0x3a0>
     			for(int j=0;j<2;j++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	653b      	str	r3, [r7, #80]	; 0x50
 80016a4:	e022      	b.n	80016ec <KalmanMPU+0x394>
 80016a6:	bf00      	nop
 80016a8:	2000027c 	.word	0x2000027c
 80016ac:	2000009c 	.word	0x2000009c
 80016b0:	200000a4 	.word	0x200000a4
 80016b4:	200000a0 	.word	0x200000a0
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004
 80016c0:	20000008 	.word	0x20000008
     				P1[i][j]=P[i][j];
 80016c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c6:	005a      	lsls	r2, r3, #1
 80016c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80016d2:	4413      	add	r3, r2
 80016d4:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80016d8:	484b      	ldr	r0, [pc, #300]	; (8001808 <KalmanMPU+0x4b0>)
 80016da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016dc:	0059      	lsls	r1, r3, #1
 80016de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e0:	440b      	add	r3, r1
 80016e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80016e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e8:	3301      	adds	r3, #1
 80016ea:	653b      	str	r3, [r7, #80]	; 0x50
 80016ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	dde8      	ble.n	80016c4 <KalmanMPU+0x36c>
     		for(int i = 0; i<2;i++){
 80016f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f4:	3301      	adds	r3, #1
 80016f6:	657b      	str	r3, [r7, #84]	; 0x54
 80016f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	ddd0      	ble.n	80016a0 <KalmanMPU+0x348>
     			}
     		}
     	}

     	if(identifier == 2  && axis ==1){
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d126      	bne.n	8001752 <KalmanMPU+0x3fa>
 8001704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001708:	2b01      	cmp	r3, #1
 800170a:	d122      	bne.n	8001752 <KalmanMPU+0x3fa>
     		for(int i = 0; i<2;i++){
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001710:	e01c      	b.n	800174c <KalmanMPU+0x3f4>
     			for(int j=0;j<2;j++){
 8001712:	2300      	movs	r3, #0
 8001714:	64bb      	str	r3, [r7, #72]	; 0x48
 8001716:	e013      	b.n	8001740 <KalmanMPU+0x3e8>
     				P2[i][j]=P[i][j];
 8001718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171a:	005a      	lsls	r2, r3, #1
 800171c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001726:	4413      	add	r3, r2
 8001728:	f853 2c60 	ldr.w	r2, [r3, #-96]
 800172c:	4837      	ldr	r0, [pc, #220]	; (800180c <KalmanMPU+0x4b4>)
 800172e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001730:	0059      	lsls	r1, r3, #1
 8001732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001734:	440b      	add	r3, r1
 8001736:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 800173a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173c:	3301      	adds	r3, #1
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001742:	2b01      	cmp	r3, #1
 8001744:	dde8      	ble.n	8001718 <KalmanMPU+0x3c0>
     		for(int i = 0; i<2;i++){
 8001746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001748:	3301      	adds	r3, #1
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174e:	2b01      	cmp	r3, #1
 8001750:	dddf      	ble.n	8001712 <KalmanMPU+0x3ba>
     			}
     		}
     	}
     	if(identifier == 1  && axis ==2){
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d126      	bne.n	80017a6 <KalmanMPU+0x44e>
 8001758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800175c:	2b02      	cmp	r3, #2
 800175e:	d122      	bne.n	80017a6 <KalmanMPU+0x44e>
     		for(int i = 0; i<2;i++){
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
 8001764:	e01c      	b.n	80017a0 <KalmanMPU+0x448>
     			for(int j=0;j<2;j++){
 8001766:	2300      	movs	r3, #0
 8001768:	643b      	str	r3, [r7, #64]	; 0x40
 800176a:	e013      	b.n	8001794 <KalmanMPU+0x43c>
     				P3[i][j]=P[i][j];
 800176c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800176e:	005a      	lsls	r2, r3, #1
 8001770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800177a:	4413      	add	r3, r2
 800177c:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8001780:	4823      	ldr	r0, [pc, #140]	; (8001810 <KalmanMPU+0x4b8>)
 8001782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001784:	0059      	lsls	r1, r3, #1
 8001786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001788:	440b      	add	r3, r1
 800178a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 800178e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001790:	3301      	adds	r3, #1
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
 8001794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001796:	2b01      	cmp	r3, #1
 8001798:	dde8      	ble.n	800176c <KalmanMPU+0x414>
     		for(int i = 0; i<2;i++){
 800179a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800179c:	3301      	adds	r3, #1
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
 80017a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	dddf      	ble.n	8001766 <KalmanMPU+0x40e>
     			}
     		}
     	}
     	if(identifier == 2  && axis ==2){
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d126      	bne.n	80017fa <KalmanMPU+0x4a2>
 80017ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d122      	bne.n	80017fa <KalmanMPU+0x4a2>
     		for(int i = 0; i<2;i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b8:	e01c      	b.n	80017f4 <KalmanMPU+0x49c>
     			for(int j=0;j<2;j++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80017be:	e013      	b.n	80017e8 <KalmanMPU+0x490>
     				P4[i][j]=P[i][j];
 80017c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c2:	005a      	lsls	r2, r3, #1
 80017c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80017ce:	4413      	add	r3, r2
 80017d0:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80017d4:	480f      	ldr	r0, [pc, #60]	; (8001814 <KalmanMPU+0x4bc>)
 80017d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d8:	0059      	lsls	r1, r3, #1
 80017da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017dc:	440b      	add	r3, r1
 80017de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80017e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e4:	3301      	adds	r3, #1
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	dde8      	ble.n	80017c0 <KalmanMPU+0x468>
     		for(int i = 0; i<2;i++){
 80017ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f0:	3301      	adds	r3, #1
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	dddf      	ble.n	80017ba <KalmanMPU+0x462>
     		}
     	}



return angle;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <KalmanMPU+0x4c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]

}
 80017fe:	4618      	mov	r0, r3
 8001800:	377c      	adds	r7, #124	; 0x7c
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	200000e0 	.word	0x200000e0
 800180c:	200001a0 	.word	0x200001a0
 8001810:	200002a4 	.word	0x200002a4
 8001814:	2000027c 	.word	0x2000027c
 8001818:	200000a0 	.word	0x200000a0
 800181c:	00000000 	.word	0x00000000

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001824:	b0b5      	sub	sp, #212	; 0xd4
 8001826:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001828:	f001 f8a8 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182c:	f000 fda0 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001830:	f000 feb2 	bl	8002598 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001834:	f000 fdec 	bl	8002410 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001838:	f000 fe28 	bl	800248c <MX_I2C1_Init>
  MX_I2C2_Init();
 800183c:	f000 fe54 	bl	80024e8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001840:	f000 fe80 	bl	8002544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu1.hi2c= 1;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <main+0x9c>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
  mpu2.hi2c= 2;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <main+0xa0>)
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]

  mpu1.offsetY =  3;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <main+0x9c>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <main+0xa4>)
 8001854:	621a      	str	r2, [r3, #32]
  mpu1.offsetx =  1.25;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <main+0x9c>)
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <main+0xa8>)
 800185a:	61da      	str	r2, [r3, #28]

  mpu2.offsetY =  -3; //2,48  -3
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <main+0xa0>)
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <main+0xac>)
 8001860:	621a      	str	r2, [r3, #32]
  mpu2.offsetx = -0.57;  //0.57    0
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <main+0xa0>)
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <main+0xb0>)
 8001866:	61da      	str	r2, [r3, #28]
KalmanAngle5=0;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <main+0xb4>)
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

  //valores stadisticos
  	float desv_tipica = 2.0231;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <main+0xb8>)
 8001872:	67fb      	str	r3, [r7, #124]	; 0x7c
  	float desv_estado = 2.0231;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <main+0xb8>)
 8001876:	67bb      	str	r3, [r7, #120]	; 0x78
  	float var = desv_tipica*desv_tipica;
 8001878:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800187a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800187c:	f7ff fa5a 	bl	8000d34 <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	677b      	str	r3, [r7, #116]	; 0x74
  	float var_estado = desv_estado*desv_estado;
 8001884:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001886:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001888:	f7ff fa54 	bl	8000d34 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	673b      	str	r3, [r7, #112]	; 0x70
  	float P = var_estado;
 8001890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  	float P_previa;


  	char info_real[32], info_kalman[32];
  		char ln[] = "\n\r";
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <main+0xbc>)
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4611      	mov	r1, r2
 80018a0:	8019      	strh	r1, [r3, #0]
 80018a2:	3302      	adds	r3, #2
 80018a4:	0c12      	lsrs	r2, r2, #16
 80018a6:	701a      	strb	r2, [r3, #0]
  		char comma[] = ",";
 80018a8:	232c      	movs	r3, #44	; 0x2c
 80018aa:	843b      	strh	r3, [r7, #32]
int start = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		HAL_Delay(2000);
 80018b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b6:	f001 f8c3 	bl	8002a40 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
while (start != 1){
 80018ba:	e031      	b.n	8001920 <main+0x100>
 80018bc:	20000368 	.word	0x20000368
 80018c0:	200001b0 	.word	0x200001b0
 80018c4:	40400000 	.word	0x40400000
 80018c8:	3fa00000 	.word	0x3fa00000
 80018cc:	c0400000 	.word	0xc0400000
 80018d0:	bf11eb85 	.word	0xbf11eb85
 80018d4:	20000254 	.word	0x20000254
 80018d8:	40017a78 	.word	0x40017a78
 80018dc:	08008168 	.word	0x08008168
start =	  MPU6050_Init(hi2c1);
 80018e0:	4cd1      	ldr	r4, [pc, #836]	; (8001c28 <main+0x408>)
 80018e2:	4668      	mov	r0, sp
 80018e4:	f104 0310 	add.w	r3, r4, #16
 80018e8:	2244      	movs	r2, #68	; 0x44
 80018ea:	4619      	mov	r1, r3
 80018ec:	f003 fecc 	bl	8005688 <memcpy>
 80018f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018f4:	f7ff fb94 	bl	8001020 <MPU6050_Init>
 80018f8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
start =	 	 MPU6050_Init(hi2c2);
 80018fc:	4ccb      	ldr	r4, [pc, #812]	; (8001c2c <main+0x40c>)
 80018fe:	4668      	mov	r0, sp
 8001900:	f104 0310 	add.w	r3, r4, #16
 8001904:	2244      	movs	r2, #68	; 0x44
 8001906:	4619      	mov	r1, r3
 8001908:	f003 febe 	bl	8005688 <memcpy>
 800190c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001910:	f7ff fb86 	bl	8001020 <MPU6050_Init>
 8001914:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
HAL_Delay(500);
 8001918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191c:	f001 f890 	bl	8002a40 <HAL_Delay>
while (start != 1){
 8001920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001924:	2b01      	cmp	r3, #1
 8001926:	d1db      	bne.n	80018e0 <main+0xc0>
}
	 	  // read the Accelerometer and Gyro values and tranform into angles


	 	// 	  MPU6050_Read_Accel(hi2c2,Ax1,Ay1,Az1); // error AL asignar? proque no coge las void
	 	 mpu2.MPUaccel = MPU6050_Read_Accel(mpu2.hi2c);
 8001928:	4bc1      	ldr	r3, [pc, #772]	; (8001c30 <main+0x410>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4cc0      	ldr	r4, [pc, #768]	; (8001c30 <main+0x410>)
 800192e:	463b      	mov	r3, r7
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fbda 	bl	80010ec <MPU6050_Read_Accel>
 8001938:	f104 0310 	add.w	r3, r4, #16
 800193c:	463a      	mov	r2, r7
 800193e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001940:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUaccel =  MPU6050_Read_Accel(mpu1.hi2c);
 8001944:	4bbb      	ldr	r3, [pc, #748]	; (8001c34 <main+0x414>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4cba      	ldr	r4, [pc, #744]	; (8001c34 <main+0x414>)
 800194a:	463b      	mov	r3, r7
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fbcc 	bl	80010ec <MPU6050_Read_Accel>
 8001954:	f104 0310 	add.w	r3, r4, #16
 8001958:	463a      	mov	r2, r7
 800195a:	ca07      	ldmia	r2, {r0, r1, r2}
 800195c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu2.MPUgyro =   MPU6050_Read_Gyro(mpu2.hi2c);
 8001960:	4bb3      	ldr	r3, [pc, #716]	; (8001c30 <main+0x410>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4cb2      	ldr	r4, [pc, #712]	; (8001c30 <main+0x410>)
 8001966:	463b      	mov	r3, r7
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fc58 	bl	8001220 <MPU6050_Read_Gyro>
 8001970:	1d23      	adds	r3, r4, #4
 8001972:	463a      	mov	r2, r7
 8001974:	ca07      	ldmia	r2, {r0, r1, r2}
 8001976:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUgyro = MPU6050_Read_Gyro(mpu1.hi2c);
 800197a:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <main+0x414>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4cad      	ldr	r4, [pc, #692]	; (8001c34 <main+0x414>)
 8001980:	463b      	mov	r3, r7
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fc4b 	bl	8001220 <MPU6050_Read_Gyro>
 800198a:	1d23      	adds	r3, r4, #4
 800198c:	463a      	mov	r2, r7
 800198e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001990:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	 accel_x1= atan(mpu1.MPUaccel.Ay/sqrt(pow(mpu1.MPUaccel.Ax,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001994:	4ba7      	ldr	r3, [pc, #668]	; (8001c34 <main+0x414>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fd3d 	bl	8000418 <__aeabi_f2d>
 800199e:	4680      	mov	r8, r0
 80019a0:	4689      	mov	r9, r1
 80019a2:	4ba4      	ldr	r3, [pc, #656]	; (8001c34 <main+0x414>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd36 	bl	8000418 <__aeabi_f2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b4:	f005 fb52 	bl	800705c <pow>
 80019b8:	4682      	mov	sl, r0
 80019ba:	468b      	mov	fp, r1
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <main+0x414>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd29 	bl	8000418 <__aeabi_f2d>
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ce:	f005 fb45 	bl	800705c <pow>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	461a      	mov	r2, r3
 80019d8:	4623      	mov	r3, r4
 80019da:	4650      	mov	r0, sl
 80019dc:	4659      	mov	r1, fp
 80019de:	f7fe fbbd 	bl	800015c <__adddf3>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	f005 fc93 	bl	8007314 <sqrt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	460c      	mov	r4, r1
 80019f2:	461a      	mov	r2, r3
 80019f4:	4623      	mov	r3, r4
 80019f6:	4640      	mov	r0, r8
 80019f8:	4649      	mov	r1, r9
 80019fa:	f7fe fe8f 	bl	800071c <__aeabi_ddiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4618      	mov	r0, r3
 8001a04:	4621      	mov	r1, r4
 8001a06:	f005 f99b 	bl	8006d40 <atan>
 8001a0a:	a385      	add	r3, pc, #532	; (adr r3, 8001c20 <main+0x400>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fd5a 	bl	80004c8 <__aeabi_dmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	460c      	mov	r4, r1
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	f7ff f82c 	bl	8000a78 <__aeabi_d2f>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b85      	ldr	r3, [pc, #532]	; (8001c38 <main+0x418>)
 8001a24:	601a      	str	r2, [r3, #0]
	 accel_y1=atan(-mpu1.MPUaccel.Ax/sqrt(pow(mpu1.MPUaccel.Ay,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001a26:	4b83      	ldr	r3, [pc, #524]	; (8001c34 <main+0x414>)
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fcf2 	bl	8000418 <__aeabi_f2d>
 8001a34:	4680      	mov	r8, r0
 8001a36:	4689      	mov	r9, r1
 8001a38:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <main+0x414>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fceb 	bl	8000418 <__aeabi_f2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4a:	f005 fb07 	bl	800705c <pow>
 8001a4e:	4682      	mov	sl, r0
 8001a50:	468b      	mov	fp, r1
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <main+0x414>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fcde 	bl	8000418 <__aeabi_f2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a64:	f005 fafa 	bl	800705c <pow>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	4650      	mov	r0, sl
 8001a72:	4659      	mov	r1, fp
 8001a74:	f7fe fb72 	bl	800015c <__adddf3>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4621      	mov	r1, r4
 8001a80:	f005 fc48 	bl	8007314 <sqrt>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	4649      	mov	r1, r9
 8001a90:	f7fe fe44 	bl	800071c <__aeabi_ddiv>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	f005 f950 	bl	8006d40 <atan>
 8001aa0:	a35f      	add	r3, pc, #380	; (adr r3, 8001c20 <main+0x400>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fd0f 	bl	80004c8 <__aeabi_dmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7fe ffe1 	bl	8000a78 <__aeabi_d2f>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <main+0x41c>)
 8001aba:	601a      	str	r2, [r3, #0]

	 accel_x2= atan(mpu2.MPUaccel.Ay/sqrt(pow(mpu2.MPUaccel.Ax,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001abc:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <main+0x410>)
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fca9 	bl	8000418 <__aeabi_f2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <main+0x410>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fca2 	bl	8000418 <__aeabi_f2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	f005 fabe 	bl	800705c <pow>
 8001ae0:	4682      	mov	sl, r0
 8001ae2:	468b      	mov	fp, r1
 8001ae4:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <main+0x410>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fc95 	bl	8000418 <__aeabi_f2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af6:	f005 fab1 	bl	800705c <pow>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	461a      	mov	r2, r3
 8001b00:	4623      	mov	r3, r4
 8001b02:	4650      	mov	r0, sl
 8001b04:	4659      	mov	r1, fp
 8001b06:	f7fe fb29 	bl	800015c <__adddf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4621      	mov	r1, r4
 8001b12:	f005 fbff 	bl	8007314 <sqrt>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	4640      	mov	r0, r8
 8001b20:	4649      	mov	r1, r9
 8001b22:	f7fe fdfb 	bl	800071c <__aeabi_ddiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	f005 f907 	bl	8006d40 <atan>
 8001b32:	a33b      	add	r3, pc, #236	; (adr r3, 8001c20 <main+0x400>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fcc6 	bl	80004c8 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f7fe ff98 	bl	8000a78 <__aeabi_d2f>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <main+0x420>)
 8001b4c:	601a      	str	r2, [r3, #0]
	 accel_y2=atan(-mpu2.MPUaccel.Ax/sqrt(pow(mpu2.MPUaccel.Ay,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <main+0x410>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fc5e 	bl	8000418 <__aeabi_f2d>
 8001b5c:	4680      	mov	r8, r0
 8001b5e:	4689      	mov	r9, r1
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <main+0x410>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc57 	bl	8000418 <__aeabi_f2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b72:	f005 fa73 	bl	800705c <pow>
 8001b76:	4682      	mov	sl, r0
 8001b78:	468b      	mov	fp, r1
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <main+0x410>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc4a 	bl	8000418 <__aeabi_f2d>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8c:	f005 fa66 	bl	800705c <pow>
 8001b90:	4603      	mov	r3, r0
 8001b92:	460c      	mov	r4, r1
 8001b94:	461a      	mov	r2, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	4650      	mov	r0, sl
 8001b9a:	4659      	mov	r1, fp
 8001b9c:	f7fe fade 	bl	800015c <__adddf3>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f005 fbb4 	bl	8007314 <sqrt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	4640      	mov	r0, r8
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	f7fe fdb0 	bl	800071c <__aeabi_ddiv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f005 f8bc 	bl	8006d40 <atan>
 8001bc8:	a315      	add	r3, pc, #84	; (adr r3, 8001c20 <main+0x400>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fc7b 	bl	80004c8 <__aeabi_dmul>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f7fe ff4d 	bl	8000a78 <__aeabi_d2f>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <main+0x424>)
 8001be2:	601a      	str	r2, [r3, #0]

	 	  dt =  HAL_GetTick()-time;
 8001be4:	f000 ff22 	bl	8002a2c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <main+0x428>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <main+0x42c>)
 8001bf2:	6013      	str	r3, [r2, #0]
	 	  time = HAL_GetTick();
 8001bf4:	f000 ff1a 	bl	8002a2c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <main+0x428>)
 8001bfc:	601a      	str	r2, [r3, #0]

	 	 	gyro_y1 += dt*(mpu1.MPUgyro.Gy-mpu1.offsetY)/1000;  //2.579
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <main+0x42c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f83e 	bl	8000c84 <__aeabi_ui2f>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <main+0x414>)
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <main+0x414>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4610      	mov	r0, r2
 8001c16:	f7fe ff83 	bl	8000b20 <__aeabi_fsub>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e018      	b.n	8001c50 <main+0x430>
 8001c1e:	bf00      	nop
 8001c20:	61d59ae7 	.word	0x61d59ae7
 8001c24:	404ca994 	.word	0x404ca994
 8001c28:	200000f0 	.word	0x200000f0
 8001c2c:	20000148 	.word	0x20000148
 8001c30:	200001b0 	.word	0x200001b0
 8001c34:	20000368 	.word	0x20000368
 8001c38:	20000298 	.word	0x20000298
 8001c3c:	200002b8 	.word	0x200002b8
 8001c40:	200000b4 	.word	0x200000b4
 8001c44:	200000b8 	.word	0x200000b8
 8001c48:	200002a0 	.word	0x200002a0
 8001c4c:	20000308 	.word	0x20000308
 8001c50:	4619      	mov	r1, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff f86e 	bl	8000d34 <__aeabi_fmul>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	49a1      	ldr	r1, [pc, #644]	; (8001ee0 <main+0x6c0>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f91d 	bl	8000e9c <__aeabi_fdiv>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b9f      	ldr	r3, [pc, #636]	; (8001ee4 <main+0x6c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f7fe ff59 	bl	8000b24 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b9b      	ldr	r3, [pc, #620]	; (8001ee4 <main+0x6c4>)
 8001c78:	601a      	str	r2, [r3, #0]
	 	 	gyro_x1 += dt*(mpu1.MPUgyro.Gx-mpu1.offsetx)/1000;    //0.3
 8001c7a:	4b9b      	ldr	r3, [pc, #620]	; (8001ee8 <main+0x6c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f800 	bl	8000c84 <__aeabi_ui2f>
 8001c84:	4604      	mov	r4, r0
 8001c86:	4b99      	ldr	r3, [pc, #612]	; (8001eec <main+0x6cc>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b98      	ldr	r3, [pc, #608]	; (8001eec <main+0x6cc>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7fe ff45 	bl	8000b20 <__aeabi_fsub>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff f84a 	bl	8000d34 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	498f      	ldr	r1, [pc, #572]	; (8001ee0 <main+0x6c0>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f8f9 	bl	8000e9c <__aeabi_fdiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <main+0x6d0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7fe ff35 	bl	8000b24 <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <main+0x6d0>)
 8001cc0:	601a      	str	r2, [r3, #0]
	 	 	gyro_z1 += dt*(mpu1.MPUgyro.Gz)/1000;
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <main+0x6c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ffdc 	bl	8000c84 <__aeabi_ui2f>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b87      	ldr	r3, [pc, #540]	; (8001eec <main+0x6cc>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f7ff f82d 	bl	8000d34 <__aeabi_fmul>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4980      	ldr	r1, [pc, #512]	; (8001ee0 <main+0x6c0>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f8dc 	bl	8000e9c <__aeabi_fdiv>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <main+0x6d4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f7fe ff18 	bl	8000b24 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <main+0x6d4>)
 8001cfa:	601a      	str	r2, [r3, #0]

	 	 	gyro_y2 += dt*(mpu2.MPUgyro.Gy-mpu2.offsetY)/1000;
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <main+0x6c8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ffbf 	bl	8000c84 <__aeabi_ui2f>
 8001d06:	4604      	mov	r4, r0
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <main+0x6d8>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <main+0x6d8>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7fe ff04 	bl	8000b20 <__aeabi_fsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff f809 	bl	8000d34 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	496e      	ldr	r1, [pc, #440]	; (8001ee0 <main+0x6c0>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8b8 	bl	8000e9c <__aeabi_fdiv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <main+0x6dc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7fe fef4 	bl	8000b24 <__addsf3>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <main+0x6dc>)
 8001d42:	601a      	str	r2, [r3, #0]
	 	 	gyro_x2 += dt*(mpu2.MPUgyro.Gx-mpu2.offsetx)/1000;
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <main+0x6c8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ff9b 	bl	8000c84 <__aeabi_ui2f>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <main+0x6d8>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <main+0x6d8>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7fe fee0 	bl	8000b20 <__aeabi_fsub>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffe5 	bl	8000d34 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	495c      	ldr	r1, [pc, #368]	; (8001ee0 <main+0x6c0>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f894 	bl	8000e9c <__aeabi_fdiv>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <main+0x6e0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7fe fed0 	bl	8000b24 <__addsf3>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <main+0x6e0>)
 8001d8a:	601a      	str	r2, [r3, #0]
	 	 	gyro_z2 += dt*(mpu2.MPUgyro.Gz)/1000;
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <main+0x6c8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ff77 	bl	8000c84 <__aeabi_ui2f>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <main+0x6d8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f7fe ffc8 	bl	8000d34 <__aeabi_fmul>
 8001da4:	4603      	mov	r3, r0
 8001da6:	494e      	ldr	r1, [pc, #312]	; (8001ee0 <main+0x6c0>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f877 	bl	8000e9c <__aeabi_fdiv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <main+0x6e4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7fe feb3 	bl	8000b24 <__addsf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <main+0x6e4>)
 8001dc4:	601a      	str	r2, [r3, #0]



	 angulo_y = 0.01*(accel_y1) + 0.9*gyro_y1;
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <main+0x6e8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fb24 	bl	8000418 <__aeabi_f2d>
 8001dd0:	a33f      	add	r3, pc, #252	; (adr r3, 8001ed0 <main+0x6b0>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fb77 	bl	80004c8 <__aeabi_dmul>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	4698      	mov	r8, r3
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <main+0x6c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fb16 	bl	8000418 <__aeabi_f2d>
 8001dec:	a33a      	add	r3, pc, #232	; (adr r3, 8001ed8 <main+0x6b8>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fb69 	bl	80004c8 <__aeabi_dmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	4640      	mov	r0, r8
 8001e00:	4649      	mov	r1, r9
 8001e02:	f7fe f9ab 	bl	800015c <__adddf3>
 8001e06:	4603      	mov	r3, r0
 8001e08:	460c      	mov	r4, r1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	f7fe fe33 	bl	8000a78 <__aeabi_d2f>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <main+0x6ec>)
 8001e16:	601a      	str	r2, [r3, #0]
	 angulo_x = 0.01*(accel_x1) + 0.9*gyro_x1;
 8001e18:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <main+0x6f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fafb 	bl	8000418 <__aeabi_f2d>
 8001e22:	a32b      	add	r3, pc, #172	; (adr r3, 8001ed0 <main+0x6b0>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fb4e 	bl	80004c8 <__aeabi_dmul>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	460c      	mov	r4, r1
 8001e30:	4698      	mov	r8, r3
 8001e32:	46a1      	mov	r9, r4
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <main+0x6d0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe faed 	bl	8000418 <__aeabi_f2d>
 8001e3e:	a326      	add	r3, pc, #152	; (adr r3, 8001ed8 <main+0x6b8>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fb40 	bl	80004c8 <__aeabi_dmul>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	4640      	mov	r0, r8
 8001e52:	4649      	mov	r1, r9
 8001e54:	f7fe f982 	bl	800015c <__adddf3>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	460c      	mov	r4, r1
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	4621      	mov	r1, r4
 8001e60:	f7fe fe0a 	bl	8000a78 <__aeabi_d2f>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <main+0x6f4>)
 8001e68:	601a      	str	r2, [r3, #0]

	 KalmanAngle1 = KalmanMPU(accel_x1, mpu1.MPUgyro.Gx, dt,mpu1.hi2c,1); //1 x, 2y , 3z
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <main+0x6f0>)
 8001e6c:	681c      	ldr	r4, [r3, #0]
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <main+0x6cc>)
 8001e70:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <main+0x6c8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff03 	bl	8000c84 <__aeabi_ui2f>
 8001e7e:	4601      	mov	r1, r0
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <main+0x6cc>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	460a      	mov	r2, r1
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fa62 	bl	8001358 <KalmanMPU>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <main+0x6f8>)
 8001e98:	601a      	str	r2, [r3, #0]
	 KalmanAngle2 = KalmanMPU(accel_x2, mpu2.MPUgyro.Gx, dt,mpu2.hi2c,1);
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <main+0x6fc>)
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <main+0x6d8>)
 8001ea0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <main+0x6c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe feeb 	bl	8000c84 <__aeabi_ui2f>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <main+0x6d8>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	460a      	mov	r2, r1
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fa4a 	bl	8001358 <KalmanMPU>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <main+0x700>)
 8001ec8:	601a      	str	r2, [r3, #0]
	 KalmanAngle3 = KalmanMPU(accel_y1, mpu1.MPUgyro.Gy, dt,mpu1.hi2c,2);
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <main+0x6e8>)
 8001ecc:	681c      	ldr	r4, [r3, #0]
 8001ece:	e029      	b.n	8001f24 <main+0x704>
 8001ed0:	47ae147b 	.word	0x47ae147b
 8001ed4:	3f847ae1 	.word	0x3f847ae1
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	3feccccc 	.word	0x3feccccc
 8001ee0:	447a0000 	.word	0x447a0000
 8001ee4:	20000258 	.word	0x20000258
 8001ee8:	20000308 	.word	0x20000308
 8001eec:	20000368 	.word	0x20000368
 8001ef0:	2000020c 	.word	0x2000020c
 8001ef4:	20000250 	.word	0x20000250
 8001ef8:	200001b0 	.word	0x200001b0
 8001efc:	20000350 	.word	0x20000350
 8001f00:	20000144 	.word	0x20000144
 8001f04:	200002e0 	.word	0x200002e0
 8001f08:	200002b8 	.word	0x200002b8
 8001f0c:	200001d4 	.word	0x200001d4
 8001f10:	20000298 	.word	0x20000298
 8001f14:	20000294 	.word	0x20000294
 8001f18:	200001d8 	.word	0x200001d8
 8001f1c:	200000b4 	.word	0x200000b4
 8001f20:	200002dc 	.word	0x200002dc
 8001f24:	4bb4      	ldr	r3, [pc, #720]	; (80021f8 <main+0x9d8>)
 8001f26:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8001f2a:	4bb4      	ldr	r3, [pc, #720]	; (80021fc <main+0x9dc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fea8 	bl	8000c84 <__aeabi_ui2f>
 8001f34:	4601      	mov	r1, r0
 8001f36:	4bb0      	ldr	r3, [pc, #704]	; (80021f8 <main+0x9d8>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	460a      	mov	r2, r1
 8001f42:	4641      	mov	r1, r8
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fa07 	bl	8001358 <KalmanMPU>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4bac      	ldr	r3, [pc, #688]	; (8002200 <main+0x9e0>)
 8001f4e:	601a      	str	r2, [r3, #0]
	 KalmanAngle4 = KalmanMPU(accel_y2, mpu2.MPUgyro.Gy, dt,mpu2.hi2c,2);
 8001f50:	4bac      	ldr	r3, [pc, #688]	; (8002204 <main+0x9e4>)
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	4bac      	ldr	r3, [pc, #688]	; (8002208 <main+0x9e8>)
 8001f56:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8001f5a:	4ba8      	ldr	r3, [pc, #672]	; (80021fc <main+0x9dc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fe90 	bl	8000c84 <__aeabi_ui2f>
 8001f64:	4601      	mov	r1, r0
 8001f66:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <main+0x9e8>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	460a      	mov	r2, r1
 8001f72:	4641      	mov	r1, r8
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff f9ef 	bl	8001358 <KalmanMPU>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4ba3      	ldr	r3, [pc, #652]	; (800220c <main+0x9ec>)
 8001f7e:	601a      	str	r2, [r3, #0]

	 angulo_y2 = 0.01*(accel_y2) + 0.9*gyro_y2;
 8001f80:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <main+0x9e4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa47 	bl	8000418 <__aeabi_f2d>
 8001f8a:	a395      	add	r3, pc, #596	; (adr r3, 80021e0 <main+0x9c0>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fa9a 	bl	80004c8 <__aeabi_dmul>
 8001f94:	4603      	mov	r3, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	4698      	mov	r8, r3
 8001f9a:	46a1      	mov	r9, r4
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <main+0x9f0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa39 	bl	8000418 <__aeabi_f2d>
 8001fa6:	a390      	add	r3, pc, #576	; (adr r3, 80021e8 <main+0x9c8>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fa8c 	bl	80004c8 <__aeabi_dmul>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	4640      	mov	r0, r8
 8001fba:	4649      	mov	r1, r9
 8001fbc:	f7fe f8ce 	bl	800015c <__adddf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	f7fe fd56 	bl	8000a78 <__aeabi_d2f>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b91      	ldr	r3, [pc, #580]	; (8002214 <main+0x9f4>)
 8001fd0:	601a      	str	r2, [r3, #0]
	 angulo_x2 = 0.01*(accel_x2) + 0.9*gyro_x2;
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <main+0x9f8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa1e 	bl	8000418 <__aeabi_f2d>
 8001fdc:	a380      	add	r3, pc, #512	; (adr r3, 80021e0 <main+0x9c0>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fa71 	bl	80004c8 <__aeabi_dmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	46a1      	mov	r9, r4
 8001fee:	4b8b      	ldr	r3, [pc, #556]	; (800221c <main+0x9fc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa10 	bl	8000418 <__aeabi_f2d>
 8001ff8:	a37b      	add	r3, pc, #492	; (adr r3, 80021e8 <main+0x9c8>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fa63 	bl	80004c8 <__aeabi_dmul>
 8002002:	4603      	mov	r3, r0
 8002004:	460c      	mov	r4, r1
 8002006:	461a      	mov	r2, r3
 8002008:	4623      	mov	r3, r4
 800200a:	4640      	mov	r0, r8
 800200c:	4649      	mov	r1, r9
 800200e:	f7fe f8a5 	bl	800015c <__adddf3>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	4618      	mov	r0, r3
 8002018:	4621      	mov	r1, r4
 800201a:	f7fe fd2d 	bl	8000a78 <__aeabi_d2f>
 800201e:	4602      	mov	r2, r0
 8002020:	4b7f      	ldr	r3, [pc, #508]	; (8002220 <main+0xa00>)
 8002022:	601a      	str	r2, [r3, #0]

Z_correcto = mpu1.MPUgyro.Gz -2.3;
 8002024:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <main+0x9d8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f9f5 	bl	8000418 <__aeabi_f2d>
 800202e:	a370      	add	r3, pc, #448	; (adr r3, 80021f0 <main+0x9d0>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe f890 	bl	8000158 <__aeabi_dsub>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	4618      	mov	r0, r3
 800203e:	4621      	mov	r1, r4
 8002040:	f7fe fd1a 	bl	8000a78 <__aeabi_d2f>
 8002044:	4602      	mov	r2, r0
 8002046:	4b77      	ldr	r3, [pc, #476]	; (8002224 <main+0xa04>)
 8002048:	601a      	str	r2, [r3, #0]
if( abs(Z_correcto) < 2) Z_correcto = 0;
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <main+0xa04>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe ffc0 	bl	8000fd4 <__aeabi_f2iz>
 8002054:	4603      	mov	r3, r0
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	db0b      	blt.n	8002074 <main+0x854>
 800205c:	4b71      	ldr	r3, [pc, #452]	; (8002224 <main+0xa04>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe ffb7 	bl	8000fd4 <__aeabi_f2iz>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	dc03      	bgt.n	8002074 <main+0x854>
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <main+0xa04>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
KalmanAngle5 += dt*Z_correcto/1000;
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <main+0x9dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fe03 	bl	8000c84 <__aeabi_ui2f>
 800207e:	4602      	mov	r2, r0
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <main+0xa04>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7fe fe54 	bl	8000d34 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	4966      	ldr	r1, [pc, #408]	; (8002228 <main+0xa08>)
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ff03 	bl	8000e9c <__aeabi_fdiv>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <main+0xa0c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7fe fd3f 	bl	8000b24 <__addsf3>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b60      	ldr	r3, [pc, #384]	; (800222c <main+0xa0c>)
 80020ac:	601a      	str	r2, [r3, #0]
	 //ADC read

	 P_previa =  P;
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	66fb      	str	r3, [r7, #108]	; 0x6c

	 	Kalman = P/(P+var);
 80020b4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80020b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80020ba:	f7fe fd33 	bl	8000b24 <__addsf3>
 80020be:	4603      	mov	r3, r0
 80020c0:	4619      	mov	r1, r3
 80020c2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80020c6:	f7fe fee9 	bl	8000e9c <__aeabi_fdiv>
 80020ca:	4603      	mov	r3, r0
 80020cc:	66bb      	str	r3, [r7, #104]	; 0x68

	 HAL_ADC_Start(&hadc1);
 80020ce:	4858      	ldr	r0, [pc, #352]	; (8002230 <main+0xa10>)
 80020d0:	f000 fdb0 	bl	8002c34 <HAL_ADC_Start>
	 	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	4855      	ldr	r0, [pc, #340]	; (8002230 <main+0xa10>)
 80020da:	f000 fe59 	bl	8002d90 <HAL_ADC_PollForConversion>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <main+0x8d8>
	 		 ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 80020e4:	4852      	ldr	r0, [pc, #328]	; (8002230 <main+0xa10>)
 80020e6:	f000 ff4d 	bl	8002f84 <HAL_ADC_GetValue>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fdc9 	bl	8000c84 <__aeabi_ui2f>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <main+0xa14>)
 80020f6:	601a      	str	r2, [r3, #0]
	 	   }

	 	 X_estimate = X + Kalman*(ADC_val-X);
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <main+0xa18>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fdc5 	bl	8000c8c <__aeabi_i2f>
 8002102:	4680      	mov	r8, r0
 8002104:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <main+0xa14>)
 8002106:	681c      	ldr	r4, [r3, #0]
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <main+0xa18>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fdbd 	bl	8000c8c <__aeabi_i2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	4620      	mov	r0, r4
 8002118:	f7fe fd02 	bl	8000b20 <__aeabi_fsub>
 800211c:	4603      	mov	r3, r0
 800211e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fe07 	bl	8000d34 <__aeabi_fmul>
 8002126:	4603      	mov	r3, r0
 8002128:	4619      	mov	r1, r3
 800212a:	4640      	mov	r0, r8
 800212c:	f7fe fcfa 	bl	8000b24 <__addsf3>
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff4e 	bl	8000fd4 <__aeabi_f2iz>
 8002138:	4602      	mov	r2, r0
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <main+0xa1c>)
 800213c:	601a      	str	r2, [r3, #0]
	 		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 800213e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002140:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002144:	f7fe fcec 	bl	8000b20 <__aeabi_fsub>
 8002148:	4603      	mov	r3, r0
 800214a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fdf1 	bl	8000d34 <__aeabi_fmul>
 8002152:	4603      	mov	r3, r0
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f95f 	bl	8000418 <__aeabi_f2d>
 800215a:	4680      	mov	r8, r0
 800215c:	4689      	mov	r9, r1
 800215e:	4b36      	ldr	r3, [pc, #216]	; (8002238 <main+0xa18>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <main+0xa1c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f943 	bl	80003f4 <__aeabi_i2d>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	461d      	mov	r5, r3
 8002174:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8002178:	a319      	add	r3, pc, #100	; (adr r3, 80021e0 <main+0x9c0>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	4628      	mov	r0, r5
 8002180:	4631      	mov	r1, r6
 8002182:	f7fe f9a1 	bl	80004c8 <__aeabi_dmul>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	461a      	mov	r2, r3
 800218c:	4623      	mov	r3, r4
 800218e:	4640      	mov	r0, r8
 8002190:	4649      	mov	r1, r9
 8002192:	f7fd ffe3 	bl	800015c <__adddf3>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	4618      	mov	r0, r3
 800219c:	4621      	mov	r1, r4
 800219e:	f7fe fc6b 	bl	8000a78 <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 		 	  X = X_estimate;
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <main+0xa1c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <main+0xa18>)
 80021ae:	6013      	str	r3, [r2, #0]
	 		 	  X_estimate =(X_estimate)/10 -20;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <main+0xa1c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <main+0xa20>)
 80021b6:	fb82 1203 	smull	r1, r2, r2, r3
 80021ba:	1092      	asrs	r2, r2, #2
 80021bc:	17db      	asrs	r3, r3, #31
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	3b14      	subs	r3, #20
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <main+0xa1c>)
 80021c4:	6013      	str	r3, [r2, #0]


	 //UART
	 		 	char  ese[] = "s";
 80021c6:	2373      	movs	r3, #115	; 0x73
 80021c8:	83bb      	strh	r3, [r7, #28]
	 		 	char  eMe[] = "M";
 80021ca:	234d      	movs	r3, #77	; 0x4d
 80021cc:	833b      	strh	r3, [r7, #24]
	 		 	char  eme[] = "m";
 80021ce:	236d      	movs	r3, #109	; 0x6d
 80021d0:	82bb      	strh	r3, [r7, #20]
	 		 	char  eSe[] = "S";
 80021d2:	2353      	movs	r3, #83	; 0x53
 80021d4:	823b      	strh	r3, [r7, #16]
// 		   KalmanAngle5 =  (KalmanAngle5 +300 )/2;//servo
//	 		 	 KalmanAngle4 =  KalmanAngle4*(-2) + 150;//base
//	 		 	 KalmanAngle1=  KalmanAngle1*(-4) + 300;//codo


	 		 	 gcvt(angulo_x,10,palabra);
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <main+0xa24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	e035      	b.n	8002248 <main+0xa28>
 80021dc:	f3af 8000 	nop.w
 80021e0:	47ae147b 	.word	0x47ae147b
 80021e4:	3f847ae1 	.word	0x3f847ae1
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	3feccccc 	.word	0x3feccccc
 80021f0:	66666666 	.word	0x66666666
 80021f4:	40026666 	.word	0x40026666
 80021f8:	20000368 	.word	0x20000368
 80021fc:	20000308 	.word	0x20000308
 8002200:	2000019c 	.word	0x2000019c
 8002204:	200000b8 	.word	0x200000b8
 8002208:	200001b0 	.word	0x200001b0
 800220c:	2000028c 	.word	0x2000028c
 8002210:	20000350 	.word	0x20000350
 8002214:	20000364 	.word	0x20000364
 8002218:	200000b4 	.word	0x200000b4
 800221c:	20000144 	.word	0x20000144
 8002220:	200002e4 	.word	0x200002e4
 8002224:	200002b4 	.word	0x200002b4
 8002228:	447a0000 	.word	0x447a0000
 800222c:	20000254 	.word	0x20000254
 8002230:	200001dc 	.word	0x200001dc
 8002234:	2000029c 	.word	0x2000029c
 8002238:	2000038c 	.word	0x2000038c
 800223c:	20000290 	.word	0x20000290
 8002240:	66666667 	.word	0x66666667
 8002244:	20000294 	.word	0x20000294
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f8e5 	bl	8000418 <__aeabi_f2d>
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <main+0xb18>)
 8002250:	220a      	movs	r2, #10
 8002252:	f003 f9b1 	bl	80055b8 <gcvt>
	 		 	 gcvt(KalmanAngle1,10,palabra2);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <main+0xb1c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f8dc 	bl	8000418 <__aeabi_f2d>
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <main+0xb20>)
 8002262:	220a      	movs	r2, #10
 8002264:	f003 f9a8 	bl	80055b8 <gcvt>
	 		 	 gcvt(KalmanAngle2,10,palabra3);
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <main+0xb24>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f8d3 	bl	8000418 <__aeabi_f2d>
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <main+0xb28>)
 8002274:	220a      	movs	r2, #10
 8002276:	f003 f99f 	bl	80055b8 <gcvt>
	 		 	 gcvt(KalmanAngle3,10,palabra4);
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <main+0xb2c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8ca 	bl	8000418 <__aeabi_f2d>
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <main+0xb30>)
 8002286:	220a      	movs	r2, #10
 8002288:	f003 f996 	bl	80055b8 <gcvt>
	 		 	 gcvt(KalmanAngle4,10,palabra5);
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <main+0xb34>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f8c1 	bl	8000418 <__aeabi_f2d>
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <main+0xb38>)
 8002298:	220a      	movs	r2, #10
 800229a:	f003 f98d 	bl	80055b8 <gcvt>
	 		 	 gcvt(KalmanAngle5,10,palabra6);
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <main+0xb3c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8b8 	bl	8000418 <__aeabi_f2d>
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <main+0xb40>)
 80022aa:	220a      	movs	r2, #10
 80022ac:	f003 f984 	bl	80055b8 <gcvt>
	 		 	  itoa(X_estimate,info_kalman,10);
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <main+0xb44>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022b8:	220a      	movs	r2, #10
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 f9e2 	bl	8005684 <itoa>
	 		 	  itoa(ADC_val,info_real,10);
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <main+0xb48>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fe85 	bl	8000fd4 <__aeabi_f2iz>
 80022ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022ce:	220a      	movs	r2, #10
 80022d0:	4619      	mov	r1, r3
 80022d2:	f003 f9d7 	bl	8005684 <itoa>
	 		 	//HAL_UART_Transmit(&huart1,(uint8_t*)palabra,sizeof(float ), 100);//palabra
	 		 	//HAL_UART_Transmit(&huart1, (uint8_t*)comma, sizeof(comma), 100);



	    HAL_UART_Transmit(&huart1, (uint8_t*)eMe, sizeof(char), 100);
 80022d6:	f107 0118 	add.w	r1, r7, #24
 80022da:	2364      	movs	r3, #100	; 0x64
 80022dc:	2201      	movs	r2, #1
 80022de:	4823      	ldr	r0, [pc, #140]	; (800236c <main+0xb4c>)
 80022e0:	f002 ffff 	bl	80052e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra5,sizeof(float ), 100);//palabra
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	2204      	movs	r2, #4
 80022e8:	491b      	ldr	r1, [pc, #108]	; (8002358 <main+0xb38>)
 80022ea:	4820      	ldr	r0, [pc, #128]	; (800236c <main+0xb4c>)
 80022ec:	f002 fff9 	bl	80052e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)ese, sizeof(char), 100);
 80022f0:	f107 011c 	add.w	r1, r7, #28
 80022f4:	2364      	movs	r3, #100	; 0x64
 80022f6:	2201      	movs	r2, #1
 80022f8:	481c      	ldr	r0, [pc, #112]	; (800236c <main+0xb4c>)
 80022fa:	f002 fff2 	bl	80052e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra6,sizeof(float ), 100);
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	2204      	movs	r2, #4
 8002302:	4917      	ldr	r1, [pc, #92]	; (8002360 <main+0xb40>)
 8002304:	4819      	ldr	r0, [pc, #100]	; (800236c <main+0xb4c>)
 8002306:	f002 ffec 	bl	80052e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)eme, sizeof(char), 100);
 800230a:	f107 0114 	add.w	r1, r7, #20
 800230e:	2364      	movs	r3, #100	; 0x64
 8002310:	2201      	movs	r2, #1
 8002312:	4816      	ldr	r0, [pc, #88]	; (800236c <main+0xb4c>)
 8002314:	f002 ffe5 	bl	80052e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra2,sizeof(float ), 100);
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	2204      	movs	r2, #4
 800231c:	4908      	ldr	r1, [pc, #32]	; (8002340 <main+0xb20>)
 800231e:	4813      	ldr	r0, [pc, #76]	; (800236c <main+0xb4c>)
 8002320:	f002 ffdf 	bl	80052e2 <HAL_UART_Transmit>
				//	HAL_UART_Transmit(&huart1,(uint8_t*)palabra4,sizeof(float ), 100);

				//	HAL_UART_Transmit(&huart1, (uint8_t*)eSe, sizeof(char), 100);
				//						HAL_UART_Transmit(&huart1,(uint8_t*)palabra6,sizeof(float ), 100);

		  HAL_UART_Transmit(&huart1, (uint8_t*)ln, sizeof(comma), 100);
 8002324:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002328:	2364      	movs	r3, #100	; 0x64
 800232a:	2202      	movs	r2, #2
 800232c:	480f      	ldr	r0, [pc, #60]	; (800236c <main+0xb4c>)
 800232e:	f002 ffd8 	bl	80052e2 <HAL_UART_Transmit>
  {
 8002332:	f7ff bac2 	b.w	80018ba <main+0x9a>
 8002336:	bf00      	nop
 8002338:	200002e8 	.word	0x200002e8
 800233c:	200001d8 	.word	0x200001d8
 8002340:	200000bc 	.word	0x200000bc
 8002344:	200002dc 	.word	0x200002dc
 8002348:	200002bc 	.word	0x200002bc
 800234c:	2000019c 	.word	0x2000019c
 8002350:	2000025c 	.word	0x2000025c
 8002354:	2000028c 	.word	0x2000028c
 8002358:	20000330 	.word	0x20000330
 800235c:	20000254 	.word	0x20000254
 8002360:	2000030c 	.word	0x2000030c
 8002364:	20000290 	.word	0x20000290
 8002368:	2000029c 	.word	0x2000029c
 800236c:	20000210 	.word	0x20000210

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237a:	2228      	movs	r2, #40	; 0x28
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f98d 	bl	800569e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a0:	2302      	movs	r3, #2
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a4:	2301      	movs	r3, #1
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a8:	2310      	movs	r3, #16
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 f9b9 	bl	800472c <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80023c0:	f000 f928 	bl	8002614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c4:	230f      	movs	r3, #15
 80023c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fc24 	bl	8004c2c <HAL_RCC_ClockConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80023ea:	f000 f913 	bl	8002614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023ee:	2302      	movs	r3, #2
 80023f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fdb3 	bl	8004f64 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002404:	f000 f906 	bl	8002614 <Error_Handler>
  }
}
 8002408:	bf00      	nop
 800240a:	3750      	adds	r7, #80	; 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_ADC1_Init+0x74>)
 8002422:	4a19      	ldr	r2, [pc, #100]	; (8002488 <MX_ADC1_Init+0x78>)
 8002424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_ADC1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_ADC1_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_ADC1_Init+0x74>)
 8002434:	2200      	movs	r2, #0
 8002436:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_ADC1_Init+0x74>)
 800243a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800243e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_ADC1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_ADC1_Init+0x74>)
 8002448:	2201      	movs	r2, #1
 800244a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800244c:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_ADC1_Init+0x74>)
 800244e:	f000 fb19 	bl	8002a84 <HAL_ADC_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002458:	f000 f8dc 	bl	8002614 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002460:	2301      	movs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_ADC1_Init+0x74>)
 800246e:	f000 fd95 	bl	8002f9c <HAL_ADC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002478:	f000 f8cc 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200001dc 	.word	0x200001dc
 8002488:	40012400 	.word	0x40012400

0800248c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_I2C1_Init+0x50>)
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <MX_I2C1_Init+0x54>)
 8002494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_I2C1_Init+0x50>)
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <MX_I2C1_Init+0x58>)
 800249a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_I2C1_Init+0x50>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_I2C1_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_I2C1_Init+0x50>)
 80024aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <MX_I2C1_Init+0x50>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_I2C1_Init+0x50>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_I2C1_Init+0x50>)
 80024ca:	f001 f941 	bl	8003750 <HAL_I2C_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024d4:	f000 f89e 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200000f0 	.word	0x200000f0
 80024e0:	40005400 	.word	0x40005400
 80024e4:	000186a0 	.word	0x000186a0

080024e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_I2C2_Init+0x50>)
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <MX_I2C2_Init+0x54>)
 80024f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_I2C2_Init+0x50>)
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <MX_I2C2_Init+0x58>)
 80024f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_I2C2_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_I2C2_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_I2C2_Init+0x50>)
 8002506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <MX_I2C2_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_I2C2_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <MX_I2C2_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_I2C2_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <MX_I2C2_Init+0x50>)
 8002526:	f001 f913 	bl	8003750 <HAL_I2C_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002530:	f000 f870 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000148 	.word	0x20000148
 800253c:	40005800 	.word	0x40005800
 8002540:	000186a0 	.word	0x000186a0

08002544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <MX_USART1_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800257c:	f002 fe64 	bl	8005248 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002586:	f000 f845 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000210 	.word	0x20000210
 8002594:	40013800 	.word	0x40013800

08002598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_GPIO_Init+0x74>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a16      	ldr	r2, [pc, #88]	; (800260c <MX_GPIO_Init+0x74>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_GPIO_Init+0x74>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_GPIO_Init+0x74>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <MX_GPIO_Init+0x74>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_GPIO_Init+0x74>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	2120      	movs	r1, #32
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <MX_GPIO_Init+0x78>)
 80025e2:	f001 f89d 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025e6:	2320      	movs	r3, #32
 80025e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2302      	movs	r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4619      	mov	r1, r3
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_GPIO_Init+0x78>)
 80025fe:	f000 ff35 	bl	800346c <HAL_GPIO_Init>

}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010800 	.word	0x40010800

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800261a:	e7fe      	b.n	800261a <Error_Handler+0x6>

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_MspInit+0x5c>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_MspInit+0x5c>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6193      	str	r3, [r2, #24]
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_MspInit+0x5c>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_MspInit+0x5c>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_MspInit+0x5c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	61d3      	str	r3, [r2, #28]
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_MspInit+0x5c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_MspInit+0x60>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_MspInit+0x60>)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000

08002680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <HAL_ADC_MspInit+0x6c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d121      	bne.n	80026e4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_ADC_MspInit+0x70>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d4:	2303      	movs	r3, #3
 80026d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <HAL_ADC_MspInit+0x74>)
 80026e0:	f000 fec4 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40012400 	.word	0x40012400
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010800 	.word	0x40010800

080026f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0318 	add.w	r3, r7, #24
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_I2C_MspInit+0xc8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d124      	bne.n	8002762 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002734:	2312      	movs	r3, #18
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	4619      	mov	r1, r3
 8002742:	4821      	ldr	r0, [pc, #132]	; (80027c8 <HAL_I2C_MspInit+0xd0>)
 8002744:	f000 fe92 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800274e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002752:	61d3      	str	r3, [r2, #28]
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002760:	e029      	b.n	80027b6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_I2C_MspInit+0xd4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d124      	bne.n	80027b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800278a:	2312      	movs	r3, #18
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	4619      	mov	r1, r3
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <HAL_I2C_MspInit+0xd0>)
 800279a:	f000 fe67 	bl	800346c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 80027a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a8:	61d3      	str	r3, [r2, #28]
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_I2C_MspInit+0xcc>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	; 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40005400 	.word	0x40005400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010c00 	.word	0x40010c00
 80027cc:	40005800 	.word	0x40005800

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_UART_MspInit+0x8c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d131      	bne.n	8002854 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_UART_MspInit+0x90>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_UART_MspInit+0x90>)
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_UART_MspInit+0x90>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_UART_MspInit+0x90>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_UART_MspInit+0x90>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_UART_MspInit+0x90>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4619      	mov	r1, r3
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <HAL_UART_MspInit+0x94>)
 8002836:	f000 fe19 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800283a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800283e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4619      	mov	r1, r3
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_UART_MspInit+0x94>)
 8002850:	f000 fe0c 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40013800 	.word	0x40013800
 8002860:	40021000 	.word	0x40021000
 8002864:	40010800 	.word	0x40010800

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler+0x4>

0800287a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler+0x4>

08002886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ae:	f000 f8ab 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <_sbrk+0x5c>)
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <_sbrk+0x60>)
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <_sbrk+0x64>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <_sbrk+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d207      	bcs.n	80028f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e8:	f002 fe8a 	bl	8005600 <__errno>
 80028ec:	4602      	mov	r2, r0
 80028ee:	230c      	movs	r3, #12
 80028f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e009      	b.n	800290c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <_sbrk+0x64>)
 8002908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20005000 	.word	0x20005000
 8002918:	00000400 	.word	0x00000400
 800291c:	200000a8 	.word	0x200000a8
 8002920:	20000398 	.word	0x20000398

08002924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002930:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002932:	e003      	b.n	800293c <LoopCopyDataInit>

08002934 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002936:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002938:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800293a:	3104      	adds	r1, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800293c:	480a      	ldr	r0, [pc, #40]	; (8002968 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002940:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002942:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002944:	d3f6      	bcc.n	8002934 <CopyDataInit>
  ldr r2, =_sbss
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002948:	e002      	b.n	8002950 <LoopFillZerobss>

0800294a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800294c:	f842 3b04 	str.w	r3, [r2], #4

08002950 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002952:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002954:	d3f9      	bcc.n	800294a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002956:	f7ff ffe5 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f002 fe57 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295e:	f7fe ff5f 	bl	8001820 <main>
  bx lr
 8002962:	4770      	bx	lr
  ldr r3, =_sidata
 8002964:	08008380 	.word	0x08008380
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800296c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8002970:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8002974:	20000398 	.word	0x20000398

08002978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC1_2_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x28>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x28>)
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 fd39 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	2000      	movs	r0, #0
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fe40 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd43 	bl	8003452 <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 fd19 	bl	800341a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20000014 	.word	0x20000014
 8002a04:	20000010 	.word	0x20000010

08002a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_IncTick+0x1c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_IncTick+0x20>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <HAL_IncTick+0x20>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000014 	.word	0x20000014
 8002a28:	20000390 	.word	0x20000390

08002a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_GetTick+0x10>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	20000390 	.word	0x20000390

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_Delay+0x40>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffe0 	bl	8002a2c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0be      	b.n	8002c24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fddc 	bl	8002680 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fbb1 	bl	8003230 <ADC_ConversionStop_Disable>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8099 	bne.w	8002c12 <HAL_ADC_Init+0x18e>
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8095 	bne.w	8002c12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1c:	d003      	beq.n	8002b26 <HAL_ADC_Init+0xa2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_ADC_Init+0xa8>
 8002b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_Init+0xaa>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7d1b      	ldrb	r3, [r3, #20]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d119      	bne.n	8002b70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	035a      	lsls	r2, r3, #13
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e00b      	b.n	8002b70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_ADC_Init+0x1a8>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	d003      	beq.n	8002baa <HAL_ADC_Init+0x126>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d104      	bne.n	8002bb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <HAL_ADC_Init+0x1ac>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bee:	e018      	b.n	8002c22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f023 0312 	bic.w	r3, r3, #18
 8002bf8:	f043 0210 	orr.w	r2, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c10:	e007      	b.n	8002c22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c30:	ff1f0efe 	.word	0xff1f0efe

08002c34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Start+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e098      	b.n	8002d80 <HAL_ADC_Start+0x14c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa98 	bl	800318c <ADC_Enable>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 8087 	bne.w	8002d76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a41      	ldr	r2, [pc, #260]	; (8002d88 <HAL_ADC_Start+0x154>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_Start+0x5e>
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_ADC_Start+0x158>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d115      	bne.n	8002cbe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d026      	beq.n	8002cfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cbc:	e01d      	b.n	8002cfa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <HAL_ADC_Start+0x158>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Start+0xaa>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <HAL_ADC_Start+0x154>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10d      	bne.n	8002cfa <HAL_ADC_Start+0xc6>
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_ADC_Start+0x158>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f023 0206 	bic.w	r2, r3, #6
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d12:	e002      	b.n	8002d1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0202 	mvn.w	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d3a:	d113      	bne.n	8002d64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_ADC_Start+0x154>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_ADC_Start+0x158>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	e00c      	b.n	8002d7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40012800 	.word	0x40012800
 8002d8c:	40012400 	.word	0x40012400

08002d90 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002da6:	f7ff fe41 	bl	8002a2c <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0c8      	b.n	8002f64 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d12a      	bne.n	8002e36 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d123      	bne.n	8002e36 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dee:	e01a      	b.n	8002e26 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d016      	beq.n	8002e26 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_ADC_PollForConversion+0x7e>
 8002dfe:	f7ff fe15 	bl	8002a2c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20b      	bcs.n	8002e26 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e09e      	b.n	8002f64 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0dd      	beq.n	8002df0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e34:	e06c      	b.n	8002f10 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e36:	4b4d      	ldr	r3, [pc, #308]	; (8002f6c <HAL_ADC_PollForConversion+0x1dc>)
 8002e38:	681c      	ldr	r4, [r3, #0]
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f002 f948 	bl	80050d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e40:	4603      	mov	r3, r0
 8002e42:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6919      	ldr	r1, [r3, #16]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_ADC_PollForConversion+0x1e0>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d118      	bne.n	8002e86 <HAL_ADC_PollForConversion+0xf6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_ADC_PollForConversion+0x1e4>)
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d111      	bne.n	8002e86 <HAL_ADC_PollForConversion+0xf6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6919      	ldr	r1, [r3, #16]
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_ADC_PollForConversion+0x1e8>)
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <HAL_ADC_PollForConversion+0xf2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_ADC_PollForConversion+0x1ec>)
 8002e78:	400b      	ands	r3, r1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_PollForConversion+0xf2>
 8002e7e:	2314      	movs	r3, #20
 8002e80:	e020      	b.n	8002ec4 <HAL_ADC_PollForConversion+0x134>
 8002e82:	2329      	movs	r3, #41	; 0x29
 8002e84:	e01e      	b.n	8002ec4 <HAL_ADC_PollForConversion+0x134>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6919      	ldr	r1, [r3, #16]
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <HAL_ADC_PollForConversion+0x1e8>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_PollForConversion+0x112>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68d9      	ldr	r1, [r3, #12]
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_ADC_PollForConversion+0x1ec>)
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x12e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6919      	ldr	r1, [r3, #16]
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_ADC_PollForConversion+0x1f0>)
 8002eaa:	400b      	ands	r3, r1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d108      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x132>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68d9      	ldr	r1, [r3, #12]
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_ADC_PollForConversion+0x1f0>)
 8002eb8:	400b      	ands	r3, r1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x132>
 8002ebe:	2354      	movs	r3, #84	; 0x54
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_PollForConversion+0x134>
 8002ec2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002eca:	e01d      	b.n	8002f08 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d016      	beq.n	8002f02 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_ADC_PollForConversion+0x15a>
 8002eda:	f7ff fda7 	bl	8002a2c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d20b      	bcs.n	8002f02 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e030      	b.n	8002f64 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8dd      	bhi.n	8002ecc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0212 	mvn.w	r2, #18
 8002f18:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f34:	d115      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d111      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	24924924 	.word	0x24924924
 8002f74:	00924924 	.word	0x00924924
 8002f78:	12492492 	.word	0x12492492
 8002f7c:	00492492 	.word	0x00492492
 8002f80:	00249249 	.word	0x00249249

08002f84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x20>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0dc      	b.n	8003176 <HAL_ADC_ConfigChannel+0x1da>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d81c      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b05      	subs	r3, #5
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4019      	ands	r1, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b05      	subs	r3, #5
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
 8003004:	e03c      	b.n	8003080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d81c      	bhi.n	8003048 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b23      	subs	r3, #35	; 0x23
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	4019      	ands	r1, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b23      	subs	r3, #35	; 0x23
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
 8003046:	e01b      	b.n	8003080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b41      	subs	r3, #65	; 0x41
 800305a:	221f      	movs	r2, #31
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	4019      	ands	r1, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b41      	subs	r3, #65	; 0x41
 8003074:	fa00 f203 	lsl.w	r2, r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b09      	cmp	r3, #9
 8003086:	d91c      	bls.n	80030c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	3b1e      	subs	r3, #30
 800309a:	2207      	movs	r2, #7
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	4019      	ands	r1, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6898      	ldr	r0, [r3, #8]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	fa00 f203 	lsl.w	r2, r0, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e019      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6919      	ldr	r1, [r3, #16]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	2207      	movs	r2, #7
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6898      	ldr	r0, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	fa00 f203 	lsl.w	r2, r0, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d003      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003102:	2b11      	cmp	r3, #17
 8003104:	d132      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_ADC_ConfigChannel+0x1e4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d125      	bne.n	800315c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d126      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800312c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b10      	cmp	r3, #16
 8003134:	d11a      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_ADC_ConfigChannel+0x1e8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <HAL_ADC_ConfigChannel+0x1ec>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	0c9a      	lsrs	r2, r3, #18
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800314c:	e002      	b.n	8003154 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <HAL_ADC_ConfigChannel+0x1b2>
 800315a:	e007      	b.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40012400 	.word	0x40012400
 8003184:	2000000c 	.word	0x2000000c
 8003188:	431bde83 	.word	0x431bde83

0800318c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d039      	beq.n	800321e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <ADC_Enable+0x9c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1b      	ldr	r2, [pc, #108]	; (800322c <ADC_Enable+0xa0>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0c9b      	lsrs	r3, r3, #18
 80031c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031c8:	e002      	b.n	80031d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f9      	bne.n	80031ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031d6:	f7ff fc29 	bl	8002a2c <HAL_GetTick>
 80031da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031dc:	e018      	b.n	8003210 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031de:	f7ff fc25 	bl	8002a2c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d911      	bls.n	8003210 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e007      	b.n	8003220 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d1df      	bne.n	80031de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2000000c 	.word	0x2000000c
 800322c:	431bde83 	.word	0x431bde83

08003230 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d127      	bne.n	800329a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800325a:	f7ff fbe7 	bl	8002a2c <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003260:	e014      	b.n	800328c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003262:	f7ff fbe3 	bl	8002a2c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d90d      	bls.n	800328c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d0e3      	beq.n	8003262 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	2b00      	cmp	r3, #0
 800331a:	db0a      	blt.n	8003332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	490c      	ldr	r1, [pc, #48]	; (8003354 <__NVIC_SetPriority+0x4c>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	440b      	add	r3, r1
 800332c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003330:	e00a      	b.n	8003348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4908      	ldr	r1, [pc, #32]	; (8003358 <__NVIC_SetPriority+0x50>)
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3b04      	subs	r3, #4
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	440b      	add	r3, r1
 8003346:	761a      	strb	r2, [r3, #24]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f1c3 0307 	rsb	r3, r3, #7
 8003376:	2b04      	cmp	r3, #4
 8003378:	bf28      	it	cs
 800337a:	2304      	movcs	r3, #4
 800337c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3304      	adds	r3, #4
 8003382:	2b06      	cmp	r3, #6
 8003384:	d902      	bls.n	800338c <NVIC_EncodePriority+0x30>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3b03      	subs	r3, #3
 800338a:	e000      	b.n	800338e <NVIC_EncodePriority+0x32>
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	f04f 32ff 	mov.w	r2, #4294967295
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	401a      	ands	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a4:	f04f 31ff 	mov.w	r1, #4294967295
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	4313      	orrs	r3, r2
         );
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f7ff ff90 	bl	8003308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff49 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800342c:	f7ff ff5e 	bl	80032ec <__NVIC_GetPriorityGrouping>
 8003430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff ff90 	bl	800335c <NVIC_EncodePriority>
 800343c:	4602      	mov	r2, r0
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff5f 	bl	8003308 <__NVIC_SetPriority>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffb0 	bl	80033c0 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b08b      	sub	sp, #44	; 0x2c
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347e:	e127      	b.n	80036d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003480:	2201      	movs	r2, #1
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	429a      	cmp	r2, r3
 800349a:	f040 8116 	bne.w	80036ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b12      	cmp	r3, #18
 80034a4:	d034      	beq.n	8003510 <HAL_GPIO_Init+0xa4>
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d80d      	bhi.n	80034c6 <HAL_GPIO_Init+0x5a>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_Init+0x9a>
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d804      	bhi.n	80034bc <HAL_GPIO_Init+0x50>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d031      	beq.n	800351a <HAL_GPIO_Init+0xae>
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d01c      	beq.n	80034f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ba:	e048      	b.n	800354e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d043      	beq.n	8003548 <HAL_GPIO_Init+0xdc>
 80034c0:	2b11      	cmp	r3, #17
 80034c2:	d01b      	beq.n	80034fc <HAL_GPIO_Init+0x90>
          break;
 80034c4:	e043      	b.n	800354e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034c6:	4a89      	ldr	r2, [pc, #548]	; (80036ec <HAL_GPIO_Init+0x280>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d026      	beq.n	800351a <HAL_GPIO_Init+0xae>
 80034cc:	4a87      	ldr	r2, [pc, #540]	; (80036ec <HAL_GPIO_Init+0x280>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d806      	bhi.n	80034e0 <HAL_GPIO_Init+0x74>
 80034d2:	4a87      	ldr	r2, [pc, #540]	; (80036f0 <HAL_GPIO_Init+0x284>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d020      	beq.n	800351a <HAL_GPIO_Init+0xae>
 80034d8:	4a86      	ldr	r2, [pc, #536]	; (80036f4 <HAL_GPIO_Init+0x288>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_GPIO_Init+0xae>
          break;
 80034de:	e036      	b.n	800354e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034e0:	4a85      	ldr	r2, [pc, #532]	; (80036f8 <HAL_GPIO_Init+0x28c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d019      	beq.n	800351a <HAL_GPIO_Init+0xae>
 80034e6:	4a85      	ldr	r2, [pc, #532]	; (80036fc <HAL_GPIO_Init+0x290>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d016      	beq.n	800351a <HAL_GPIO_Init+0xae>
 80034ec:	4a84      	ldr	r2, [pc, #528]	; (8003700 <HAL_GPIO_Init+0x294>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0xae>
          break;
 80034f2:	e02c      	b.n	800354e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	623b      	str	r3, [r7, #32]
          break;
 80034fa:	e028      	b.n	800354e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	3304      	adds	r3, #4
 8003502:	623b      	str	r3, [r7, #32]
          break;
 8003504:	e023      	b.n	800354e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	3308      	adds	r3, #8
 800350c:	623b      	str	r3, [r7, #32]
          break;
 800350e:	e01e      	b.n	800354e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	330c      	adds	r3, #12
 8003516:	623b      	str	r3, [r7, #32]
          break;
 8003518:	e019      	b.n	800354e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003522:	2304      	movs	r3, #4
 8003524:	623b      	str	r3, [r7, #32]
          break;
 8003526:	e012      	b.n	800354e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003530:	2308      	movs	r3, #8
 8003532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	611a      	str	r2, [r3, #16]
          break;
 800353a:	e008      	b.n	800354e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800353c:	2308      	movs	r3, #8
 800353e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	615a      	str	r2, [r3, #20]
          break;
 8003546:	e002      	b.n	800354e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003548:	2300      	movs	r3, #0
 800354a:	623b      	str	r3, [r7, #32]
          break;
 800354c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2bff      	cmp	r3, #255	; 0xff
 8003552:	d801      	bhi.n	8003558 <HAL_GPIO_Init+0xec>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	e001      	b.n	800355c <HAL_GPIO_Init+0xf0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2bff      	cmp	r3, #255	; 0xff
 8003562:	d802      	bhi.n	800356a <HAL_GPIO_Init+0xfe>
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x104>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	3b08      	subs	r3, #8
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	210f      	movs	r1, #15
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	401a      	ands	r2, r3
 8003582:	6a39      	ldr	r1, [r7, #32]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	431a      	orrs	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8096 	beq.w	80036ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800359e:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_GPIO_Init+0x298>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_GPIO_Init+0x298>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6193      	str	r3, [r2, #24]
 80035aa:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_GPIO_Init+0x298>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035b6:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_GPIO_Init+0x29c>)
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_GPIO_Init+0x2a0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0x19e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <HAL_GPIO_Init+0x2a4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_GPIO_Init+0x19a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a49      	ldr	r2, [pc, #292]	; (8003714 <HAL_GPIO_Init+0x2a8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <HAL_GPIO_Init+0x196>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a48      	ldr	r2, [pc, #288]	; (8003718 <HAL_GPIO_Init+0x2ac>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_Init+0x192>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x1a0>
 80035fe:	2304      	movs	r3, #4
 8003600:	e004      	b.n	800360c <HAL_GPIO_Init+0x1a0>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_Init+0x1a0>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x1a0>
 800360a:	2300      	movs	r3, #0
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800361c:	493a      	ldr	r1, [pc, #232]	; (8003708 <HAL_GPIO_Init+0x29c>)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4938      	ldr	r1, [pc, #224]	; (800371c <HAL_GPIO_Init+0x2b0>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
 8003642:	e006      	b.n	8003652 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	43db      	mvns	r3, r3
 800364c:	4933      	ldr	r1, [pc, #204]	; (800371c <HAL_GPIO_Init+0x2b0>)
 800364e:	4013      	ands	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	492e      	ldr	r1, [pc, #184]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
 800366a:	e006      	b.n	800367a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_GPIO_Init+0x2b0>)
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	43db      	mvns	r3, r3
 8003674:	4929      	ldr	r1, [pc, #164]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003676:	4013      	ands	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	4924      	ldr	r1, [pc, #144]	; (800371c <HAL_GPIO_Init+0x2b0>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
 8003692:	e006      	b.n	80036a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_GPIO_Init+0x2b0>)
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	43db      	mvns	r3, r3
 800369c:	491f      	ldr	r1, [pc, #124]	; (800371c <HAL_GPIO_Init+0x2b0>)
 800369e:	4013      	ands	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_GPIO_Init+0x2b0>)
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	491a      	ldr	r1, [pc, #104]	; (800371c <HAL_GPIO_Init+0x2b0>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60cb      	str	r3, [r1, #12]
 80036ba:	e006      	b.n	80036ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_GPIO_Init+0x2b0>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	4915      	ldr	r1, [pc, #84]	; (800371c <HAL_GPIO_Init+0x2b0>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f47f aed0 	bne.w	8003480 <HAL_GPIO_Init+0x14>
  }
}
 80036e0:	bf00      	nop
 80036e2:	372c      	adds	r7, #44	; 0x2c
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	10210000 	.word	0x10210000
 80036f0:	10110000 	.word	0x10110000
 80036f4:	10120000 	.word	0x10120000
 80036f8:	10310000 	.word	0x10310000
 80036fc:	10320000 	.word	0x10320000
 8003700:	10220000 	.word	0x10220000
 8003704:	40021000 	.word	0x40021000
 8003708:	40010000 	.word	0x40010000
 800370c:	40010800 	.word	0x40010800
 8003710:	40010c00 	.word	0x40010c00
 8003714:	40011000 	.word	0x40011000
 8003718:	40011400 	.word	0x40011400
 800371c:	40010400 	.word	0x40010400

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e11f      	b.n	80039a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe ffbe 	bl	80026f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b4:	f001 fb90 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a7b      	ldr	r2, [pc, #492]	; (80039ac <HAL_I2C_Init+0x25c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d807      	bhi.n	80037d4 <HAL_I2C_Init+0x84>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7a      	ldr	r2, [pc, #488]	; (80039b0 <HAL_I2C_Init+0x260>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e006      	b.n	80037e2 <HAL_I2C_Init+0x92>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a77      	ldr	r2, [pc, #476]	; (80039b4 <HAL_I2C_Init+0x264>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf94      	ite	ls
 80037dc:	2301      	movls	r3, #1
 80037de:	2300      	movhi	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0db      	b.n	80039a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a72      	ldr	r2, [pc, #456]	; (80039b8 <HAL_I2C_Init+0x268>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0c9b      	lsrs	r3, r3, #18
 80037f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a64      	ldr	r2, [pc, #400]	; (80039ac <HAL_I2C_Init+0x25c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d802      	bhi.n	8003824 <HAL_I2C_Init+0xd4>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3301      	adds	r3, #1
 8003822:	e009      	b.n	8003838 <HAL_I2C_Init+0xe8>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	4a63      	ldr	r2, [pc, #396]	; (80039bc <HAL_I2C_Init+0x26c>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	3301      	adds	r3, #1
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800384a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4956      	ldr	r1, [pc, #344]	; (80039ac <HAL_I2C_Init+0x25c>)
 8003854:	428b      	cmp	r3, r1
 8003856:	d80d      	bhi.n	8003874 <HAL_I2C_Init+0x124>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e59      	subs	r1, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fbb1 f3f3 	udiv	r3, r1, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b04      	cmp	r3, #4
 800386e:	bf38      	it	cc
 8003870:	2304      	movcc	r3, #4
 8003872:	e04f      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <HAL_I2C_Init+0x150>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e012      	b.n	80038c6 <HAL_I2C_Init+0x176>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	0099      	lsls	r1, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x17e>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e022      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_I2C_Init+0x1a4>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e58      	subs	r0, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6809      	ldr	r1, [r1, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6911      	ldr	r1, [r2, #16]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	000186a0 	.word	0x000186a0
 80039b0:	001e847f 	.word	0x001e847f
 80039b4:	003d08ff 	.word	0x003d08ff
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039da:	f7ff f827 	bl	8002a2c <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	f040 80d9 	bne.w	8003ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2319      	movs	r3, #25
 80039f4:	2201      	movs	r2, #1
 80039f6:	496d      	ldr	r1, [pc, #436]	; (8003bac <HAL_I2C_Mem_Write+0x1ec>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fcbb 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
 8003a06:	e0cc      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Mem_Write+0x56>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e0c5      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d007      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2221      	movs	r2, #33	; 0x21
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	; (8003bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7e:	88f8      	ldrh	r0, [r7, #6]
 8003a80:	893a      	ldrh	r2, [r7, #8]
 8003a82:	8979      	ldrh	r1, [r7, #10]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 faf2 	bl	8004078 <I2C_RequestMemoryWrite>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d052      	beq.n	8003b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e081      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fd3c 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d107      	bne.n	8003ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06b      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d11b      	bne.n	8003b40 <HAL_I2C_Mem_Write+0x180>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1aa      	bne.n	8003a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fd28 	bl	80045a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e016      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	00100002 	.word	0x00100002
 8003bb0:	ffff0000 	.word	0xffff0000

08003bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	813b      	strh	r3, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	f7fe ff2b 	bl	8002a2c <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 823d 	bne.w	8004060 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	4981      	ldr	r1, [pc, #516]	; (8003df4 <HAL_I2C_Mem_Read+0x240>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fbbf 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e230      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Read+0x5a>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e229      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2222      	movs	r2, #34	; 0x22
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a61      	ldr	r2, [pc, #388]	; (8003df8 <HAL_I2C_Mem_Read+0x244>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa8c 	bl	80041a4 <I2C_RequestMemoryRead>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1e5      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d113      	bne.n	8003cc6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e1b9      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d11d      	bne.n	8003d0a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d06:	b662      	cpsie	i
 8003d08:	e197      	b.n	800403a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d11d      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d22:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d4a:	b662      	cpsie	i
 8003d4c:	e175      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d74:	e161      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f200 811a 	bhi.w	8003fb4 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d123      	bne.n	8003dd0 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fc49 	bl	8004624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e162      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dce:	e134      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d150      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2200      	movs	r2, #0
 8003de0:	4906      	ldr	r1, [pc, #24]	; (8003dfc <HAL_I2C_Mem_Read+0x248>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fac6 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e137      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000
 8003dfc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e44:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e78:	e0df      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	497a      	ldr	r1, [pc, #488]	; (800406c <HAL_I2C_Mem_Read+0x4b8>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa75 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0e6      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ed8:	4b65      	ldr	r3, [pc, #404]	; (8004070 <HAL_I2C_Mem_Read+0x4bc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	4a65      	ldr	r2, [pc, #404]	; (8004074 <HAL_I2C_Mem_Read+0x4c0>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0a1a      	lsrs	r2, r3, #8
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d117      	bne.n	8003f2e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f20:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e099      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d1da      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f7e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb2:	e042      	b.n	800403a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fb33 	bl	8004624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04c      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d118      	bne.n	800403a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	f47f ae99 	bne.w	8003d76 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3728      	adds	r7, #40	; 0x28
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	00010004 	.word	0x00010004
 8004070:	2000000c 	.word	0x2000000c
 8004074:	14f8b589 	.word	0x14f8b589

08004078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f960 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d103      	bne.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e05f      	b.n	8004196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	492d      	ldr	r1, [pc, #180]	; (80041a0 <I2C_RequestMemoryWrite+0x128>)
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f998 	bl	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e04c      	b.n	8004196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa02 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e02b      	b.n	8004196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]
 800414e:	e021      	b.n	8004194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b29b      	uxth	r3, r3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	6a39      	ldr	r1, [r7, #32]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f9dc 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b04      	cmp	r3, #4
 8004174:	d107      	bne.n	8004186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e005      	b.n	8004196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418a:	893b      	ldrh	r3, [r7, #8]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	00010002 	.word	0x00010002

080041a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	460b      	mov	r3, r1
 80041b8:	813b      	strh	r3, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8c2 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d103      	bne.n	800420e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0aa      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	4952      	ldr	r1, [pc, #328]	; (8004370 <I2C_RequestMemoryRead+0x1cc>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8fa 	bl	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e097      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	6a39      	ldr	r1, [r7, #32]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f964 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b04      	cmp	r3, #4
 8004264:	d107      	bne.n	8004276 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e076      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	e021      	b.n	80042d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f93e 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d107      	bne.n	80042c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e050      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c6:	893b      	ldrh	r3, [r7, #8]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	6a39      	ldr	r1, [r7, #32]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f923 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e035      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2200      	movs	r2, #0
 8004314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f82b 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004332:	d103      	bne.n	800433c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e013      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004340:	897b      	ldrh	r3, [r7, #10]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	4906      	ldr	r1, [pc, #24]	; (8004370 <I2C_RequestMemoryRead+0x1cc>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f863 	bl	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	e025      	b.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d021      	beq.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fb4d 	bl	8002a2c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e023      	b.n	800441a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10d      	bne.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	e00c      	b.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d0b6      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004430:	e051      	b.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d123      	bne.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800445a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0204 	orr.w	r2, r3, #4
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e046      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d021      	beq.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fe facb 	bl	8002a2c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e020      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10c      	bne.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e00b      	b.n	8004512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	43da      	mvns	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d18d      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452c:	e02d      	b.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8ce 	bl	80046d0 <I2C_IsAcknowledgeFailed>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e02d      	b.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d021      	beq.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe fa71 	bl	8002a2c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e007      	b.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d1ca      	bne.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ae:	e02d      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f88d 	bl	80046d0 <I2C_IsAcknowledgeFailed>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e02d      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d021      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fe fa30 	bl	8002a2c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d1ca      	bne.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004630:	e042      	b.n	80046b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b10      	cmp	r3, #16
 800463e:	d119      	bne.n	8004674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0210 	mvn.w	r2, #16
 8004648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e029      	b.n	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004674:	f7fe f9da 	bl	8002a2c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	d302      	bcc.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e007      	b.n	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d1b5      	bne.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d11b      	bne.n	8004720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f043 0204 	orr.w	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e26c      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8087 	beq.w	800485a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800474c:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b04      	cmp	r3, #4
 8004756:	d00c      	beq.n	8004772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004758:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d112      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
 8004764:	4b8c      	ldr	r3, [pc, #560]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004770:	d10b      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004772:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d06c      	beq.n	8004858 <HAL_RCC_OscConfig+0x12c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d168      	bne.n	8004858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e246      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x76>
 8004794:	4b80      	ldr	r3, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7f      	ldr	r2, [pc, #508]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800479a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e02e      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7a      	ldr	r2, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b78      	ldr	r3, [pc, #480]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a77      	ldr	r2, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0xbc>
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a71      	ldr	r2, [pc, #452]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047e8:	4b6b      	ldr	r3, [pc, #428]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b68      	ldr	r3, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a67      	ldr	r2, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fe f910 	bl	8002a2c <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fe f90c 	bl	8002a2c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1fa      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xe4>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fe f8fc 	bl	8002a2c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fe f8f8 	bl	8002a2c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1e6      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x10c>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004866:	4b4c      	ldr	r3, [pc, #304]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
 800487e:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1ba      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4939      	ldr	r1, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x270>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe f8b1 	bl	8002a2c <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fe f8ad 	bl	8002a2c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e19b      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4927      	ldr	r1, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_RCC_OscConfig+0x270>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fe f890 	bl	8002a2c <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7fe f88c 	bl	8002a2c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e17a      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03a      	beq.n	80049b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d019      	beq.n	8004976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fe f870 	bl	8002a2c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004950:	f7fe f86c 	bl	8002a2c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e15a      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800496e:	2001      	movs	r0, #1
 8004970:	f000 fada 	bl	8004f28 <RCC_Delay>
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fe f856 	bl	8002a2c <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7fe f852 	bl	8002a2c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d908      	bls.n	80049a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e140      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	42420000 	.word	0x42420000
 80049a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e9      	bne.n	8004984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80a6 	beq.w	8004b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b97      	ldr	r3, [pc, #604]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b94      	ldr	r3, [pc, #592]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a93      	ldr	r2, [pc, #588]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	61d3      	str	r3, [r2, #28]
 80049da:	4b91      	ldr	r3, [pc, #580]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b8b      	ldr	r3, [pc, #556]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a8a      	ldr	r2, [pc, #552]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fe f813 	bl	8002a2c <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fe f80f 	bl	8002a2c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0fd      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x312>
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a7a      	ldr	r2, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	e02d      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a72      	ldr	r2, [pc, #456]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6213      	str	r3, [r2, #32]
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x356>
 8004a68:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a6c      	ldr	r2, [pc, #432]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4a69      	ldr	r2, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6213      	str	r3, [r2, #32]
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a66      	ldr	r2, [pc, #408]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a63      	ldr	r2, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fd ffc3 	bl	8002a2c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fd ffbf 	bl	8002a2c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0ab      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b57      	ldr	r3, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x37e>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fd ffad 	bl	8002a2c <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd ffa9 	bl	8002a2c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e095      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b4c      	ldr	r3, [pc, #304]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b48      	ldr	r3, [pc, #288]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4a47      	ldr	r2, [pc, #284]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8081 	beq.w	8004c16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d061      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d146      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fd ff7d 	bl	8002a2c <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fd ff79 	bl	8002a2c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e067      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	492d      	ldr	r1, [pc, #180]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a19      	ldr	r1, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	430b      	orrs	r3, r1
 8004b82:	4927      	ldr	r1, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fd ff4d 	bl	8002a2c <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fd ff49 	bl	8002a2c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e037      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x46a>
 8004bb4:	e02f      	b.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd ff36 	bl	8002a2c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fd ff32 	bl	8002a2c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e020      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x498>
 8004be2:	e018      	b.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e013      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42420060 	.word	0x42420060

08004c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0d0      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	4965      	ldr	r1, [pc, #404]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0b8      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c88:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	494d      	ldr	r1, [pc, #308]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d040      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d115      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e07f      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e073      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06b      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4936      	ldr	r1, [pc, #216]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fd fe86 	bl	8002a2c <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fd fe82 	bl	8002a2c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e053      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d210      	bcs.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0207 	bic.w	r2, r3, #7
 8004d62:	4922      	ldr	r1, [pc, #136]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e032      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4916      	ldr	r1, [pc, #88]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	490e      	ldr	r1, [pc, #56]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dba:	f000 f821 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	fa21 f303 	lsr.w	r3, r1, r3
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1d0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fde4 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	08008194 	.word	0x08008194
 8004df8:	2000000c 	.word	0x2000000c
 8004dfc:	20000010 	.word	0x20000010

08004e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b490      	push	{r4, r7}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e06:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e08:	1d3c      	adds	r4, r7, #4
 8004e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e2a:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d002      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x40>
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x46>
 8004e3e:	e02d      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e42:	623b      	str	r3, [r7, #32]
      break;
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	0c9b      	lsrs	r3, r3, #18
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e52:	4413      	add	r3, r2
 8004e54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	0c5b      	lsrs	r3, r3, #17
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e72:	4413      	add	r3, r2
 8004e74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e7e:	fb02 f203 	mul.w	r2, r2, r3
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	e004      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	623b      	str	r3, [r7, #32]
      break;
 8004e9a:	e002      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e9e:	623b      	str	r3, [r7, #32]
      break;
 8004ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc90      	pop	{r4, r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	0800816c 	.word	0x0800816c
 8004eb4:	0800817c 	.word	0x0800817c
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	003d0900 	.word	0x003d0900

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b02      	ldr	r3, [pc, #8]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff2 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4a03      	ldr	r2, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5cd3      	ldrb	r3, [r2, r3]
 8004ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	080081a4 	.word	0x080081a4

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffde 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f08:	4601      	mov	r1, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	0adb      	lsrs	r3, r3, #11
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	080081a4 	.word	0x080081a4

08004f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <RCC_Delay+0x34>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <RCC_Delay+0x38>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	0a5b      	lsrs	r3, r3, #9
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f44:	bf00      	nop
  }
  while (Delay --);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1e5a      	subs	r2, r3, #1
 8004f4a:	60fa      	str	r2, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f9      	bne.n	8004f44 <RCC_Delay+0x1c>
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	10624dd3 	.word	0x10624dd3

08004f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d07d      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f84:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f90:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4a4b      	ldr	r2, [pc, #300]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	61d3      	str	r3, [r2, #28]
 8004f9c:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fac:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d118      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb8:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a42      	ldr	r2, [pc, #264]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc4:	f7fd fd32 	bl	8002a2c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	e008      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fd fd2e 	bl	8002a2c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	; 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e06d      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02e      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	429a      	cmp	r2, r3
 8005006:	d027      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005008:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005010:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800501e:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d014      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fd fcfd 	bl	8002a2c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fd fcf9 	bl	8002a2c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e036      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ee      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4917      	ldr	r1, [pc, #92]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	4313      	orrs	r3, r2
 8005068:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005070:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	490b      	ldr	r1, [pc, #44]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4904      	ldr	r1, [pc, #16]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42420440 	.word	0x42420440

080050d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b08d      	sub	sp, #52	; 0x34
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050d8:	4b55      	ldr	r3, [pc, #340]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80050da:	f107 040c 	add.w	r4, r7, #12
 80050de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050e4:	4b53      	ldr	r3, [pc, #332]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	2300      	movs	r3, #0
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	2300      	movs	r3, #0
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d07f      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005104:	2b10      	cmp	r3, #16
 8005106:	d002      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d048      	beq.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800510c:	e08b      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800510e:	4b4a      	ldr	r3, [pc, #296]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005114:	4b48      	ldr	r3, [pc, #288]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d07f      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	0c9b      	lsrs	r3, r3, #18
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800512c:	4413      	add	r3, r2
 800512e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005132:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800513e:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	0c5b      	lsrs	r3, r3, #17
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800514c:	4413      	add	r3, r2
 800514e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800515e:	4a37      	ldr	r2, [pc, #220]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	fbb2 f2f3 	udiv	r2, r2, r3
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	e004      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	4a33      	ldr	r2, [pc, #204]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005186:	d102      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800518c:	e048      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4a2c      	ldr	r2, [pc, #176]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800519c:	e040      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ae:	d108      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80051ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c0:	e01f      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80051ce:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80051da:	f649 4340 	movw	r3, #40000	; 0x9c40
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ec:	d11a      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d014      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80051fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005200:	e010      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005202:	e00f      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005204:	f7ff fe7c 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	0b9b      	lsrs	r3, r3, #14
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	3301      	adds	r3, #1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800521e:	e002      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005220:	bf00      	nop
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005224:	bf00      	nop
    }
  }
  return (frequency);
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005228:	4618      	mov	r0, r3
 800522a:	3734      	adds	r7, #52	; 0x34
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}
 8005230:	08008180 	.word	0x08008180
 8005234:	08008190 	.word	0x08008190
 8005238:	40021000 	.word	0x40021000
 800523c:	007a1200 	.word	0x007a1200
 8005240:	003d0900 	.word	0x003d0900
 8005244:	aaaaaaab 	.word	0xaaaaaaab

08005248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e03f      	b.n	80052da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fd faae 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2224      	movs	r2, #36	; 0x24
 8005278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800528a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f905 	bl	800549c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08a      	sub	sp, #40	; 0x28
 80052e6:	af02      	add	r7, sp, #8
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d17c      	bne.n	80053fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_UART_Transmit+0x2c>
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e075      	b.n	80053fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_UART_Transmit+0x3e>
 800531c:	2302      	movs	r3, #2
 800531e:	e06e      	b.n	80053fe <HAL_UART_Transmit+0x11c>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2221      	movs	r2, #33	; 0x21
 8005332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005336:	f7fd fb79 	bl	8002a2c <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d108      	bne.n	8005364 <HAL_UART_Transmit+0x82>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e003      	b.n	800536c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005374:	e02a      	b.n	80053cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f840 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e036      	b.n	80053fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	3302      	adds	r3, #2
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e007      	b.n	80053be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1cf      	bne.n	8005376 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	2140      	movs	r1, #64	; 0x40
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f810 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e006      	b.n	80053fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005416:	e02c      	b.n	8005472 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d028      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x30>
 8005426:	f7fd fb01 	bl	8002a2c <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	429a      	cmp	r2, r3
 8005434:	d21d      	bcs.n	8005472 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005444:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e00f      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d0c3      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054d6:	f023 030c 	bic.w	r3, r3, #12
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	430b      	orrs	r3, r1
 80054e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <UART_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d103      	bne.n	800550c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7ff fcfc 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	e002      	b.n	8005512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800550c:	f7ff fce4 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <UART_SetConfig+0x118>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	0119      	lsls	r1, r3, #4
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009a      	lsls	r2, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	fbb2 f2f3 	udiv	r2, r2, r3
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <UART_SetConfig+0x118>)
 800554a:	fba3 0302 	umull	r0, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2064      	movs	r0, #100	; 0x64
 8005552:	fb00 f303 	mul.w	r3, r0, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	3332      	adds	r3, #50	; 0x32
 800555c:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <UART_SetConfig+0x118>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005568:	4419      	add	r1, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009a      	lsls	r2, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <UART_SetConfig+0x118>)
 8005582:	fba3 0302 	umull	r0, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2064      	movs	r0, #100	; 0x64
 800558a:	fb00 f303 	mul.w	r3, r0, r3
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	3332      	adds	r3, #50	; 0x32
 8005594:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <UART_SetConfig+0x118>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	440a      	add	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40013800 	.word	0x40013800
 80055b4:	51eb851f 	.word	0x51eb851f

080055b8 <gcvt>:
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	461c      	mov	r4, r3
 80055bc:	b085      	sub	sp, #20
 80055be:	2300      	movs	r3, #0
 80055c0:	4615      	mov	r5, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	f7fb f9f0 	bl	80009ac <__aeabi_dcmplt>
 80055cc:	4623      	mov	r3, r4
 80055ce:	b118      	cbz	r0, 80055d8 <gcvt+0x20>
 80055d0:	222d      	movs	r2, #45	; 0x2d
 80055d2:	3d01      	subs	r5, #1
 80055d4:	f803 2b01 	strb.w	r2, [r3], #1
 80055d8:	2267      	movs	r2, #103	; 0x67
 80055da:	2100      	movs	r1, #0
 80055dc:	e9cd 5300 	strd	r5, r3, [sp]
 80055e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80055e4:	4905      	ldr	r1, [pc, #20]	; (80055fc <gcvt+0x44>)
 80055e6:	4632      	mov	r2, r6
 80055e8:	463b      	mov	r3, r7
 80055ea:	6808      	ldr	r0, [r1, #0]
 80055ec:	f000 f914 	bl	8005818 <_gcvt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	bf14      	ite	ne
 80055f4:	4620      	movne	r0, r4
 80055f6:	2000      	moveq	r0, #0
 80055f8:	b005      	add	sp, #20
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fc:	20000018 	.word	0x20000018

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000018 	.word	0x20000018

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	2500      	movs	r5, #0
 8005610:	4e0c      	ldr	r6, [pc, #48]	; (8005644 <__libc_init_array+0x38>)
 8005612:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005614:	1ba4      	subs	r4, r4, r6
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	42a5      	cmp	r5, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	f002 fd98 	bl	8008150 <_init>
 8005620:	2500      	movs	r5, #0
 8005622:	4e0a      	ldr	r6, [pc, #40]	; (800564c <__libc_init_array+0x40>)
 8005624:	4c0a      	ldr	r4, [pc, #40]	; (8005650 <__libc_init_array+0x44>)
 8005626:	1ba4      	subs	r4, r4, r6
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	42a5      	cmp	r5, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005634:	4798      	blx	r3
 8005636:	3501      	adds	r5, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800563e:	4798      	blx	r3
 8005640:	3501      	adds	r5, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08008378 	.word	0x08008378
 8005648:	08008378 	.word	0x08008378
 800564c:	08008378 	.word	0x08008378
 8005650:	0800837c 	.word	0x0800837c

08005654 <__itoa>:
 8005654:	1e93      	subs	r3, r2, #2
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	b510      	push	{r4, lr}
 800565a:	460c      	mov	r4, r1
 800565c:	d904      	bls.n	8005668 <__itoa+0x14>
 800565e:	2300      	movs	r3, #0
 8005660:	461c      	mov	r4, r3
 8005662:	700b      	strb	r3, [r1, #0]
 8005664:	4620      	mov	r0, r4
 8005666:	bd10      	pop	{r4, pc}
 8005668:	2a0a      	cmp	r2, #10
 800566a:	d109      	bne.n	8005680 <__itoa+0x2c>
 800566c:	2800      	cmp	r0, #0
 800566e:	da07      	bge.n	8005680 <__itoa+0x2c>
 8005670:	232d      	movs	r3, #45	; 0x2d
 8005672:	700b      	strb	r3, [r1, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	4240      	negs	r0, r0
 8005678:	4421      	add	r1, r4
 800567a:	f000 f819 	bl	80056b0 <__utoa>
 800567e:	e7f1      	b.n	8005664 <__itoa+0x10>
 8005680:	2100      	movs	r1, #0
 8005682:	e7f9      	b.n	8005678 <__itoa+0x24>

08005684 <itoa>:
 8005684:	f7ff bfe6 	b.w	8005654 <__itoa>

08005688 <memcpy>:
 8005688:	b510      	push	{r4, lr}
 800568a:	1e43      	subs	r3, r0, #1
 800568c:	440a      	add	r2, r1
 800568e:	4291      	cmp	r1, r2
 8005690:	d100      	bne.n	8005694 <memcpy+0xc>
 8005692:	bd10      	pop	{r4, pc}
 8005694:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569c:	e7f7      	b.n	800568e <memcpy+0x6>

0800569e <memset>:
 800569e:	4603      	mov	r3, r0
 80056a0:	4402      	add	r2, r0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d100      	bne.n	80056a8 <memset+0xa>
 80056a6:	4770      	bx	lr
 80056a8:	f803 1b01 	strb.w	r1, [r3], #1
 80056ac:	e7f9      	b.n	80056a2 <memset+0x4>
	...

080056b0 <__utoa>:
 80056b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b2:	b08b      	sub	sp, #44	; 0x2c
 80056b4:	4605      	mov	r5, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	466e      	mov	r6, sp
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <__utoa+0x78>)
 80056bc:	f103 0c20 	add.w	ip, r3, #32
 80056c0:	4637      	mov	r7, r6
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
 80056c6:	3308      	adds	r3, #8
 80056c8:	c703      	stmia	r7!, {r0, r1}
 80056ca:	4563      	cmp	r3, ip
 80056cc:	463e      	mov	r6, r7
 80056ce:	d1f7      	bne.n	80056c0 <__utoa+0x10>
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	791b      	ldrb	r3, [r3, #4]
 80056d4:	6038      	str	r0, [r7, #0]
 80056d6:	713b      	strb	r3, [r7, #4]
 80056d8:	1e93      	subs	r3, r2, #2
 80056da:	2b22      	cmp	r3, #34	; 0x22
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	d904      	bls.n	80056ec <__utoa+0x3c>
 80056e2:	7023      	strb	r3, [r4, #0]
 80056e4:	461c      	mov	r4, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	b00b      	add	sp, #44	; 0x2c
 80056ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ec:	1e66      	subs	r6, r4, #1
 80056ee:	fbb5 f0f2 	udiv	r0, r5, r2
 80056f2:	fb02 5510 	mls	r5, r2, r0, r5
 80056f6:	af0a      	add	r7, sp, #40	; 0x28
 80056f8:	443d      	add	r5, r7
 80056fa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005704:	4605      	mov	r5, r0
 8005706:	b968      	cbnz	r0, 8005724 <__utoa+0x74>
 8005708:	4622      	mov	r2, r4
 800570a:	5460      	strb	r0, [r4, r1]
 800570c:	4423      	add	r3, r4
 800570e:	1b19      	subs	r1, r3, r4
 8005710:	1b10      	subs	r0, r2, r4
 8005712:	4281      	cmp	r1, r0
 8005714:	dde7      	ble.n	80056e6 <__utoa+0x36>
 8005716:	7811      	ldrb	r1, [r2, #0]
 8005718:	7818      	ldrb	r0, [r3, #0]
 800571a:	f802 0b01 	strb.w	r0, [r2], #1
 800571e:	f803 1901 	strb.w	r1, [r3], #-1
 8005722:	e7f4      	b.n	800570e <__utoa+0x5e>
 8005724:	460b      	mov	r3, r1
 8005726:	e7e2      	b.n	80056ee <__utoa+0x3e>
 8005728:	080081ac 	.word	0x080081ac

0800572c <print_e>:
 800572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	460f      	mov	r7, r1
 8005732:	a908      	add	r1, sp, #32
 8005734:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005736:	9104      	str	r1, [sp, #16]
 8005738:	a907      	add	r1, sp, #28
 800573a:	9103      	str	r1, [sp, #12]
 800573c:	a909      	add	r1, sp, #36	; 0x24
 800573e:	9102      	str	r1, [sp, #8]
 8005740:	1c61      	adds	r1, r4, #1
 8005742:	9101      	str	r1, [sp, #4]
 8005744:	2102      	movs	r1, #2
 8005746:	9100      	str	r1, [sp, #0]
 8005748:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800574c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800574e:	f000 fd37 	bl	80061c0 <_dtoa_r>
 8005752:	f242 730f 	movw	r3, #9999	; 0x270f
 8005756:	4601      	mov	r1, r0
 8005758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800575a:	4298      	cmp	r0, r3
 800575c:	d104      	bne.n	8005768 <print_e+0x3c>
 800575e:	4638      	mov	r0, r7
 8005760:	f000 fc98 	bl	8006094 <strcpy>
 8005764:	b00b      	add	sp, #44	; 0x2c
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005768:	780b      	ldrb	r3, [r1, #0]
 800576a:	703b      	strb	r3, [r7, #0]
 800576c:	2d00      	cmp	r5, #0
 800576e:	d142      	bne.n	80057f6 <print_e+0xca>
 8005770:	2c00      	cmp	r4, #0
 8005772:	d140      	bne.n	80057f6 <print_e+0xca>
 8005774:	1c7b      	adds	r3, r7, #1
 8005776:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800577a:	b10a      	cbz	r2, 8005780 <print_e+0x54>
 800577c:	2c00      	cmp	r4, #0
 800577e:	dc3e      	bgt.n	80057fe <print_e+0xd2>
 8005780:	2e67      	cmp	r6, #103	; 0x67
 8005782:	d043      	beq.n	800580c <print_e+0xe0>
 8005784:	2e47      	cmp	r6, #71	; 0x47
 8005786:	d043      	beq.n	8005810 <print_e+0xe4>
 8005788:	461a      	mov	r2, r3
 800578a:	2730      	movs	r7, #48	; 0x30
 800578c:	191d      	adds	r5, r3, r4
 800578e:	1aa9      	subs	r1, r5, r2
 8005790:	2900      	cmp	r1, #0
 8005792:	dc38      	bgt.n	8005806 <print_e+0xda>
 8005794:	2c00      	cmp	r4, #0
 8005796:	bfa8      	it	ge
 8005798:	191b      	addge	r3, r3, r4
 800579a:	1e41      	subs	r1, r0, #1
 800579c:	2900      	cmp	r1, #0
 800579e:	9109      	str	r1, [sp, #36]	; 0x24
 80057a0:	461a      	mov	r2, r3
 80057a2:	bfb7      	itett	lt
 80057a4:	212d      	movlt	r1, #45	; 0x2d
 80057a6:	212b      	movge	r1, #43	; 0x2b
 80057a8:	f1c0 0001 	rsblt	r0, r0, #1
 80057ac:	9009      	strlt	r0, [sp, #36]	; 0x24
 80057ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b0:	f802 6b02 	strb.w	r6, [r2], #2
 80057b4:	bfb4      	ite	lt
 80057b6:	7059      	strblt	r1, [r3, #1]
 80057b8:	7059      	strbge	r1, [r3, #1]
 80057ba:	2863      	cmp	r0, #99	; 0x63
 80057bc:	dd0b      	ble.n	80057d6 <print_e+0xaa>
 80057be:	2164      	movs	r1, #100	; 0x64
 80057c0:	fb90 f1f1 	sdiv	r1, r0, r1
 80057c4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80057c8:	1cda      	adds	r2, r3, #3
 80057ca:	709c      	strb	r4, [r3, #2]
 80057cc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80057d0:	fb03 0101 	mla	r1, r3, r1, r0
 80057d4:	9109      	str	r1, [sp, #36]	; 0x24
 80057d6:	230a      	movs	r3, #10
 80057d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057da:	fb91 f3f3 	sdiv	r3, r1, r3
 80057de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80057e2:	7010      	strb	r0, [r2, #0]
 80057e4:	f06f 0009 	mvn.w	r0, #9
 80057e8:	fb00 1303 	mla	r3, r0, r3, r1
 80057ec:	3330      	adds	r3, #48	; 0x30
 80057ee:	7053      	strb	r3, [r2, #1]
 80057f0:	2300      	movs	r3, #0
 80057f2:	7093      	strb	r3, [r2, #2]
 80057f4:	e7b6      	b.n	8005764 <print_e+0x38>
 80057f6:	222e      	movs	r2, #46	; 0x2e
 80057f8:	1cbb      	adds	r3, r7, #2
 80057fa:	707a      	strb	r2, [r7, #1]
 80057fc:	e7bb      	b.n	8005776 <print_e+0x4a>
 80057fe:	f803 2b01 	strb.w	r2, [r3], #1
 8005802:	3c01      	subs	r4, #1
 8005804:	e7b7      	b.n	8005776 <print_e+0x4a>
 8005806:	f802 7b01 	strb.w	r7, [r2], #1
 800580a:	e7c0      	b.n	800578e <print_e+0x62>
 800580c:	2665      	movs	r6, #101	; 0x65
 800580e:	e7c4      	b.n	800579a <print_e+0x6e>
 8005810:	2645      	movs	r6, #69	; 0x45
 8005812:	e7c2      	b.n	800579a <print_e+0x6e>
 8005814:	0000      	movs	r0, r0
	...

08005818 <_gcvt>:
 8005818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800581c:	4617      	mov	r7, r2
 800581e:	461d      	mov	r5, r3
 8005820:	b08b      	sub	sp, #44	; 0x2c
 8005822:	4681      	mov	r9, r0
 8005824:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	4638      	mov	r0, r7
 800582e:	4629      	mov	r1, r5
 8005830:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8005834:	f7fb f8ba 	bl	80009ac <__aeabi_dcmplt>
 8005838:	b108      	cbz	r0, 800583e <_gcvt+0x26>
 800583a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800583e:	2200      	movs	r2, #0
 8005840:	2300      	movs	r3, #0
 8005842:	4638      	mov	r0, r7
 8005844:	4629      	mov	r1, r5
 8005846:	f7fb f8a7 	bl	8000998 <__aeabi_dcmpeq>
 800584a:	b138      	cbz	r0, 800585c <_gcvt+0x44>
 800584c:	2330      	movs	r3, #48	; 0x30
 800584e:	7023      	strb	r3, [r4, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	7063      	strb	r3, [r4, #1]
 8005854:	4620      	mov	r0, r4
 8005856:	b00b      	add	sp, #44	; 0x2c
 8005858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800585c:	a352      	add	r3, pc, #328	; (adr r3, 80059a8 <_gcvt+0x190>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4638      	mov	r0, r7
 8005864:	4629      	mov	r1, r5
 8005866:	f7fb f8ab 	bl	80009c0 <__aeabi_dcmple>
 800586a:	b168      	cbz	r0, 8005888 <_gcvt+0x70>
 800586c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005870:	3e01      	subs	r6, #1
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	f8cd 8008 	str.w	r8, [sp, #8]
 8005878:	9600      	str	r6, [sp, #0]
 800587a:	463a      	mov	r2, r7
 800587c:	462b      	mov	r3, r5
 800587e:	4621      	mov	r1, r4
 8005880:	4648      	mov	r0, r9
 8005882:	f7ff ff53 	bl	800572c <print_e>
 8005886:	e7e5      	b.n	8005854 <_gcvt+0x3c>
 8005888:	4630      	mov	r0, r6
 800588a:	f000 fb6f 	bl	8005f6c <_mprec_log10>
 800588e:	463a      	mov	r2, r7
 8005890:	462b      	mov	r3, r5
 8005892:	f7fb f895 	bl	80009c0 <__aeabi_dcmple>
 8005896:	2800      	cmp	r0, #0
 8005898:	d1e8      	bne.n	800586c <_gcvt+0x54>
 800589a:	2200      	movs	r2, #0
 800589c:	4b44      	ldr	r3, [pc, #272]	; (80059b0 <_gcvt+0x198>)
 800589e:	4629      	mov	r1, r5
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7fb f883 	bl	80009ac <__aeabi_dcmplt>
 80058a6:	a909      	add	r1, sp, #36	; 0x24
 80058a8:	aa08      	add	r2, sp, #32
 80058aa:	ab07      	add	r3, sp, #28
 80058ac:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80058b0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80058b4:	b388      	cbz	r0, 800591a <_gcvt+0x102>
 80058b6:	2303      	movs	r3, #3
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	463a      	mov	r2, r7
 80058bc:	462b      	mov	r3, r5
 80058be:	4648      	mov	r0, r9
 80058c0:	f000 fc7e 	bl	80061c0 <_dtoa_r>
 80058c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80058c8:	9a07      	ldr	r2, [sp, #28]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d027      	beq.n	800591e <_gcvt+0x106>
 80058ce:	4623      	mov	r3, r4
 80058d0:	4426      	add	r6, r4
 80058d2:	4607      	mov	r7, r0
 80058d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80058d8:	1af2      	subs	r2, r6, r3
 80058da:	9d07      	ldr	r5, [sp, #28]
 80058dc:	b349      	cbz	r1, 8005932 <_gcvt+0x11a>
 80058de:	2d00      	cmp	r5, #0
 80058e0:	dc22      	bgt.n	8005928 <_gcvt+0x110>
 80058e2:	f1b8 0f00 	cmp.w	r8, #0
 80058e6:	d102      	bne.n	80058ee <_gcvt+0xd6>
 80058e8:	7839      	ldrb	r1, [r7, #0]
 80058ea:	2900      	cmp	r1, #0
 80058ec:	d049      	beq.n	8005982 <_gcvt+0x16a>
 80058ee:	429c      	cmp	r4, r3
 80058f0:	bf04      	itt	eq
 80058f2:	2130      	moveq	r1, #48	; 0x30
 80058f4:	7021      	strbeq	r1, [r4, #0]
 80058f6:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	f04f 0630 	mov.w	r6, #48	; 0x30
 8005902:	bf08      	it	eq
 8005904:	1c63      	addeq	r3, r4, #1
 8005906:	7019      	strb	r1, [r3, #0]
 8005908:	9907      	ldr	r1, [sp, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	2900      	cmp	r1, #0
 800590e:	460d      	mov	r5, r1
 8005910:	db24      	blt.n	800595c <_gcvt+0x144>
 8005912:	b100      	cbz	r0, 8005916 <_gcvt+0xfe>
 8005914:	9107      	str	r1, [sp, #28]
 8005916:	1e79      	subs	r1, r7, #1
 8005918:	e02b      	b.n	8005972 <_gcvt+0x15a>
 800591a:	2302      	movs	r3, #2
 800591c:	e7cc      	b.n	80058b8 <_gcvt+0xa0>
 800591e:	4601      	mov	r1, r0
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fbb7 	bl	8006094 <strcpy>
 8005926:	e795      	b.n	8005854 <_gcvt+0x3c>
 8005928:	3d01      	subs	r5, #1
 800592a:	f803 1b01 	strb.w	r1, [r3], #1
 800592e:	9507      	str	r5, [sp, #28]
 8005930:	e7cf      	b.n	80058d2 <_gcvt+0xba>
 8005932:	1aad      	subs	r5, r5, r2
 8005934:	2630      	movs	r6, #48	; 0x30
 8005936:	e005      	b.n	8005944 <_gcvt+0x12c>
 8005938:	2a00      	cmp	r2, #0
 800593a:	dd06      	ble.n	800594a <_gcvt+0x132>
 800593c:	2101      	movs	r1, #1
 800593e:	f803 6b01 	strb.w	r6, [r3], #1
 8005942:	3a01      	subs	r2, #1
 8005944:	18a8      	adds	r0, r5, r2
 8005946:	2800      	cmp	r0, #0
 8005948:	dcf6      	bgt.n	8005938 <_gcvt+0x120>
 800594a:	2900      	cmp	r1, #0
 800594c:	d0c9      	beq.n	80058e2 <_gcvt+0xca>
 800594e:	9007      	str	r0, [sp, #28]
 8005950:	e7c7      	b.n	80058e2 <_gcvt+0xca>
 8005952:	f803 6b01 	strb.w	r6, [r3], #1
 8005956:	3a01      	subs	r2, #1
 8005958:	2001      	movs	r0, #1
 800595a:	e7d7      	b.n	800590c <_gcvt+0xf4>
 800595c:	2a00      	cmp	r2, #0
 800595e:	f101 0101 	add.w	r1, r1, #1
 8005962:	dcf6      	bgt.n	8005952 <_gcvt+0x13a>
 8005964:	2800      	cmp	r0, #0
 8005966:	d0d6      	beq.n	8005916 <_gcvt+0xfe>
 8005968:	9507      	str	r5, [sp, #28]
 800596a:	e7d4      	b.n	8005916 <_gcvt+0xfe>
 800596c:	f803 0b01 	strb.w	r0, [r3], #1
 8005970:	3a01      	subs	r2, #1
 8005972:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005976:	b108      	cbz	r0, 800597c <_gcvt+0x164>
 8005978:	2a00      	cmp	r2, #0
 800597a:	dcf7      	bgt.n	800596c <_gcvt+0x154>
 800597c:	f1b8 0f00 	cmp.w	r8, #0
 8005980:	d10b      	bne.n	800599a <_gcvt+0x182>
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e765      	b.n	8005854 <_gcvt+0x3c>
 8005988:	f801 6b01 	strb.w	r6, [r1], #1
 800598c:	1a68      	subs	r0, r5, r1
 800598e:	2800      	cmp	r0, #0
 8005990:	dcfa      	bgt.n	8005988 <_gcvt+0x170>
 8005992:	2a00      	cmp	r2, #0
 8005994:	bfa8      	it	ge
 8005996:	189b      	addge	r3, r3, r2
 8005998:	e7f3      	b.n	8005982 <_gcvt+0x16a>
 800599a:	4619      	mov	r1, r3
 800599c:	189d      	adds	r5, r3, r2
 800599e:	2630      	movs	r6, #48	; 0x30
 80059a0:	e7f4      	b.n	800598c <_gcvt+0x174>
 80059a2:	bf00      	nop
 80059a4:	f3af 8000 	nop.w
 80059a8:	eb1c432d 	.word	0xeb1c432d
 80059ac:	3f1a36e2 	.word	0x3f1a36e2
 80059b0:	3ff00000 	.word	0x3ff00000

080059b4 <_Balloc>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059b8:	4604      	mov	r4, r0
 80059ba:	460e      	mov	r6, r1
 80059bc:	b93d      	cbnz	r5, 80059ce <_Balloc+0x1a>
 80059be:	2010      	movs	r0, #16
 80059c0:	f001 f9b2 	bl	8006d28 <malloc>
 80059c4:	6260      	str	r0, [r4, #36]	; 0x24
 80059c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059ca:	6005      	str	r5, [r0, #0]
 80059cc:	60c5      	str	r5, [r0, #12]
 80059ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059d0:	68eb      	ldr	r3, [r5, #12]
 80059d2:	b183      	cbz	r3, 80059f6 <_Balloc+0x42>
 80059d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059dc:	b9b8      	cbnz	r0, 8005a0e <_Balloc+0x5a>
 80059de:	2101      	movs	r1, #1
 80059e0:	fa01 f506 	lsl.w	r5, r1, r6
 80059e4:	1d6a      	adds	r2, r5, #5
 80059e6:	0092      	lsls	r2, r2, #2
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fadb 	bl	8005fa4 <_calloc_r>
 80059ee:	b160      	cbz	r0, 8005a0a <_Balloc+0x56>
 80059f0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80059f4:	e00e      	b.n	8005a14 <_Balloc+0x60>
 80059f6:	2221      	movs	r2, #33	; 0x21
 80059f8:	2104      	movs	r1, #4
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fad2 	bl	8005fa4 <_calloc_r>
 8005a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a02:	60e8      	str	r0, [r5, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e4      	bne.n	80059d4 <_Balloc+0x20>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	6802      	ldr	r2, [r0, #0]
 8005a10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a14:	2300      	movs	r3, #0
 8005a16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a1a:	e7f7      	b.n	8005a0c <_Balloc+0x58>

08005a1c <_Bfree>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a20:	4606      	mov	r6, r0
 8005a22:	460d      	mov	r5, r1
 8005a24:	b93c      	cbnz	r4, 8005a36 <_Bfree+0x1a>
 8005a26:	2010      	movs	r0, #16
 8005a28:	f001 f97e 	bl	8006d28 <malloc>
 8005a2c:	6270      	str	r0, [r6, #36]	; 0x24
 8005a2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a32:	6004      	str	r4, [r0, #0]
 8005a34:	60c4      	str	r4, [r0, #12]
 8005a36:	b13d      	cbz	r5, 8005a48 <_Bfree+0x2c>
 8005a38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a3a:	686a      	ldr	r2, [r5, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a42:	6029      	str	r1, [r5, #0]
 8005a44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a48:	bd70      	pop	{r4, r5, r6, pc}

08005a4a <__multadd>:
 8005a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	461f      	mov	r7, r3
 8005a50:	4606      	mov	r6, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	2300      	movs	r3, #0
 8005a56:	690d      	ldr	r5, [r1, #16]
 8005a58:	f101 0c14 	add.w	ip, r1, #20
 8005a5c:	f8dc 0000 	ldr.w	r0, [ip]
 8005a60:	3301      	adds	r3, #1
 8005a62:	b281      	uxth	r1, r0
 8005a64:	fb02 7101 	mla	r1, r2, r1, r7
 8005a68:	0c00      	lsrs	r0, r0, #16
 8005a6a:	0c0f      	lsrs	r7, r1, #16
 8005a6c:	fb02 7000 	mla	r0, r2, r0, r7
 8005a70:	b289      	uxth	r1, r1
 8005a72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005a76:	429d      	cmp	r5, r3
 8005a78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005a7c:	f84c 1b04 	str.w	r1, [ip], #4
 8005a80:	dcec      	bgt.n	8005a5c <__multadd+0x12>
 8005a82:	b1d7      	cbz	r7, 8005aba <__multadd+0x70>
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	dc12      	bgt.n	8005ab0 <__multadd+0x66>
 8005a8a:	6861      	ldr	r1, [r4, #4]
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	3101      	adds	r1, #1
 8005a90:	f7ff ff90 	bl	80059b4 <_Balloc>
 8005a94:	4680      	mov	r8, r0
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	f104 010c 	add.w	r1, r4, #12
 8005a9c:	3202      	adds	r2, #2
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	300c      	adds	r0, #12
 8005aa2:	f7ff fdf1 	bl	8005688 <memcpy>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff ffb7 	bl	8005a1c <_Bfree>
 8005aae:	4644      	mov	r4, r8
 8005ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	615f      	str	r7, [r3, #20]
 8005ab8:	6125      	str	r5, [r4, #16]
 8005aba:	4620      	mov	r0, r4
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ac0 <__hi0bits>:
 8005ac0:	0c02      	lsrs	r2, r0, #16
 8005ac2:	0412      	lsls	r2, r2, #16
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	b9b2      	cbnz	r2, 8005af6 <__hi0bits+0x36>
 8005ac8:	0403      	lsls	r3, r0, #16
 8005aca:	2010      	movs	r0, #16
 8005acc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ad0:	bf04      	itt	eq
 8005ad2:	021b      	lsleq	r3, r3, #8
 8005ad4:	3008      	addeq	r0, #8
 8005ad6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ada:	bf04      	itt	eq
 8005adc:	011b      	lsleq	r3, r3, #4
 8005ade:	3004      	addeq	r0, #4
 8005ae0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ae4:	bf04      	itt	eq
 8005ae6:	009b      	lsleq	r3, r3, #2
 8005ae8:	3002      	addeq	r0, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	db06      	blt.n	8005afc <__hi0bits+0x3c>
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	d503      	bpl.n	8005afa <__hi0bits+0x3a>
 8005af2:	3001      	adds	r0, #1
 8005af4:	4770      	bx	lr
 8005af6:	2000      	movs	r0, #0
 8005af8:	e7e8      	b.n	8005acc <__hi0bits+0xc>
 8005afa:	2020      	movs	r0, #32
 8005afc:	4770      	bx	lr

08005afe <__lo0bits>:
 8005afe:	6803      	ldr	r3, [r0, #0]
 8005b00:	4601      	mov	r1, r0
 8005b02:	f013 0207 	ands.w	r2, r3, #7
 8005b06:	d00b      	beq.n	8005b20 <__lo0bits+0x22>
 8005b08:	07da      	lsls	r2, r3, #31
 8005b0a:	d423      	bmi.n	8005b54 <__lo0bits+0x56>
 8005b0c:	0798      	lsls	r0, r3, #30
 8005b0e:	bf49      	itett	mi
 8005b10:	085b      	lsrmi	r3, r3, #1
 8005b12:	089b      	lsrpl	r3, r3, #2
 8005b14:	2001      	movmi	r0, #1
 8005b16:	600b      	strmi	r3, [r1, #0]
 8005b18:	bf5c      	itt	pl
 8005b1a:	600b      	strpl	r3, [r1, #0]
 8005b1c:	2002      	movpl	r0, #2
 8005b1e:	4770      	bx	lr
 8005b20:	b298      	uxth	r0, r3
 8005b22:	b9a8      	cbnz	r0, 8005b50 <__lo0bits+0x52>
 8005b24:	2010      	movs	r0, #16
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b2c:	bf04      	itt	eq
 8005b2e:	0a1b      	lsreq	r3, r3, #8
 8005b30:	3008      	addeq	r0, #8
 8005b32:	071a      	lsls	r2, r3, #28
 8005b34:	bf04      	itt	eq
 8005b36:	091b      	lsreq	r3, r3, #4
 8005b38:	3004      	addeq	r0, #4
 8005b3a:	079a      	lsls	r2, r3, #30
 8005b3c:	bf04      	itt	eq
 8005b3e:	089b      	lsreq	r3, r3, #2
 8005b40:	3002      	addeq	r0, #2
 8005b42:	07da      	lsls	r2, r3, #31
 8005b44:	d402      	bmi.n	8005b4c <__lo0bits+0x4e>
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	d006      	beq.n	8005b58 <__lo0bits+0x5a>
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	4770      	bx	lr
 8005b50:	4610      	mov	r0, r2
 8005b52:	e7e9      	b.n	8005b28 <__lo0bits+0x2a>
 8005b54:	2000      	movs	r0, #0
 8005b56:	4770      	bx	lr
 8005b58:	2020      	movs	r0, #32
 8005b5a:	4770      	bx	lr

08005b5c <__i2b>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	460c      	mov	r4, r1
 8005b60:	2101      	movs	r1, #1
 8005b62:	f7ff ff27 	bl	80059b4 <_Balloc>
 8005b66:	2201      	movs	r2, #1
 8005b68:	6144      	str	r4, [r0, #20]
 8005b6a:	6102      	str	r2, [r0, #16]
 8005b6c:	bd10      	pop	{r4, pc}

08005b6e <__multiply>:
 8005b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b72:	4614      	mov	r4, r2
 8005b74:	690a      	ldr	r2, [r1, #16]
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	4688      	mov	r8, r1
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bfbe      	ittt	lt
 8005b7e:	460b      	movlt	r3, r1
 8005b80:	46a0      	movlt	r8, r4
 8005b82:	461c      	movlt	r4, r3
 8005b84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b94:	eb07 0609 	add.w	r6, r7, r9
 8005b98:	42b3      	cmp	r3, r6
 8005b9a:	bfb8      	it	lt
 8005b9c:	3101      	addlt	r1, #1
 8005b9e:	f7ff ff09 	bl	80059b4 <_Balloc>
 8005ba2:	f100 0514 	add.w	r5, r0, #20
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	2200      	movs	r2, #0
 8005baa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005bae:	4573      	cmp	r3, lr
 8005bb0:	d316      	bcc.n	8005be0 <__multiply+0x72>
 8005bb2:	f104 0214 	add.w	r2, r4, #20
 8005bb6:	f108 0114 	add.w	r1, r8, #20
 8005bba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005bbe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d80c      	bhi.n	8005be6 <__multiply+0x78>
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	dd03      	ble.n	8005bd8 <__multiply+0x6a>
 8005bd0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d05d      	beq.n	8005c94 <__multiply+0x126>
 8005bd8:	6106      	str	r6, [r0, #16]
 8005bda:	b003      	add	sp, #12
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be0:	f843 2b04 	str.w	r2, [r3], #4
 8005be4:	e7e3      	b.n	8005bae <__multiply+0x40>
 8005be6:	f8b2 b000 	ldrh.w	fp, [r2]
 8005bea:	f1bb 0f00 	cmp.w	fp, #0
 8005bee:	d023      	beq.n	8005c38 <__multiply+0xca>
 8005bf0:	4689      	mov	r9, r1
 8005bf2:	46ac      	mov	ip, r5
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005bfc:	f8dc a000 	ldr.w	sl, [ip]
 8005c00:	b2a3      	uxth	r3, r4
 8005c02:	fa1f fa8a 	uxth.w	sl, sl
 8005c06:	fb0b a303 	mla	r3, fp, r3, sl
 8005c0a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c0e:	f8dc 4000 	ldr.w	r4, [ip]
 8005c12:	4443      	add	r3, r8
 8005c14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c18:	fb0b 840a 	mla	r4, fp, sl, r8
 8005c1c:	46e2      	mov	sl, ip
 8005c1e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c28:	454f      	cmp	r7, r9
 8005c2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c2e:	f84a 3b04 	str.w	r3, [sl], #4
 8005c32:	d82b      	bhi.n	8005c8c <__multiply+0x11e>
 8005c34:	f8cc 8004 	str.w	r8, [ip, #4]
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	3204      	adds	r2, #4
 8005c3c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	d020      	beq.n	8005c88 <__multiply+0x11a>
 8005c46:	4689      	mov	r9, r1
 8005c48:	46a8      	mov	r8, r5
 8005c4a:	f04f 0b00 	mov.w	fp, #0
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	f8b9 c000 	ldrh.w	ip, [r9]
 8005c54:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	fb0a 440c 	mla	r4, sl, ip, r4
 8005c5e:	46c4      	mov	ip, r8
 8005c60:	445c      	add	r4, fp
 8005c62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c66:	f84c 3b04 	str.w	r3, [ip], #4
 8005c6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c6e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005c72:	0c1b      	lsrs	r3, r3, #16
 8005c74:	fb0a b303 	mla	r3, sl, r3, fp
 8005c78:	454f      	cmp	r7, r9
 8005c7a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c7e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005c82:	d805      	bhi.n	8005c90 <__multiply+0x122>
 8005c84:	f8c8 3004 	str.w	r3, [r8, #4]
 8005c88:	3504      	adds	r5, #4
 8005c8a:	e79b      	b.n	8005bc4 <__multiply+0x56>
 8005c8c:	46d4      	mov	ip, sl
 8005c8e:	e7b3      	b.n	8005bf8 <__multiply+0x8a>
 8005c90:	46e0      	mov	r8, ip
 8005c92:	e7dd      	b.n	8005c50 <__multiply+0xe2>
 8005c94:	3e01      	subs	r6, #1
 8005c96:	e799      	b.n	8005bcc <__multiply+0x5e>

08005c98 <__pow5mult>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	f012 0203 	ands.w	r2, r2, #3
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	d007      	beq.n	8005cb8 <__pow5mult+0x20>
 8005ca8:	4c21      	ldr	r4, [pc, #132]	; (8005d30 <__pow5mult+0x98>)
 8005caa:	3a01      	subs	r2, #1
 8005cac:	2300      	movs	r3, #0
 8005cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cb2:	f7ff feca 	bl	8005a4a <__multadd>
 8005cb6:	4607      	mov	r7, r0
 8005cb8:	10ad      	asrs	r5, r5, #2
 8005cba:	d035      	beq.n	8005d28 <__pow5mult+0x90>
 8005cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cbe:	b93c      	cbnz	r4, 8005cd0 <__pow5mult+0x38>
 8005cc0:	2010      	movs	r0, #16
 8005cc2:	f001 f831 	bl	8006d28 <malloc>
 8005cc6:	6270      	str	r0, [r6, #36]	; 0x24
 8005cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ccc:	6004      	str	r4, [r0, #0]
 8005cce:	60c4      	str	r4, [r0, #12]
 8005cd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cd8:	b94c      	cbnz	r4, 8005cee <__pow5mult+0x56>
 8005cda:	f240 2171 	movw	r1, #625	; 0x271
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ff3c 	bl	8005b5c <__i2b>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	f04f 0800 	mov.w	r8, #0
 8005cf2:	07eb      	lsls	r3, r5, #31
 8005cf4:	d50a      	bpl.n	8005d0c <__pow5mult+0x74>
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ff37 	bl	8005b6e <__multiply>
 8005d00:	4681      	mov	r9, r0
 8005d02:	4639      	mov	r1, r7
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff fe89 	bl	8005a1c <_Bfree>
 8005d0a:	464f      	mov	r7, r9
 8005d0c:	106d      	asrs	r5, r5, #1
 8005d0e:	d00b      	beq.n	8005d28 <__pow5mult+0x90>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	b938      	cbnz	r0, 8005d24 <__pow5mult+0x8c>
 8005d14:	4622      	mov	r2, r4
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff ff28 	bl	8005b6e <__multiply>
 8005d1e:	6020      	str	r0, [r4, #0]
 8005d20:	f8c0 8000 	str.w	r8, [r0]
 8005d24:	4604      	mov	r4, r0
 8005d26:	e7e4      	b.n	8005cf2 <__pow5mult+0x5a>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2e:	bf00      	nop
 8005d30:	080082c8 	.word	0x080082c8

08005d34 <__lshift>:
 8005d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	460c      	mov	r4, r1
 8005d3a:	4607      	mov	r7, r0
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d44:	eb0a 0903 	add.w	r9, sl, r3
 8005d48:	6849      	ldr	r1, [r1, #4]
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	f109 0501 	add.w	r5, r9, #1
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	db32      	blt.n	8005dba <__lshift+0x86>
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff fe2d 	bl	80059b4 <_Balloc>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f100 0114 	add.w	r1, r0, #20
 8005d64:	4553      	cmp	r3, sl
 8005d66:	db2b      	blt.n	8005dc0 <__lshift+0x8c>
 8005d68:	6920      	ldr	r0, [r4, #16]
 8005d6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d6e:	f104 0314 	add.w	r3, r4, #20
 8005d72:	f016 021f 	ands.w	r2, r6, #31
 8005d76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d7e:	d025      	beq.n	8005dcc <__lshift+0x98>
 8005d80:	2000      	movs	r0, #0
 8005d82:	f1c2 0e20 	rsb	lr, r2, #32
 8005d86:	468a      	mov	sl, r1
 8005d88:	681e      	ldr	r6, [r3, #0]
 8005d8a:	4096      	lsls	r6, r2
 8005d8c:	4330      	orrs	r0, r6
 8005d8e:	f84a 0b04 	str.w	r0, [sl], #4
 8005d92:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d96:	459c      	cmp	ip, r3
 8005d98:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d9c:	d814      	bhi.n	8005dc8 <__lshift+0x94>
 8005d9e:	6048      	str	r0, [r1, #4]
 8005da0:	b108      	cbz	r0, 8005da6 <__lshift+0x72>
 8005da2:	f109 0502 	add.w	r5, r9, #2
 8005da6:	3d01      	subs	r5, #1
 8005da8:	4638      	mov	r0, r7
 8005daa:	f8c8 5010 	str.w	r5, [r8, #16]
 8005dae:	4621      	mov	r1, r4
 8005db0:	f7ff fe34 	bl	8005a1c <_Bfree>
 8005db4:	4640      	mov	r0, r8
 8005db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dba:	3101      	adds	r1, #1
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	e7c7      	b.n	8005d50 <__lshift+0x1c>
 8005dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	e7cd      	b.n	8005d64 <__lshift+0x30>
 8005dc8:	4651      	mov	r1, sl
 8005dca:	e7dc      	b.n	8005d86 <__lshift+0x52>
 8005dcc:	3904      	subs	r1, #4
 8005dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd2:	459c      	cmp	ip, r3
 8005dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dd8:	d8f9      	bhi.n	8005dce <__lshift+0x9a>
 8005dda:	e7e4      	b.n	8005da6 <__lshift+0x72>

08005ddc <__mcmp>:
 8005ddc:	6903      	ldr	r3, [r0, #16]
 8005dde:	690a      	ldr	r2, [r1, #16]
 8005de0:	b530      	push	{r4, r5, lr}
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	d10c      	bne.n	8005e00 <__mcmp+0x24>
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	3014      	adds	r0, #20
 8005dea:	3114      	adds	r1, #20
 8005dec:	1884      	adds	r4, r0, r2
 8005dee:	4411      	add	r1, r2
 8005df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005df8:	4295      	cmp	r5, r2
 8005dfa:	d003      	beq.n	8005e04 <__mcmp+0x28>
 8005dfc:	d305      	bcc.n	8005e0a <__mcmp+0x2e>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd30      	pop	{r4, r5, pc}
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d3f3      	bcc.n	8005df0 <__mcmp+0x14>
 8005e08:	e7fa      	b.n	8005e00 <__mcmp+0x24>
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	e7f7      	b.n	8005e00 <__mcmp+0x24>

08005e10 <__mdiff>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	460d      	mov	r5, r1
 8005e16:	4607      	mov	r7, r0
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	f7ff ffdd 	bl	8005ddc <__mcmp>
 8005e22:	1e06      	subs	r6, r0, #0
 8005e24:	d108      	bne.n	8005e38 <__mdiff+0x28>
 8005e26:	4631      	mov	r1, r6
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f7ff fdc3 	bl	80059b4 <_Balloc>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e38:	bfa4      	itt	ge
 8005e3a:	4623      	movge	r3, r4
 8005e3c:	462c      	movge	r4, r5
 8005e3e:	4638      	mov	r0, r7
 8005e40:	6861      	ldr	r1, [r4, #4]
 8005e42:	bfa6      	itte	ge
 8005e44:	461d      	movge	r5, r3
 8005e46:	2600      	movge	r6, #0
 8005e48:	2601      	movlt	r6, #1
 8005e4a:	f7ff fdb3 	bl	80059b4 <_Balloc>
 8005e4e:	f04f 0e00 	mov.w	lr, #0
 8005e52:	60c6      	str	r6, [r0, #12]
 8005e54:	692b      	ldr	r3, [r5, #16]
 8005e56:	6926      	ldr	r6, [r4, #16]
 8005e58:	f104 0214 	add.w	r2, r4, #20
 8005e5c:	f105 0914 	add.w	r9, r5, #20
 8005e60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e68:	f100 0114 	add.w	r1, r0, #20
 8005e6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005e70:	f859 5b04 	ldr.w	r5, [r9], #4
 8005e74:	fa1f f38a 	uxth.w	r3, sl
 8005e78:	4473      	add	r3, lr
 8005e7a:	b2ac      	uxth	r4, r5
 8005e7c:	1b1b      	subs	r3, r3, r4
 8005e7e:	0c2c      	lsrs	r4, r5, #16
 8005e80:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005e84:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005e8e:	45c8      	cmp	r8, r9
 8005e90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005e94:	4694      	mov	ip, r2
 8005e96:	f841 4b04 	str.w	r4, [r1], #4
 8005e9a:	d8e7      	bhi.n	8005e6c <__mdiff+0x5c>
 8005e9c:	45bc      	cmp	ip, r7
 8005e9e:	d304      	bcc.n	8005eaa <__mdiff+0x9a>
 8005ea0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ea4:	b183      	cbz	r3, 8005ec8 <__mdiff+0xb8>
 8005ea6:	6106      	str	r6, [r0, #16]
 8005ea8:	e7c4      	b.n	8005e34 <__mdiff+0x24>
 8005eaa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005eae:	b2a2      	uxth	r2, r4
 8005eb0:	4472      	add	r2, lr
 8005eb2:	1413      	asrs	r3, r2, #16
 8005eb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ebe:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ec2:	f841 2b04 	str.w	r2, [r1], #4
 8005ec6:	e7e9      	b.n	8005e9c <__mdiff+0x8c>
 8005ec8:	3e01      	subs	r6, #1
 8005eca:	e7e9      	b.n	8005ea0 <__mdiff+0x90>

08005ecc <__d2b>:
 8005ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ed0:	461c      	mov	r4, r3
 8005ed2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4690      	mov	r8, r2
 8005eda:	f7ff fd6b 	bl	80059b4 <_Balloc>
 8005ede:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005ee2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	bb34      	cbnz	r4, 8005f38 <__d2b+0x6c>
 8005eea:	9201      	str	r2, [sp, #4]
 8005eec:	f1b8 0200 	subs.w	r2, r8, #0
 8005ef0:	d027      	beq.n	8005f42 <__d2b+0x76>
 8005ef2:	a802      	add	r0, sp, #8
 8005ef4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005ef8:	f7ff fe01 	bl	8005afe <__lo0bits>
 8005efc:	9900      	ldr	r1, [sp, #0]
 8005efe:	b1f0      	cbz	r0, 8005f3e <__d2b+0x72>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	f1c0 0320 	rsb	r3, r0, #32
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	40c2      	lsrs	r2, r0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	9201      	str	r2, [sp, #4]
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2102      	movne	r1, #2
 8005f1a:	2101      	moveq	r1, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	6139      	str	r1, [r7, #16]
 8005f20:	b1c4      	cbz	r4, 8005f54 <__d2b+0x88>
 8005f22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f26:	4404      	add	r4, r0
 8005f28:	6034      	str	r4, [r6, #0]
 8005f2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f2e:	6028      	str	r0, [r5, #0]
 8005f30:	4638      	mov	r0, r7
 8005f32:	b002      	add	sp, #8
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f3c:	e7d5      	b.n	8005eea <__d2b+0x1e>
 8005f3e:	6179      	str	r1, [r7, #20]
 8005f40:	e7e7      	b.n	8005f12 <__d2b+0x46>
 8005f42:	a801      	add	r0, sp, #4
 8005f44:	f7ff fddb 	bl	8005afe <__lo0bits>
 8005f48:	2101      	movs	r1, #1
 8005f4a:	9b01      	ldr	r3, [sp, #4]
 8005f4c:	6139      	str	r1, [r7, #16]
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	3020      	adds	r0, #32
 8005f52:	e7e5      	b.n	8005f20 <__d2b+0x54>
 8005f54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005f5c:	6030      	str	r0, [r6, #0]
 8005f5e:	6918      	ldr	r0, [r3, #16]
 8005f60:	f7ff fdae 	bl	8005ac0 <__hi0bits>
 8005f64:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f68:	e7e1      	b.n	8005f2e <__d2b+0x62>
	...

08005f6c <_mprec_log10>:
 8005f6c:	2817      	cmp	r0, #23
 8005f6e:	b5d0      	push	{r4, r6, r7, lr}
 8005f70:	4604      	mov	r4, r0
 8005f72:	dc05      	bgt.n	8005f80 <_mprec_log10+0x14>
 8005f74:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <_mprec_log10+0x2c>)
 8005f76:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8005f7a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f7e:	bdd0      	pop	{r4, r6, r7, pc}
 8005f80:	2000      	movs	r0, #0
 8005f82:	2600      	movs	r6, #0
 8005f84:	4905      	ldr	r1, [pc, #20]	; (8005f9c <_mprec_log10+0x30>)
 8005f86:	4f06      	ldr	r7, [pc, #24]	; (8005fa0 <_mprec_log10+0x34>)
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	f7fa fa9c 	bl	80004c8 <__aeabi_dmul>
 8005f90:	3c01      	subs	r4, #1
 8005f92:	d1f9      	bne.n	8005f88 <_mprec_log10+0x1c>
 8005f94:	e7f3      	b.n	8005f7e <_mprec_log10+0x12>
 8005f96:	bf00      	nop
 8005f98:	08008200 	.word	0x08008200
 8005f9c:	3ff00000 	.word	0x3ff00000
 8005fa0:	40240000 	.word	0x40240000

08005fa4 <_calloc_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	fb02 f401 	mul.w	r4, r2, r1
 8005faa:	4621      	mov	r1, r4
 8005fac:	f000 f808 	bl	8005fc0 <_malloc_r>
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	b118      	cbz	r0, 8005fbc <_calloc_r+0x18>
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f7ff fb71 	bl	800569e <memset>
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}

08005fc0 <_malloc_r>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	1ccd      	adds	r5, r1, #3
 8005fc4:	f025 0503 	bic.w	r5, r5, #3
 8005fc8:	3508      	adds	r5, #8
 8005fca:	2d0c      	cmp	r5, #12
 8005fcc:	bf38      	it	cc
 8005fce:	250c      	movcc	r5, #12
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	db01      	blt.n	8005fda <_malloc_r+0x1a>
 8005fd6:	42a9      	cmp	r1, r5
 8005fd8:	d903      	bls.n	8005fe2 <_malloc_r+0x22>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	2000      	movs	r0, #0
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	f000 fea9 	bl	8006d38 <__malloc_lock>
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <_malloc_r+0xac>)
 8005fe8:	6814      	ldr	r4, [r2, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	b991      	cbnz	r1, 8006014 <_malloc_r+0x54>
 8005fee:	4c20      	ldr	r4, [pc, #128]	; (8006070 <_malloc_r+0xb0>)
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	b91b      	cbnz	r3, 8005ffc <_malloc_r+0x3c>
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 f83d 	bl	8006074 <_sbrk_r>
 8005ffa:	6020      	str	r0, [r4, #0]
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 f838 	bl	8006074 <_sbrk_r>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d124      	bne.n	8006052 <_malloc_r+0x92>
 8006008:	230c      	movs	r3, #12
 800600a:	4630      	mov	r0, r6
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	f000 fe94 	bl	8006d3a <__malloc_unlock>
 8006012:	e7e4      	b.n	8005fde <_malloc_r+0x1e>
 8006014:	680b      	ldr	r3, [r1, #0]
 8006016:	1b5b      	subs	r3, r3, r5
 8006018:	d418      	bmi.n	800604c <_malloc_r+0x8c>
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d90f      	bls.n	800603e <_malloc_r+0x7e>
 800601e:	600b      	str	r3, [r1, #0]
 8006020:	18cc      	adds	r4, r1, r3
 8006022:	50cd      	str	r5, [r1, r3]
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fe88 	bl	8006d3a <__malloc_unlock>
 800602a:	f104 000b 	add.w	r0, r4, #11
 800602e:	1d23      	adds	r3, r4, #4
 8006030:	f020 0007 	bic.w	r0, r0, #7
 8006034:	1ac3      	subs	r3, r0, r3
 8006036:	d0d3      	beq.n	8005fe0 <_malloc_r+0x20>
 8006038:	425a      	negs	r2, r3
 800603a:	50e2      	str	r2, [r4, r3]
 800603c:	e7d0      	b.n	8005fe0 <_malloc_r+0x20>
 800603e:	684b      	ldr	r3, [r1, #4]
 8006040:	428c      	cmp	r4, r1
 8006042:	bf16      	itet	ne
 8006044:	6063      	strne	r3, [r4, #4]
 8006046:	6013      	streq	r3, [r2, #0]
 8006048:	460c      	movne	r4, r1
 800604a:	e7eb      	b.n	8006024 <_malloc_r+0x64>
 800604c:	460c      	mov	r4, r1
 800604e:	6849      	ldr	r1, [r1, #4]
 8006050:	e7cc      	b.n	8005fec <_malloc_r+0x2c>
 8006052:	1cc4      	adds	r4, r0, #3
 8006054:	f024 0403 	bic.w	r4, r4, #3
 8006058:	42a0      	cmp	r0, r4
 800605a:	d005      	beq.n	8006068 <_malloc_r+0xa8>
 800605c:	1a21      	subs	r1, r4, r0
 800605e:	4630      	mov	r0, r6
 8006060:	f000 f808 	bl	8006074 <_sbrk_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d0cf      	beq.n	8006008 <_malloc_r+0x48>
 8006068:	6025      	str	r5, [r4, #0]
 800606a:	e7db      	b.n	8006024 <_malloc_r+0x64>
 800606c:	200000ac 	.word	0x200000ac
 8006070:	200000b0 	.word	0x200000b0

08006074 <_sbrk_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	2300      	movs	r3, #0
 8006078:	4c05      	ldr	r4, [pc, #20]	; (8006090 <_sbrk_r+0x1c>)
 800607a:	4605      	mov	r5, r0
 800607c:	4608      	mov	r0, r1
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	f7fc fc1a 	bl	80028b8 <_sbrk>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_sbrk_r+0x1a>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	b103      	cbz	r3, 800608e <_sbrk_r+0x1a>
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000394 	.word	0x20000394

08006094 <strcpy>:
 8006094:	4603      	mov	r3, r0
 8006096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800609a:	f803 2b01 	strb.w	r2, [r3], #1
 800609e:	2a00      	cmp	r2, #0
 80060a0:	d1f9      	bne.n	8006096 <strcpy+0x2>
 80060a2:	4770      	bx	lr

080060a4 <quorem>:
 80060a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	6903      	ldr	r3, [r0, #16]
 80060aa:	690c      	ldr	r4, [r1, #16]
 80060ac:	4680      	mov	r8, r0
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	f2c0 8084 	blt.w	80061bc <quorem+0x118>
 80060b4:	3c01      	subs	r4, #1
 80060b6:	f101 0714 	add.w	r7, r1, #20
 80060ba:	f100 0614 	add.w	r6, r0, #20
 80060be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060c6:	3501      	adds	r5, #1
 80060c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80060cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060d0:	eb06 030c 	add.w	r3, r6, ip
 80060d4:	eb07 090c 	add.w	r9, r7, ip
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	b39d      	cbz	r5, 8006144 <quorem+0xa0>
 80060dc:	f04f 0a00 	mov.w	sl, #0
 80060e0:	4638      	mov	r0, r7
 80060e2:	46b6      	mov	lr, r6
 80060e4:	46d3      	mov	fp, sl
 80060e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80060ea:	b293      	uxth	r3, r2
 80060ec:	fb05 a303 	mla	r3, r5, r3, sl
 80060f0:	0c12      	lsrs	r2, r2, #16
 80060f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f6:	fb05 a202 	mla	r2, r5, r2, sl
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ebab 0303 	sub.w	r3, fp, r3
 8006100:	f8de b000 	ldr.w	fp, [lr]
 8006104:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006108:	fa1f fb8b 	uxth.w	fp, fp
 800610c:	445b      	add	r3, fp
 800610e:	fa1f fb82 	uxth.w	fp, r2
 8006112:	f8de 2000 	ldr.w	r2, [lr]
 8006116:	4581      	cmp	r9, r0
 8006118:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800611c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006126:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800612a:	f84e 3b04 	str.w	r3, [lr], #4
 800612e:	d2da      	bcs.n	80060e6 <quorem+0x42>
 8006130:	f856 300c 	ldr.w	r3, [r6, ip]
 8006134:	b933      	cbnz	r3, 8006144 <quorem+0xa0>
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	3b04      	subs	r3, #4
 800613a:	429e      	cmp	r6, r3
 800613c:	461a      	mov	r2, r3
 800613e:	d331      	bcc.n	80061a4 <quorem+0x100>
 8006140:	f8c8 4010 	str.w	r4, [r8, #16]
 8006144:	4640      	mov	r0, r8
 8006146:	f7ff fe49 	bl	8005ddc <__mcmp>
 800614a:	2800      	cmp	r0, #0
 800614c:	db26      	blt.n	800619c <quorem+0xf8>
 800614e:	4630      	mov	r0, r6
 8006150:	f04f 0c00 	mov.w	ip, #0
 8006154:	3501      	adds	r5, #1
 8006156:	f857 1b04 	ldr.w	r1, [r7], #4
 800615a:	f8d0 e000 	ldr.w	lr, [r0]
 800615e:	b28b      	uxth	r3, r1
 8006160:	ebac 0303 	sub.w	r3, ip, r3
 8006164:	fa1f f28e 	uxth.w	r2, lr
 8006168:	4413      	add	r3, r2
 800616a:	0c0a      	lsrs	r2, r1, #16
 800616c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800617a:	45b9      	cmp	r9, r7
 800617c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006180:	f840 3b04 	str.w	r3, [r0], #4
 8006184:	d2e7      	bcs.n	8006156 <quorem+0xb2>
 8006186:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800618a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800618e:	b92a      	cbnz	r2, 800619c <quorem+0xf8>
 8006190:	3b04      	subs	r3, #4
 8006192:	429e      	cmp	r6, r3
 8006194:	461a      	mov	r2, r3
 8006196:	d30b      	bcc.n	80061b0 <quorem+0x10c>
 8006198:	f8c8 4010 	str.w	r4, [r8, #16]
 800619c:	4628      	mov	r0, r5
 800619e:	b003      	add	sp, #12
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d1c9      	bne.n	8006140 <quorem+0x9c>
 80061ac:	3c01      	subs	r4, #1
 80061ae:	e7c4      	b.n	800613a <quorem+0x96>
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d1ef      	bne.n	8006198 <quorem+0xf4>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	e7ea      	b.n	8006192 <quorem+0xee>
 80061bc:	2000      	movs	r0, #0
 80061be:	e7ee      	b.n	800619e <quorem+0xfa>

080061c0 <_dtoa_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	461f      	mov	r7, r3
 80061c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061ca:	b095      	sub	sp, #84	; 0x54
 80061cc:	4604      	mov	r4, r0
 80061ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80061d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061d6:	b93d      	cbnz	r5, 80061e8 <_dtoa_r+0x28>
 80061d8:	2010      	movs	r0, #16
 80061da:	f000 fda5 	bl	8006d28 <malloc>
 80061de:	6260      	str	r0, [r4, #36]	; 0x24
 80061e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061e4:	6005      	str	r5, [r0, #0]
 80061e6:	60c5      	str	r5, [r0, #12]
 80061e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ea:	6819      	ldr	r1, [r3, #0]
 80061ec:	b151      	cbz	r1, 8006204 <_dtoa_r+0x44>
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	2301      	movs	r3, #1
 80061f2:	4093      	lsls	r3, r2
 80061f4:	604a      	str	r2, [r1, #4]
 80061f6:	608b      	str	r3, [r1, #8]
 80061f8:	4620      	mov	r0, r4
 80061fa:	f7ff fc0f 	bl	8005a1c <_Bfree>
 80061fe:	2200      	movs	r2, #0
 8006200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	1e3b      	subs	r3, r7, #0
 8006206:	bfaf      	iteee	ge
 8006208:	2300      	movge	r3, #0
 800620a:	2201      	movlt	r2, #1
 800620c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006210:	9303      	strlt	r3, [sp, #12]
 8006212:	bfac      	ite	ge
 8006214:	f8c8 3000 	strge.w	r3, [r8]
 8006218:	f8c8 2000 	strlt.w	r2, [r8]
 800621c:	4bae      	ldr	r3, [pc, #696]	; (80064d8 <_dtoa_r+0x318>)
 800621e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006222:	ea33 0308 	bics.w	r3, r3, r8
 8006226:	d11b      	bne.n	8006260 <_dtoa_r+0xa0>
 8006228:	f242 730f 	movw	r3, #9999	; 0x270f
 800622c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	b923      	cbnz	r3, 800623e <_dtoa_r+0x7e>
 8006234:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006238:	2800      	cmp	r0, #0
 800623a:	f000 8545 	beq.w	8006cc8 <_dtoa_r+0xb08>
 800623e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006240:	b953      	cbnz	r3, 8006258 <_dtoa_r+0x98>
 8006242:	4ba6      	ldr	r3, [pc, #664]	; (80064dc <_dtoa_r+0x31c>)
 8006244:	e021      	b.n	800628a <_dtoa_r+0xca>
 8006246:	4ba6      	ldr	r3, [pc, #664]	; (80064e0 <_dtoa_r+0x320>)
 8006248:	9306      	str	r3, [sp, #24]
 800624a:	3308      	adds	r3, #8
 800624c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	9806      	ldr	r0, [sp, #24]
 8006252:	b015      	add	sp, #84	; 0x54
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	4ba0      	ldr	r3, [pc, #640]	; (80064dc <_dtoa_r+0x31c>)
 800625a:	9306      	str	r3, [sp, #24]
 800625c:	3303      	adds	r3, #3
 800625e:	e7f5      	b.n	800624c <_dtoa_r+0x8c>
 8006260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	2300      	movs	r3, #0
 8006268:	4630      	mov	r0, r6
 800626a:	4639      	mov	r1, r7
 800626c:	f7fa fb94 	bl	8000998 <__aeabi_dcmpeq>
 8006270:	4682      	mov	sl, r0
 8006272:	b160      	cbz	r0, 800628e <_dtoa_r+0xce>
 8006274:	2301      	movs	r3, #1
 8006276:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8520 	beq.w	8006cc2 <_dtoa_r+0xb02>
 8006282:	4b98      	ldr	r3, [pc, #608]	; (80064e4 <_dtoa_r+0x324>)
 8006284:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	9306      	str	r3, [sp, #24]
 800628c:	e7e0      	b.n	8006250 <_dtoa_r+0x90>
 800628e:	ab12      	add	r3, sp, #72	; 0x48
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	ab13      	add	r3, sp, #76	; 0x4c
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4632      	mov	r2, r6
 8006298:	463b      	mov	r3, r7
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff fe16 	bl	8005ecc <__d2b>
 80062a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062a4:	4683      	mov	fp, r0
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	d07d      	beq.n	80063a6 <_dtoa_r+0x1e6>
 80062aa:	46b0      	mov	r8, r6
 80062ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80062b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80062b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80062c0:	2200      	movs	r2, #0
 80062c2:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <_dtoa_r+0x328>)
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7f9 ff46 	bl	8000158 <__aeabi_dsub>
 80062cc:	a37c      	add	r3, pc, #496	; (adr r3, 80064c0 <_dtoa_r+0x300>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7fa f8f9 	bl	80004c8 <__aeabi_dmul>
 80062d6:	a37c      	add	r3, pc, #496	; (adr r3, 80064c8 <_dtoa_r+0x308>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7f9 ff3e 	bl	800015c <__adddf3>
 80062e0:	4606      	mov	r6, r0
 80062e2:	4628      	mov	r0, r5
 80062e4:	460f      	mov	r7, r1
 80062e6:	f7fa f885 	bl	80003f4 <__aeabi_i2d>
 80062ea:	a379      	add	r3, pc, #484	; (adr r3, 80064d0 <_dtoa_r+0x310>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7fa f8ea 	bl	80004c8 <__aeabi_dmul>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7f9 ff2e 	bl	800015c <__adddf3>
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	f7fa fb90 	bl	8000a28 <__aeabi_d2iz>
 8006308:	2200      	movs	r2, #0
 800630a:	4682      	mov	sl, r0
 800630c:	2300      	movs	r3, #0
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7fa fb4b 	bl	80009ac <__aeabi_dcmplt>
 8006316:	b148      	cbz	r0, 800632c <_dtoa_r+0x16c>
 8006318:	4650      	mov	r0, sl
 800631a:	f7fa f86b 	bl	80003f4 <__aeabi_i2d>
 800631e:	4632      	mov	r2, r6
 8006320:	463b      	mov	r3, r7
 8006322:	f7fa fb39 	bl	8000998 <__aeabi_dcmpeq>
 8006326:	b908      	cbnz	r0, 800632c <_dtoa_r+0x16c>
 8006328:	f10a 3aff 	add.w	sl, sl, #4294967295
 800632c:	f1ba 0f16 	cmp.w	sl, #22
 8006330:	d85a      	bhi.n	80063e8 <_dtoa_r+0x228>
 8006332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006336:	496d      	ldr	r1, [pc, #436]	; (80064ec <_dtoa_r+0x32c>)
 8006338:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800633c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006340:	f7fa fb52 	bl	80009e8 <__aeabi_dcmpgt>
 8006344:	2800      	cmp	r0, #0
 8006346:	d051      	beq.n	80063ec <_dtoa_r+0x22c>
 8006348:	2300      	movs	r3, #0
 800634a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800634e:	930d      	str	r3, [sp, #52]	; 0x34
 8006350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006352:	1b5d      	subs	r5, r3, r5
 8006354:	1e6b      	subs	r3, r5, #1
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	bf43      	ittte	mi
 800635a:	2300      	movmi	r3, #0
 800635c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006360:	9307      	strmi	r3, [sp, #28]
 8006362:	f04f 0900 	movpl.w	r9, #0
 8006366:	f1ba 0f00 	cmp.w	sl, #0
 800636a:	db41      	blt.n	80063f0 <_dtoa_r+0x230>
 800636c:	9b07      	ldr	r3, [sp, #28]
 800636e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006372:	4453      	add	r3, sl
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	2300      	movs	r3, #0
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800637c:	2b09      	cmp	r3, #9
 800637e:	f200 808f 	bhi.w	80064a0 <_dtoa_r+0x2e0>
 8006382:	2b05      	cmp	r3, #5
 8006384:	bfc4      	itt	gt
 8006386:	3b04      	subgt	r3, #4
 8006388:	931e      	strgt	r3, [sp, #120]	; 0x78
 800638a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800638c:	bfc8      	it	gt
 800638e:	2500      	movgt	r5, #0
 8006390:	f1a3 0302 	sub.w	r3, r3, #2
 8006394:	bfd8      	it	le
 8006396:	2501      	movle	r5, #1
 8006398:	2b03      	cmp	r3, #3
 800639a:	f200 808d 	bhi.w	80064b8 <_dtoa_r+0x2f8>
 800639e:	e8df f003 	tbb	[pc, r3]
 80063a2:	7d7b      	.short	0x7d7b
 80063a4:	6f2f      	.short	0x6f2f
 80063a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063aa:	441d      	add	r5, r3
 80063ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063b0:	2820      	cmp	r0, #32
 80063b2:	dd13      	ble.n	80063dc <_dtoa_r+0x21c>
 80063b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	fa08 f800 	lsl.w	r8, r8, r0
 80063be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063c2:	fa23 f000 	lsr.w	r0, r3, r0
 80063c6:	ea48 0000 	orr.w	r0, r8, r0
 80063ca:	f7fa f803 	bl	80003d4 <__aeabi_ui2d>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4680      	mov	r8, r0
 80063d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80063d6:	3d01      	subs	r5, #1
 80063d8:	9310      	str	r3, [sp, #64]	; 0x40
 80063da:	e771      	b.n	80062c0 <_dtoa_r+0x100>
 80063dc:	9b02      	ldr	r3, [sp, #8]
 80063de:	f1c0 0020 	rsb	r0, r0, #32
 80063e2:	fa03 f000 	lsl.w	r0, r3, r0
 80063e6:	e7f0      	b.n	80063ca <_dtoa_r+0x20a>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e7b0      	b.n	800634e <_dtoa_r+0x18e>
 80063ec:	900d      	str	r0, [sp, #52]	; 0x34
 80063ee:	e7af      	b.n	8006350 <_dtoa_r+0x190>
 80063f0:	f1ca 0300 	rsb	r3, sl, #0
 80063f4:	9308      	str	r3, [sp, #32]
 80063f6:	2300      	movs	r3, #0
 80063f8:	eba9 090a 	sub.w	r9, r9, sl
 80063fc:	930c      	str	r3, [sp, #48]	; 0x30
 80063fe:	e7bc      	b.n	800637a <_dtoa_r+0x1ba>
 8006400:	2301      	movs	r3, #1
 8006402:	9309      	str	r3, [sp, #36]	; 0x24
 8006404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006406:	2b00      	cmp	r3, #0
 8006408:	dd74      	ble.n	80064f4 <_dtoa_r+0x334>
 800640a:	4698      	mov	r8, r3
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	2200      	movs	r2, #0
 8006410:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006412:	6072      	str	r2, [r6, #4]
 8006414:	2204      	movs	r2, #4
 8006416:	f102 0014 	add.w	r0, r2, #20
 800641a:	4298      	cmp	r0, r3
 800641c:	6871      	ldr	r1, [r6, #4]
 800641e:	d96e      	bls.n	80064fe <_dtoa_r+0x33e>
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fac7 	bl	80059b4 <_Balloc>
 8006426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006428:	6030      	str	r0, [r6, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f1b8 0f0e 	cmp.w	r8, #14
 8006430:	9306      	str	r3, [sp, #24]
 8006432:	f200 80ed 	bhi.w	8006610 <_dtoa_r+0x450>
 8006436:	2d00      	cmp	r5, #0
 8006438:	f000 80ea 	beq.w	8006610 <_dtoa_r+0x450>
 800643c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006440:	f1ba 0f00 	cmp.w	sl, #0
 8006444:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006448:	dd77      	ble.n	800653a <_dtoa_r+0x37a>
 800644a:	4a28      	ldr	r2, [pc, #160]	; (80064ec <_dtoa_r+0x32c>)
 800644c:	f00a 030f 	and.w	r3, sl, #15
 8006450:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006458:	06f0      	lsls	r0, r6, #27
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006462:	d568      	bpl.n	8006536 <_dtoa_r+0x376>
 8006464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006468:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <_dtoa_r+0x330>)
 800646a:	2503      	movs	r5, #3
 800646c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006470:	f7fa f954 	bl	800071c <__aeabi_ddiv>
 8006474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006478:	f006 060f 	and.w	r6, r6, #15
 800647c:	4f1c      	ldr	r7, [pc, #112]	; (80064f0 <_dtoa_r+0x330>)
 800647e:	e04f      	b.n	8006520 <_dtoa_r+0x360>
 8006480:	2301      	movs	r3, #1
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006486:	4453      	add	r3, sl
 8006488:	f103 0801 	add.w	r8, r3, #1
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	4643      	mov	r3, r8
 8006490:	2b01      	cmp	r3, #1
 8006492:	bfb8      	it	lt
 8006494:	2301      	movlt	r3, #1
 8006496:	e7ba      	b.n	800640e <_dtoa_r+0x24e>
 8006498:	2300      	movs	r3, #0
 800649a:	e7b2      	b.n	8006402 <_dtoa_r+0x242>
 800649c:	2300      	movs	r3, #0
 800649e:	e7f0      	b.n	8006482 <_dtoa_r+0x2c2>
 80064a0:	2501      	movs	r5, #1
 80064a2:	2300      	movs	r3, #0
 80064a4:	9509      	str	r5, [sp, #36]	; 0x24
 80064a6:	931e      	str	r3, [sp, #120]	; 0x78
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	2200      	movs	r2, #0
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	4698      	mov	r8, r3
 80064b2:	2312      	movs	r3, #18
 80064b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80064b6:	e7aa      	b.n	800640e <_dtoa_r+0x24e>
 80064b8:	2301      	movs	r3, #1
 80064ba:	9309      	str	r3, [sp, #36]	; 0x24
 80064bc:	e7f4      	b.n	80064a8 <_dtoa_r+0x2e8>
 80064be:	bf00      	nop
 80064c0:	636f4361 	.word	0x636f4361
 80064c4:	3fd287a7 	.word	0x3fd287a7
 80064c8:	8b60c8b3 	.word	0x8b60c8b3
 80064cc:	3fc68a28 	.word	0x3fc68a28
 80064d0:	509f79fb 	.word	0x509f79fb
 80064d4:	3fd34413 	.word	0x3fd34413
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	080082dd 	.word	0x080082dd
 80064e0:	080082d4 	.word	0x080082d4
 80064e4:	080082e2 	.word	0x080082e2
 80064e8:	3ff80000 	.word	0x3ff80000
 80064ec:	08008200 	.word	0x08008200
 80064f0:	080081d8 	.word	0x080081d8
 80064f4:	2301      	movs	r3, #1
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	4698      	mov	r8, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	e7da      	b.n	80064b4 <_dtoa_r+0x2f4>
 80064fe:	3101      	adds	r1, #1
 8006500:	6071      	str	r1, [r6, #4]
 8006502:	0052      	lsls	r2, r2, #1
 8006504:	e787      	b.n	8006416 <_dtoa_r+0x256>
 8006506:	07f1      	lsls	r1, r6, #31
 8006508:	d508      	bpl.n	800651c <_dtoa_r+0x35c>
 800650a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800650e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006512:	f7f9 ffd9 	bl	80004c8 <__aeabi_dmul>
 8006516:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800651a:	3501      	adds	r5, #1
 800651c:	1076      	asrs	r6, r6, #1
 800651e:	3708      	adds	r7, #8
 8006520:	2e00      	cmp	r6, #0
 8006522:	d1f0      	bne.n	8006506 <_dtoa_r+0x346>
 8006524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652c:	f7fa f8f6 	bl	800071c <__aeabi_ddiv>
 8006530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006534:	e01b      	b.n	800656e <_dtoa_r+0x3ae>
 8006536:	2502      	movs	r5, #2
 8006538:	e7a0      	b.n	800647c <_dtoa_r+0x2bc>
 800653a:	f000 80a4 	beq.w	8006686 <_dtoa_r+0x4c6>
 800653e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006542:	f1ca 0600 	rsb	r6, sl, #0
 8006546:	4ba0      	ldr	r3, [pc, #640]	; (80067c8 <_dtoa_r+0x608>)
 8006548:	f006 020f 	and.w	r2, r6, #15
 800654c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 ffb8 	bl	80004c8 <__aeabi_dmul>
 8006558:	2502      	movs	r5, #2
 800655a:	2300      	movs	r3, #0
 800655c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006560:	4f9a      	ldr	r7, [pc, #616]	; (80067cc <_dtoa_r+0x60c>)
 8006562:	1136      	asrs	r6, r6, #4
 8006564:	2e00      	cmp	r6, #0
 8006566:	f040 8083 	bne.w	8006670 <_dtoa_r+0x4b0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e0      	bne.n	8006530 <_dtoa_r+0x370>
 800656e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 808a 	beq.w	800668a <_dtoa_r+0x4ca>
 8006576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800657a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800657e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006582:	2200      	movs	r2, #0
 8006584:	4b92      	ldr	r3, [pc, #584]	; (80067d0 <_dtoa_r+0x610>)
 8006586:	f7fa fa11 	bl	80009ac <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d07d      	beq.n	800668a <_dtoa_r+0x4ca>
 800658e:	f1b8 0f00 	cmp.w	r8, #0
 8006592:	d07a      	beq.n	800668a <_dtoa_r+0x4ca>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd36      	ble.n	8006608 <_dtoa_r+0x448>
 800659a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800659e:	2200      	movs	r2, #0
 80065a0:	4b8c      	ldr	r3, [pc, #560]	; (80067d4 <_dtoa_r+0x614>)
 80065a2:	f7f9 ff91 	bl	80004c8 <__aeabi_dmul>
 80065a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065aa:	9e04      	ldr	r6, [sp, #16]
 80065ac:	f10a 37ff 	add.w	r7, sl, #4294967295
 80065b0:	3501      	adds	r5, #1
 80065b2:	4628      	mov	r0, r5
 80065b4:	f7f9 ff1e 	bl	80003f4 <__aeabi_i2d>
 80065b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065bc:	f7f9 ff84 	bl	80004c8 <__aeabi_dmul>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <_dtoa_r+0x618>)
 80065c4:	f7f9 fdca 	bl	800015c <__adddf3>
 80065c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	d15c      	bne.n	8006690 <_dtoa_r+0x4d0>
 80065d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	4b7f      	ldr	r3, [pc, #508]	; (80067dc <_dtoa_r+0x61c>)
 80065de:	f7f9 fdbb 	bl	8000158 <__aeabi_dsub>
 80065e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e4:	462b      	mov	r3, r5
 80065e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ea:	f7fa f9fd 	bl	80009e8 <__aeabi_dcmpgt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f040 8281 	bne.w	8006af6 <_dtoa_r+0x936>
 80065f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065fe:	f7fa f9d5 	bl	80009ac <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	f040 8275 	bne.w	8006af2 <_dtoa_r+0x932>
 8006608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800660c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006612:	2b00      	cmp	r3, #0
 8006614:	f2c0 814b 	blt.w	80068ae <_dtoa_r+0x6ee>
 8006618:	f1ba 0f0e 	cmp.w	sl, #14
 800661c:	f300 8147 	bgt.w	80068ae <_dtoa_r+0x6ee>
 8006620:	4b69      	ldr	r3, [pc, #420]	; (80067c8 <_dtoa_r+0x608>)
 8006622:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800662e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f280 80d7 	bge.w	80067e4 <_dtoa_r+0x624>
 8006636:	f1b8 0f00 	cmp.w	r8, #0
 800663a:	f300 80d3 	bgt.w	80067e4 <_dtoa_r+0x624>
 800663e:	f040 8257 	bne.w	8006af0 <_dtoa_r+0x930>
 8006642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006646:	2200      	movs	r2, #0
 8006648:	4b64      	ldr	r3, [pc, #400]	; (80067dc <_dtoa_r+0x61c>)
 800664a:	f7f9 ff3d 	bl	80004c8 <__aeabi_dmul>
 800664e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006652:	f7fa f9bf 	bl	80009d4 <__aeabi_dcmpge>
 8006656:	4646      	mov	r6, r8
 8006658:	4647      	mov	r7, r8
 800665a:	2800      	cmp	r0, #0
 800665c:	f040 822d 	bne.w	8006aba <_dtoa_r+0x8fa>
 8006660:	9b06      	ldr	r3, [sp, #24]
 8006662:	9a06      	ldr	r2, [sp, #24]
 8006664:	1c5d      	adds	r5, r3, #1
 8006666:	2331      	movs	r3, #49	; 0x31
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	7013      	strb	r3, [r2, #0]
 800666e:	e228      	b.n	8006ac2 <_dtoa_r+0x902>
 8006670:	07f2      	lsls	r2, r6, #31
 8006672:	d505      	bpl.n	8006680 <_dtoa_r+0x4c0>
 8006674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006678:	f7f9 ff26 	bl	80004c8 <__aeabi_dmul>
 800667c:	2301      	movs	r3, #1
 800667e:	3501      	adds	r5, #1
 8006680:	1076      	asrs	r6, r6, #1
 8006682:	3708      	adds	r7, #8
 8006684:	e76e      	b.n	8006564 <_dtoa_r+0x3a4>
 8006686:	2502      	movs	r5, #2
 8006688:	e771      	b.n	800656e <_dtoa_r+0x3ae>
 800668a:	4657      	mov	r7, sl
 800668c:	4646      	mov	r6, r8
 800668e:	e790      	b.n	80065b2 <_dtoa_r+0x3f2>
 8006690:	4b4d      	ldr	r3, [pc, #308]	; (80067c8 <_dtoa_r+0x608>)
 8006692:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006696:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800669a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d048      	beq.n	8006732 <_dtoa_r+0x572>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	2000      	movs	r0, #0
 80066a6:	494e      	ldr	r1, [pc, #312]	; (80067e0 <_dtoa_r+0x620>)
 80066a8:	f7fa f838 	bl	800071c <__aeabi_ddiv>
 80066ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066b0:	f7f9 fd52 	bl	8000158 <__aeabi_dsub>
 80066b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066b8:	9d06      	ldr	r5, [sp, #24]
 80066ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066be:	f7fa f9b3 	bl	8000a28 <__aeabi_d2iz>
 80066c2:	9011      	str	r0, [sp, #68]	; 0x44
 80066c4:	f7f9 fe96 	bl	80003f4 <__aeabi_i2d>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d0:	f7f9 fd42 	bl	8000158 <__aeabi_dsub>
 80066d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066da:	3330      	adds	r3, #48	; 0x30
 80066dc:	f805 3b01 	strb.w	r3, [r5], #1
 80066e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066e4:	f7fa f962 	bl	80009ac <__aeabi_dcmplt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d163      	bne.n	80067b4 <_dtoa_r+0x5f4>
 80066ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f0:	2000      	movs	r0, #0
 80066f2:	4937      	ldr	r1, [pc, #220]	; (80067d0 <_dtoa_r+0x610>)
 80066f4:	f7f9 fd30 	bl	8000158 <__aeabi_dsub>
 80066f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066fc:	f7fa f956 	bl	80009ac <__aeabi_dcmplt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f040 80b5 	bne.w	8006870 <_dtoa_r+0x6b0>
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	1aeb      	subs	r3, r5, r3
 800670a:	429e      	cmp	r6, r3
 800670c:	f77f af7c 	ble.w	8006608 <_dtoa_r+0x448>
 8006710:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006714:	2200      	movs	r2, #0
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <_dtoa_r+0x614>)
 8006718:	f7f9 fed6 	bl	80004c8 <__aeabi_dmul>
 800671c:	2200      	movs	r2, #0
 800671e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006726:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <_dtoa_r+0x614>)
 8006728:	f7f9 fece 	bl	80004c8 <__aeabi_dmul>
 800672c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006730:	e7c3      	b.n	80066ba <_dtoa_r+0x4fa>
 8006732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006736:	f7f9 fec7 	bl	80004c8 <__aeabi_dmul>
 800673a:	9b06      	ldr	r3, [sp, #24]
 800673c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006740:	199d      	adds	r5, r3, r6
 8006742:	461e      	mov	r6, r3
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	f7fa f96e 	bl	8000a28 <__aeabi_d2iz>
 800674c:	9011      	str	r0, [sp, #68]	; 0x44
 800674e:	f7f9 fe51 	bl	80003f4 <__aeabi_i2d>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675a:	f7f9 fcfd 	bl	8000158 <__aeabi_dsub>
 800675e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006764:	3330      	adds	r3, #48	; 0x30
 8006766:	f806 3b01 	strb.w	r3, [r6], #1
 800676a:	42ae      	cmp	r6, r5
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	d124      	bne.n	80067bc <_dtoa_r+0x5fc>
 8006772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <_dtoa_r+0x620>)
 8006778:	f7f9 fcf0 	bl	800015c <__adddf3>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006784:	f7fa f930 	bl	80009e8 <__aeabi_dcmpgt>
 8006788:	2800      	cmp	r0, #0
 800678a:	d171      	bne.n	8006870 <_dtoa_r+0x6b0>
 800678c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006790:	2000      	movs	r0, #0
 8006792:	4913      	ldr	r1, [pc, #76]	; (80067e0 <_dtoa_r+0x620>)
 8006794:	f7f9 fce0 	bl	8000158 <__aeabi_dsub>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a0:	f7fa f904 	bl	80009ac <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f43f af2f 	beq.w	8006608 <_dtoa_r+0x448>
 80067aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067ae:	1e6a      	subs	r2, r5, #1
 80067b0:	2b30      	cmp	r3, #48	; 0x30
 80067b2:	d001      	beq.n	80067b8 <_dtoa_r+0x5f8>
 80067b4:	46ba      	mov	sl, r7
 80067b6:	e04a      	b.n	800684e <_dtoa_r+0x68e>
 80067b8:	4615      	mov	r5, r2
 80067ba:	e7f6      	b.n	80067aa <_dtoa_r+0x5ea>
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <_dtoa_r+0x614>)
 80067be:	f7f9 fe83 	bl	80004c8 <__aeabi_dmul>
 80067c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c6:	e7bd      	b.n	8006744 <_dtoa_r+0x584>
 80067c8:	08008200 	.word	0x08008200
 80067cc:	080081d8 	.word	0x080081d8
 80067d0:	3ff00000 	.word	0x3ff00000
 80067d4:	40240000 	.word	0x40240000
 80067d8:	401c0000 	.word	0x401c0000
 80067dc:	40140000 	.word	0x40140000
 80067e0:	3fe00000 	.word	0x3fe00000
 80067e4:	9d06      	ldr	r5, [sp, #24]
 80067e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ee:	4630      	mov	r0, r6
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7f9 ff93 	bl	800071c <__aeabi_ddiv>
 80067f6:	f7fa f917 	bl	8000a28 <__aeabi_d2iz>
 80067fa:	4681      	mov	r9, r0
 80067fc:	f7f9 fdfa 	bl	80003f4 <__aeabi_i2d>
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	f7f9 fe60 	bl	80004c8 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7f9 fca2 	bl	8000158 <__aeabi_dsub>
 8006814:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006818:	f805 6b01 	strb.w	r6, [r5], #1
 800681c:	9e06      	ldr	r6, [sp, #24]
 800681e:	4602      	mov	r2, r0
 8006820:	1bae      	subs	r6, r5, r6
 8006822:	45b0      	cmp	r8, r6
 8006824:	460b      	mov	r3, r1
 8006826:	d135      	bne.n	8006894 <_dtoa_r+0x6d4>
 8006828:	f7f9 fc98 	bl	800015c <__adddf3>
 800682c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006830:	4606      	mov	r6, r0
 8006832:	460f      	mov	r7, r1
 8006834:	f7fa f8d8 	bl	80009e8 <__aeabi_dcmpgt>
 8006838:	b9c8      	cbnz	r0, 800686e <_dtoa_r+0x6ae>
 800683a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7fa f8a9 	bl	8000998 <__aeabi_dcmpeq>
 8006846:	b110      	cbz	r0, 800684e <_dtoa_r+0x68e>
 8006848:	f019 0f01 	tst.w	r9, #1
 800684c:	d10f      	bne.n	800686e <_dtoa_r+0x6ae>
 800684e:	4659      	mov	r1, fp
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff f8e3 	bl	8005a1c <_Bfree>
 8006856:	2300      	movs	r3, #0
 8006858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800685a:	702b      	strb	r3, [r5, #0]
 800685c:	f10a 0301 	add.w	r3, sl, #1
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006864:	2b00      	cmp	r3, #0
 8006866:	f43f acf3 	beq.w	8006250 <_dtoa_r+0x90>
 800686a:	601d      	str	r5, [r3, #0]
 800686c:	e4f0      	b.n	8006250 <_dtoa_r+0x90>
 800686e:	4657      	mov	r7, sl
 8006870:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006874:	1e6b      	subs	r3, r5, #1
 8006876:	2a39      	cmp	r2, #57	; 0x39
 8006878:	d106      	bne.n	8006888 <_dtoa_r+0x6c8>
 800687a:	9a06      	ldr	r2, [sp, #24]
 800687c:	429a      	cmp	r2, r3
 800687e:	d107      	bne.n	8006890 <_dtoa_r+0x6d0>
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	7013      	strb	r3, [r2, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	3701      	adds	r7, #1
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	3201      	adds	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e791      	b.n	80067b4 <_dtoa_r+0x5f4>
 8006890:	461d      	mov	r5, r3
 8006892:	e7ed      	b.n	8006870 <_dtoa_r+0x6b0>
 8006894:	2200      	movs	r2, #0
 8006896:	4b99      	ldr	r3, [pc, #612]	; (8006afc <_dtoa_r+0x93c>)
 8006898:	f7f9 fe16 	bl	80004c8 <__aeabi_dmul>
 800689c:	2200      	movs	r2, #0
 800689e:	2300      	movs	r3, #0
 80068a0:	4606      	mov	r6, r0
 80068a2:	460f      	mov	r7, r1
 80068a4:	f7fa f878 	bl	8000998 <__aeabi_dcmpeq>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d09e      	beq.n	80067ea <_dtoa_r+0x62a>
 80068ac:	e7cf      	b.n	800684e <_dtoa_r+0x68e>
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	f000 8088 	beq.w	80069c6 <_dtoa_r+0x806>
 80068b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068b8:	2a01      	cmp	r2, #1
 80068ba:	dc6d      	bgt.n	8006998 <_dtoa_r+0x7d8>
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	2a00      	cmp	r2, #0
 80068c0:	d066      	beq.n	8006990 <_dtoa_r+0x7d0>
 80068c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068c6:	464d      	mov	r5, r9
 80068c8:	9e08      	ldr	r6, [sp, #32]
 80068ca:	9a07      	ldr	r2, [sp, #28]
 80068cc:	2101      	movs	r1, #1
 80068ce:	441a      	add	r2, r3
 80068d0:	4620      	mov	r0, r4
 80068d2:	4499      	add	r9, r3
 80068d4:	9207      	str	r2, [sp, #28]
 80068d6:	f7ff f941 	bl	8005b5c <__i2b>
 80068da:	4607      	mov	r7, r0
 80068dc:	2d00      	cmp	r5, #0
 80068de:	dd0b      	ble.n	80068f8 <_dtoa_r+0x738>
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd08      	ble.n	80068f8 <_dtoa_r+0x738>
 80068e6:	42ab      	cmp	r3, r5
 80068e8:	bfa8      	it	ge
 80068ea:	462b      	movge	r3, r5
 80068ec:	9a07      	ldr	r2, [sp, #28]
 80068ee:	eba9 0903 	sub.w	r9, r9, r3
 80068f2:	1aed      	subs	r5, r5, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	9b08      	ldr	r3, [sp, #32]
 80068fa:	b1eb      	cbz	r3, 8006938 <_dtoa_r+0x778>
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d065      	beq.n	80069ce <_dtoa_r+0x80e>
 8006902:	b18e      	cbz	r6, 8006928 <_dtoa_r+0x768>
 8006904:	4639      	mov	r1, r7
 8006906:	4632      	mov	r2, r6
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff f9c5 	bl	8005c98 <__pow5mult>
 800690e:	465a      	mov	r2, fp
 8006910:	4601      	mov	r1, r0
 8006912:	4607      	mov	r7, r0
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff f92a 	bl	8005b6e <__multiply>
 800691a:	4659      	mov	r1, fp
 800691c:	900a      	str	r0, [sp, #40]	; 0x28
 800691e:	4620      	mov	r0, r4
 8006920:	f7ff f87c 	bl	8005a1c <_Bfree>
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	469b      	mov	fp, r3
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	1b9a      	subs	r2, r3, r6
 800692c:	d004      	beq.n	8006938 <_dtoa_r+0x778>
 800692e:	4659      	mov	r1, fp
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff f9b1 	bl	8005c98 <__pow5mult>
 8006936:	4683      	mov	fp, r0
 8006938:	2101      	movs	r1, #1
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff f90e 	bl	8005b5c <__i2b>
 8006940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006942:	4606      	mov	r6, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 81c6 	beq.w	8006cd6 <_dtoa_r+0xb16>
 800694a:	461a      	mov	r2, r3
 800694c:	4601      	mov	r1, r0
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff f9a2 	bl	8005c98 <__pow5mult>
 8006954:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006956:	4606      	mov	r6, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	dc3e      	bgt.n	80069da <_dtoa_r+0x81a>
 800695c:	9b02      	ldr	r3, [sp, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d137      	bne.n	80069d2 <_dtoa_r+0x812>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006968:	2b00      	cmp	r3, #0
 800696a:	d134      	bne.n	80069d6 <_dtoa_r+0x816>
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006972:	0d1b      	lsrs	r3, r3, #20
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	b12b      	cbz	r3, 8006984 <_dtoa_r+0x7c4>
 8006978:	9b07      	ldr	r3, [sp, #28]
 800697a:	f109 0901 	add.w	r9, r9, #1
 800697e:	3301      	adds	r3, #1
 8006980:	9307      	str	r3, [sp, #28]
 8006982:	2301      	movs	r3, #1
 8006984:	9308      	str	r3, [sp, #32]
 8006986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d128      	bne.n	80069de <_dtoa_r+0x81e>
 800698c:	2001      	movs	r0, #1
 800698e:	e02e      	b.n	80069ee <_dtoa_r+0x82e>
 8006990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006992:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006996:	e796      	b.n	80068c6 <_dtoa_r+0x706>
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	f108 36ff 	add.w	r6, r8, #4294967295
 800699e:	42b3      	cmp	r3, r6
 80069a0:	bfb7      	itett	lt
 80069a2:	9b08      	ldrlt	r3, [sp, #32]
 80069a4:	1b9e      	subge	r6, r3, r6
 80069a6:	1af2      	sublt	r2, r6, r3
 80069a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80069aa:	bfbf      	itttt	lt
 80069ac:	9608      	strlt	r6, [sp, #32]
 80069ae:	189b      	addlt	r3, r3, r2
 80069b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80069b2:	2600      	movlt	r6, #0
 80069b4:	f1b8 0f00 	cmp.w	r8, #0
 80069b8:	bfb9      	ittee	lt
 80069ba:	eba9 0508 	sublt.w	r5, r9, r8
 80069be:	2300      	movlt	r3, #0
 80069c0:	464d      	movge	r5, r9
 80069c2:	4643      	movge	r3, r8
 80069c4:	e781      	b.n	80068ca <_dtoa_r+0x70a>
 80069c6:	9e08      	ldr	r6, [sp, #32]
 80069c8:	464d      	mov	r5, r9
 80069ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069cc:	e786      	b.n	80068dc <_dtoa_r+0x71c>
 80069ce:	9a08      	ldr	r2, [sp, #32]
 80069d0:	e7ad      	b.n	800692e <_dtoa_r+0x76e>
 80069d2:	2300      	movs	r3, #0
 80069d4:	e7d6      	b.n	8006984 <_dtoa_r+0x7c4>
 80069d6:	9b02      	ldr	r3, [sp, #8]
 80069d8:	e7d4      	b.n	8006984 <_dtoa_r+0x7c4>
 80069da:	2300      	movs	r3, #0
 80069dc:	9308      	str	r3, [sp, #32]
 80069de:	6933      	ldr	r3, [r6, #16]
 80069e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069e4:	6918      	ldr	r0, [r3, #16]
 80069e6:	f7ff f86b 	bl	8005ac0 <__hi0bits>
 80069ea:	f1c0 0020 	rsb	r0, r0, #32
 80069ee:	9b07      	ldr	r3, [sp, #28]
 80069f0:	4418      	add	r0, r3
 80069f2:	f010 001f 	ands.w	r0, r0, #31
 80069f6:	d047      	beq.n	8006a88 <_dtoa_r+0x8c8>
 80069f8:	f1c0 0320 	rsb	r3, r0, #32
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	dd3b      	ble.n	8006a78 <_dtoa_r+0x8b8>
 8006a00:	9b07      	ldr	r3, [sp, #28]
 8006a02:	f1c0 001c 	rsb	r0, r0, #28
 8006a06:	4481      	add	r9, r0
 8006a08:	4405      	add	r5, r0
 8006a0a:	4403      	add	r3, r0
 8006a0c:	9307      	str	r3, [sp, #28]
 8006a0e:	f1b9 0f00 	cmp.w	r9, #0
 8006a12:	dd05      	ble.n	8006a20 <_dtoa_r+0x860>
 8006a14:	4659      	mov	r1, fp
 8006a16:	464a      	mov	r2, r9
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f7ff f98b 	bl	8005d34 <__lshift>
 8006a1e:	4683      	mov	fp, r0
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dd05      	ble.n	8006a32 <_dtoa_r+0x872>
 8006a26:	4631      	mov	r1, r6
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f7ff f982 	bl	8005d34 <__lshift>
 8006a30:	4606      	mov	r6, r0
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	b353      	cbz	r3, 8006a8c <_dtoa_r+0x8cc>
 8006a36:	4631      	mov	r1, r6
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f7ff f9cf 	bl	8005ddc <__mcmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	da24      	bge.n	8006a8c <_dtoa_r+0x8cc>
 8006a42:	2300      	movs	r3, #0
 8006a44:	4659      	mov	r1, fp
 8006a46:	220a      	movs	r2, #10
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7fe fffe 	bl	8005a4a <__multadd>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a54:	4683      	mov	fp, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8144 	beq.w	8006ce4 <_dtoa_r+0xb24>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4639      	mov	r1, r7
 8006a60:	220a      	movs	r2, #10
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7fe fff1 	bl	8005a4a <__multadd>
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc4d      	bgt.n	8006b0c <_dtoa_r+0x94c>
 8006a70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	dd4a      	ble.n	8006b0c <_dtoa_r+0x94c>
 8006a76:	e011      	b.n	8006a9c <_dtoa_r+0x8dc>
 8006a78:	d0c9      	beq.n	8006a0e <_dtoa_r+0x84e>
 8006a7a:	9a07      	ldr	r2, [sp, #28]
 8006a7c:	331c      	adds	r3, #28
 8006a7e:	441a      	add	r2, r3
 8006a80:	4499      	add	r9, r3
 8006a82:	441d      	add	r5, r3
 8006a84:	4613      	mov	r3, r2
 8006a86:	e7c1      	b.n	8006a0c <_dtoa_r+0x84c>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	e7f6      	b.n	8006a7a <_dtoa_r+0x8ba>
 8006a8c:	f1b8 0f00 	cmp.w	r8, #0
 8006a90:	dc36      	bgt.n	8006b00 <_dtoa_r+0x940>
 8006a92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	dd33      	ble.n	8006b00 <_dtoa_r+0x940>
 8006a98:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	b963      	cbnz	r3, 8006aba <_dtoa_r+0x8fa>
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	2205      	movs	r2, #5
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7fe ffd0 	bl	8005a4a <__multadd>
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4606      	mov	r6, r0
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f7ff f994 	bl	8005ddc <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f73f add3 	bgt.w	8006660 <_dtoa_r+0x4a0>
 8006aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006abc:	9d06      	ldr	r5, [sp, #24]
 8006abe:	ea6f 0a03 	mvn.w	sl, r3
 8006ac2:	f04f 0900 	mov.w	r9, #0
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7fe ffa7 	bl	8005a1c <_Bfree>
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	f43f aebd 	beq.w	800684e <_dtoa_r+0x68e>
 8006ad4:	f1b9 0f00 	cmp.w	r9, #0
 8006ad8:	d005      	beq.n	8006ae6 <_dtoa_r+0x926>
 8006ada:	45b9      	cmp	r9, r7
 8006adc:	d003      	beq.n	8006ae6 <_dtoa_r+0x926>
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f7fe ff9b 	bl	8005a1c <_Bfree>
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7fe ff97 	bl	8005a1c <_Bfree>
 8006aee:	e6ae      	b.n	800684e <_dtoa_r+0x68e>
 8006af0:	2600      	movs	r6, #0
 8006af2:	4637      	mov	r7, r6
 8006af4:	e7e1      	b.n	8006aba <_dtoa_r+0x8fa>
 8006af6:	46ba      	mov	sl, r7
 8006af8:	4637      	mov	r7, r6
 8006afa:	e5b1      	b.n	8006660 <_dtoa_r+0x4a0>
 8006afc:	40240000 	.word	0x40240000
 8006b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b02:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80f3 	beq.w	8006cf2 <_dtoa_r+0xb32>
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	dd05      	ble.n	8006b1c <_dtoa_r+0x95c>
 8006b10:	4639      	mov	r1, r7
 8006b12:	462a      	mov	r2, r5
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff f90d 	bl	8005d34 <__lshift>
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04c      	beq.n	8006bbc <_dtoa_r+0x9fc>
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7fe ff45 	bl	80059b4 <_Balloc>
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	f107 010c 	add.w	r1, r7, #12
 8006b32:	3202      	adds	r2, #2
 8006b34:	0092      	lsls	r2, r2, #2
 8006b36:	300c      	adds	r0, #12
 8006b38:	f7fe fda6 	bl	8005688 <memcpy>
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff f8f7 	bl	8005d34 <__lshift>
 8006b46:	46b9      	mov	r9, r7
 8006b48:	4607      	mov	r7, r0
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	9b02      	ldr	r3, [sp, #8]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	9308      	str	r3, [sp, #32]
 8006b56:	4631      	mov	r1, r6
 8006b58:	4658      	mov	r0, fp
 8006b5a:	f7ff faa3 	bl	80060a4 <quorem>
 8006b5e:	4649      	mov	r1, r9
 8006b60:	4605      	mov	r5, r0
 8006b62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b66:	4658      	mov	r0, fp
 8006b68:	f7ff f938 	bl	8005ddc <__mcmp>
 8006b6c:	463a      	mov	r2, r7
 8006b6e:	9002      	str	r0, [sp, #8]
 8006b70:	4631      	mov	r1, r6
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff f94c 	bl	8005e10 <__mdiff>
 8006b78:	68c3      	ldr	r3, [r0, #12]
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	bb03      	cbnz	r3, 8006bc0 <_dtoa_r+0xa00>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	9009      	str	r0, [sp, #36]	; 0x24
 8006b82:	4658      	mov	r0, fp
 8006b84:	f7ff f92a 	bl	8005ddc <__mcmp>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4620      	mov	r0, r4
 8006b90:	9309      	str	r3, [sp, #36]	; 0x24
 8006b92:	f7fe ff43 	bl	8005a1c <_Bfree>
 8006b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b98:	b9a3      	cbnz	r3, 8006bc4 <_dtoa_r+0xa04>
 8006b9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b9c:	b992      	cbnz	r2, 8006bc4 <_dtoa_r+0xa04>
 8006b9e:	9a08      	ldr	r2, [sp, #32]
 8006ba0:	b982      	cbnz	r2, 8006bc4 <_dtoa_r+0xa04>
 8006ba2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ba6:	d029      	beq.n	8006bfc <_dtoa_r+0xa3c>
 8006ba8:	9b02      	ldr	r3, [sp, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd01      	ble.n	8006bb2 <_dtoa_r+0x9f2>
 8006bae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	1c5d      	adds	r5, r3, #1
 8006bb6:	f883 8000 	strb.w	r8, [r3]
 8006bba:	e784      	b.n	8006ac6 <_dtoa_r+0x906>
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	e7c2      	b.n	8006b46 <_dtoa_r+0x986>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7e3      	b.n	8006b8c <_dtoa_r+0x9cc>
 8006bc4:	9a02      	ldr	r2, [sp, #8]
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	db04      	blt.n	8006bd4 <_dtoa_r+0xa14>
 8006bca:	d123      	bne.n	8006c14 <_dtoa_r+0xa54>
 8006bcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bce:	bb0a      	cbnz	r2, 8006c14 <_dtoa_r+0xa54>
 8006bd0:	9a08      	ldr	r2, [sp, #32]
 8006bd2:	b9fa      	cbnz	r2, 8006c14 <_dtoa_r+0xa54>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	ddec      	ble.n	8006bb2 <_dtoa_r+0x9f2>
 8006bd8:	4659      	mov	r1, fp
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7ff f8a9 	bl	8005d34 <__lshift>
 8006be2:	4631      	mov	r1, r6
 8006be4:	4683      	mov	fp, r0
 8006be6:	f7ff f8f9 	bl	8005ddc <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dc03      	bgt.n	8006bf6 <_dtoa_r+0xa36>
 8006bee:	d1e0      	bne.n	8006bb2 <_dtoa_r+0x9f2>
 8006bf0:	f018 0f01 	tst.w	r8, #1
 8006bf4:	d0dd      	beq.n	8006bb2 <_dtoa_r+0x9f2>
 8006bf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bfa:	d1d8      	bne.n	8006bae <_dtoa_r+0x9ee>
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	9a07      	ldr	r2, [sp, #28]
 8006c00:	1c5d      	adds	r5, r3, #1
 8006c02:	2339      	movs	r3, #57	; 0x39
 8006c04:	7013      	strb	r3, [r2, #0]
 8006c06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c0a:	1e6a      	subs	r2, r5, #1
 8006c0c:	2b39      	cmp	r3, #57	; 0x39
 8006c0e:	d04d      	beq.n	8006cac <_dtoa_r+0xaec>
 8006c10:	3301      	adds	r3, #1
 8006c12:	e052      	b.n	8006cba <_dtoa_r+0xafa>
 8006c14:	9a07      	ldr	r2, [sp, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f102 0501 	add.w	r5, r2, #1
 8006c1c:	dd06      	ble.n	8006c2c <_dtoa_r+0xa6c>
 8006c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c22:	d0eb      	beq.n	8006bfc <_dtoa_r+0xa3c>
 8006c24:	f108 0801 	add.w	r8, r8, #1
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	e7c4      	b.n	8006bb6 <_dtoa_r+0x9f6>
 8006c2c:	9b06      	ldr	r3, [sp, #24]
 8006c2e:	9a04      	ldr	r2, [sp, #16]
 8006c30:	1aeb      	subs	r3, r5, r3
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c38:	d021      	beq.n	8006c7e <_dtoa_r+0xabe>
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	220a      	movs	r2, #10
 8006c40:	4620      	mov	r0, r4
 8006c42:	f7fe ff02 	bl	8005a4a <__multadd>
 8006c46:	45b9      	cmp	r9, r7
 8006c48:	4683      	mov	fp, r0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	f04f 020a 	mov.w	r2, #10
 8006c52:	4649      	mov	r1, r9
 8006c54:	4620      	mov	r0, r4
 8006c56:	d105      	bne.n	8006c64 <_dtoa_r+0xaa4>
 8006c58:	f7fe fef7 	bl	8005a4a <__multadd>
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	4607      	mov	r7, r0
 8006c60:	9507      	str	r5, [sp, #28]
 8006c62:	e778      	b.n	8006b56 <_dtoa_r+0x996>
 8006c64:	f7fe fef1 	bl	8005a4a <__multadd>
 8006c68:	4639      	mov	r1, r7
 8006c6a:	4681      	mov	r9, r0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	220a      	movs	r2, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7fe feea 	bl	8005a4a <__multadd>
 8006c76:	4607      	mov	r7, r0
 8006c78:	e7f2      	b.n	8006c60 <_dtoa_r+0xaa0>
 8006c7a:	f04f 0900 	mov.w	r9, #0
 8006c7e:	4659      	mov	r1, fp
 8006c80:	2201      	movs	r2, #1
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff f856 	bl	8005d34 <__lshift>
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4683      	mov	fp, r0
 8006c8c:	f7ff f8a6 	bl	8005ddc <__mcmp>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dcb8      	bgt.n	8006c06 <_dtoa_r+0xa46>
 8006c94:	d102      	bne.n	8006c9c <_dtoa_r+0xadc>
 8006c96:	f018 0f01 	tst.w	r8, #1
 8006c9a:	d1b4      	bne.n	8006c06 <_dtoa_r+0xa46>
 8006c9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ca0:	1e6a      	subs	r2, r5, #1
 8006ca2:	2b30      	cmp	r3, #48	; 0x30
 8006ca4:	f47f af0f 	bne.w	8006ac6 <_dtoa_r+0x906>
 8006ca8:	4615      	mov	r5, r2
 8006caa:	e7f7      	b.n	8006c9c <_dtoa_r+0xadc>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d105      	bne.n	8006cbe <_dtoa_r+0xafe>
 8006cb2:	2331      	movs	r3, #49	; 0x31
 8006cb4:	9a06      	ldr	r2, [sp, #24]
 8006cb6:	f10a 0a01 	add.w	sl, sl, #1
 8006cba:	7013      	strb	r3, [r2, #0]
 8006cbc:	e703      	b.n	8006ac6 <_dtoa_r+0x906>
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	e7a1      	b.n	8006c06 <_dtoa_r+0xa46>
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <_dtoa_r+0xb60>)
 8006cc4:	f7ff bae1 	b.w	800628a <_dtoa_r+0xca>
 8006cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f47f aabb 	bne.w	8006246 <_dtoa_r+0x86>
 8006cd0:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <_dtoa_r+0xb64>)
 8006cd2:	f7ff bada 	b.w	800628a <_dtoa_r+0xca>
 8006cd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f77f ae3f 	ble.w	800695c <_dtoa_r+0x79c>
 8006cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	e653      	b.n	800698c <_dtoa_r+0x7cc>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dc03      	bgt.n	8006cf2 <_dtoa_r+0xb32>
 8006cea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f73f aed5 	bgt.w	8006a9c <_dtoa_r+0x8dc>
 8006cf2:	9d06      	ldr	r5, [sp, #24]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f7ff f9d4 	bl	80060a4 <quorem>
 8006cfc:	9b06      	ldr	r3, [sp, #24]
 8006cfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d02:	f805 8b01 	strb.w	r8, [r5], #1
 8006d06:	9a04      	ldr	r2, [sp, #16]
 8006d08:	1aeb      	subs	r3, r5, r3
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	ddb5      	ble.n	8006c7a <_dtoa_r+0xaba>
 8006d0e:	4659      	mov	r1, fp
 8006d10:	2300      	movs	r3, #0
 8006d12:	220a      	movs	r2, #10
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7fe fe98 	bl	8005a4a <__multadd>
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	e7ea      	b.n	8006cf4 <_dtoa_r+0xb34>
 8006d1e:	bf00      	nop
 8006d20:	080082e1 	.word	0x080082e1
 8006d24:	080082d4 	.word	0x080082d4

08006d28 <malloc>:
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <malloc+0xc>)
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f7ff b947 	b.w	8005fc0 <_malloc_r>
 8006d32:	bf00      	nop
 8006d34:	20000018 	.word	0x20000018

08006d38 <__malloc_lock>:
 8006d38:	4770      	bx	lr

08006d3a <__malloc_unlock>:
 8006d3a:	4770      	bx	lr
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <atan>:
 8006d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	4bb6      	ldr	r3, [pc, #728]	; (8007020 <atan+0x2e0>)
 8006d46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d4a:	429e      	cmp	r6, r3
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	468b      	mov	fp, r1
 8006d52:	dd17      	ble.n	8006d84 <atan+0x44>
 8006d54:	4bb3      	ldr	r3, [pc, #716]	; (8007024 <atan+0x2e4>)
 8006d56:	429e      	cmp	r6, r3
 8006d58:	dc01      	bgt.n	8006d5e <atan+0x1e>
 8006d5a:	d109      	bne.n	8006d70 <atan+0x30>
 8006d5c:	b140      	cbz	r0, 8006d70 <atan+0x30>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 f9f9 	bl	800015c <__adddf3>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	e005      	b.n	8006d7c <atan+0x3c>
 8006d70:	f1bb 0f00 	cmp.w	fp, #0
 8006d74:	4cac      	ldr	r4, [pc, #688]	; (8007028 <atan+0x2e8>)
 8006d76:	f340 8121 	ble.w	8006fbc <atan+0x27c>
 8006d7a:	4dac      	ldr	r5, [pc, #688]	; (800702c <atan+0x2ec>)
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d84:	4baa      	ldr	r3, [pc, #680]	; (8007030 <atan+0x2f0>)
 8006d86:	429e      	cmp	r6, r3
 8006d88:	dc11      	bgt.n	8006dae <atan+0x6e>
 8006d8a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d8e:	429e      	cmp	r6, r3
 8006d90:	dc0a      	bgt.n	8006da8 <atan+0x68>
 8006d92:	a38b      	add	r3, pc, #556	; (adr r3, 8006fc0 <atan+0x280>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 f9e0 	bl	800015c <__adddf3>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4ba5      	ldr	r3, [pc, #660]	; (8007034 <atan+0x2f4>)
 8006da0:	f7f9 fe22 	bl	80009e8 <__aeabi_dcmpgt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1e9      	bne.n	8006d7c <atan+0x3c>
 8006da8:	f04f 3aff 	mov.w	sl, #4294967295
 8006dac:	e027      	b.n	8006dfe <atan+0xbe>
 8006dae:	f000 f951 	bl	8007054 <fabs>
 8006db2:	4ba1      	ldr	r3, [pc, #644]	; (8007038 <atan+0x2f8>)
 8006db4:	4604      	mov	r4, r0
 8006db6:	429e      	cmp	r6, r3
 8006db8:	460d      	mov	r5, r1
 8006dba:	f300 80b8 	bgt.w	8006f2e <atan+0x1ee>
 8006dbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	f300 809c 	bgt.w	8006f00 <atan+0x1c0>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	f7f9 f9c6 	bl	800015c <__adddf3>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4b98      	ldr	r3, [pc, #608]	; (8007034 <atan+0x2f4>)
 8006dd4:	f7f9 f9c0 	bl	8000158 <__aeabi_dsub>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006de2:	4620      	mov	r0, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	f7f9 f9b9 	bl	800015c <__adddf3>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4630      	mov	r0, r6
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 fc93 	bl	800071c <__aeabi_ddiv>
 8006df6:	f04f 0a00 	mov.w	sl, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 fb5f 	bl	80004c8 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	f7f9 fb59 	bl	80004c8 <__aeabi_dmul>
 8006e16:	a36c      	add	r3, pc, #432	; (adr r3, 8006fc8 <atan+0x288>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	f7f9 fb52 	bl	80004c8 <__aeabi_dmul>
 8006e24:	a36a      	add	r3, pc, #424	; (adr r3, 8006fd0 <atan+0x290>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 f997 	bl	800015c <__adddf3>
 8006e2e:	4632      	mov	r2, r6
 8006e30:	463b      	mov	r3, r7
 8006e32:	f7f9 fb49 	bl	80004c8 <__aeabi_dmul>
 8006e36:	a368      	add	r3, pc, #416	; (adr r3, 8006fd8 <atan+0x298>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 f98e 	bl	800015c <__adddf3>
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	f7f9 fb40 	bl	80004c8 <__aeabi_dmul>
 8006e48:	a365      	add	r3, pc, #404	; (adr r3, 8006fe0 <atan+0x2a0>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 f985 	bl	800015c <__adddf3>
 8006e52:	4632      	mov	r2, r6
 8006e54:	463b      	mov	r3, r7
 8006e56:	f7f9 fb37 	bl	80004c8 <__aeabi_dmul>
 8006e5a:	a363      	add	r3, pc, #396	; (adr r3, 8006fe8 <atan+0x2a8>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f97c 	bl	800015c <__adddf3>
 8006e64:	4632      	mov	r2, r6
 8006e66:	463b      	mov	r3, r7
 8006e68:	f7f9 fb2e 	bl	80004c8 <__aeabi_dmul>
 8006e6c:	a360      	add	r3, pc, #384	; (adr r3, 8006ff0 <atan+0x2b0>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 f973 	bl	800015c <__adddf3>
 8006e76:	4642      	mov	r2, r8
 8006e78:	464b      	mov	r3, r9
 8006e7a:	f7f9 fb25 	bl	80004c8 <__aeabi_dmul>
 8006e7e:	a35e      	add	r3, pc, #376	; (adr r3, 8006ff8 <atan+0x2b8>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	4680      	mov	r8, r0
 8006e86:	4689      	mov	r9, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fb1c 	bl	80004c8 <__aeabi_dmul>
 8006e90:	a35b      	add	r3, pc, #364	; (adr r3, 8007000 <atan+0x2c0>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f95f 	bl	8000158 <__aeabi_dsub>
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	f7f9 fb13 	bl	80004c8 <__aeabi_dmul>
 8006ea2:	a359      	add	r3, pc, #356	; (adr r3, 8007008 <atan+0x2c8>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f956 	bl	8000158 <__aeabi_dsub>
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	f7f9 fb0a 	bl	80004c8 <__aeabi_dmul>
 8006eb4:	a356      	add	r3, pc, #344	; (adr r3, 8007010 <atan+0x2d0>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 f94d 	bl	8000158 <__aeabi_dsub>
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	f7f9 fb01 	bl	80004c8 <__aeabi_dmul>
 8006ec6:	a354      	add	r3, pc, #336	; (adr r3, 8007018 <atan+0x2d8>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f944 	bl	8000158 <__aeabi_dsub>
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	f7f9 faf8 	bl	80004c8 <__aeabi_dmul>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f7f9 f93c 	bl	800015c <__adddf3>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	f7f9 faee 	bl	80004c8 <__aeabi_dmul>
 8006eec:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	d144      	bne.n	8006f80 <atan+0x240>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7f9 f92d 	bl	8000158 <__aeabi_dsub>
 8006efe:	e734      	b.n	8006d6a <atan+0x2a>
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b4c      	ldr	r3, [pc, #304]	; (8007034 <atan+0x2f4>)
 8006f04:	f7f9 f928 	bl	8000158 <__aeabi_dsub>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	4b49      	ldr	r3, [pc, #292]	; (8007034 <atan+0x2f4>)
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 f922 	bl	800015c <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	4639      	mov	r1, r7
 8006f20:	f7f9 fbfc 	bl	800071c <__aeabi_ddiv>
 8006f24:	f04f 0a01 	mov.w	sl, #1
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	e767      	b.n	8006dfe <atan+0xbe>
 8006f2e:	4b43      	ldr	r3, [pc, #268]	; (800703c <atan+0x2fc>)
 8006f30:	429e      	cmp	r6, r3
 8006f32:	dc1a      	bgt.n	8006f6a <atan+0x22a>
 8006f34:	2200      	movs	r2, #0
 8006f36:	4b42      	ldr	r3, [pc, #264]	; (8007040 <atan+0x300>)
 8006f38:	f7f9 f90e 	bl	8000158 <__aeabi_dsub>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4606      	mov	r6, r0
 8006f40:	460f      	mov	r7, r1
 8006f42:	4b3f      	ldr	r3, [pc, #252]	; (8007040 <atan+0x300>)
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fabe 	bl	80004c8 <__aeabi_dmul>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4b39      	ldr	r3, [pc, #228]	; (8007034 <atan+0x2f4>)
 8006f50:	f7f9 f904 	bl	800015c <__adddf3>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fbde 	bl	800071c <__aeabi_ddiv>
 8006f60:	f04f 0a02 	mov.w	sl, #2
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	e749      	b.n	8006dfe <atan+0xbe>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	2000      	movs	r0, #0
 8006f70:	4934      	ldr	r1, [pc, #208]	; (8007044 <atan+0x304>)
 8006f72:	f7f9 fbd3 	bl	800071c <__aeabi_ddiv>
 8006f76:	f04f 0a03 	mov.w	sl, #3
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	e73e      	b.n	8006dfe <atan+0xbe>
 8006f80:	4b31      	ldr	r3, [pc, #196]	; (8007048 <atan+0x308>)
 8006f82:	4e32      	ldr	r6, [pc, #200]	; (800704c <atan+0x30c>)
 8006f84:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006f88:	4456      	add	r6, sl
 8006f8a:	449a      	add	sl, r3
 8006f8c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f90:	f7f9 f8e2 	bl	8000158 <__aeabi_dsub>
 8006f94:	4622      	mov	r2, r4
 8006f96:	462b      	mov	r3, r5
 8006f98:	f7f9 f8de 	bl	8000158 <__aeabi_dsub>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006fa4:	f7f9 f8d8 	bl	8000158 <__aeabi_dsub>
 8006fa8:	f1bb 0f00 	cmp.w	fp, #0
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	f6bf aee4 	bge.w	8006d7c <atan+0x3c>
 8006fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb8:	461d      	mov	r5, r3
 8006fba:	e6df      	b.n	8006d7c <atan+0x3c>
 8006fbc:	4d24      	ldr	r5, [pc, #144]	; (8007050 <atan+0x310>)
 8006fbe:	e6dd      	b.n	8006d7c <atan+0x3c>
 8006fc0:	8800759c 	.word	0x8800759c
 8006fc4:	7e37e43c 	.word	0x7e37e43c
 8006fc8:	e322da11 	.word	0xe322da11
 8006fcc:	3f90ad3a 	.word	0x3f90ad3a
 8006fd0:	24760deb 	.word	0x24760deb
 8006fd4:	3fa97b4b 	.word	0x3fa97b4b
 8006fd8:	a0d03d51 	.word	0xa0d03d51
 8006fdc:	3fb10d66 	.word	0x3fb10d66
 8006fe0:	c54c206e 	.word	0xc54c206e
 8006fe4:	3fb745cd 	.word	0x3fb745cd
 8006fe8:	920083ff 	.word	0x920083ff
 8006fec:	3fc24924 	.word	0x3fc24924
 8006ff0:	5555550d 	.word	0x5555550d
 8006ff4:	3fd55555 	.word	0x3fd55555
 8006ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006ffc:	bfa2b444 	.word	0xbfa2b444
 8007000:	52defd9a 	.word	0x52defd9a
 8007004:	3fadde2d 	.word	0x3fadde2d
 8007008:	af749a6d 	.word	0xaf749a6d
 800700c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007010:	fe231671 	.word	0xfe231671
 8007014:	3fbc71c6 	.word	0x3fbc71c6
 8007018:	9998ebc4 	.word	0x9998ebc4
 800701c:	3fc99999 	.word	0x3fc99999
 8007020:	440fffff 	.word	0x440fffff
 8007024:	7ff00000 	.word	0x7ff00000
 8007028:	54442d18 	.word	0x54442d18
 800702c:	3ff921fb 	.word	0x3ff921fb
 8007030:	3fdbffff 	.word	0x3fdbffff
 8007034:	3ff00000 	.word	0x3ff00000
 8007038:	3ff2ffff 	.word	0x3ff2ffff
 800703c:	40037fff 	.word	0x40037fff
 8007040:	3ff80000 	.word	0x3ff80000
 8007044:	bff00000 	.word	0xbff00000
 8007048:	08008308 	.word	0x08008308
 800704c:	080082e8 	.word	0x080082e8
 8007050:	bff921fb 	.word	0xbff921fb

08007054 <fabs>:
 8007054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007058:	4619      	mov	r1, r3
 800705a:	4770      	bx	lr

0800705c <pow>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	b08f      	sub	sp, #60	; 0x3c
 8007062:	461d      	mov	r5, r3
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	4614      	mov	r4, r2
 800706a:	f000 f9a9 	bl	80073c0 <__ieee754_pow>
 800706e:	4fa1      	ldr	r7, [pc, #644]	; (80072f4 <pow+0x298>)
 8007070:	e9cd 0100 	strd	r0, r1, [sp]
 8007074:	f997 3000 	ldrsb.w	r3, [r7]
 8007078:	463e      	mov	r6, r7
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	3301      	adds	r3, #1
 800707e:	d05f      	beq.n	8007140 <pow+0xe4>
 8007080:	4622      	mov	r2, r4
 8007082:	462b      	mov	r3, r5
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 fcb8 	bl	80009fc <__aeabi_dcmpun>
 800708c:	4682      	mov	sl, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d156      	bne.n	8007140 <pow+0xe4>
 8007092:	4642      	mov	r2, r8
 8007094:	464b      	mov	r3, r9
 8007096:	4640      	mov	r0, r8
 8007098:	4649      	mov	r1, r9
 800709a:	f7f9 fcaf 	bl	80009fc <__aeabi_dcmpun>
 800709e:	9003      	str	r0, [sp, #12]
 80070a0:	b1e8      	cbz	r0, 80070de <pow+0x82>
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 fc75 	bl	8000998 <__aeabi_dcmpeq>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d046      	beq.n	8007140 <pow+0xe4>
 80070b2:	2301      	movs	r3, #1
 80070b4:	2200      	movs	r2, #0
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	4b8f      	ldr	r3, [pc, #572]	; (80072f8 <pow+0x29c>)
 80070ba:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80070be:	9305      	str	r3, [sp, #20]
 80070c0:	4b8e      	ldr	r3, [pc, #568]	; (80072fc <pow+0x2a0>)
 80070c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80070c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d031      	beq.n	8007138 <pow+0xdc>
 80070d4:	a804      	add	r0, sp, #16
 80070d6:	f000 ff2f 	bl	8007f38 <matherr>
 80070da:	bb38      	cbnz	r0, 800712c <pow+0xd0>
 80070dc:	e058      	b.n	8007190 <pow+0x134>
 80070de:	f04f 0a00 	mov.w	sl, #0
 80070e2:	f04f 0b00 	mov.w	fp, #0
 80070e6:	4652      	mov	r2, sl
 80070e8:	465b      	mov	r3, fp
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 fc53 	bl	8000998 <__aeabi_dcmpeq>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d051      	beq.n	800719a <pow+0x13e>
 80070f6:	4652      	mov	r2, sl
 80070f8:	465b      	mov	r3, fp
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 fc4b 	bl	8000998 <__aeabi_dcmpeq>
 8007102:	4606      	mov	r6, r0
 8007104:	b308      	cbz	r0, 800714a <pow+0xee>
 8007106:	2301      	movs	r3, #1
 8007108:	9304      	str	r3, [sp, #16]
 800710a:	4b7b      	ldr	r3, [pc, #492]	; (80072f8 <pow+0x29c>)
 800710c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007118:	930c      	str	r3, [sp, #48]	; 0x30
 800711a:	9b02      	ldr	r3, [sp, #8]
 800711c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0d7      	beq.n	80070d4 <pow+0x78>
 8007124:	2200      	movs	r2, #0
 8007126:	4b75      	ldr	r3, [pc, #468]	; (80072fc <pow+0x2a0>)
 8007128:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800712c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800712e:	b11b      	cbz	r3, 8007138 <pow+0xdc>
 8007130:	f7fe fa66 	bl	8005600 <__errno>
 8007134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007136:	6003      	str	r3, [r0, #0]
 8007138:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800713c:	e9cd 3400 	strd	r3, r4, [sp]
 8007140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007144:	b00f      	add	sp, #60	; 0x3c
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	4620      	mov	r0, r4
 800714c:	4629      	mov	r1, r5
 800714e:	f000 feed 	bl	8007f2c <finite>
 8007152:	2800      	cmp	r0, #0
 8007154:	d0f4      	beq.n	8007140 <pow+0xe4>
 8007156:	4652      	mov	r2, sl
 8007158:	465b      	mov	r3, fp
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 fc25 	bl	80009ac <__aeabi_dcmplt>
 8007162:	2800      	cmp	r0, #0
 8007164:	d0ec      	beq.n	8007140 <pow+0xe4>
 8007166:	2301      	movs	r3, #1
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	4b63      	ldr	r3, [pc, #396]	; (80072f8 <pow+0x29c>)
 800716c:	960c      	str	r6, [sp, #48]	; 0x30
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	f997 3000 	ldrsb.w	r3, [r7]
 8007174:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007178:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800717c:	b913      	cbnz	r3, 8007184 <pow+0x128>
 800717e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007182:	e7a7      	b.n	80070d4 <pow+0x78>
 8007184:	2000      	movs	r0, #0
 8007186:	495e      	ldr	r1, [pc, #376]	; (8007300 <pow+0x2a4>)
 8007188:	2b02      	cmp	r3, #2
 800718a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800718e:	d1a1      	bne.n	80070d4 <pow+0x78>
 8007190:	f7fe fa36 	bl	8005600 <__errno>
 8007194:	2321      	movs	r3, #33	; 0x21
 8007196:	6003      	str	r3, [r0, #0]
 8007198:	e7c8      	b.n	800712c <pow+0xd0>
 800719a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800719e:	f000 fec5 	bl	8007f2c <finite>
 80071a2:	9002      	str	r0, [sp, #8]
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d177      	bne.n	8007298 <pow+0x23c>
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f000 febe 	bl	8007f2c <finite>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d071      	beq.n	8007298 <pow+0x23c>
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f000 feb8 	bl	8007f2c <finite>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d06b      	beq.n	8007298 <pow+0x23c>
 80071c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7f9 fc18 	bl	80009fc <__aeabi_dcmpun>
 80071cc:	f997 7000 	ldrsb.w	r7, [r7]
 80071d0:	4b49      	ldr	r3, [pc, #292]	; (80072f8 <pow+0x29c>)
 80071d2:	b1a0      	cbz	r0, 80071fe <pow+0x1a2>
 80071d4:	2201      	movs	r2, #1
 80071d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80071e0:	930c      	str	r3, [sp, #48]	; 0x30
 80071e2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d0c9      	beq.n	800717e <pow+0x122>
 80071ea:	4652      	mov	r2, sl
 80071ec:	465b      	mov	r3, fp
 80071ee:	4650      	mov	r0, sl
 80071f0:	4659      	mov	r1, fp
 80071f2:	f7f9 fa93 	bl	800071c <__aeabi_ddiv>
 80071f6:	2f02      	cmp	r7, #2
 80071f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071fc:	e7c7      	b.n	800718e <pow+0x132>
 80071fe:	2203      	movs	r2, #3
 8007200:	900c      	str	r0, [sp, #48]	; 0x30
 8007202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	2200      	movs	r2, #0
 800720c:	4b3d      	ldr	r3, [pc, #244]	; (8007304 <pow+0x2a8>)
 800720e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007212:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007216:	f7f9 f957 	bl	80004c8 <__aeabi_dmul>
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	bb17      	cbnz	r7, 8007266 <pow+0x20a>
 8007220:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007224:	4b38      	ldr	r3, [pc, #224]	; (8007308 <pow+0x2ac>)
 8007226:	4640      	mov	r0, r8
 8007228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800722c:	4649      	mov	r1, r9
 800722e:	4652      	mov	r2, sl
 8007230:	465b      	mov	r3, fp
 8007232:	f7f9 fbbb 	bl	80009ac <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	d054      	beq.n	80072e4 <pow+0x288>
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f000 fe83 	bl	8007f48 <rint>
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 fba7 	bl	8000998 <__aeabi_dcmpeq>
 800724a:	b920      	cbnz	r0, 8007256 <pow+0x1fa>
 800724c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007250:	4b2e      	ldr	r3, [pc, #184]	; (800730c <pow+0x2b0>)
 8007252:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007256:	f996 3000 	ldrsb.w	r3, [r6]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d142      	bne.n	80072e4 <pow+0x288>
 800725e:	f7fe f9cf 	bl	8005600 <__errno>
 8007262:	2322      	movs	r3, #34	; 0x22
 8007264:	e797      	b.n	8007196 <pow+0x13a>
 8007266:	2200      	movs	r2, #0
 8007268:	4b29      	ldr	r3, [pc, #164]	; (8007310 <pow+0x2b4>)
 800726a:	4640      	mov	r0, r8
 800726c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007270:	4649      	mov	r1, r9
 8007272:	4652      	mov	r2, sl
 8007274:	465b      	mov	r3, fp
 8007276:	f7f9 fb99 	bl	80009ac <__aeabi_dcmplt>
 800727a:	2800      	cmp	r0, #0
 800727c:	d0eb      	beq.n	8007256 <pow+0x1fa>
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f000 fe61 	bl	8007f48 <rint>
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	f7f9 fb85 	bl	8000998 <__aeabi_dcmpeq>
 800728e:	2800      	cmp	r0, #0
 8007290:	d1e1      	bne.n	8007256 <pow+0x1fa>
 8007292:	2200      	movs	r2, #0
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <pow+0x2a4>)
 8007296:	e7dc      	b.n	8007252 <pow+0x1f6>
 8007298:	2200      	movs	r2, #0
 800729a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800729e:	2300      	movs	r3, #0
 80072a0:	f7f9 fb7a 	bl	8000998 <__aeabi_dcmpeq>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f af4b 	beq.w	8007140 <pow+0xe4>
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f000 fe3d 	bl	8007f2c <finite>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	f43f af44 	beq.w	8007140 <pow+0xe4>
 80072b8:	4620      	mov	r0, r4
 80072ba:	4629      	mov	r1, r5
 80072bc:	f000 fe36 	bl	8007f2c <finite>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f43f af3d 	beq.w	8007140 <pow+0xe4>
 80072c6:	2304      	movs	r3, #4
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <pow+0x29c>)
 80072cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	2300      	movs	r3, #0
 80072d4:	2400      	movs	r4, #0
 80072d6:	930c      	str	r3, [sp, #48]	; 0x30
 80072d8:	2300      	movs	r3, #0
 80072da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80072de:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80072e2:	e7b8      	b.n	8007256 <pow+0x1fa>
 80072e4:	a804      	add	r0, sp, #16
 80072e6:	f000 fe27 	bl	8007f38 <matherr>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f47f af1e 	bne.w	800712c <pow+0xd0>
 80072f0:	e7b5      	b.n	800725e <pow+0x202>
 80072f2:	bf00      	nop
 80072f4:	2000007c 	.word	0x2000007c
 80072f8:	08008328 	.word	0x08008328
 80072fc:	3ff00000 	.word	0x3ff00000
 8007300:	fff00000 	.word	0xfff00000
 8007304:	3fe00000 	.word	0x3fe00000
 8007308:	47efffff 	.word	0x47efffff
 800730c:	c7efffff 	.word	0xc7efffff
 8007310:	7ff00000 	.word	0x7ff00000

08007314 <sqrt>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	b08b      	sub	sp, #44	; 0x2c
 800731a:	4604      	mov	r4, r0
 800731c:	460d      	mov	r5, r1
 800731e:	f000 fd59 	bl	8007dd4 <__ieee754_sqrt>
 8007322:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <sqrt+0xa0>)
 8007324:	4680      	mov	r8, r0
 8007326:	f993 a000 	ldrsb.w	sl, [r3]
 800732a:	4689      	mov	r9, r1
 800732c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007330:	d02b      	beq.n	800738a <sqrt+0x76>
 8007332:	4622      	mov	r2, r4
 8007334:	462b      	mov	r3, r5
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f9 fb5f 	bl	80009fc <__aeabi_dcmpun>
 800733e:	4683      	mov	fp, r0
 8007340:	bb18      	cbnz	r0, 800738a <sqrt+0x76>
 8007342:	2600      	movs	r6, #0
 8007344:	2700      	movs	r7, #0
 8007346:	4632      	mov	r2, r6
 8007348:	463b      	mov	r3, r7
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f7f9 fb2d 	bl	80009ac <__aeabi_dcmplt>
 8007352:	b1d0      	cbz	r0, 800738a <sqrt+0x76>
 8007354:	2301      	movs	r3, #1
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <sqrt+0xa4>)
 800735a:	f8cd b020 	str.w	fp, [sp, #32]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007364:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	d112      	bne.n	8007394 <sqrt+0x80>
 800736e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007372:	4668      	mov	r0, sp
 8007374:	f000 fde0 	bl	8007f38 <matherr>
 8007378:	b1b8      	cbz	r0, 80073aa <sqrt+0x96>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	b11b      	cbz	r3, 8007386 <sqrt+0x72>
 800737e:	f7fe f93f 	bl	8005600 <__errno>
 8007382:	9b08      	ldr	r3, [sp, #32]
 8007384:	6003      	str	r3, [r0, #0]
 8007386:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800738a:	4640      	mov	r0, r8
 800738c:	4649      	mov	r1, r9
 800738e:	b00b      	add	sp, #44	; 0x2c
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 f9be 	bl	800071c <__aeabi_ddiv>
 80073a0:	f1ba 0f02 	cmp.w	sl, #2
 80073a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073a8:	d1e3      	bne.n	8007372 <sqrt+0x5e>
 80073aa:	f7fe f929 	bl	8005600 <__errno>
 80073ae:	2321      	movs	r3, #33	; 0x21
 80073b0:	6003      	str	r3, [r0, #0]
 80073b2:	e7e2      	b.n	800737a <sqrt+0x66>
 80073b4:	2000007c 	.word	0x2000007c
 80073b8:	0800832c 	.word	0x0800832c
 80073bc:	00000000 	.word	0x00000000

080073c0 <__ieee754_pow>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	b091      	sub	sp, #68	; 0x44
 80073c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073ca:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80073ce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80073d2:	ea55 0302 	orrs.w	r3, r5, r2
 80073d6:	4607      	mov	r7, r0
 80073d8:	4688      	mov	r8, r1
 80073da:	f000 84b7 	beq.w	8007d4c <__ieee754_pow+0x98c>
 80073de:	4b80      	ldr	r3, [pc, #512]	; (80075e0 <__ieee754_pow+0x220>)
 80073e0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80073e4:	429c      	cmp	r4, r3
 80073e6:	4689      	mov	r9, r1
 80073e8:	4682      	mov	sl, r0
 80073ea:	dc09      	bgt.n	8007400 <__ieee754_pow+0x40>
 80073ec:	d103      	bne.n	80073f6 <__ieee754_pow+0x36>
 80073ee:	b938      	cbnz	r0, 8007400 <__ieee754_pow+0x40>
 80073f0:	42a5      	cmp	r5, r4
 80073f2:	dc0d      	bgt.n	8007410 <__ieee754_pow+0x50>
 80073f4:	e001      	b.n	80073fa <__ieee754_pow+0x3a>
 80073f6:	429d      	cmp	r5, r3
 80073f8:	dc02      	bgt.n	8007400 <__ieee754_pow+0x40>
 80073fa:	429d      	cmp	r5, r3
 80073fc:	d10e      	bne.n	800741c <__ieee754_pow+0x5c>
 80073fe:	b16a      	cbz	r2, 800741c <__ieee754_pow+0x5c>
 8007400:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007404:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007408:	ea54 030a 	orrs.w	r3, r4, sl
 800740c:	f000 849e 	beq.w	8007d4c <__ieee754_pow+0x98c>
 8007410:	4874      	ldr	r0, [pc, #464]	; (80075e4 <__ieee754_pow+0x224>)
 8007412:	b011      	add	sp, #68	; 0x44
 8007414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	f000 bd90 	b.w	8007f3c <nan>
 800741c:	f1b9 0f00 	cmp.w	r9, #0
 8007420:	da53      	bge.n	80074ca <__ieee754_pow+0x10a>
 8007422:	4b71      	ldr	r3, [pc, #452]	; (80075e8 <__ieee754_pow+0x228>)
 8007424:	429d      	cmp	r5, r3
 8007426:	dc4e      	bgt.n	80074c6 <__ieee754_pow+0x106>
 8007428:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800742c:	429d      	cmp	r5, r3
 800742e:	dd4c      	ble.n	80074ca <__ieee754_pow+0x10a>
 8007430:	152b      	asrs	r3, r5, #20
 8007432:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007436:	2b14      	cmp	r3, #20
 8007438:	dd28      	ble.n	800748c <__ieee754_pow+0xcc>
 800743a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800743e:	fa22 f103 	lsr.w	r1, r2, r3
 8007442:	fa01 f303 	lsl.w	r3, r1, r3
 8007446:	4293      	cmp	r3, r2
 8007448:	d13f      	bne.n	80074ca <__ieee754_pow+0x10a>
 800744a:	f001 0101 	and.w	r1, r1, #1
 800744e:	f1c1 0302 	rsb	r3, r1, #2
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2a00      	cmp	r2, #0
 8007456:	d15c      	bne.n	8007512 <__ieee754_pow+0x152>
 8007458:	4b61      	ldr	r3, [pc, #388]	; (80075e0 <__ieee754_pow+0x220>)
 800745a:	429d      	cmp	r5, r3
 800745c:	d126      	bne.n	80074ac <__ieee754_pow+0xec>
 800745e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007462:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007466:	ea53 030a 	orrs.w	r3, r3, sl
 800746a:	f000 846f 	beq.w	8007d4c <__ieee754_pow+0x98c>
 800746e:	4b5f      	ldr	r3, [pc, #380]	; (80075ec <__ieee754_pow+0x22c>)
 8007470:	429c      	cmp	r4, r3
 8007472:	dd2c      	ble.n	80074ce <__ieee754_pow+0x10e>
 8007474:	2e00      	cmp	r6, #0
 8007476:	f280 846f 	bge.w	8007d58 <__ieee754_pow+0x998>
 800747a:	f04f 0b00 	mov.w	fp, #0
 800747e:	f04f 0c00 	mov.w	ip, #0
 8007482:	4658      	mov	r0, fp
 8007484:	4661      	mov	r1, ip
 8007486:	b011      	add	sp, #68	; 0x44
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	2a00      	cmp	r2, #0
 800748e:	d13e      	bne.n	800750e <__ieee754_pow+0x14e>
 8007490:	f1c3 0314 	rsb	r3, r3, #20
 8007494:	fa45 f103 	asr.w	r1, r5, r3
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	42ab      	cmp	r3, r5
 800749e:	f040 8463 	bne.w	8007d68 <__ieee754_pow+0x9a8>
 80074a2:	f001 0101 	and.w	r1, r1, #1
 80074a6:	f1c1 0302 	rsb	r3, r1, #2
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4b50      	ldr	r3, [pc, #320]	; (80075f0 <__ieee754_pow+0x230>)
 80074ae:	429d      	cmp	r5, r3
 80074b0:	d114      	bne.n	80074dc <__ieee754_pow+0x11c>
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	f280 8454 	bge.w	8007d60 <__ieee754_pow+0x9a0>
 80074b8:	463a      	mov	r2, r7
 80074ba:	4643      	mov	r3, r8
 80074bc:	2000      	movs	r0, #0
 80074be:	494c      	ldr	r1, [pc, #304]	; (80075f0 <__ieee754_pow+0x230>)
 80074c0:	f7f9 f92c 	bl	800071c <__aeabi_ddiv>
 80074c4:	e013      	b.n	80074ee <__ieee754_pow+0x12e>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e7c3      	b.n	8007452 <__ieee754_pow+0x92>
 80074ca:	2300      	movs	r3, #0
 80074cc:	e7c1      	b.n	8007452 <__ieee754_pow+0x92>
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	dad3      	bge.n	800747a <__ieee754_pow+0xba>
 80074d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80074d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80074da:	e7d2      	b.n	8007482 <__ieee754_pow+0xc2>
 80074dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80074e0:	d108      	bne.n	80074f4 <__ieee754_pow+0x134>
 80074e2:	463a      	mov	r2, r7
 80074e4:	4643      	mov	r3, r8
 80074e6:	4638      	mov	r0, r7
 80074e8:	4641      	mov	r1, r8
 80074ea:	f7f8 ffed 	bl	80004c8 <__aeabi_dmul>
 80074ee:	4683      	mov	fp, r0
 80074f0:	468c      	mov	ip, r1
 80074f2:	e7c6      	b.n	8007482 <__ieee754_pow+0xc2>
 80074f4:	4b3f      	ldr	r3, [pc, #252]	; (80075f4 <__ieee754_pow+0x234>)
 80074f6:	429e      	cmp	r6, r3
 80074f8:	d10b      	bne.n	8007512 <__ieee754_pow+0x152>
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	db08      	blt.n	8007512 <__ieee754_pow+0x152>
 8007500:	4638      	mov	r0, r7
 8007502:	4641      	mov	r1, r8
 8007504:	b011      	add	sp, #68	; 0x44
 8007506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f000 bc63 	b.w	8007dd4 <__ieee754_sqrt>
 800750e:	2300      	movs	r3, #0
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4638      	mov	r0, r7
 8007514:	4641      	mov	r1, r8
 8007516:	f7ff fd9d 	bl	8007054 <fabs>
 800751a:	4683      	mov	fp, r0
 800751c:	468c      	mov	ip, r1
 800751e:	f1ba 0f00 	cmp.w	sl, #0
 8007522:	d12b      	bne.n	800757c <__ieee754_pow+0x1bc>
 8007524:	b124      	cbz	r4, 8007530 <__ieee754_pow+0x170>
 8007526:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <__ieee754_pow+0x230>)
 8007528:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800752c:	429a      	cmp	r2, r3
 800752e:	d125      	bne.n	800757c <__ieee754_pow+0x1bc>
 8007530:	2e00      	cmp	r6, #0
 8007532:	da07      	bge.n	8007544 <__ieee754_pow+0x184>
 8007534:	465a      	mov	r2, fp
 8007536:	4663      	mov	r3, ip
 8007538:	2000      	movs	r0, #0
 800753a:	492d      	ldr	r1, [pc, #180]	; (80075f0 <__ieee754_pow+0x230>)
 800753c:	f7f9 f8ee 	bl	800071c <__aeabi_ddiv>
 8007540:	4683      	mov	fp, r0
 8007542:	468c      	mov	ip, r1
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	da9b      	bge.n	8007482 <__ieee754_pow+0xc2>
 800754a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007554:	4323      	orrs	r3, r4
 8007556:	d108      	bne.n	800756a <__ieee754_pow+0x1aa>
 8007558:	465a      	mov	r2, fp
 800755a:	4663      	mov	r3, ip
 800755c:	4658      	mov	r0, fp
 800755e:	4661      	mov	r1, ip
 8007560:	f7f8 fdfa 	bl	8000158 <__aeabi_dsub>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	e7aa      	b.n	80074c0 <__ieee754_pow+0x100>
 800756a:	9b00      	ldr	r3, [sp, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d188      	bne.n	8007482 <__ieee754_pow+0xc2>
 8007570:	4658      	mov	r0, fp
 8007572:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007576:	4683      	mov	fp, r0
 8007578:	469c      	mov	ip, r3
 800757a:	e782      	b.n	8007482 <__ieee754_pow+0xc2>
 800757c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007580:	f109 33ff 	add.w	r3, r9, #4294967295
 8007584:	930d      	str	r3, [sp, #52]	; 0x34
 8007586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	d104      	bne.n	8007598 <__ieee754_pow+0x1d8>
 800758e:	463a      	mov	r2, r7
 8007590:	4643      	mov	r3, r8
 8007592:	4638      	mov	r0, r7
 8007594:	4641      	mov	r1, r8
 8007596:	e7e3      	b.n	8007560 <__ieee754_pow+0x1a0>
 8007598:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <__ieee754_pow+0x238>)
 800759a:	429d      	cmp	r5, r3
 800759c:	f340 80fe 	ble.w	800779c <__ieee754_pow+0x3dc>
 80075a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80075a4:	429d      	cmp	r5, r3
 80075a6:	dd0b      	ble.n	80075c0 <__ieee754_pow+0x200>
 80075a8:	4b10      	ldr	r3, [pc, #64]	; (80075ec <__ieee754_pow+0x22c>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	dc0e      	bgt.n	80075cc <__ieee754_pow+0x20c>
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	f6bf af63 	bge.w	800747a <__ieee754_pow+0xba>
 80075b4:	a308      	add	r3, pc, #32	; (adr r3, 80075d8 <__ieee754_pow+0x218>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4610      	mov	r0, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	e794      	b.n	80074ea <__ieee754_pow+0x12a>
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <__ieee754_pow+0x23c>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	ddf3      	ble.n	80075ae <__ieee754_pow+0x1ee>
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <__ieee754_pow+0x230>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	dd19      	ble.n	8007600 <__ieee754_pow+0x240>
 80075cc:	2e00      	cmp	r6, #0
 80075ce:	dcf1      	bgt.n	80075b4 <__ieee754_pow+0x1f4>
 80075d0:	e753      	b.n	800747a <__ieee754_pow+0xba>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
 80075d8:	8800759c 	.word	0x8800759c
 80075dc:	7e37e43c 	.word	0x7e37e43c
 80075e0:	7ff00000 	.word	0x7ff00000
 80075e4:	080082e2 	.word	0x080082e2
 80075e8:	433fffff 	.word	0x433fffff
 80075ec:	3fefffff 	.word	0x3fefffff
 80075f0:	3ff00000 	.word	0x3ff00000
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	41e00000 	.word	0x41e00000
 80075fc:	3feffffe 	.word	0x3feffffe
 8007600:	4661      	mov	r1, ip
 8007602:	2200      	movs	r2, #0
 8007604:	4b60      	ldr	r3, [pc, #384]	; (8007788 <__ieee754_pow+0x3c8>)
 8007606:	4658      	mov	r0, fp
 8007608:	f7f8 fda6 	bl	8000158 <__aeabi_dsub>
 800760c:	a354      	add	r3, pc, #336	; (adr r3, 8007760 <__ieee754_pow+0x3a0>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	4604      	mov	r4, r0
 8007614:	460d      	mov	r5, r1
 8007616:	f7f8 ff57 	bl	80004c8 <__aeabi_dmul>
 800761a:	a353      	add	r3, pc, #332	; (adr r3, 8007768 <__ieee754_pow+0x3a8>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	4606      	mov	r6, r0
 8007622:	460f      	mov	r7, r1
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 ff4e 	bl	80004c8 <__aeabi_dmul>
 800762c:	2200      	movs	r2, #0
 800762e:	4682      	mov	sl, r0
 8007630:	468b      	mov	fp, r1
 8007632:	4b56      	ldr	r3, [pc, #344]	; (800778c <__ieee754_pow+0x3cc>)
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f8 ff46 	bl	80004c8 <__aeabi_dmul>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	a14b      	add	r1, pc, #300	; (adr r1, 8007770 <__ieee754_pow+0x3b0>)
 8007642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007646:	f7f8 fd87 	bl	8000158 <__aeabi_dsub>
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	f7f8 ff3b 	bl	80004c8 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	2000      	movs	r0, #0
 8007658:	494d      	ldr	r1, [pc, #308]	; (8007790 <__ieee754_pow+0x3d0>)
 800765a:	f7f8 fd7d 	bl	8000158 <__aeabi_dsub>
 800765e:	4622      	mov	r2, r4
 8007660:	462b      	mov	r3, r5
 8007662:	4680      	mov	r8, r0
 8007664:	4689      	mov	r9, r1
 8007666:	4620      	mov	r0, r4
 8007668:	4629      	mov	r1, r5
 800766a:	f7f8 ff2d 	bl	80004c8 <__aeabi_dmul>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 ff27 	bl	80004c8 <__aeabi_dmul>
 800767a:	a33f      	add	r3, pc, #252	; (adr r3, 8007778 <__ieee754_pow+0x3b8>)
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f7f8 ff22 	bl	80004c8 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4650      	mov	r0, sl
 800768a:	4659      	mov	r1, fp
 800768c:	f7f8 fd64 	bl	8000158 <__aeabi_dsub>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4604      	mov	r4, r0
 8007696:	460d      	mov	r5, r1
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 fd5e 	bl	800015c <__adddf3>
 80076a0:	2000      	movs	r0, #0
 80076a2:	468b      	mov	fp, r1
 80076a4:	4682      	mov	sl, r0
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	f7f8 fd55 	bl	8000158 <__aeabi_dsub>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7f8 fd4f 	bl	8000158 <__aeabi_dsub>
 80076ba:	9b00      	ldr	r3, [sp, #0]
 80076bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076be:	3b01      	subs	r3, #1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	4c32      	ldreq	r4, [pc, #200]	; (8007794 <__ieee754_pow+0x3d4>)
 80076ca:	4c2f      	ldrne	r4, [pc, #188]	; (8007788 <__ieee754_pow+0x3c8>)
 80076cc:	4606      	mov	r6, r0
 80076ce:	e9cd 3400 	strd	r3, r4, [sp]
 80076d2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076d6:	2400      	movs	r4, #0
 80076d8:	460f      	mov	r7, r1
 80076da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	f7f8 fd39 	bl	8000158 <__aeabi_dsub>
 80076e6:	4652      	mov	r2, sl
 80076e8:	465b      	mov	r3, fp
 80076ea:	f7f8 feed 	bl	80004c8 <__aeabi_dmul>
 80076ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076f2:	4680      	mov	r8, r0
 80076f4:	4689      	mov	r9, r1
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fee5 	bl	80004c8 <__aeabi_dmul>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f8 fd29 	bl	800015c <__adddf3>
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	4680      	mov	r8, r0
 8007710:	4689      	mov	r9, r1
 8007712:	4650      	mov	r0, sl
 8007714:	4659      	mov	r1, fp
 8007716:	f7f8 fed7 	bl	80004c8 <__aeabi_dmul>
 800771a:	4604      	mov	r4, r0
 800771c:	460d      	mov	r5, r1
 800771e:	460b      	mov	r3, r1
 8007720:	4602      	mov	r2, r0
 8007722:	4649      	mov	r1, r9
 8007724:	4640      	mov	r0, r8
 8007726:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800772a:	f7f8 fd17 	bl	800015c <__adddf3>
 800772e:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <__ieee754_pow+0x3d8>)
 8007730:	4682      	mov	sl, r0
 8007732:	4299      	cmp	r1, r3
 8007734:	460f      	mov	r7, r1
 8007736:	460e      	mov	r6, r1
 8007738:	f340 82e1 	ble.w	8007cfe <__ieee754_pow+0x93e>
 800773c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007740:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007744:	4303      	orrs	r3, r0
 8007746:	f000 81db 	beq.w	8007b00 <__ieee754_pow+0x740>
 800774a:	a30d      	add	r3, pc, #52	; (adr r3, 8007780 <__ieee754_pow+0x3c0>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007754:	f7f8 feb8 	bl	80004c8 <__aeabi_dmul>
 8007758:	a309      	add	r3, pc, #36	; (adr r3, 8007780 <__ieee754_pow+0x3c0>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	e6c4      	b.n	80074ea <__ieee754_pow+0x12a>
 8007760:	60000000 	.word	0x60000000
 8007764:	3ff71547 	.word	0x3ff71547
 8007768:	f85ddf44 	.word	0xf85ddf44
 800776c:	3e54ae0b 	.word	0x3e54ae0b
 8007770:	55555555 	.word	0x55555555
 8007774:	3fd55555 	.word	0x3fd55555
 8007778:	652b82fe 	.word	0x652b82fe
 800777c:	3ff71547 	.word	0x3ff71547
 8007780:	8800759c 	.word	0x8800759c
 8007784:	7e37e43c 	.word	0x7e37e43c
 8007788:	3ff00000 	.word	0x3ff00000
 800778c:	3fd00000 	.word	0x3fd00000
 8007790:	3fe00000 	.word	0x3fe00000
 8007794:	bff00000 	.word	0xbff00000
 8007798:	408fffff 	.word	0x408fffff
 800779c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80077a0:	f04f 0200 	mov.w	r2, #0
 80077a4:	da08      	bge.n	80077b8 <__ieee754_pow+0x3f8>
 80077a6:	4658      	mov	r0, fp
 80077a8:	4bcd      	ldr	r3, [pc, #820]	; (8007ae0 <__ieee754_pow+0x720>)
 80077aa:	4661      	mov	r1, ip
 80077ac:	f7f8 fe8c 	bl	80004c8 <__aeabi_dmul>
 80077b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80077b4:	4683      	mov	fp, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	1523      	asrs	r3, r4, #20
 80077ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077be:	4413      	add	r3, r2
 80077c0:	930c      	str	r3, [sp, #48]	; 0x30
 80077c2:	4bc8      	ldr	r3, [pc, #800]	; (8007ae4 <__ieee754_pow+0x724>)
 80077c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80077c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80077cc:	429c      	cmp	r4, r3
 80077ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80077d2:	dd08      	ble.n	80077e6 <__ieee754_pow+0x426>
 80077d4:	4bc4      	ldr	r3, [pc, #784]	; (8007ae8 <__ieee754_pow+0x728>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	f340 815b 	ble.w	8007a92 <__ieee754_pow+0x6d2>
 80077dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80077e2:	3301      	adds	r3, #1
 80077e4:	930c      	str	r3, [sp, #48]	; 0x30
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	4658      	mov	r0, fp
 80077ec:	4629      	mov	r1, r5
 80077ee:	4bbf      	ldr	r3, [pc, #764]	; (8007aec <__ieee754_pow+0x72c>)
 80077f0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80077f4:	444b      	add	r3, r9
 80077f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80077fe:	461a      	mov	r2, r3
 8007800:	4623      	mov	r3, r4
 8007802:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007806:	f7f8 fca7 	bl	8000158 <__aeabi_dsub>
 800780a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007816:	f7f8 fca1 	bl	800015c <__adddf3>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	2000      	movs	r0, #0
 8007820:	49b3      	ldr	r1, [pc, #716]	; (8007af0 <__ieee754_pow+0x730>)
 8007822:	f7f8 ff7b 	bl	800071c <__aeabi_ddiv>
 8007826:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	f7f8 fe49 	bl	80004c8 <__aeabi_dmul>
 8007836:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800783a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800783e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	106d      	asrs	r5, r5, #1
 8007848:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007852:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007856:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	4614      	mov	r4, r2
 8007860:	461d      	mov	r5, r3
 8007862:	f7f8 fe31 	bl	80004c8 <__aeabi_dmul>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4630      	mov	r0, r6
 800786c:	4639      	mov	r1, r7
 800786e:	f7f8 fc73 	bl	8000158 <__aeabi_dsub>
 8007872:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	4620      	mov	r0, r4
 800787c:	4629      	mov	r1, r5
 800787e:	f7f8 fc6b 	bl	8000158 <__aeabi_dsub>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800788a:	f7f8 fc65 	bl	8000158 <__aeabi_dsub>
 800788e:	4652      	mov	r2, sl
 8007890:	465b      	mov	r3, fp
 8007892:	f7f8 fe19 	bl	80004c8 <__aeabi_dmul>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f8 fc5b 	bl	8000158 <__aeabi_dsub>
 80078a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80078a6:	f7f8 fe0f 	bl	80004c8 <__aeabi_dmul>
 80078aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	f7f8 fe07 	bl	80004c8 <__aeabi_dmul>
 80078ba:	a377      	add	r3, pc, #476	; (adr r3, 8007a98 <__ieee754_pow+0x6d8>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	f7f8 fe00 	bl	80004c8 <__aeabi_dmul>
 80078c8:	a375      	add	r3, pc, #468	; (adr r3, 8007aa0 <__ieee754_pow+0x6e0>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 fc45 	bl	800015c <__adddf3>
 80078d2:	4622      	mov	r2, r4
 80078d4:	462b      	mov	r3, r5
 80078d6:	f7f8 fdf7 	bl	80004c8 <__aeabi_dmul>
 80078da:	a373      	add	r3, pc, #460	; (adr r3, 8007aa8 <__ieee754_pow+0x6e8>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fc3c 	bl	800015c <__adddf3>
 80078e4:	4622      	mov	r2, r4
 80078e6:	462b      	mov	r3, r5
 80078e8:	f7f8 fdee 	bl	80004c8 <__aeabi_dmul>
 80078ec:	a370      	add	r3, pc, #448	; (adr r3, 8007ab0 <__ieee754_pow+0x6f0>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 fc33 	bl	800015c <__adddf3>
 80078f6:	4622      	mov	r2, r4
 80078f8:	462b      	mov	r3, r5
 80078fa:	f7f8 fde5 	bl	80004c8 <__aeabi_dmul>
 80078fe:	a36e      	add	r3, pc, #440	; (adr r3, 8007ab8 <__ieee754_pow+0x6f8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fc2a 	bl	800015c <__adddf3>
 8007908:	4622      	mov	r2, r4
 800790a:	462b      	mov	r3, r5
 800790c:	f7f8 fddc 	bl	80004c8 <__aeabi_dmul>
 8007910:	a36b      	add	r3, pc, #428	; (adr r3, 8007ac0 <__ieee754_pow+0x700>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fc21 	bl	800015c <__adddf3>
 800791a:	4622      	mov	r2, r4
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	462b      	mov	r3, r5
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fdcf 	bl	80004c8 <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fdc9 	bl	80004c8 <__aeabi_dmul>
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800793e:	4652      	mov	r2, sl
 8007940:	465b      	mov	r3, fp
 8007942:	f7f8 fc0b 	bl	800015c <__adddf3>
 8007946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800794a:	f7f8 fdbd 	bl	80004c8 <__aeabi_dmul>
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	f7f8 fc03 	bl	800015c <__adddf3>
 8007956:	4652      	mov	r2, sl
 8007958:	4606      	mov	r6, r0
 800795a:	460f      	mov	r7, r1
 800795c:	465b      	mov	r3, fp
 800795e:	4650      	mov	r0, sl
 8007960:	4659      	mov	r1, fp
 8007962:	f7f8 fdb1 	bl	80004c8 <__aeabi_dmul>
 8007966:	2200      	movs	r2, #0
 8007968:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <__ieee754_pow+0x734>)
 800796a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800796e:	f7f8 fbf5 	bl	800015c <__adddf3>
 8007972:	4632      	mov	r2, r6
 8007974:	463b      	mov	r3, r7
 8007976:	f7f8 fbf1 	bl	800015c <__adddf3>
 800797a:	9804      	ldr	r0, [sp, #16]
 800797c:	460d      	mov	r5, r1
 800797e:	4604      	mov	r4, r0
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4650      	mov	r0, sl
 8007986:	4659      	mov	r1, fp
 8007988:	f7f8 fd9e 	bl	80004c8 <__aeabi_dmul>
 800798c:	2200      	movs	r2, #0
 800798e:	4682      	mov	sl, r0
 8007990:	468b      	mov	fp, r1
 8007992:	4b58      	ldr	r3, [pc, #352]	; (8007af4 <__ieee754_pow+0x734>)
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fbde 	bl	8000158 <__aeabi_dsub>
 800799c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079a0:	f7f8 fbda 	bl	8000158 <__aeabi_dsub>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fbd4 	bl	8000158 <__aeabi_dsub>
 80079b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079b4:	f7f8 fd88 	bl	80004c8 <__aeabi_dmul>
 80079b8:	4622      	mov	r2, r4
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079c2:	462b      	mov	r3, r5
 80079c4:	f7f8 fd80 	bl	80004c8 <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f8 fbc4 	bl	800015c <__adddf3>
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f8 fbbc 	bl	800015c <__adddf3>
 80079e4:	a338      	add	r3, pc, #224	; (adr r3, 8007ac8 <__ieee754_pow+0x708>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	9804      	ldr	r0, [sp, #16]
 80079ec:	460d      	mov	r5, r1
 80079ee:	4604      	mov	r4, r0
 80079f0:	f7f8 fd6a 	bl	80004c8 <__aeabi_dmul>
 80079f4:	4652      	mov	r2, sl
 80079f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079fa:	465b      	mov	r3, fp
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fbaa 	bl	8000158 <__aeabi_dsub>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f7f8 fba4 	bl	8000158 <__aeabi_dsub>
 8007a10:	a32f      	add	r3, pc, #188	; (adr r3, 8007ad0 <__ieee754_pow+0x710>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fd57 	bl	80004c8 <__aeabi_dmul>
 8007a1a:	a32f      	add	r3, pc, #188	; (adr r3, 8007ad8 <__ieee754_pow+0x718>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	4606      	mov	r6, r0
 8007a22:	460f      	mov	r7, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fd4e 	bl	80004c8 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fb92 	bl	800015c <__adddf3>
 8007a38:	4b2f      	ldr	r3, [pc, #188]	; (8007af8 <__ieee754_pow+0x738>)
 8007a3a:	444b      	add	r3, r9
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fb8c 	bl	800015c <__adddf3>
 8007a44:	4604      	mov	r4, r0
 8007a46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a48:	460d      	mov	r5, r1
 8007a4a:	f7f8 fcd3 	bl	80003f4 <__aeabi_i2d>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460f      	mov	r7, r1
 8007a52:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <__ieee754_pow+0x73c>)
 8007a54:	4622      	mov	r2, r4
 8007a56:	444b      	add	r3, r9
 8007a58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a5c:	462b      	mov	r3, r5
 8007a5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a62:	f7f8 fb7b 	bl	800015c <__adddf3>
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	f7f8 fb77 	bl	800015c <__adddf3>
 8007a6e:	4632      	mov	r2, r6
 8007a70:	463b      	mov	r3, r7
 8007a72:	f7f8 fb73 	bl	800015c <__adddf3>
 8007a76:	9804      	ldr	r0, [sp, #16]
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	468b      	mov	fp, r1
 8007a80:	f7f8 fb6a 	bl	8000158 <__aeabi_dsub>
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	f7f8 fb66 	bl	8000158 <__aeabi_dsub>
 8007a8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a90:	e60b      	b.n	80076aa <__ieee754_pow+0x2ea>
 8007a92:	f04f 0801 	mov.w	r8, #1
 8007a96:	e6a8      	b.n	80077ea <__ieee754_pow+0x42a>
 8007a98:	4a454eef 	.word	0x4a454eef
 8007a9c:	3fca7e28 	.word	0x3fca7e28
 8007aa0:	93c9db65 	.word	0x93c9db65
 8007aa4:	3fcd864a 	.word	0x3fcd864a
 8007aa8:	a91d4101 	.word	0xa91d4101
 8007aac:	3fd17460 	.word	0x3fd17460
 8007ab0:	518f264d 	.word	0x518f264d
 8007ab4:	3fd55555 	.word	0x3fd55555
 8007ab8:	db6fabff 	.word	0xdb6fabff
 8007abc:	3fdb6db6 	.word	0x3fdb6db6
 8007ac0:	33333303 	.word	0x33333303
 8007ac4:	3fe33333 	.word	0x3fe33333
 8007ac8:	e0000000 	.word	0xe0000000
 8007acc:	3feec709 	.word	0x3feec709
 8007ad0:	dc3a03fd 	.word	0xdc3a03fd
 8007ad4:	3feec709 	.word	0x3feec709
 8007ad8:	145b01f5 	.word	0x145b01f5
 8007adc:	be3e2fe0 	.word	0xbe3e2fe0
 8007ae0:	43400000 	.word	0x43400000
 8007ae4:	0003988e 	.word	0x0003988e
 8007ae8:	000bb679 	.word	0x000bb679
 8007aec:	08008338 	.word	0x08008338
 8007af0:	3ff00000 	.word	0x3ff00000
 8007af4:	40080000 	.word	0x40080000
 8007af8:	08008358 	.word	0x08008358
 8007afc:	08008348 	.word	0x08008348
 8007b00:	a39b      	add	r3, pc, #620	; (adr r3, 8007d70 <__ieee754_pow+0x9b0>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	4640      	mov	r0, r8
 8007b08:	4649      	mov	r1, r9
 8007b0a:	f7f8 fb27 	bl	800015c <__adddf3>
 8007b0e:	4622      	mov	r2, r4
 8007b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b14:	462b      	mov	r3, r5
 8007b16:	4650      	mov	r0, sl
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fb1d 	bl	8000158 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b26:	f7f8 ff5f 	bl	80009e8 <__aeabi_dcmpgt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f47f ae0d 	bne.w	800774a <__ieee754_pow+0x38a>
 8007b30:	4aa3      	ldr	r2, [pc, #652]	; (8007dc0 <__ieee754_pow+0xa00>)
 8007b32:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f340 8103 	ble.w	8007d42 <__ieee754_pow+0x982>
 8007b3c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007b40:	2000      	movs	r0, #0
 8007b42:	151b      	asrs	r3, r3, #20
 8007b44:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007b48:	fa4a f303 	asr.w	r3, sl, r3
 8007b4c:	4433      	add	r3, r6
 8007b4e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007b52:	4f9c      	ldr	r7, [pc, #624]	; (8007dc4 <__ieee754_pow+0xa04>)
 8007b54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007b58:	4117      	asrs	r7, r2
 8007b5a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007b5e:	ea23 0107 	bic.w	r1, r3, r7
 8007b62:	f1c2 0214 	rsb	r2, r2, #20
 8007b66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007b6a:	fa4a fa02 	asr.w	sl, sl, r2
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	bfb8      	it	lt
 8007b7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007b7e:	f7f8 faeb 	bl	8000158 <__aeabi_dsub>
 8007b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	f7f8 fae5 	bl	800015c <__adddf3>
 8007b92:	a379      	add	r3, pc, #484	; (adr r3, 8007d78 <__ieee754_pow+0x9b8>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	2000      	movs	r0, #0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	f7f8 fc93 	bl	80004c8 <__aeabi_dmul>
 8007ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f8 fad3 	bl	8000158 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 facd 	bl	8000158 <__aeabi_dsub>
 8007bbe:	a370      	add	r3, pc, #448	; (adr r3, 8007d80 <__ieee754_pow+0x9c0>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fc80 	bl	80004c8 <__aeabi_dmul>
 8007bc8:	a36f      	add	r3, pc, #444	; (adr r3, 8007d88 <__ieee754_pow+0x9c8>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7f8 fc77 	bl	80004c8 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 fabb 	bl	800015c <__adddf3>
 8007be6:	4604      	mov	r4, r0
 8007be8:	460d      	mov	r5, r1
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 fab3 	bl	800015c <__adddf3>
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4689      	mov	r9, r1
 8007bfe:	f7f8 faab 	bl	8000158 <__aeabi_dsub>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 faa5 	bl	8000158 <__aeabi_dsub>
 8007c0e:	4642      	mov	r2, r8
 8007c10:	4606      	mov	r6, r0
 8007c12:	460f      	mov	r7, r1
 8007c14:	464b      	mov	r3, r9
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fc55 	bl	80004c8 <__aeabi_dmul>
 8007c1e:	a35c      	add	r3, pc, #368	; (adr r3, 8007d90 <__ieee754_pow+0x9d0>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	f7f8 fc4e 	bl	80004c8 <__aeabi_dmul>
 8007c2c:	a35a      	add	r3, pc, #360	; (adr r3, 8007d98 <__ieee754_pow+0x9d8>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fa91 	bl	8000158 <__aeabi_dsub>
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	f7f8 fc45 	bl	80004c8 <__aeabi_dmul>
 8007c3e:	a358      	add	r3, pc, #352	; (adr r3, 8007da0 <__ieee754_pow+0x9e0>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fa8a 	bl	800015c <__adddf3>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f7f8 fc3c 	bl	80004c8 <__aeabi_dmul>
 8007c50:	a355      	add	r3, pc, #340	; (adr r3, 8007da8 <__ieee754_pow+0x9e8>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fa7f 	bl	8000158 <__aeabi_dsub>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f7f8 fc33 	bl	80004c8 <__aeabi_dmul>
 8007c62:	a353      	add	r3, pc, #332	; (adr r3, 8007db0 <__ieee754_pow+0x9f0>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fa78 	bl	800015c <__adddf3>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fc2a 	bl	80004c8 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 fa6c 	bl	8000158 <__aeabi_dsub>
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 fc1c 	bl	80004c8 <__aeabi_dmul>
 8007c90:	2200      	movs	r2, #0
 8007c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fa5b 	bl	8000158 <__aeabi_dsub>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007caa:	f7f8 fd37 	bl	800071c <__aeabi_ddiv>
 8007cae:	4632      	mov	r2, r6
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	4649      	mov	r1, r9
 8007cba:	f7f8 fc05 	bl	80004c8 <__aeabi_dmul>
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	f7f8 fa4b 	bl	800015c <__adddf3>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fa43 	bl	8000158 <__aeabi_dsub>
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	f7f8 fa3f 	bl	8000158 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	2000      	movs	r0, #0
 8007ce0:	4939      	ldr	r1, [pc, #228]	; (8007dc8 <__ieee754_pow+0xa08>)
 8007ce2:	f7f8 fa39 	bl	8000158 <__aeabi_dsub>
 8007ce6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007cea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007cee:	da2b      	bge.n	8007d48 <__ieee754_pow+0x988>
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	f000 f9b5 	bl	8008060 <scalbn>
 8007cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfa:	f7ff bbf6 	b.w	80074ea <__ieee754_pow+0x12a>
 8007cfe:	4b33      	ldr	r3, [pc, #204]	; (8007dcc <__ieee754_pow+0xa0c>)
 8007d00:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007d04:	429f      	cmp	r7, r3
 8007d06:	f77f af13 	ble.w	8007b30 <__ieee754_pow+0x770>
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <__ieee754_pow+0xa10>)
 8007d0c:	440b      	add	r3, r1
 8007d0e:	4303      	orrs	r3, r0
 8007d10:	d00b      	beq.n	8007d2a <__ieee754_pow+0x96a>
 8007d12:	a329      	add	r3, pc, #164	; (adr r3, 8007db8 <__ieee754_pow+0x9f8>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d1c:	f7f8 fbd4 	bl	80004c8 <__aeabi_dmul>
 8007d20:	a325      	add	r3, pc, #148	; (adr r3, 8007db8 <__ieee754_pow+0x9f8>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7ff bbe0 	b.w	80074ea <__ieee754_pow+0x12a>
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	f7f8 fa13 	bl	8000158 <__aeabi_dsub>
 8007d32:	4642      	mov	r2, r8
 8007d34:	464b      	mov	r3, r9
 8007d36:	f7f8 fe4d 	bl	80009d4 <__aeabi_dcmpge>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aef8 	beq.w	8007b30 <__ieee754_pow+0x770>
 8007d40:	e7e7      	b.n	8007d12 <__ieee754_pow+0x952>
 8007d42:	f04f 0a00 	mov.w	sl, #0
 8007d46:	e71e      	b.n	8007b86 <__ieee754_pow+0x7c6>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	e7d4      	b.n	8007cf6 <__ieee754_pow+0x936>
 8007d4c:	f04f 0b00 	mov.w	fp, #0
 8007d50:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007dc8 <__ieee754_pow+0xa08>
 8007d54:	f7ff bb95 	b.w	8007482 <__ieee754_pow+0xc2>
 8007d58:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007d5c:	f7ff bb91 	b.w	8007482 <__ieee754_pow+0xc2>
 8007d60:	4638      	mov	r0, r7
 8007d62:	4641      	mov	r1, r8
 8007d64:	f7ff bbc3 	b.w	80074ee <__ieee754_pow+0x12e>
 8007d68:	9200      	str	r2, [sp, #0]
 8007d6a:	f7ff bb9f 	b.w	80074ac <__ieee754_pow+0xec>
 8007d6e:	bf00      	nop
 8007d70:	652b82fe 	.word	0x652b82fe
 8007d74:	3c971547 	.word	0x3c971547
 8007d78:	00000000 	.word	0x00000000
 8007d7c:	3fe62e43 	.word	0x3fe62e43
 8007d80:	fefa39ef 	.word	0xfefa39ef
 8007d84:	3fe62e42 	.word	0x3fe62e42
 8007d88:	0ca86c39 	.word	0x0ca86c39
 8007d8c:	be205c61 	.word	0xbe205c61
 8007d90:	72bea4d0 	.word	0x72bea4d0
 8007d94:	3e663769 	.word	0x3e663769
 8007d98:	c5d26bf1 	.word	0xc5d26bf1
 8007d9c:	3ebbbd41 	.word	0x3ebbbd41
 8007da0:	af25de2c 	.word	0xaf25de2c
 8007da4:	3f11566a 	.word	0x3f11566a
 8007da8:	16bebd93 	.word	0x16bebd93
 8007dac:	3f66c16c 	.word	0x3f66c16c
 8007db0:	5555553e 	.word	0x5555553e
 8007db4:	3fc55555 	.word	0x3fc55555
 8007db8:	c2f8f359 	.word	0xc2f8f359
 8007dbc:	01a56e1f 	.word	0x01a56e1f
 8007dc0:	3fe00000 	.word	0x3fe00000
 8007dc4:	000fffff 	.word	0x000fffff
 8007dc8:	3ff00000 	.word	0x3ff00000
 8007dcc:	4090cbff 	.word	0x4090cbff
 8007dd0:	3f6f3400 	.word	0x3f6f3400

08007dd4 <__ieee754_sqrt>:
 8007dd4:	4b54      	ldr	r3, [pc, #336]	; (8007f28 <__ieee754_sqrt+0x154>)
 8007dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	438b      	bics	r3, r1
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460d      	mov	r5, r1
 8007de0:	460a      	mov	r2, r1
 8007de2:	460c      	mov	r4, r1
 8007de4:	d10f      	bne.n	8007e06 <__ieee754_sqrt+0x32>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	f7f8 fb6d 	bl	80004c8 <__aeabi_dmul>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4630      	mov	r0, r6
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 f9b1 	bl	800015c <__adddf3>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4629      	mov	r1, r5
 8007e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e06:	2900      	cmp	r1, #0
 8007e08:	4607      	mov	r7, r0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	dc0e      	bgt.n	8007e2c <__ieee754_sqrt+0x58>
 8007e0e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007e12:	ea5c 0707 	orrs.w	r7, ip, r7
 8007e16:	d0f2      	beq.n	8007dfe <__ieee754_sqrt+0x2a>
 8007e18:	b141      	cbz	r1, 8007e2c <__ieee754_sqrt+0x58>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	f7f8 f99b 	bl	8000158 <__aeabi_dsub>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	f7f8 fc79 	bl	800071c <__aeabi_ddiv>
 8007e2a:	e7e6      	b.n	8007dfa <__ieee754_sqrt+0x26>
 8007e2c:	1512      	asrs	r2, r2, #20
 8007e2e:	d074      	beq.n	8007f1a <__ieee754_sqrt+0x146>
 8007e30:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e34:	07d5      	lsls	r5, r2, #31
 8007e36:	f04f 0500 	mov.w	r5, #0
 8007e3a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e3e:	bf48      	it	mi
 8007e40:	0fd9      	lsrmi	r1, r3, #31
 8007e42:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007e46:	bf44      	itt	mi
 8007e48:	005b      	lslmi	r3, r3, #1
 8007e4a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007e4e:	1051      	asrs	r1, r2, #1
 8007e50:	0fda      	lsrs	r2, r3, #31
 8007e52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007e56:	4628      	mov	r0, r5
 8007e58:	2216      	movs	r2, #22
 8007e5a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	1987      	adds	r7, r0, r6
 8007e62:	42a7      	cmp	r7, r4
 8007e64:	bfde      	ittt	le
 8007e66:	19b8      	addle	r0, r7, r6
 8007e68:	1be4      	suble	r4, r4, r7
 8007e6a:	19ad      	addle	r5, r5, r6
 8007e6c:	0fdf      	lsrs	r7, r3, #31
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007e74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e7c:	d1f0      	bne.n	8007e60 <__ieee754_sqrt+0x8c>
 8007e7e:	f04f 0c20 	mov.w	ip, #32
 8007e82:	4696      	mov	lr, r2
 8007e84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007e88:	4284      	cmp	r4, r0
 8007e8a:	eb06 070e 	add.w	r7, r6, lr
 8007e8e:	dc02      	bgt.n	8007e96 <__ieee754_sqrt+0xc2>
 8007e90:	d112      	bne.n	8007eb8 <__ieee754_sqrt+0xe4>
 8007e92:	429f      	cmp	r7, r3
 8007e94:	d810      	bhi.n	8007eb8 <__ieee754_sqrt+0xe4>
 8007e96:	2f00      	cmp	r7, #0
 8007e98:	eb07 0e06 	add.w	lr, r7, r6
 8007e9c:	da42      	bge.n	8007f24 <__ieee754_sqrt+0x150>
 8007e9e:	f1be 0f00 	cmp.w	lr, #0
 8007ea2:	db3f      	blt.n	8007f24 <__ieee754_sqrt+0x150>
 8007ea4:	f100 0801 	add.w	r8, r0, #1
 8007ea8:	1a24      	subs	r4, r4, r0
 8007eaa:	4640      	mov	r0, r8
 8007eac:	429f      	cmp	r7, r3
 8007eae:	bf88      	it	hi
 8007eb0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007eb4:	1bdb      	subs	r3, r3, r7
 8007eb6:	4432      	add	r2, r6
 8007eb8:	0064      	lsls	r4, r4, #1
 8007eba:	f1bc 0c01 	subs.w	ip, ip, #1
 8007ebe:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007ec2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ec6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007eca:	d1dd      	bne.n	8007e88 <__ieee754_sqrt+0xb4>
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	d006      	beq.n	8007ede <__ieee754_sqrt+0x10a>
 8007ed0:	1c54      	adds	r4, r2, #1
 8007ed2:	bf0b      	itete	eq
 8007ed4:	4662      	moveq	r2, ip
 8007ed6:	3201      	addne	r2, #1
 8007ed8:	3501      	addeq	r5, #1
 8007eda:	f022 0201 	bicne.w	r2, r2, #1
 8007ede:	106b      	asrs	r3, r5, #1
 8007ee0:	0852      	lsrs	r2, r2, #1
 8007ee2:	07e8      	lsls	r0, r5, #31
 8007ee4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ee8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007eec:	bf48      	it	mi
 8007eee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007ef2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	e781      	b.n	8007dfe <__ieee754_sqrt+0x2a>
 8007efa:	0adc      	lsrs	r4, r3, #11
 8007efc:	3915      	subs	r1, #21
 8007efe:	055b      	lsls	r3, r3, #21
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	d0fa      	beq.n	8007efa <__ieee754_sqrt+0x126>
 8007f04:	02e6      	lsls	r6, r4, #11
 8007f06:	d50a      	bpl.n	8007f1e <__ieee754_sqrt+0x14a>
 8007f08:	f1c2 0020 	rsb	r0, r2, #32
 8007f0c:	fa23 f000 	lsr.w	r0, r3, r0
 8007f10:	1e55      	subs	r5, r2, #1
 8007f12:	4093      	lsls	r3, r2
 8007f14:	4304      	orrs	r4, r0
 8007f16:	1b4a      	subs	r2, r1, r5
 8007f18:	e78a      	b.n	8007e30 <__ieee754_sqrt+0x5c>
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	e7f0      	b.n	8007f00 <__ieee754_sqrt+0x12c>
 8007f1e:	0064      	lsls	r4, r4, #1
 8007f20:	3201      	adds	r2, #1
 8007f22:	e7ef      	b.n	8007f04 <__ieee754_sqrt+0x130>
 8007f24:	4680      	mov	r8, r0
 8007f26:	e7bf      	b.n	8007ea8 <__ieee754_sqrt+0xd4>
 8007f28:	7ff00000 	.word	0x7ff00000

08007f2c <finite>:
 8007f2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007f30:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007f34:	0fc0      	lsrs	r0, r0, #31
 8007f36:	4770      	bx	lr

08007f38 <matherr>:
 8007f38:	2000      	movs	r0, #0
 8007f3a:	4770      	bx	lr

08007f3c <nan>:
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4901      	ldr	r1, [pc, #4]	; (8007f44 <nan+0x8>)
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	7ff80000 	.word	0x7ff80000

08007f48 <rint>:
 8007f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f4e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8007f52:	f1bc 0f13 	cmp.w	ip, #19
 8007f56:	4604      	mov	r4, r0
 8007f58:	460d      	mov	r5, r1
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007f62:	dc5a      	bgt.n	800801a <rint+0xd2>
 8007f64:	f1bc 0f00 	cmp.w	ip, #0
 8007f68:	da2b      	bge.n	8007fc2 <rint+0x7a>
 8007f6a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007f6e:	4302      	orrs	r2, r0
 8007f70:	d023      	beq.n	8007fba <rint+0x72>
 8007f72:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007f76:	4302      	orrs	r2, r0
 8007f78:	4256      	negs	r6, r2
 8007f7a:	4316      	orrs	r6, r2
 8007f7c:	0c4b      	lsrs	r3, r1, #17
 8007f7e:	0b36      	lsrs	r6, r6, #12
 8007f80:	4934      	ldr	r1, [pc, #208]	; (8008054 <rint+0x10c>)
 8007f82:	045b      	lsls	r3, r3, #17
 8007f84:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007f88:	ea46 0503 	orr.w	r5, r6, r3
 8007f8c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007f90:	4602      	mov	r2, r0
 8007f92:	462b      	mov	r3, r5
 8007f94:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007f98:	4620      	mov	r0, r4
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f7f8 f8de 	bl	800015c <__adddf3>
 8007fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8007fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4622      	mov	r2, r4
 8007fac:	f7f8 f8d4 	bl	8000158 <__aeabi_dsub>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fb6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	b003      	add	sp, #12
 8007fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc2:	4a25      	ldr	r2, [pc, #148]	; (8008058 <rint+0x110>)
 8007fc4:	fa42 f20c 	asr.w	r2, r2, ip
 8007fc8:	4011      	ands	r1, r2
 8007fca:	4301      	orrs	r1, r0
 8007fcc:	d0f5      	beq.n	8007fba <rint+0x72>
 8007fce:	0852      	lsrs	r2, r2, #1
 8007fd0:	ea05 0102 	and.w	r1, r5, r2
 8007fd4:	ea50 0601 	orrs.w	r6, r0, r1
 8007fd8:	d00c      	beq.n	8007ff4 <rint+0xac>
 8007fda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fde:	f1bc 0f13 	cmp.w	ip, #19
 8007fe2:	bf0c      	ite	eq
 8007fe4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007fe8:	2600      	movne	r6, #0
 8007fea:	ea25 0202 	bic.w	r2, r5, r2
 8007fee:	fa43 f30c 	asr.w	r3, r3, ip
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	4917      	ldr	r1, [pc, #92]	; (8008054 <rint+0x10c>)
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007ffc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f8aa 	bl	800015c <__adddf3>
 8008008:	e9cd 0100 	strd	r0, r1, [sp]
 800800c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008010:	4622      	mov	r2, r4
 8008012:	462b      	mov	r3, r5
 8008014:	f7f8 f8a0 	bl	8000158 <__aeabi_dsub>
 8008018:	e008      	b.n	800802c <rint+0xe4>
 800801a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800801e:	dd08      	ble.n	8008032 <rint+0xea>
 8008020:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8008024:	d1c9      	bne.n	8007fba <rint+0x72>
 8008026:	4602      	mov	r2, r0
 8008028:	f7f8 f898 	bl	800015c <__adddf3>
 800802c:	4604      	mov	r4, r0
 800802e:	460d      	mov	r5, r1
 8008030:	e7c3      	b.n	8007fba <rint+0x72>
 8008032:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	40ca      	lsrs	r2, r1
 800803c:	4210      	tst	r0, r2
 800803e:	d0bc      	beq.n	8007fba <rint+0x72>
 8008040:	0852      	lsrs	r2, r2, #1
 8008042:	4210      	tst	r0, r2
 8008044:	bf1f      	itttt	ne
 8008046:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800804a:	ea20 0202 	bicne.w	r2, r0, r2
 800804e:	410e      	asrne	r6, r1
 8008050:	4316      	orrne	r6, r2
 8008052:	e7cf      	b.n	8007ff4 <rint+0xac>
 8008054:	08008368 	.word	0x08008368
 8008058:	000fffff 	.word	0x000fffff
 800805c:	00000000 	.word	0x00000000

08008060 <scalbn>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	4616      	mov	r6, r2
 8008064:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	460b      	mov	r3, r1
 800806e:	b982      	cbnz	r2, 8008092 <scalbn+0x32>
 8008070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008074:	4303      	orrs	r3, r0
 8008076:	d034      	beq.n	80080e2 <scalbn+0x82>
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <scalbn+0xd0>)
 800807a:	2200      	movs	r2, #0
 800807c:	f7f8 fa24 	bl	80004c8 <__aeabi_dmul>
 8008080:	4b2c      	ldr	r3, [pc, #176]	; (8008134 <scalbn+0xd4>)
 8008082:	4604      	mov	r4, r0
 8008084:	429e      	cmp	r6, r3
 8008086:	460d      	mov	r5, r1
 8008088:	da0d      	bge.n	80080a6 <scalbn+0x46>
 800808a:	a325      	add	r3, pc, #148	; (adr r3, 8008120 <scalbn+0xc0>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	e01c      	b.n	80080cc <scalbn+0x6c>
 8008092:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008096:	42ba      	cmp	r2, r7
 8008098:	d109      	bne.n	80080ae <scalbn+0x4e>
 800809a:	4602      	mov	r2, r0
 800809c:	f7f8 f85e 	bl	800015c <__adddf3>
 80080a0:	4604      	mov	r4, r0
 80080a2:	460d      	mov	r5, r1
 80080a4:	e01d      	b.n	80080e2 <scalbn+0x82>
 80080a6:	460b      	mov	r3, r1
 80080a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80080ac:	3a36      	subs	r2, #54	; 0x36
 80080ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80080b2:	4432      	add	r2, r6
 80080b4:	428a      	cmp	r2, r1
 80080b6:	dd0c      	ble.n	80080d2 <scalbn+0x72>
 80080b8:	4622      	mov	r2, r4
 80080ba:	462b      	mov	r3, r5
 80080bc:	a11a      	add	r1, pc, #104	; (adr r1, 8008128 <scalbn+0xc8>)
 80080be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c2:	f000 f83b 	bl	800813c <copysign>
 80080c6:	a318      	add	r3, pc, #96	; (adr r3, 8008128 <scalbn+0xc8>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f7f8 f9fc 	bl	80004c8 <__aeabi_dmul>
 80080d0:	e7e6      	b.n	80080a0 <scalbn+0x40>
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	dd08      	ble.n	80080e8 <scalbn+0x88>
 80080d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080e2:	4620      	mov	r0, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080ec:	da0b      	bge.n	8008106 <scalbn+0xa6>
 80080ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080f2:	429e      	cmp	r6, r3
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	dce0      	bgt.n	80080bc <scalbn+0x5c>
 80080fa:	a109      	add	r1, pc, #36	; (adr r1, 8008120 <scalbn+0xc0>)
 80080fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008100:	f000 f81c 	bl	800813c <copysign>
 8008104:	e7c1      	b.n	800808a <scalbn+0x2a>
 8008106:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800810a:	3236      	adds	r2, #54	; 0x36
 800810c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008110:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	2200      	movs	r2, #0
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <scalbn+0xd8>)
 800811c:	e7d6      	b.n	80080cc <scalbn+0x6c>
 800811e:	bf00      	nop
 8008120:	c2f8f359 	.word	0xc2f8f359
 8008124:	01a56e1f 	.word	0x01a56e1f
 8008128:	8800759c 	.word	0x8800759c
 800812c:	7e37e43c 	.word	0x7e37e43c
 8008130:	43500000 	.word	0x43500000
 8008134:	ffff3cb0 	.word	0xffff3cb0
 8008138:	3c900000 	.word	0x3c900000

0800813c <copysign>:
 800813c:	b530      	push	{r4, r5, lr}
 800813e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008146:	ea42 0503 	orr.w	r5, r2, r3
 800814a:	4629      	mov	r1, r5
 800814c:	bd30      	pop	{r4, r5, pc}
	...

08008150 <_init>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr

0800815c <_fini>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr
