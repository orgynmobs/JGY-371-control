
BluePill_Captador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800aae0  0800aae0  0001aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec0  0800aec0  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800aec0  0800aec0  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aec0  0800aec0  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800aec8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000268  0800b12c  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800b12c  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c810  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d75  00000000  00000000  0002ca9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a8a  00000000  00000000  0002fe38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e14  00000000  00000000  000488c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008abb0  00000000  00000000  000526d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000dd304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aac8 	.word	0x0800aac8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	0800aac8 	.word	0x0800aac8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HMC5883L_initialize+0x28>)
 80010c6:	221e      	movs	r2, #30
 80010c8:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HMC5883L_initialize+0x28>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2270      	movs	r2, #112	; 0x70
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f8ea 	bl	80012ac <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f82f 	bl	800113c <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 f840 	bl	8001164 <HMC5883L_setMode>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000284 	.word	0x20000284

080010ec <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HMC5883L_testConnection+0x48>)
 80010f4:	7818      	ldrb	r0, [r3, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HMC5883L_testConnection+0x4c>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	210a      	movs	r1, #10
 8001100:	f000 f89c 	bl	800123c <I2Cdev_readBytes>
 8001104:	4603      	mov	r3, r0
 8001106:	2b03      	cmp	r3, #3
 8001108:	d10f      	bne.n	800112a <HMC5883L_testConnection+0x3e>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HMC5883L_testConnection+0x4c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b48      	cmp	r3, #72	; 0x48
 8001110:	d109      	bne.n	8001126 <HMC5883L_testConnection+0x3a>
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HMC5883L_testConnection+0x4c>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	2b34      	cmp	r3, #52	; 0x34
 8001118:	d105      	bne.n	8001126 <HMC5883L_testConnection+0x3a>
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HMC5883L_testConnection+0x4c>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	2b33      	cmp	r3, #51	; 0x33
 8001120:	d101      	bne.n	8001126 <HMC5883L_testConnection+0x3a>
 8001122:	2301      	movs	r3, #1
 8001124:	e002      	b.n	800112c <HMC5883L_testConnection+0x40>
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HMC5883L_testConnection+0x40>
    }
    return false;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000284 	.word	0x20000284
 8001138:	20000288 	.word	0x20000288

0800113c <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HMC5883L_setGain+0x24>)
 8001148:	7818      	ldrb	r0, [r3, #0]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	015b      	lsls	r3, r3, #5
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	2101      	movs	r1, #1
 8001154:	f000 f8aa 	bl	80012ac <I2Cdev_writeByte>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000284 	.word	0x20000284

08001164 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <HMC5883L_setMode+0x28>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f898 	bl	80012ac <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HMC5883L_setMode+0x2c>)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	7013      	strb	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000284 	.word	0x20000284
 8001190:	2000028e 	.word	0x2000028e

08001194 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HMC5883L_getHeading+0x80>)
 80011a2:	7818      	ldrb	r0, [r3, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	2103      	movs	r1, #3
 80011ae:	f000 f845 	bl	800123c <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HMC5883L_getHeading+0x88>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <HMC5883L_getHeading+0x34>
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HMC5883L_getHeading+0x80>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f872 	bl	80012ac <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HMC5883L_getHeading+0x84>)
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	801a      	strh	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000284 	.word	0x20000284
 8001218:	20000288 	.word	0x20000288
 800121c:	2000028e 	.word	0x2000028e

08001220 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <I2Cdev_init+0x18>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000290 	.word	0x20000290

0800123c <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	460b      	mov	r3, r1
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001250:	8b3b      	ldrh	r3, [r7, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <I2Cdev_readBytes+0x1e>
 8001256:	8b3b      	ldrh	r3, [r7, #24]
 8001258:	e001      	b.n	800125e <I2Cdev_readBytes+0x22>
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <I2Cdev_readBytes+0x6c>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	b29b      	uxth	r3, r3
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	b299      	uxth	r1, r3
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	1dba      	adds	r2, r7, #6
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	f003 f896 	bl	80043a4 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <I2Cdev_readBytes+0x6c>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29b      	uxth	r3, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b299      	uxth	r1, r3
 8001284:	797b      	ldrb	r3, [r7, #5]
 8001286:	b29a      	uxth	r2, r3
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	f003 f986 	bl	80045a0 <HAL_I2C_Master_Receive>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <I2Cdev_readBytes+0x62>
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	e000      	b.n	80012a0 <I2Cdev_readBytes+0x64>
    return -1;
 800129e:	23ff      	movs	r3, #255	; 0xff
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000290 	.word	0x20000290

080012ac <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	4613      	mov	r3, r2
 80012bc:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 80012be:	1d7b      	adds	r3, r7, #5
 80012c0:	79b9      	ldrb	r1, [r7, #6]
 80012c2:	79f8      	ldrb	r0, [r7, #7]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f000 f805 	bl	80012d4 <I2Cdev_writeBytes>
 80012ca:	4603      	mov	r3, r0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af04      	add	r7, sp, #16
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	460b      	mov	r3, r1
 80012e2:	71bb      	strb	r3, [r7, #6]
 80012e4:	4613      	mov	r3, r2
 80012e6:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <I2Cdev_writeBytes+0x58>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	b299      	uxth	r1, r3
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	b29c      	uxth	r4, r3
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001300:	9202      	str	r2, [sp, #8]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	4622      	mov	r2, r4
 800130c:	f003 fba2 	bl	8004a54 <HAL_I2C_Mem_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	b29b      	uxth	r3, r3
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	20000290 	.word	0x20000290

08001330 <MPU6050_Init>:
/* USER CODE BEGIN 0 */



uint8_t MPU6050_Init(I2C_HandleTypeDef hi2c)
{
 8001330:	b084      	sub	sp, #16
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af04      	add	r7, sp, #16
 8001338:	f107 0c10 	add.w	ip, r7, #16
 800133c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2275      	movs	r2, #117	; 0x75
 8001350:	21d0      	movs	r1, #208	; 0xd0
 8001352:	f107 0010 	add.w	r0, r7, #16
 8001356:	f003 fc77 	bl	8004c48 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b68      	cmp	r3, #104	; 0x68
 800135e:	d13d      	bne.n	80013dc <MPU6050_Init+0xac>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	226b      	movs	r2, #107	; 0x6b
 8001374:	21d0      	movs	r1, #208	; 0xd0
 8001376:	f107 0010 	add.w	r0, r7, #16
 800137a:	f003 fb6b 	bl	8004a54 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800137e:	2307      	movs	r3, #7
 8001380:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	1dbb      	adds	r3, r7, #6
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	2219      	movs	r2, #25
 8001392:	21d0      	movs	r1, #208	; 0xd0
 8001394:	f107 0010 	add.w	r0, r7, #16
 8001398:	f003 fb5c 	bl	8004a54 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	1dbb      	adds	r3, r7, #6
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	221c      	movs	r2, #28
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	f107 0010 	add.w	r0, r7, #16
 80013b6:	f003 fb4d 	bl	8004a54 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	1dbb      	adds	r3, r7, #6
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	221b      	movs	r2, #27
 80013ce:	21d0      	movs	r1, #208	; 0xd0
 80013d0:	f107 0010 	add.w	r0, r7, #16
 80013d4:	f003 fb3e 	bl	8004a54 <HAL_I2C_Mem_Write>
        return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <MPU6050_Init+0xae>
    }
    return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr

080013ec <Kalman_getAngle>:
    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b092      	sub	sp, #72	; 0x48
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f103 0420 	add.w	r4, r3, #32
 80013fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001402:	461a      	mov	r2, r3
 8001404:	4623      	mov	r3, r4
 8001406:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800140a:	f7fe fea5 	bl	8000158 <__aeabi_dsub>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800141c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001424:	f7ff f850 	bl	80004c8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe fe94 	bl	800015c <__adddf3>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800144a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144e:	f7ff f83b 	bl	80004c8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001460:	f7fe fe7a 	bl	8000158 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001472:	f7fe fe71 	bl	8000158 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fe6a 	bl	800015c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001494:	f7ff f818 	bl	80004c8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7fe fe5c 	bl	800015c <__adddf3>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014be:	f7ff f803 	bl	80004c8 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe fe45 	bl	8000158 <__aeabi_dsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014e8:	f7fe ffee 	bl	80004c8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fe30 	bl	8000158 <__aeabi_dsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800150e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001512:	f7fe ffd9 	bl	80004c8 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe1d 	bl	800015c <__adddf3>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f103 0410 	add.w	r4, r3, #16
 8001538:	e9d4 3400 	ldrd	r3, r4, [r4]
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	f7fe fe0c 	bl	800015c <__adddf3>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001552:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001556:	f7ff f8e1 	bl	800071c <__aeabi_ddiv>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800156c:	f7ff f8d6 	bl	800071c <__aeabi_ddiv>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f103 0418 	add.w	r4, r3, #24
 800157e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800158a:	f7fe fde5 	bl	8000158 <__aeabi_dsub>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800159c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015a4:	f7fe ff90 	bl	80004c8 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fdd4 	bl	800015c <__adddf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80015c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015cc:	f7fe ff7c 	bl	80004c8 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fdc0 	bl	800015c <__adddf3>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80015ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80015fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015fe:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800160c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001610:	f7fe ff5a 	bl	80004c8 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fd9c 	bl	8000158 <__aeabi_dsub>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001638:	f7fe ff46 	bl	80004c8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fd88 	bl	8000158 <__aeabi_dsub>
 8001648:	4603      	mov	r3, r0
 800164a:	460c      	mov	r4, r1
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001658:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800165c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001660:	f7fe ff32 	bl	80004c8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fd74 	bl	8000158 <__aeabi_dsub>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001680:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001688:	f7fe ff1e 	bl	80004c8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fd60 	bl	8000158 <__aeabi_dsub>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f103 0418 	add.w	r4, r3, #24
 80016a8:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 80016ac:	4618      	mov	r0, r3
 80016ae:	4621      	mov	r1, r4
 80016b0:	3748      	adds	r7, #72	; 0x48
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016b8 <MPU6050_Read_All>:



void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct,Kalman_t *Kalman1, Kalman_t *Kalman2) {
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b096      	sub	sp, #88	; 0x58
 80016bc:	af04      	add	r7, sp, #16
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	230e      	movs	r3, #14
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	223b      	movs	r2, #59	; 0x3b
 80016d8:	21d0      	movs	r1, #208	; 0xd0
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f003 fab4 	bl	8004c48 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80016e0:	7c3b      	ldrb	r3, [r7, #16]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	7c7b      	ldrb	r3, [r7, #17]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80016f2:	7cbb      	ldrb	r3, [r7, #18]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21a      	sxth	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001704:	7d3b      	ldrb	r3, [r7, #20]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	7d7b      	ldrb	r3, [r7, #21]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21a      	sxth	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001716:	7dbb      	ldrb	r3, [r7, #22]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	87fb      	strh	r3, [r7, #62]	; 0x3e
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001724:	7e3b      	ldrb	r3, [r7, #24]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	7e7b      	ldrb	r3, [r7, #25]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21a      	sxth	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001736:	7ebb      	ldrb	r3, [r7, #26]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	7efb      	ldrb	r3, [r7, #27]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21a      	sxth	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001748:	7f3b      	ldrb	r3, [r7, #28]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	7f7b      	ldrb	r3, [r7, #29]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b21a      	sxth	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe47 	bl	80003f4 <__aeabi_i2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4bb3      	ldr	r3, [pc, #716]	; (8001a38 <MPU6050_Read_All+0x380>)
 800176c:	f7fe ffd6 	bl	800071c <__aeabi_ddiv>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	e9c2 3402 	strd	r3, r4, [r2, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe37 	bl	80003f4 <__aeabi_i2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4bab      	ldr	r3, [pc, #684]	; (8001a38 <MPU6050_Read_All+0x380>)
 800178c:	f7fe ffc6 	bl	800071c <__aeabi_ddiv>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	e9c2 3404 	strd	r3, r4, [r2, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe27 	bl	80003f4 <__aeabi_i2d>
 80017a6:	a49e      	add	r4, pc, #632	; (adr r4, 8001a20 <MPU6050_Read_All+0x368>)
 80017a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4623      	mov	r3, r4
 80017b0:	f7fe ffb4 	bl	800071c <__aeabi_ddiv>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	e9c2 3406 	strd	r3, r4, [r2, #24]
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe15 	bl	80003f4 <__aeabi_i2d>
 80017ca:	a397      	add	r3, pc, #604	; (adr r3, 8001a28 <MPU6050_Read_All+0x370>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ffa4 	bl	800071c <__aeabi_ddiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe05 	bl	80003f4 <__aeabi_i2d>
 80017ea:	a38f      	add	r3, pc, #572	; (adr r3, 8001a28 <MPU6050_Read_All+0x370>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ff94 	bl	800071c <__aeabi_ddiv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fdf5 	bl	80003f4 <__aeabi_i2d>
 800180a:	a387      	add	r3, pc, #540	; (adr r3, 8001a28 <MPU6050_Read_All+0x370>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ff84 	bl	800071c <__aeabi_ddiv>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - DataStruct->timer) / 1000;
 800181e:	f001 fe19 	bl	8003454 <HAL_GetTick>
 8001822:	4603      	mov	r3, r0
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fdd5 	bl	80003d4 <__aeabi_ui2d>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001830:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	f7fe fc8e 	bl	8000158 <__aeabi_dsub>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	4618      	mov	r0, r3
 8001842:	4621      	mov	r1, r4
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <MPU6050_Read_All+0x384>)
 800184a:	f7fe ff67 	bl	800071c <__aeabi_ddiv>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    DataStruct->timer = HAL_GetTick();
 8001856:	f001 fdfd 	bl	8003454 <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fdb9 	bl	80003d4 <__aeabi_ui2d>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	fb03 f202 	mul.w	r2, r3, r2
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001884:	4619      	mov	r1, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800188c:	fb03 f301 	mul.w	r3, r3, r1
 8001890:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fdae 	bl	80003f4 <__aeabi_i2d>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	4618      	mov	r0, r3
 800189e:	4621      	mov	r1, r4
 80018a0:	f006 ff96 	bl	80087d0 <sqrt>
 80018a4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
if(roll_sqrt == 0){ DataStruct->roll = 0; }
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018b4:	f7ff f870 	bl	8000998 <__aeabi_dcmpeq>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <MPU6050_Read_All+0x216>
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 80018cc:	e01d      	b.n	800190a <MPU6050_Read_All+0x252>
else{
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fd8d 	bl	80003f4 <__aeabi_i2d>
 80018da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018de:	f7fe ff1d 	bl	800071c <__aeabi_ddiv>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	f006 fbc1 	bl	8008070 <atan>
 80018ee:	a350      	add	r3, pc, #320	; (adr r3, 8001a30 <MPU6050_Read_All+0x378>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fde8 	bl	80004c8 <__aeabi_dmul>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
        DataStruct->roll = roll;
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001906:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
}
        if(   abs(DataStruct->Gz ) > 2   ) DataStruct->jaw +=  (DataStruct->Gz)*dt;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001910:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001914:	4618      	mov	r0, r3
 8001916:	4621      	mov	r1, r4
 8001918:	f7ff f886 	bl	8000a28 <__aeabi_d2iz>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	bfb8      	it	lt
 8001922:	425b      	neglt	r3, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	dd14      	ble.n	8001952 <MPU6050_Read_All+0x29a>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001934:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001938:	f7fe fdc6 	bl	80004c8 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fc0a 	bl	800015c <__adddf3>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
DataStruct->No_fil_ang  += dt*DataStruct->Gy;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800195e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001962:	f7fe fdb1 	bl	80004c8 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fbf5 	bl	800015c <__adddf3>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	425b      	negs	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd35 	bl	80003f4 <__aeabi_i2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd2d 	bl	80003f4 <__aeabi_i2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f006 fdb7 	bl	8008514 <atan2>
 80019a6:	a322      	add	r3, pc, #136	; (adr r3, 8001a30 <MPU6050_Read_All+0x378>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fd8c 	bl	80004c8 <__aeabi_dmul>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    DataStruct->pitch = pitch;
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019be:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    DataStruct->KalmanAngleX = Kalman_getAngle(Kalman1, roll, DataStruct->Gy, dt);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80019c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80019d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80019d4:	e9cd 3400 	strd	r3, r4, [sp]
 80019d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fd05 	bl	80013ec <Kalman_getAngle>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    DataStruct->KalmanAngleY = Kalman_getAngle(Kalman2, pitch, DataStruct->Gx, dt);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80019f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80019fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80019fe:	e9cd 3400 	strd	r3, r4, [sp]
 8001a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7ff fcf0 	bl	80013ec <Kalman_getAngle>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

}
 8001a16:	bf00      	nop
 8001a18:	3748      	adds	r7, #72	; 0x48
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40cc2900 	.word	0x40cc2900
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40606000 	.word	0x40606000
 8001a30:	1a63c1f8 	.word	0x1a63c1f8
 8001a34:	404ca5dc 	.word	0x404ca5dc
 8001a38:	40d00000 	.word	0x40d00000
 8001a3c:	408f4000 	.word	0x408f4000

08001a40 <HMC5883L_readAngle>:

void HMC5883L_readAngle(HMC5883L_t *compass, MPU6050_t *mpu){
 8001a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a44:	b091      	sub	sp, #68	; 0x44
 8001a46:	af04      	add	r7, sp, #16
 8001a48:	6278      	str	r0, [r7, #36]	; 0x24
 8001a4a:	6239      	str	r1, [r7, #32]
	compass-> Xh = compass->mx*cos(mpu->roll/RAD_TO_DEG) +compass->my*sin(mpu->roll/RAD_TO_DEG)*sin(-mpu->pitch/RAD_TO_DEG)-compass->mz*cos(-mpu->pitch/RAD_TO_DEG)*sin(mpu->roll/RAD_TO_DEG);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fcce 	bl	80003f4 <__aeabi_i2d>
 8001a58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001a62:	a3bf      	add	r3, pc, #764	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fe58 	bl	800071c <__aeabi_ddiv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	4618      	mov	r0, r3
 8001a72:	4621      	mov	r1, r4
 8001a74:	f006 fc86 	bl	8008384 <cos>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a84:	f7fe fd20 	bl	80004c8 <__aeabi_dmul>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcac 	bl	80003f4 <__aeabi_i2d>
 8001a9c:	e9c7 0100 	strd	r0, r1, [r7]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001aa6:	a3ae      	add	r3, pc, #696	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fe36 	bl	800071c <__aeabi_ddiv>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	f006 fc9e 	bl	80083f8 <sin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac8:	f7fe fcfe 	bl	80004c8 <__aeabi_dmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	e9c7 3400 	strd	r3, r4, [r7]
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001ada:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ade:	461d      	mov	r5, r3
 8001ae0:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001ae4:	a39e      	add	r3, pc, #632	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	4628      	mov	r0, r5
 8001aec:	4631      	mov	r1, r6
 8001aee:	f7fe fe15 	bl	800071c <__aeabi_ddiv>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	4621      	mov	r1, r4
 8001afa:	f006 fc7d 	bl	80083f8 <sin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f7fe fcdd 	bl	80004c8 <__aeabi_dmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460c      	mov	r4, r1
 8001b12:	461a      	mov	r2, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1a:	f7fe fb1f 	bl	800015c <__adddf3>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460c      	mov	r4, r1
 8001b22:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fc61 	bl	80003f4 <__aeabi_i2d>
 8001b32:	4605      	mov	r5, r0
 8001b34:	460e      	mov	r6, r1
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001b3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b40:	4698      	mov	r8, r3
 8001b42:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8001b46:	a386      	add	r3, pc, #536	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	4649      	mov	r1, r9
 8001b50:	f7fe fde4 	bl	800071c <__aeabi_ddiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	460c      	mov	r4, r1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	f006 fc12 	bl	8008384 <cos>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	461a      	mov	r2, r3
 8001b66:	4623      	mov	r3, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	f7fe fcac 	bl	80004c8 <__aeabi_dmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	461d      	mov	r5, r3
 8001b76:	4626      	mov	r6, r4
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001b7e:	a378      	add	r3, pc, #480	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fdca 	bl	800071c <__aeabi_ddiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f006 fc32 	bl	80083f8 <sin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	4631      	mov	r1, r6
 8001ba0:	f7fe fc92 	bl	80004c8 <__aeabi_dmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb0:	f7fe fad2 	bl	8000158 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f7fe ff5c 	bl	8000a78 <__aeabi_d2f>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	609a      	str	r2, [r3, #8]
	compass->  Yh = compass->my*cos(-mpu->pitch/RAD_TO_DEG) + compass->mz*sin(-mpu->pitch/RAD_TO_DEG);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc11 	bl	80003f4 <__aeabi_i2d>
 8001bd2:	4605      	mov	r5, r0
 8001bd4:	460e      	mov	r6, r1
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001bdc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	a35d      	add	r3, pc, #372	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf2:	f7fe fd93 	bl	800071c <__aeabi_ddiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	f006 fbc1 	bl	8008384 <cos>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	461a      	mov	r2, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	4631      	mov	r1, r6
 8001c0e:	f7fe fc5b 	bl	80004c8 <__aeabi_dmul>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	461d      	mov	r5, r3
 8001c18:	4626      	mov	r6, r4
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fbe7 	bl	80003f4 <__aeabi_i2d>
 8001c26:	4680      	mov	r8, r0
 8001c28:	4689      	mov	r9, r1
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001c30:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	a348      	add	r3, pc, #288	; (adr r3, 8001d60 <HMC5883L_readAngle+0x320>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c46:	f7fe fd69 	bl	800071c <__aeabi_ddiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f006 fbd1 	bl	80083f8 <sin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe fc31 	bl	80004c8 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	4628      	mov	r0, r5
 8001c70:	4631      	mov	r1, r6
 8001c72:	f7fe fa73 	bl	800015c <__adddf3>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	f7fe fefb 	bl	8000a78 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	60da      	str	r2, [r3, #12]

	if(compass-> Yh <0)   compass->compass = 360+(180/3.14)*atan2 (compass-> Yh,compass-> Xh);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9ed 	bl	8001070 <__aeabi_fcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d029      	beq.n	8001cf0 <HMC5883L_readAngle+0x2b0>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fbb9 	bl	8000418 <__aeabi_f2d>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	460d      	mov	r5, r1
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbb2 	bl	8000418 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f006 fc2a 	bl	8008514 <atan2>
 8001cc0:	a329      	add	r3, pc, #164	; (adr r3, 8001d68 <HMC5883L_readAngle+0x328>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fbff 	bl	80004c8 <__aeabi_dmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HMC5883L_readAngle+0x338>)
 8001cd8:	f7fe fa40 	bl	800015c <__adddf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f7fe fec8 	bl	8000a78 <__aeabi_d2f>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e065      	b.n	8001dbc <HMC5883L_readAngle+0x37c>
	else if(compass-> Yh <0 && compass-> Xh<0) compass->compass = -(180/3.14)*atan2 (compass->Yh,compass->Xh);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f9b9 	bl	8001070 <__aeabi_fcmplt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03b      	beq.n	8001d7c <HMC5883L_readAngle+0x33c>
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f9af 	bl	8001070 <__aeabi_fcmplt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d031      	beq.n	8001d7c <HMC5883L_readAngle+0x33c>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fb7b 	bl	8000418 <__aeabi_f2d>
 8001d22:	4604      	mov	r4, r0
 8001d24:	460d      	mov	r5, r1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fb74 	bl	8000418 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f006 fbec 	bl	8008514 <atan2>
 8001d3c:	a30c      	add	r3, pc, #48	; (adr r3, 8001d70 <HMC5883L_readAngle+0x330>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fbc1 	bl	80004c8 <__aeabi_dmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f7fe fe93 	bl	8000a78 <__aeabi_d2f>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	e030      	b.n	8001dbc <HMC5883L_readAngle+0x37c>
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	1a63c1f8 	.word	0x1a63c1f8
 8001d64:	404ca5dc 	.word	0x404ca5dc
 8001d68:	61d59ae7 	.word	0x61d59ae7
 8001d6c:	404ca994 	.word	0x404ca994
 8001d70:	61d59ae7 	.word	0x61d59ae7
 8001d74:	c04ca994 	.word	0xc04ca994
 8001d78:	40768000 	.word	0x40768000
	else compass->compass = (180/3.14)*atan2 (compass->Yh,compass->Xh);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb49 	bl	8000418 <__aeabi_f2d>
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb42 	bl	8000418 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f006 fbba 	bl	8008514 <atan2>
 8001da0:	a32d      	add	r3, pc, #180	; (adr r3, 8001e58 <HMC5883L_readAngle+0x418>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fb8f 	bl	80004c8 <__aeabi_dmul>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fe61 	bl	8000a78 <__aeabi_d2f>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	611a      	str	r2, [r3, #16]

compass->compass =compass->compass - compass->compass_offset;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7fe feaa 	bl	8000b20 <__aeabi_fsub>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	611a      	str	r2, [r3, #16]
double dt = (double) (HAL_GetTick() - timer_compass) / 1000;
 8001dd4:	f001 fb3e 	bl	8003454 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HMC5883L_readAngle+0x420>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe faf7 	bl	80003d4 <__aeabi_ui2d>
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HMC5883L_readAngle+0x424>)
 8001dec:	f7fe fc96 	bl	800071c <__aeabi_ddiv>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
timer_compass = HAL_GetTick();
 8001df8:	f001 fb2c 	bl	8003454 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HMC5883L_readAngle+0x420>)
 8001e00:	601a      	str	r2, [r3, #0]
compass->Kalman = Kalman_getAngle(&Kalman_jaw, compass->compass , -mpu->Gz, dt);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb06 	bl	8000418 <__aeabi_f2d>
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	4601      	mov	r1, r0
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001e16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e1a:	469a      	mov	sl, r3
 8001e1c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8001e20:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e24:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001e28:	e9cd ab00 	strd	sl, fp, [sp]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	460a      	mov	r2, r1
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <HMC5883L_readAngle+0x428>)
 8001e32:	f7ff fadb 	bl	80013ec <Kalman_getAngle>
 8001e36:	4603      	mov	r3, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f7fe fe1b 	bl	8000a78 <__aeabi_d2f>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	619a      	str	r2, [r3, #24]


}
 8001e48:	bf00      	nop
 8001e4a:	3734      	adds	r7, #52	; 0x34
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	61d59ae7 	.word	0x61d59ae7
 8001e5c:	404ca994 	.word	0x404ca994
 8001e60:	2000061c 	.word	0x2000061c
 8001e64:	408f4000 	.word	0x408f4000
 8001e68:	20000120 	.word	0x20000120

08001e6c <HMC5883L_read>:

void HMC5883L_read(HMC5883L_t *compass){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	 HMC5883L_getHeading(&compass->mx,&compass->my,&compass->mz);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	1c99      	adds	r1, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff f988 	bl	8001194 <HMC5883L_getHeading>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <calcKinematic>:
void calcKinematic(Kinematic_t *kinematic){
 8001e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
	float x, y,z;
	x =kinematic->TamRatio* cos(compass.Kalman/RAD_TO_DEG)*(kinematic->L1*cos(KalmanY_2.angle/RAD_TO_DEG) + kinematic->L2*cos(KalmanY_2.angle/RAD_TO_DEG + MPU6050_1.KalmanAngleX/RAD_TO_DEG));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe faba 	bl	8000418 <__aeabi_f2d>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4bc9      	ldr	r3, [pc, #804]	; (80021d0 <calcKinematic+0x340>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fab3 	bl	8000418 <__aeabi_f2d>
 8001eb2:	a3c5      	add	r3, pc, #788	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fc30 	bl	800071c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f006 fa5e 	bl	8008384 <cos>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe fafa 	bl	80004c8 <__aeabi_dmul>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4625      	mov	r5, r4
 8001eda:	461c      	mov	r4, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fa99 	bl	8000418 <__aeabi_f2d>
 8001ee6:	4680      	mov	r8, r0
 8001ee8:	4689      	mov	r9, r1
 8001eea:	4bba      	ldr	r3, [pc, #744]	; (80021d4 <calcKinematic+0x344>)
 8001eec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ef0:	a3b5      	add	r3, pc, #724	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fc11 	bl	800071c <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f006 fa3f 	bl	8008384 <cos>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	f7fe fadb 	bl	80004c8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fa7a 	bl	8000418 <__aeabi_f2d>
 8001f24:	4682      	mov	sl, r0
 8001f26:	468b      	mov	fp, r1
 8001f28:	4baa      	ldr	r3, [pc, #680]	; (80021d4 <calcKinematic+0x344>)
 8001f2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f2e:	a3a6      	add	r3, pc, #664	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fbf2 	bl	800071c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	e9c7 2300 	strd	r2, r3, [r7]
 8001f40:	4ba5      	ldr	r3, [pc, #660]	; (80021d8 <calcKinematic+0x348>)
 8001f42:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001f46:	a3a0      	add	r3, pc, #640	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fbe6 	bl	800071c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f58:	f7fe f900 	bl	800015c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f006 fa0e 	bl	8008384 <cos>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4650      	mov	r0, sl
 8001f6e:	4659      	mov	r1, fp
 8001f70:	f7fe faaa 	bl	80004c8 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4640      	mov	r0, r8
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	f7fe f8ee 	bl	800015c <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe fa9e 	bl	80004c8 <__aeabi_dmul>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4618      	mov	r0, r3
 8001f92:	4621      	mov	r1, r4
 8001f94:	f7fe fd70 	bl	8000a78 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
	y = kinematic->TamRatio*sin(compass.Kalman/RAD_TO_DEG)*(kinematic->L1*cos(KalmanY_2.angle/RAD_TO_DEG) + kinematic->L2*cos(KalmanY_2.angle/RAD_TO_DEG + MPU6050_1.KalmanAngleX/RAD_TO_DEG));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa39 	bl	8000418 <__aeabi_f2d>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <calcKinematic+0x340>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa32 	bl	8000418 <__aeabi_f2d>
 8001fb4:	a384      	add	r3, pc, #528	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fbaf 	bl	800071c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f006 fa17 	bl	80083f8 <sin>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe fa79 	bl	80004c8 <__aeabi_dmul>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460c      	mov	r4, r1
 8001fda:	4625      	mov	r5, r4
 8001fdc:	461c      	mov	r4, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fa18 	bl	8000418 <__aeabi_f2d>
 8001fe8:	4680      	mov	r8, r0
 8001fea:	4689      	mov	r9, r1
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <calcKinematic+0x344>)
 8001fee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ff2:	a375      	add	r3, pc, #468	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fb90 	bl	800071c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f006 f9be 	bl	8008384 <cos>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe fa5a 	bl	80004c8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4690      	mov	r8, r2
 800201a:	4699      	mov	r9, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f9f9 	bl	8000418 <__aeabi_f2d>
 8002026:	4682      	mov	sl, r0
 8002028:	468b      	mov	fp, r1
 800202a:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <calcKinematic+0x344>)
 800202c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002030:	a365      	add	r3, pc, #404	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fb71 	bl	800071c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	e9c7 2300 	strd	r2, r3, [r7]
 8002042:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <calcKinematic+0x348>)
 8002044:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002048:	a35f      	add	r3, pc, #380	; (adr r3, 80021c8 <calcKinematic+0x338>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	f7fe fb65 	bl	800071c <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205a:	f7fe f87f 	bl	800015c <__adddf3>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f006 f98d 	bl	8008384 <cos>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4650      	mov	r0, sl
 8002070:	4659      	mov	r1, fp
 8002072:	f7fe fa29 	bl	80004c8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4640      	mov	r0, r8
 800207c:	4649      	mov	r1, r9
 800207e:	f7fe f86d 	bl	800015c <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe fa1d 	bl	80004c8 <__aeabi_dmul>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	4618      	mov	r0, r3
 8002094:	4621      	mov	r1, r4
 8002096:	f7fe fcef 	bl	8000a78 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	623b      	str	r3, [r7, #32]
	z = kinematic->TamRatio*kinematic->L1*sin(KalmanY_2.angle/RAD_TO_DEG)+ kinematic->L2*sin(KalmanY_2.angle/RAD_TO_DEG + MPU6050_1.KalmanAngleX/RAD_TO_DEG);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f7fe fe43 	bl	8000d34 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f9b1 	bl	8000418 <__aeabi_f2d>
 80020b6:	4604      	mov	r4, r0
 80020b8:	460d      	mov	r5, r1
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <calcKinematic+0x344>)
 80020bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80020c0:	a341      	add	r3, pc, #260	; (adr r3, 80021c8 <calcKinematic+0x338>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fb29 	bl	800071c <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f006 f991 	bl	80083f8 <sin>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe f9f3 	bl	80004c8 <__aeabi_dmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	4625      	mov	r5, r4
 80020e8:	461c      	mov	r4, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f992 	bl	8000418 <__aeabi_f2d>
 80020f4:	4680      	mov	r8, r0
 80020f6:	4689      	mov	r9, r1
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <calcKinematic+0x344>)
 80020fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80020fe:	a332      	add	r3, pc, #200	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fb0a 	bl	800071c <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4692      	mov	sl, r2
 800210e:	469b      	mov	fp, r3
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <calcKinematic+0x348>)
 8002112:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002116:	a32c      	add	r3, pc, #176	; (adr r3, 80021c8 <calcKinematic+0x338>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fafe 	bl	800071c <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4650      	mov	r0, sl
 8002126:	4659      	mov	r1, fp
 8002128:	f7fe f818 	bl	800015c <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f006 f960 	bl	80083f8 <sin>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4640      	mov	r0, r8
 800213e:	4649      	mov	r1, r9
 8002140:	f7fe f9c2 	bl	80004c8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f806 	bl	800015c <__adddf3>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	4618      	mov	r0, r3
 8002156:	4621      	mov	r1, r4
 8002158:	f7fe fc8e 	bl	8000a78 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	61fb      	str	r3, [r7, #28]
// FACOTR DE ESCALA

	//revertir a coordenadas del robot
	 float r = sqrt((x*x) + (y*y));
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002164:	f7fe fde6 	bl	8000d34 <__aeabi_fmul>
 8002168:	4603      	mov	r3, r0
 800216a:	461c      	mov	r4, r3
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	6a38      	ldr	r0, [r7, #32]
 8002170:	f7fe fde0 	bl	8000d34 <__aeabi_fmul>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fcd3 	bl	8000b24 <__addsf3>
 800217e:	4603      	mov	r3, r0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f949 	bl	8000418 <__aeabi_f2d>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	4618      	mov	r0, r3
 800218c:	4621      	mov	r1, r4
 800218e:	f006 fb1f 	bl	80087d0 <sqrt>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	4618      	mov	r0, r3
 8002198:	4621      	mov	r1, r4
 800219a:	f7fe fc6d 	bl	8000a78 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
		  float a = sqrt((r*r) + (z*z));
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	69b8      	ldr	r0, [r7, #24]
 80021a6:	f7fe fdc5 	bl	8000d34 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461c      	mov	r4, r3
 80021ae:	69f9      	ldr	r1, [r7, #28]
 80021b0:	69f8      	ldr	r0, [r7, #28]
 80021b2:	f7fe fdbf 	bl	8000d34 <__aeabi_fmul>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7fe fcb2 	bl	8000b24 <__addsf3>
 80021c0:	e00c      	b.n	80021dc <calcKinematic+0x34c>
 80021c2:	bf00      	nop
 80021c4:	f3af 8000 	nop.w
 80021c8:	1a63c1f8 	.word	0x1a63c1f8
 80021cc:	404ca5dc 	.word	0x404ca5dc
 80021d0:	20000294 	.word	0x20000294
 80021d4:	200000d8 	.word	0x200000d8
 80021d8:	20000510 	.word	0x20000510
 80021dc:	4603      	mov	r3, r0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f91a 	bl	8000418 <__aeabi_f2d>
 80021e4:	4603      	mov	r3, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	4618      	mov	r0, r3
 80021ea:	4621      	mov	r1, r4
 80021ec:	f006 faf0 	bl	80087d0 <sqrt>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	4618      	mov	r0, r3
 80021f6:	4621      	mov	r1, r4
 80021f8:	f7fe fc3e 	bl	8000a78 <__aeabi_d2f>
 80021fc:	4603      	mov	r3, r0
 80021fe:	617b      	str	r3, [r7, #20]
		 kinematic->servo= RAD_TO_DEG*atan(y/x);
 8002200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002202:	6a38      	ldr	r0, [r7, #32]
 8002204:	f7fe fe4a 	bl	8000e9c <__aeabi_fdiv>
 8002208:	4603      	mov	r3, r0
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f904 	bl	8000418 <__aeabi_f2d>
 8002210:	4603      	mov	r3, r0
 8002212:	460c      	mov	r4, r1
 8002214:	4618      	mov	r0, r3
 8002216:	4621      	mov	r1, r4
 8002218:	f005 ff2a 	bl	8008070 <atan>
 800221c:	a378      	add	r3, pc, #480	; (adr r3, 8002400 <calcKinematic+0x570>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f951 	bl	80004c8 <__aeabi_dmul>
 8002226:	4603      	mov	r3, r0
 8002228:	460c      	mov	r4, r1
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	f7fe fc23 	bl	8000a78 <__aeabi_d2f>
 8002232:	4602      	mov	r2, r0
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	61da      	str	r2, [r3, #28]
		kinematic->codo=  RAD_TO_DEG*acos((  pow(a,2) -(pow(kinematic->L1_robot,2)) - (pow(kinematic->L2_robot,2))  ) / (2*kinematic->L1_robot*kinematic->L2_robot)  );
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7fe f8ed 	bl	8000418 <__aeabi_f2d>
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002246:	f006 f967 	bl	8008518 <pow>
 800224a:	4604      	mov	r4, r0
 800224c:	460d      	mov	r5, r1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f8e0 	bl	8000418 <__aeabi_f2d>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002260:	f006 f95a 	bl	8008518 <pow>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fd ff74 	bl	8000158 <__aeabi_dsub>
 8002270:	4603      	mov	r3, r0
 8002272:	460c      	mov	r4, r1
 8002274:	4625      	mov	r5, r4
 8002276:	461c      	mov	r4, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f8cb 	bl	8000418 <__aeabi_f2d>
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800228a:	f006 f945 	bl	8008518 <pow>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fd ff5f 	bl	8000158 <__aeabi_dsub>
 800229a:	4603      	mov	r3, r0
 800229c:	460c      	mov	r4, r1
 800229e:	4625      	mov	r5, r4
 80022a0:	461c      	mov	r4, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fc3b 	bl	8000b24 <__addsf3>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f7fe fd3b 	bl	8000d34 <__aeabi_fmul>
 80022be:	4603      	mov	r3, r0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f8a9 	bl	8000418 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fe fa25 	bl	800071c <__aeabi_ddiv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	4618      	mov	r0, r3
 80022d8:	4621      	mov	r1, r4
 80022da:	f006 f8c7 	bl	800846c <acos>
 80022de:	a348      	add	r3, pc, #288	; (adr r3, 8002400 <calcKinematic+0x570>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f8f0 	bl	80004c8 <__aeabi_dmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	f7fe fbc2 	bl	8000a78 <__aeabi_d2f>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	619a      	str	r2, [r3, #24]
		kinematic->base= RAD_TO_DEG*atan(z/r) - RAD_TO_DEG*acos( ((pow(a,2)) + (pow(kinematic->L1_robot,2)) - (pow(kinematic->L2_robot,2))     )   /(2*kinematic->L1_robot*a) );
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	69f8      	ldr	r0, [r7, #28]
 80022fe:	f7fe fdcd 	bl	8000e9c <__aeabi_fdiv>
 8002302:	4603      	mov	r3, r0
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f887 	bl	8000418 <__aeabi_f2d>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	4618      	mov	r0, r3
 8002310:	4621      	mov	r1, r4
 8002312:	f005 fead 	bl	8008070 <atan>
 8002316:	a33a      	add	r3, pc, #232	; (adr r3, 8002400 <calcKinematic+0x570>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe f8d4 	bl	80004c8 <__aeabi_dmul>
 8002320:	4603      	mov	r3, r0
 8002322:	460c      	mov	r4, r1
 8002324:	4625      	mov	r5, r4
 8002326:	461c      	mov	r4, r3
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f7fe f875 	bl	8000418 <__aeabi_f2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002336:	f006 f8ef 	bl	8008518 <pow>
 800233a:	4680      	mov	r8, r0
 800233c:	4689      	mov	r9, r1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f868 	bl	8000418 <__aeabi_f2d>
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002350:	f006 f8e2 	bl	8008518 <pow>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4640      	mov	r0, r8
 800235a:	4649      	mov	r1, r9
 800235c:	f7fd fefe 	bl	800015c <__adddf3>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4690      	mov	r8, r2
 8002366:	4699      	mov	r9, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f853 	bl	8000418 <__aeabi_f2d>
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800237a:	f006 f8cd 	bl	8008518 <pow>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4640      	mov	r0, r8
 8002384:	4649      	mov	r1, r9
 8002386:	f7fd fee7 	bl	8000158 <__aeabi_dsub>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4690      	mov	r8, r2
 8002390:	4699      	mov	r9, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4619      	mov	r1, r3
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fbc3 	bl	8000b24 <__addsf3>
 800239e:	4603      	mov	r3, r0
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fcc6 	bl	8000d34 <__aeabi_fmul>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f834 	bl	8000418 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4640      	mov	r0, r8
 80023b6:	4649      	mov	r1, r9
 80023b8:	f7fe f9b0 	bl	800071c <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f006 f852 	bl	800846c <acos>
 80023c8:	a30d      	add	r3, pc, #52	; (adr r3, 8002400 <calcKinematic+0x570>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe f87b 	bl	80004c8 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fd febd 	bl	8000158 <__aeabi_dsub>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	4618      	mov	r0, r3
 80023e4:	4621      	mov	r1, r4
 80023e6:	f7fe fb47 	bl	8000a78 <__aeabi_d2f>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	615a      	str	r2, [r3, #20]
//	gcvt(kinematic->base,10,kinematic->base_t);
//gcvt(kinematic->codo,10,kinematic->codo_t);
//gcvt( kinematic->servo, 10,kinematic->servo_t);


}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	1a63c1f8 	.word	0x1a63c1f8
 8002404:	404ca5dc 	.word	0x404ca5dc

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240c:	b0a9      	sub	sp, #164	; 0xa4
 800240e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
 	float desv_estado = 2.0231;
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <main+0xdc>)
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48
  	float var = desv_tipica*desv_tipica;
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <main+0xe0>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <main+0xe0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f7fe fc88 	bl	8000d34 <__aeabi_fmul>
 8002424:	4603      	mov	r3, r0
 8002426:	647b      	str	r3, [r7, #68]	; 0x44
  	float var_estado = desv_estado*desv_estado;
 8002428:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800242a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800242c:	f7fe fc82 	bl	8000d34 <__aeabi_fmul>
 8002430:	4603      	mov	r3, r0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  	float P = var_estado;
 8002434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002436:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002438:	f000 ffb4 	bl	80033a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243c:	f000 fcac 	bl	8002d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002440:	f000 fdbe 	bl	8002fc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002444:	f000 fcf8 	bl	8002e38 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002448:	f000 fd34 	bl	8002eb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800244c:	f000 fd60 	bl	8002f10 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002450:	f000 fd8c 	bl	8002f6c <MX_USART1_UART_Init>
int16_t mx;
int16_t my;
int16_t mz;

float  offset;
 int start = 1;
 8002454:	2301      	movs	r3, #1
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
 int start2 = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while ((start == 1) && (start2 == 1)){
 800245c:	e06b      	b.n	8002536 <main+0x12e>
 start =  MPU6050_Init(hi2c1) ;
 800245e:	4c23      	ldr	r4, [pc, #140]	; (80024ec <main+0xe4>)
 8002460:	4668      	mov	r0, sp
 8002462:	f104 0110 	add.w	r1, r4, #16
 8002466:	2344      	movs	r3, #68	; 0x44
 8002468:	461a      	mov	r2, r3
 800246a:	f004 faa7 	bl	80069bc <memcpy>
 800246e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002472:	f7fe ff5d 	bl	8001330 <MPU6050_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	653b      	str	r3, [r7, #80]	; 0x50
  start2= 	  MPU6050_Init(hi2c2) ;
 800247a:	4c1d      	ldr	r4, [pc, #116]	; (80024f0 <main+0xe8>)
 800247c:	4668      	mov	r0, sp
 800247e:	f104 0110 	add.w	r1, r4, #16
 8002482:	2344      	movs	r3, #68	; 0x44
 8002484:	461a      	mov	r2, r3
 8002486:	f004 fa99 	bl	80069bc <memcpy>
 800248a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800248e:	f7fe ff4f 	bl	8001330 <MPU6050_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	64fb      	str	r3, [r7, #76]	; 0x4c

  I2Cdev_init(&hi2c2);
 8002496:	4816      	ldr	r0, [pc, #88]	; (80024f0 <main+0xe8>)
 8002498:	f7fe fec2 	bl	8001220 <I2Cdev_init>
	        HMC5883L_initialize();
 800249c:	f7fe fe10 	bl	80010c0 <HMC5883L_initialize>
	        HMC5883L_testConnection();
 80024a0:	f7fe fe24 	bl	80010ec <HMC5883L_testConnection>
	  	  HMC5883L_getHeading(&mx,&my,&mz);
 80024a4:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80024a8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80024ac:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fe6f 	bl	8001194 <HMC5883L_getHeading>
	  	  MPU6050_Read_All(&hi2c1, &MPU6050_1,&KalmanX_1,&KalmanY_1);
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <main+0xec>)
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <main+0xf0>)
 80024ba:	4910      	ldr	r1, [pc, #64]	; (80024fc <main+0xf4>)
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <main+0xe4>)
 80024be:	f7ff f8fb 	bl	80016b8 <MPU6050_Read_All>
	  	HMC5883L_read(&compass);
 80024c2:	480f      	ldr	r0, [pc, #60]	; (8002500 <main+0xf8>)
 80024c4:	f7ff fcd2 	bl	8001e6c <HMC5883L_read>
	  	 HMC5883L_readAngle(&compass,&MPU6050_1);
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <main+0xf4>)
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <main+0xf8>)
 80024cc:	f7ff fab8 	bl	8001a40 <HMC5883L_readAngle>
	  	 compass.compass_offset = compass.compass;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <main+0xf8>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <main+0xf8>)
 80024d6:	6153      	str	r3, [r2, #20]

// if(mx != 0) start2 =1;
	int time = HAL_GetTick();
 80024d8:	f000 ffbc 	bl	8003454 <HAL_GetTick>
 80024dc:	4603      	mov	r3, r0
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
 while(HAL_GetTick() - time < 2000){
 80024e0:	e021      	b.n	8002526 <main+0x11e>
 80024e2:	bf00      	nop
 80024e4:	40017a78 	.word	0x40017a78
 80024e8:	200001ec 	.word	0x200001ec
 80024ec:	200002ec 	.word	0x200002ec
 80024f0:	20000340 	.word	0x20000340
 80024f4:	20000090 	.word	0x20000090
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000510 	.word	0x20000510
 8002500:	20000294 	.word	0x20000294
	 MPU6050_Read_All(&hi2c1, &MPU6050_1,&KalmanX_1,&KalmanY_1);
 8002504:	4bce      	ldr	r3, [pc, #824]	; (8002840 <main+0x438>)
 8002506:	4acf      	ldr	r2, [pc, #828]	; (8002844 <main+0x43c>)
 8002508:	49cf      	ldr	r1, [pc, #828]	; (8002848 <main+0x440>)
 800250a:	48d0      	ldr	r0, [pc, #832]	; (800284c <main+0x444>)
 800250c:	f7ff f8d4 	bl	80016b8 <MPU6050_Read_All>
	 HMC5883L_read(&compass);
 8002510:	48cf      	ldr	r0, [pc, #828]	; (8002850 <main+0x448>)
 8002512:	f7ff fcab 	bl	8001e6c <HMC5883L_read>
	 	  	 HMC5883L_readAngle(&compass,&MPU6050_1);
 8002516:	49cc      	ldr	r1, [pc, #816]	; (8002848 <main+0x440>)
 8002518:	48cd      	ldr	r0, [pc, #820]	; (8002850 <main+0x448>)
 800251a:	f7ff fa91 	bl	8001a40 <HMC5883L_readAngle>
	 	  	 compass.compass_offset = compass.compass;
 800251e:	4bcc      	ldr	r3, [pc, #816]	; (8002850 <main+0x448>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	4acb      	ldr	r2, [pc, #812]	; (8002850 <main+0x448>)
 8002524:	6153      	str	r3, [r2, #20]
 while(HAL_GetTick() - time < 2000){
 8002526:	f000 ff95 	bl	8003454 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002534:	d3e6      	bcc.n	8002504 <main+0xfc>
  while ((start == 1) && (start2 == 1)){
 8002536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <main+0x13a>
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d08d      	beq.n	800245e <main+0x56>
 }

  }
  kinematic.TamRatio =(kinematic.L1_robot + kinematic.L2_robot)/(kinematic.L1 + kinematic.L2);
 8002542:	4bc4      	ldr	r3, [pc, #784]	; (8002854 <main+0x44c>)
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4bc3      	ldr	r3, [pc, #780]	; (8002854 <main+0x44c>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f7fe fae9 	bl	8000b24 <__addsf3>
 8002552:	4603      	mov	r3, r0
 8002554:	461c      	mov	r4, r3
 8002556:	4bbf      	ldr	r3, [pc, #764]	; (8002854 <main+0x44c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4bbe      	ldr	r3, [pc, #760]	; (8002854 <main+0x44c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7fe fadf 	bl	8000b24 <__addsf3>
 8002566:	4603      	mov	r3, r0
 8002568:	4619      	mov	r1, r3
 800256a:	4620      	mov	r0, r4
 800256c:	f7fe fc96 	bl	8000e9c <__aeabi_fdiv>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	4bb7      	ldr	r3, [pc, #732]	; (8002854 <main+0x44c>)
 8002576:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      MPU6050_Read_All(&hi2c1, &MPU6050_1,&KalmanX_1,&KalmanY_1);
 8002578:	4bb1      	ldr	r3, [pc, #708]	; (8002840 <main+0x438>)
 800257a:	4ab2      	ldr	r2, [pc, #712]	; (8002844 <main+0x43c>)
 800257c:	49b2      	ldr	r1, [pc, #712]	; (8002848 <main+0x440>)
 800257e:	48b3      	ldr	r0, [pc, #716]	; (800284c <main+0x444>)
 8002580:	f7ff f89a 	bl	80016b8 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c2, &MPU6050_2,&KalmanX_2,&KalmanY_2);
 8002584:	4bb4      	ldr	r3, [pc, #720]	; (8002858 <main+0x450>)
 8002586:	4ab5      	ldr	r2, [pc, #724]	; (800285c <main+0x454>)
 8002588:	49b5      	ldr	r1, [pc, #724]	; (8002860 <main+0x458>)
 800258a:	48b6      	ldr	r0, [pc, #728]	; (8002864 <main+0x45c>)
 800258c:	f7ff f894 	bl	80016b8 <MPU6050_Read_All>
	  if(MPU6050_2.Accel_X_RAW == 0){
 8002590:	4bb3      	ldr	r3, [pc, #716]	; (8002860 <main+0x458>)
 8002592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d111      	bne.n	80025be <main+0x1b6>
		  MPU6050_Init(hi2c2);
 800259a:	4cb2      	ldr	r4, [pc, #712]	; (8002864 <main+0x45c>)
 800259c:	4668      	mov	r0, sp
 800259e:	f104 0110 	add.w	r1, r4, #16
 80025a2:	2344      	movs	r3, #68	; 0x44
 80025a4:	461a      	mov	r2, r3
 80025a6:	f004 fa09 	bl	80069bc <memcpy>
 80025aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025ae:	f7fe febf 	bl	8001330 <MPU6050_Init>
		  MPU6050_Read_All(&hi2c2, &MPU6050_2,&KalmanX_2,&KalmanY_2);
 80025b2:	4ba9      	ldr	r3, [pc, #676]	; (8002858 <main+0x450>)
 80025b4:	4aa9      	ldr	r2, [pc, #676]	; (800285c <main+0x454>)
 80025b6:	49aa      	ldr	r1, [pc, #680]	; (8002860 <main+0x458>)
 80025b8:	48aa      	ldr	r0, [pc, #680]	; (8002864 <main+0x45c>)
 80025ba:	f7ff f87d 	bl	80016b8 <MPU6050_Read_All>
//	  if(MPU6050_1.jaw > 90) MPU6050_1.jaw = 89.9;
//	  if(MPU6050_1.jaw < -90) MPU6050_1.jaw = -89.9;
//	  if(MPU6050_2.jaw > 90) MPU6050_2.jaw = 89.9;
//	  if(MPU6050_2.jaw < -90) MPU6050_2.jaw = -89.9;

	  HMC5883L_getHeading(&mx,&my,&mz);
 80025be:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80025c2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80025c6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fde2 	bl	8001194 <HMC5883L_getHeading>
	  HMC5883L_read(&compass);
 80025d0:	489f      	ldr	r0, [pc, #636]	; (8002850 <main+0x448>)
 80025d2:	f7ff fc4b 	bl	8001e6c <HMC5883L_read>
	//antes de añadir nada, a grabarlo que ya tienes
angulo_magne = (180/3.14)*atan2 (my,mx )-offset;
 80025d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff0a 	bl	80003f4 <__aeabi_i2d>
 80025e0:	4605      	mov	r5, r0
 80025e2:	460e      	mov	r6, r1
 80025e4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff03 	bl	80003f4 <__aeabi_i2d>
 80025ee:	4603      	mov	r3, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	461a      	mov	r2, r3
 80025f4:	4623      	mov	r3, r4
 80025f6:	4628      	mov	r0, r5
 80025f8:	4631      	mov	r1, r6
 80025fa:	f005 ff8b 	bl	8008514 <atan2>
 80025fe:	a38c      	add	r3, pc, #560	; (adr r3, 8002830 <main+0x428>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ff60 	bl	80004c8 <__aeabi_dmul>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	461d      	mov	r5, r3
 800260e:	4626      	mov	r6, r4
 8002610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002612:	f7fd ff01 	bl	8000418 <__aeabi_f2d>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	4628      	mov	r0, r5
 8002620:	4631      	mov	r1, r6
 8002622:	f7fd fd99 	bl	8000158 <__aeabi_dsub>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	f7fe fa23 	bl	8000a78 <__aeabi_d2f>
 8002632:	4602      	mov	r2, r0
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <main+0x460>)
 8002636:	601a      	str	r2, [r3, #0]
Xh = mx*cos(MPU6050_1.roll/RAD_TO_DEG) +my*sin(MPU6050_1.roll/RAD_TO_DEG)*sin(-MPU6050_1.pitch/RAD_TO_DEG)-mz*cos(-MPU6050_1.pitch/RAD_TO_DEG)*sin(MPU6050_1.roll/RAD_TO_DEG);
 8002638:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd fed9 	bl	80003f4 <__aeabi_i2d>
 8002642:	4605      	mov	r5, r0
 8002644:	460e      	mov	r6, r1
 8002646:	4b80      	ldr	r3, [pc, #512]	; (8002848 <main+0x440>)
 8002648:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800264c:	a37a      	add	r3, pc, #488	; (adr r3, 8002838 <main+0x430>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fe f863 	bl	800071c <__aeabi_ddiv>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	4618      	mov	r0, r3
 800265c:	4621      	mov	r1, r4
 800265e:	f005 fe91 	bl	8008384 <cos>
 8002662:	4603      	mov	r3, r0
 8002664:	460c      	mov	r4, r1
 8002666:	461a      	mov	r2, r3
 8002668:	4623      	mov	r3, r4
 800266a:	4628      	mov	r0, r5
 800266c:	4631      	mov	r1, r6
 800266e:	f7fd ff2b 	bl	80004c8 <__aeabi_dmul>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	4698      	mov	r8, r3
 8002678:	46a1      	mov	r9, r4
 800267a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd feb8 	bl	80003f4 <__aeabi_i2d>
 8002684:	4605      	mov	r5, r0
 8002686:	460e      	mov	r6, r1
 8002688:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <main+0x440>)
 800268a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800268e:	a36a      	add	r3, pc, #424	; (adr r3, 8002838 <main+0x430>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f842 	bl	800071c <__aeabi_ddiv>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	f005 feaa 	bl	80083f8 <sin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	4631      	mov	r1, r6
 80026b0:	f7fd ff0a 	bl	80004c8 <__aeabi_dmul>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	461d      	mov	r5, r3
 80026ba:	4626      	mov	r6, r4
 80026bc:	4b62      	ldr	r3, [pc, #392]	; (8002848 <main+0x440>)
 80026be:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80026c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	a35a      	add	r3, pc, #360	; (adr r3, 8002838 <main+0x430>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d8:	f7fe f820 	bl	800071c <__aeabi_ddiv>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	4618      	mov	r0, r3
 80026e2:	4621      	mov	r1, r4
 80026e4:	f005 fe88 	bl	80083f8 <sin>
 80026e8:	4603      	mov	r3, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	461a      	mov	r2, r3
 80026ee:	4623      	mov	r3, r4
 80026f0:	4628      	mov	r0, r5
 80026f2:	4631      	mov	r1, r6
 80026f4:	f7fd fee8 	bl	80004c8 <__aeabi_dmul>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	4640      	mov	r0, r8
 8002702:	4649      	mov	r1, r9
 8002704:	f7fd fd2a 	bl	800015c <__adddf3>
 8002708:	4603      	mov	r3, r0
 800270a:	460c      	mov	r4, r1
 800270c:	4698      	mov	r8, r3
 800270e:	46a1      	mov	r9, r4
 8002710:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fe6d 	bl	80003f4 <__aeabi_i2d>
 800271a:	4605      	mov	r5, r0
 800271c:	460e      	mov	r6, r1
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <main+0x440>)
 8002720:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002724:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	a341      	add	r3, pc, #260	; (adr r3, 8002838 <main+0x430>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800273a:	f7fd ffef 	bl	800071c <__aeabi_ddiv>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	4618      	mov	r0, r3
 8002744:	4621      	mov	r1, r4
 8002746:	f005 fe1d 	bl	8008384 <cos>
 800274a:	4603      	mov	r3, r0
 800274c:	460c      	mov	r4, r1
 800274e:	461a      	mov	r2, r3
 8002750:	4623      	mov	r3, r4
 8002752:	4628      	mov	r0, r5
 8002754:	4631      	mov	r1, r6
 8002756:	f7fd feb7 	bl	80004c8 <__aeabi_dmul>
 800275a:	4603      	mov	r3, r0
 800275c:	460c      	mov	r4, r1
 800275e:	461d      	mov	r5, r3
 8002760:	4626      	mov	r6, r4
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <main+0x440>)
 8002764:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002768:	a333      	add	r3, pc, #204	; (adr r3, 8002838 <main+0x430>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd ffd5 	bl	800071c <__aeabi_ddiv>
 8002772:	4603      	mov	r3, r0
 8002774:	460c      	mov	r4, r1
 8002776:	4618      	mov	r0, r3
 8002778:	4621      	mov	r1, r4
 800277a:	f005 fe3d 	bl	80083f8 <sin>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	461a      	mov	r2, r3
 8002784:	4623      	mov	r3, r4
 8002786:	4628      	mov	r0, r5
 8002788:	4631      	mov	r1, r6
 800278a:	f7fd fe9d 	bl	80004c8 <__aeabi_dmul>
 800278e:	4603      	mov	r3, r0
 8002790:	460c      	mov	r4, r1
 8002792:	461a      	mov	r2, r3
 8002794:	4623      	mov	r3, r4
 8002796:	4640      	mov	r0, r8
 8002798:	4649      	mov	r1, r9
 800279a:	f7fd fcdd 	bl	8000158 <__aeabi_dsub>
 800279e:	4603      	mov	r3, r0
 80027a0:	460c      	mov	r4, r1
 80027a2:	4618      	mov	r0, r3
 80027a4:	4621      	mov	r1, r4
 80027a6:	f7fe f967 	bl	8000a78 <__aeabi_d2f>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <main+0x464>)
 80027ae:	601a      	str	r2, [r3, #0]
Yh = my*cos(-MPU6050_1.pitch/RAD_TO_DEG) + mz*sin(-MPU6050_1.pitch/RAD_TO_DEG);
 80027b0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe1d 	bl	80003f4 <__aeabi_i2d>
 80027ba:	4605      	mov	r5, r0
 80027bc:	460e      	mov	r6, r1
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <main+0x440>)
 80027c0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80027c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80027c8:	469a      	mov	sl, r3
 80027ca:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80027ce:	a31a      	add	r3, pc, #104	; (adr r3, 8002838 <main+0x430>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	4650      	mov	r0, sl
 80027d6:	4659      	mov	r1, fp
 80027d8:	f7fd ffa0 	bl	800071c <__aeabi_ddiv>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4618      	mov	r0, r3
 80027e2:	4621      	mov	r1, r4
 80027e4:	f005 fdce 	bl	8008384 <cos>
 80027e8:	4603      	mov	r3, r0
 80027ea:	460c      	mov	r4, r1
 80027ec:	461a      	mov	r2, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	4628      	mov	r0, r5
 80027f2:	4631      	mov	r1, r6
 80027f4:	f7fd fe68 	bl	80004c8 <__aeabi_dmul>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	4698      	mov	r8, r3
 80027fe:	46a1      	mov	r9, r4
 8002800:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fdf5 	bl	80003f4 <__aeabi_i2d>
 800280a:	4605      	mov	r5, r0
 800280c:	460e      	mov	r6, r1
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <main+0x440>)
 8002810:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002814:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	a305      	add	r3, pc, #20	; (adr r3, 8002838 <main+0x430>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800282a:	e021      	b.n	8002870 <main+0x468>
 800282c:	f3af 8000 	nop.w
 8002830:	61d59ae7 	.word	0x61d59ae7
 8002834:	404ca994 	.word	0x404ca994
 8002838:	1a63c1f8 	.word	0x1a63c1f8
 800283c:	404ca5dc 	.word	0x404ca5dc
 8002840:	20000090 	.word	0x20000090
 8002844:	20000000 	.word	0x20000000
 8002848:	20000510 	.word	0x20000510
 800284c:	200002ec 	.word	0x200002ec
 8002850:	20000294 	.word	0x20000294
 8002854:	20000168 	.word	0x20000168
 8002858:	200000d8 	.word	0x200000d8
 800285c:	20000048 	.word	0x20000048
 8002860:	200003f8 	.word	0x200003f8
 8002864:	20000340 	.word	0x20000340
 8002868:	20000618 	.word	0x20000618
 800286c:	20000478 	.word	0x20000478
 8002870:	f7fd ff54 	bl	800071c <__aeabi_ddiv>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	4618      	mov	r0, r3
 800287a:	4621      	mov	r1, r4
 800287c:	f005 fdbc 	bl	80083f8 <sin>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	4628      	mov	r0, r5
 800288a:	4631      	mov	r1, r6
 800288c:	f7fd fe1c 	bl	80004c8 <__aeabi_dmul>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	4640      	mov	r0, r8
 800289a:	4649      	mov	r1, r9
 800289c:	f7fd fc5e 	bl	800015c <__adddf3>
 80028a0:	4603      	mov	r3, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	4618      	mov	r0, r3
 80028a6:	4621      	mov	r1, r4
 80028a8:	f7fe f8e6 	bl	8000a78 <__aeabi_d2f>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <main+0x598>)
 80028b0:	601a      	str	r2, [r3, #0]

if(Yh <0)   angulo_magne2 = 360+(180/3.14)*atan2 (Yh,Xh);
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <main+0x598>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fbd8 	bl	8001070 <__aeabi_fcmplt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02b      	beq.n	800291e <main+0x516>
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <main+0x598>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fda4 	bl	8000418 <__aeabi_f2d>
 80028d0:	4605      	mov	r5, r0
 80028d2:	460e      	mov	r6, r1
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <main+0x59c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fd9d 	bl	8000418 <__aeabi_f2d>
 80028de:	4603      	mov	r3, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	461a      	mov	r2, r3
 80028e4:	4623      	mov	r3, r4
 80028e6:	4628      	mov	r0, r5
 80028e8:	4631      	mov	r1, r6
 80028ea:	f005 fe13 	bl	8008514 <atan2>
 80028ee:	a328      	add	r3, pc, #160	; (adr r3, 8002990 <main+0x588>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fde8 	bl	80004c8 <__aeabi_dmul>
 80028f8:	4603      	mov	r3, r0
 80028fa:	460c      	mov	r4, r1
 80028fc:	4618      	mov	r0, r3
 80028fe:	4621      	mov	r1, r4
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <main+0x5a0>)
 8002906:	f7fd fc29 	bl	800015c <__adddf3>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	4618      	mov	r0, r3
 8002910:	4621      	mov	r1, r4
 8002912:	f7fe f8b1 	bl	8000a78 <__aeabi_d2f>
 8002916:	4602      	mov	r2, r0
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <main+0x5a4>)
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e06a      	b.n	80029f4 <main+0x5ec>
else if(Yh <0 && Xh<0)angulo_magne2 = -(180/3.14)*atan2 (Yh,Xh);
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <main+0x598>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fba2 	bl	8001070 <__aeabi_fcmplt>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03e      	beq.n	80029b0 <main+0x5a8>
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <main+0x59c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fb98 	bl	8001070 <__aeabi_fcmplt>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d034      	beq.n	80029b0 <main+0x5a8>
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <main+0x598>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fd64 	bl	8000418 <__aeabi_f2d>
 8002950:	4605      	mov	r5, r0
 8002952:	460e      	mov	r6, r1
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <main+0x59c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fd5d 	bl	8000418 <__aeabi_f2d>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	461a      	mov	r2, r3
 8002964:	4623      	mov	r3, r4
 8002966:	4628      	mov	r0, r5
 8002968:	4631      	mov	r1, r6
 800296a:	f005 fdd3 	bl	8008514 <atan2>
 800296e:	a30a      	add	r3, pc, #40	; (adr r3, 8002998 <main+0x590>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd fda8 	bl	80004c8 <__aeabi_dmul>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	f7fe f87a 	bl	8000a78 <__aeabi_d2f>
 8002984:	4602      	mov	r2, r0
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <main+0x5a4>)
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e033      	b.n	80029f4 <main+0x5ec>
 800298c:	f3af 8000 	nop.w
 8002990:	61d59ae7 	.word	0x61d59ae7
 8002994:	404ca994 	.word	0x404ca994
 8002998:	61d59ae7 	.word	0x61d59ae7
 800299c:	c04ca994 	.word	0xc04ca994
 80029a0:	20000398 	.word	0x20000398
 80029a4:	20000478 	.word	0x20000478
 80029a8:	40768000 	.word	0x40768000
 80029ac:	200004bc 	.word	0x200004bc
else angulo_magne2 = (180/3.14)*atan2 (Yh,Xh);
 80029b0:	4bbb      	ldr	r3, [pc, #748]	; (8002ca0 <main+0x898>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd2f 	bl	8000418 <__aeabi_f2d>
 80029ba:	4605      	mov	r5, r0
 80029bc:	460e      	mov	r6, r1
 80029be:	4bb9      	ldr	r3, [pc, #740]	; (8002ca4 <main+0x89c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fd28 	bl	8000418 <__aeabi_f2d>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	461a      	mov	r2, r3
 80029ce:	4623      	mov	r3, r4
 80029d0:	4628      	mov	r0, r5
 80029d2:	4631      	mov	r1, r6
 80029d4:	f005 fd9e 	bl	8008514 <atan2>
 80029d8:	a3ad      	add	r3, pc, #692	; (adr r3, 8002c90 <main+0x888>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd fd73 	bl	80004c8 <__aeabi_dmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	460c      	mov	r4, r1
 80029e6:	4618      	mov	r0, r3
 80029e8:	4621      	mov	r1, r4
 80029ea:	f7fe f845 	bl	8000a78 <__aeabi_d2f>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4bad      	ldr	r3, [pc, #692]	; (8002ca8 <main+0x8a0>)
 80029f2:	601a      	str	r2, [r3, #0]

HMC5883L_readAngle(&compass,&MPU6050_1);
 80029f4:	49ad      	ldr	r1, [pc, #692]	; (8002cac <main+0x8a4>)
 80029f6:	48ae      	ldr	r0, [pc, #696]	; (8002cb0 <main+0x8a8>)
 80029f8:	f7ff f822 	bl	8001a40 <HMC5883L_readAngle>

//else if(Yh > 0) angulo_magne2 = (180/3.14)*atan2 (Xh,Yh);
//else angulo_magne2 = 360-(180/3.14)*atan2 (Xh,Yh);


	  P_previa =  P;
 80029fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80029fe:	f7fd fd0b 	bl	8000418 <__aeabi_f2d>
 8002a02:	4603      	mov	r3, r0
 8002a04:	460c      	mov	r4, r1
 8002a06:	4aab      	ldr	r2, [pc, #684]	; (8002cb4 <main+0x8ac>)
 8002a08:	e9c2 3400 	strd	r3, r4, [r2]

	 	 	Kalman = P/(P+var);
 8002a0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a10:	f7fe f888 	bl	8000b24 <__addsf3>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4619      	mov	r1, r3
 8002a18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a1a:	f7fe fa3f 	bl	8000e9c <__aeabi_fdiv>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fcf9 	bl	8000418 <__aeabi_f2d>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	4aa3      	ldr	r2, [pc, #652]	; (8002cb8 <main+0x8b0>)
 8002a2c:	e9c2 3400 	strd	r3, r4, [r2]

	 	 HAL_ADC_Start(&hadc1);
 8002a30:	48a2      	ldr	r0, [pc, #648]	; (8002cbc <main+0x8b4>)
 8002a32:	f000 fdf1 	bl	8003618 <HAL_ADC_Start>
	 	 	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 8002a36:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3a:	48a0      	ldr	r0, [pc, #640]	; (8002cbc <main+0x8b4>)
 8002a3c:	f000 fe9a 	bl	8003774 <HAL_ADC_PollForConversion>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <main+0x656>
	 	 		ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 8002a46:	489d      	ldr	r0, [pc, #628]	; (8002cbc <main+0x8b4>)
 8002a48:	f000 ff8e 	bl	8003968 <HAL_ADC_GetValue>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fcc0 	bl	80003d4 <__aeabi_ui2d>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4a99      	ldr	r2, [pc, #612]	; (8002cc0 <main+0x8b8>)
 8002a5a:	e9c2 3400 	strd	r3, r4, [r2]
	 	 	   }

	 	 	 X_estimate = X + Kalman*(ADC_val-X);
 8002a5e:	4b99      	ldr	r3, [pc, #612]	; (8002cc4 <main+0x8bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fcc6 	bl	80003f4 <__aeabi_i2d>
 8002a68:	4680      	mov	r8, r0
 8002a6a:	4689      	mov	r9, r1
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <main+0x8b8>)
 8002a6e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002a72:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <main+0x8bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fcbc 	bl	80003f4 <__aeabi_i2d>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	4628      	mov	r0, r5
 8002a86:	4631      	mov	r1, r6
 8002a88:	f7fd fb66 	bl	8000158 <__aeabi_dsub>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	4618      	mov	r0, r3
 8002a92:	4621      	mov	r1, r4
 8002a94:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <main+0x8b0>)
 8002a96:	cb18      	ldmia	r3, {r3, r4}
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	f7fd fd14 	bl	80004c8 <__aeabi_dmul>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	4649      	mov	r1, r9
 8002aac:	f7fd fb56 	bl	800015c <__adddf3>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	f7fd ffb6 	bl	8000a28 <__aeabi_d2iz>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <main+0x8c0>)
 8002ac0:	601a      	str	r2, [r3, #0]
	 	 		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <main+0x8b0>)
 8002ac4:	cb18      	ldmia	r3, {r3, r4}
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4623      	mov	r3, r4
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	497f      	ldr	r1, [pc, #508]	; (8002ccc <main+0x8c4>)
 8002ad0:	f7fd fb42 	bl	8000158 <__aeabi_dsub>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4621      	mov	r1, r4
 8002adc:	4b75      	ldr	r3, [pc, #468]	; (8002cb4 <main+0x8ac>)
 8002ade:	cb18      	ldmia	r3, {r3, r4}
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f7fd fcf0 	bl	80004c8 <__aeabi_dmul>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	461d      	mov	r5, r3
 8002aee:	4626      	mov	r6, r4
 8002af0:	4b74      	ldr	r3, [pc, #464]	; (8002cc4 <main+0x8bc>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b74      	ldr	r3, [pc, #464]	; (8002cc8 <main+0x8c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fc7a 	bl	80003f4 <__aeabi_i2d>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	a362      	add	r3, pc, #392	; (adr r3, 8002c98 <main+0x890>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b16:	f7fd fcd7 	bl	80004c8 <__aeabi_dmul>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	4631      	mov	r1, r6
 8002b26:	f7fd fb19 	bl	800015c <__adddf3>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4621      	mov	r1, r4
 8002b32:	f7fd ffa1 	bl	8000a78 <__aeabi_d2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	657b      	str	r3, [r7, #84]	; 0x54
	 	 		 	  X = X_estimate;
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <main+0x8c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a61      	ldr	r2, [pc, #388]	; (8002cc4 <main+0x8bc>)
 8002b40:	6013      	str	r3, [r2, #0]
	 	 		 	  X_estimate =(X_estimate)/10 -20;
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <main+0x8c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <main+0x8c8>)
 8002b48:	fb82 1203 	smull	r1, r2, r2, r3
 8002b4c:	1092      	asrs	r2, r2, #2
 8002b4e:	17db      	asrs	r3, r3, #31
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	3b14      	subs	r3, #20
 8002b54:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <main+0x8c0>)
 8002b56:	6013      	str	r3, [r2, #0]
	 	 		 	 X_estimate =X_estimate +60;
 8002b58:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <main+0x8c0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	333c      	adds	r3, #60	; 0x3c
 8002b5e:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <main+0x8c0>)
 8002b60:	6013      	str	r3, [r2, #0]
X_test = ADC_val/10 +40;
 8002b62:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <main+0x8b8>)
 8002b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <main+0x8cc>)
 8002b6e:	f7fd fdd5 	bl	800071c <__aeabi_ddiv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	4618      	mov	r0, r3
 8002b78:	4621      	mov	r1, r4
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <main+0x8d0>)
 8002b80:	f7fd faec 	bl	800015c <__adddf3>
 8002b84:	4603      	mov	r3, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	f7fd ff4c 	bl	8000a28 <__aeabi_d2iz>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <main+0x8d4>)
 8002b94:	601a      	str	r2, [r3, #0]

	 	 //UART
	 	 		 	char  ese[] = "s";
 8002b96:	2373      	movs	r3, #115	; 0x73
 8002b98:	863b      	strh	r3, [r7, #48]	; 0x30
	 	 		 	char  eMe[] = "M";
 8002b9a:	234d      	movs	r3, #77	; 0x4d
 8002b9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 	 		 	char  eme[] = "m";
 8002b9e:	236d      	movs	r3, #109	; 0x6d
 8002ba0:	853b      	strh	r3, [r7, #40]	; 0x28
	 	 		 	char  eSe[] = "S";
 8002ba2:	2353      	movs	r3, #83	; 0x53
 8002ba4:	84bb      	strh	r3, [r7, #36]	; 0x24

	 	 		 	  //conversion
	 // 		   KalmanAngle5 =  (KalmanAngle5 +300 )/2;//servo
	 //	 		 	 KalmanAngle4 =  KalmanAngle4*(-2) + 150;//base
	 //	 		 	 KalmanAngle1=  KalmanAngle1*(-4) + 300;//codo
	 	 		 	calcKinematic(&kinematic);
 8002ba6:	484e      	ldr	r0, [pc, #312]	; (8002ce0 <main+0x8d8>)
 8002ba8:	f7ff f972 	bl	8001e90 <calcKinematic>

	 	 		 	 gcvt(KalmanY_2.angle,10,palabra5);
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <main+0x8dc>)
 8002bae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <main+0x8e0>)
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	f003 fe99 	bl	80068ec <gcvt>
	 	 		 	 gcvt(MPU6050_1.KalmanAngleX,10,palabra2);
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <main+0x8a4>)
 8002bbc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <main+0x8e4>)
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	f003 fe92 	bl	80068ec <gcvt>
	 	 		 	// gcvt(MPU6050_1.jaw,10,palabra6);
	 	 		 	gcvt(-compass.Kalman,10,palabra6);
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <main+0x8a8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fc21 	bl	8000418 <__aeabi_f2d>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <main+0x8e8>)
 8002bd8:	220a      	movs	r2, #10
 8002bda:	f003 fe87 	bl	80068ec <gcvt>
	 	 		 	  itoa(X_estimate,info_kalman,10);
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <main+0x8c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	220a      	movs	r2, #10
 8002be4:	4943      	ldr	r1, [pc, #268]	; (8002cf4 <main+0x8ec>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fee6 	bl	80069b8 <itoa>
	 	 		 	  itoa(ADC_val,info_real,10);
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <main+0x8b8>)
 8002bee:	cb18      	ldmia	r3, {r3, r4}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	f7fd ff18 	bl	8000a28 <__aeabi_d2iz>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220a      	movs	r2, #10
 8002bfc:	493e      	ldr	r1, [pc, #248]	; (8002cf8 <main+0x8f0>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 feda 	bl	80069b8 <itoa>

	 	 		 	 gcvt(kinematic.servo,10,kinematic.servo_t);
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <main+0x8d8>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc05 	bl	8000418 <__aeabi_f2d>
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <main+0x8f4>)
 8002c10:	220a      	movs	r2, #10
 8002c12:	f003 fe6b 	bl	80068ec <gcvt>
	 	 			 gcvt(kinematic.codo,10,kinematic.codo_t);
 8002c16:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <main+0x8d8>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fbfc 	bl	8000418 <__aeabi_f2d>
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <main+0x8f8>)
 8002c22:	220a      	movs	r2, #10
 8002c24:	f003 fe62 	bl	80068ec <gcvt>
	 	 			 gcvt(kinematic.base,10,kinematic.base_t);
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <main+0x8d8>)
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fbf3 	bl	8000418 <__aeabi_f2d>
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <main+0x8fc>)
 8002c34:	220a      	movs	r2, #10
 8002c36:	f003 fe59 	bl	80068ec <gcvt>
//normal
	 	 		 	if( HAL_GetTick() -trans_time > 5){
 8002c3a:	f000 fc0b 	bl	8003454 <HAL_GetTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fbc7 	bl	80003d4 <__aeabi_ui2d>
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <main+0x900>)
 8002c48:	cb18      	ldmia	r3, {r3, r4}
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	f7fd fa83 	bl	8000158 <__aeabi_dsub>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	4618      	mov	r0, r3
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <main+0x904>)
 8002c60:	f7fd fec2 	bl	80009e8 <__aeabi_dcmpgt>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8088 	beq.w	8002d7c <main+0x974>

	 	    HAL_UART_Transmit(&huart1, (uint8_t*)eMe, sizeof(char), 100);
 8002c6c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c70:	2364      	movs	r3, #100	; 0x64
 8002c72:	2201      	movs	r2, #1
 8002c74:	4826      	ldr	r0, [pc, #152]	; (8002d10 <main+0x908>)
 8002c76:	f003 fcce 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1,(uint8_t*)palabra5,sizeof(float ), 100);//float son 4 int
 8002c7a:	2364      	movs	r3, #100	; 0x64
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <main+0x8e0>)
 8002c80:	4823      	ldr	r0, [pc, #140]	; (8002d10 <main+0x908>)
 8002c82:	f003 fcc8 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1, (uint8_t*)ese, sizeof(char), 100);
 8002c86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002c8a:	2364      	movs	r3, #100	; 0x64
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	e041      	b.n	8002d14 <main+0x90c>
 8002c90:	61d59ae7 	.word	0x61d59ae7
 8002c94:	404ca994 	.word	0x404ca994
 8002c98:	47ae147b 	.word	0x47ae147b
 8002c9c:	3f847ae1 	.word	0x3f847ae1
 8002ca0:	20000398 	.word	0x20000398
 8002ca4:	20000478 	.word	0x20000478
 8002ca8:	200004bc 	.word	0x200004bc
 8002cac:	20000510 	.word	0x20000510
 8002cb0:	20000294 	.word	0x20000294
 8002cb4:	20000620 	.word	0x20000620
 8002cb8:	200003a0 	.word	0x200003a0
 8002cbc:	200003c8 	.word	0x200003c8
 8002cc0:	20000508 	.word	0x20000508
 8002cc4:	20000628 	.word	0x20000628
 8002cc8:	20000500 	.word	0x20000500
 8002ccc:	3ff00000 	.word	0x3ff00000
 8002cd0:	66666667 	.word	0x66666667
 8002cd4:	40240000 	.word	0x40240000
 8002cd8:	40440000 	.word	0x40440000
 8002cdc:	20000394 	.word	0x20000394
 8002ce0:	20000168 	.word	0x20000168
 8002ce4:	200000d8 	.word	0x200000d8
 8002ce8:	200005f8 	.word	0x200005f8
 8002cec:	200002c8 	.word	0x200002c8
 8002cf0:	200005d8 	.word	0x200005d8
 8002cf4:	200003a8 	.word	0x200003a8
 8002cf8:	200004c0 	.word	0x200004c0
 8002cfc:	200001c8 	.word	0x200001c8
 8002d00:	200001a8 	.word	0x200001a8
 8002d04:	20000188 	.word	0x20000188
 8002d08:	200002b0 	.word	0x200002b0
 8002d0c:	40140000 	.word	0x40140000
 8002d10:	2000047c 	.word	0x2000047c
 8002d14:	481a      	ldr	r0, [pc, #104]	; (8002d80 <main+0x978>)
 8002d16:	f003 fc7e 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1,(uint8_t*)palabra6,sizeof(float ), 100);
 8002d1a:	2364      	movs	r3, #100	; 0x64
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	4919      	ldr	r1, [pc, #100]	; (8002d84 <main+0x97c>)
 8002d20:	4817      	ldr	r0, [pc, #92]	; (8002d80 <main+0x978>)
 8002d22:	f003 fc78 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1, (uint8_t*)eme, sizeof(char), 100);
 8002d26:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d2a:	2364      	movs	r3, #100	; 0x64
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <main+0x978>)
 8002d30:	f003 fc71 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1,(uint8_t*)palabra2,sizeof(float ), 100);
 8002d34:	2364      	movs	r3, #100	; 0x64
 8002d36:	2204      	movs	r2, #4
 8002d38:	4913      	ldr	r1, [pc, #76]	; (8002d88 <main+0x980>)
 8002d3a:	4811      	ldr	r0, [pc, #68]	; (8002d80 <main+0x978>)
 8002d3c:	f003 fc6b 	bl	8006616 <HAL_UART_Transmit>
	 		HAL_UART_Transmit(&huart1, (uint8_t*)eSe, sizeof(char), 100);
 8002d40:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d44:	2364      	movs	r3, #100	; 0x64
 8002d46:	2201      	movs	r2, #1
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <main+0x978>)
 8002d4a:	f003 fc64 	bl	8006616 <HAL_UART_Transmit>
	 			HAL_UART_Transmit(&huart1,(uint8_t*)info_kalman,sizeof(float ), 100);
 8002d4e:	2364      	movs	r3, #100	; 0x64
 8002d50:	2204      	movs	r2, #4
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <main+0x984>)
 8002d54:	480a      	ldr	r0, [pc, #40]	; (8002d80 <main+0x978>)
 8002d56:	f003 fc5e 	bl	8006616 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)ln, sizeof(comma), 100);
 8002d5a:	2364      	movs	r3, #100	; 0x64
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	490c      	ldr	r1, [pc, #48]	; (8002d90 <main+0x988>)
 8002d60:	4807      	ldr	r0, [pc, #28]	; (8002d80 <main+0x978>)
 8002d62:	f003 fc58 	bl	8006616 <HAL_UART_Transmit>


	 				trans_time = HAL_GetTick();
 8002d66:	f000 fb75 	bl	8003454 <HAL_GetTick>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb31 	bl	80003d4 <__aeabi_ui2d>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <main+0x98c>)
 8002d78:	e9c2 3400 	strd	r3, r4, [r2]
  {
 8002d7c:	f7ff bbfc 	b.w	8002578 <main+0x170>
 8002d80:	2000047c 	.word	0x2000047c
 8002d84:	200005d8 	.word	0x200005d8
 8002d88:	200002c8 	.word	0x200002c8
 8002d8c:	200003a8 	.word	0x200003a8
 8002d90:	200001e8 	.word	0x200001e8
 8002d94:	200002b0 	.word	0x200002b0

08002d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b094      	sub	sp, #80	; 0x50
 8002d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da2:	2228      	movs	r2, #40	; 0x28
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fe13 	bl	80069d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fe3f 	bl	8005a60 <HAL_RCC_OscConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002de8:	f000 f928 	bl	800303c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dec:	230f      	movs	r3, #15
 8002dee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 f8aa 	bl	8005f60 <HAL_RCC_ClockConfig>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002e12:	f000 f913 	bl	800303c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e16:	2302      	movs	r3, #2
 8002e18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fa39 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e2c:	f000 f906 	bl	800303c <Error_Handler>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3750      	adds	r7, #80	; 0x50
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e4a:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <MX_ADC1_Init+0x78>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e76:	f000 faf7 	bl	8003468 <HAL_ADC_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002e80:	f000 f8dc 	bl	800303c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_ADC1_Init+0x74>)
 8002e96:	f000 fd73 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002ea0:	f000 f8cc 	bl	800303c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200003c8 	.word	0x200003c8
 8002eb0:	40012400 	.word	0x40012400

08002eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <MX_I2C1_Init+0x58>)
 8002ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ef2:	f001 f91f 	bl	8004134 <HAL_I2C_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002efc:	f000 f89e 	bl	800303c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200002ec 	.word	0x200002ec
 8002f08:	40005400 	.word	0x40005400
 8002f0c:	00061a80 	.word	0x00061a80

08002f10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <MX_I2C2_Init+0x58>)
 8002f1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f4c:	4804      	ldr	r0, [pc, #16]	; (8002f60 <MX_I2C2_Init+0x50>)
 8002f4e:	f001 f8f1 	bl	8004134 <HAL_I2C_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002f58:	f000 f870 	bl	800303c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000340 	.word	0x20000340
 8002f64:	40005800 	.word	0x40005800
 8002f68:	00061a80 	.word	0x00061a80

08002f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <MX_USART1_UART_Init+0x50>)
 8002f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f92:	220c      	movs	r2, #12
 8002f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_USART1_UART_Init+0x4c>)
 8002fa4:	f003 faea 	bl	800657c <HAL_UART_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fae:	f000 f845 	bl	800303c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000047c 	.word	0x2000047c
 8002fbc:	40013800 	.word	0x40013800

08002fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_GPIO_Init+0x74>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	; (8003034 <MX_GPIO_Init+0x74>)
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_GPIO_Init+0x74>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_GPIO_Init+0x74>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <MX_GPIO_Init+0x74>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_GPIO_Init+0x74>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	2120      	movs	r1, #32
 8003008:	480b      	ldr	r0, [pc, #44]	; (8003038 <MX_GPIO_Init+0x78>)
 800300a:	f001 f87b 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800300e:	2320      	movs	r3, #32
 8003010:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2302      	movs	r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4619      	mov	r1, r3
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <MX_GPIO_Init+0x78>)
 8003026:	f000 ff13 	bl	8003e50 <HAL_GPIO_Init>

}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	40010800 	.word	0x40010800

0800303c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003040:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003042:	e7fe      	b.n	8003042 <Error_Handler+0x6>

08003044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_MspInit+0x5c>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <HAL_MspInit+0x5c>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6193      	str	r3, [r2, #24]
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_MspInit+0x5c>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_MspInit+0x5c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_MspInit+0x5c>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_MspInit+0x5c>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_MspInit+0x60>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_MspInit+0x60>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010000 	.word	0x40010000

080030a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a14      	ldr	r2, [pc, #80]	; (8003114 <HAL_ADC_MspInit+0x6c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d121      	bne.n	800310c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_ADC_MspInit+0x70>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030fc:	2303      	movs	r3, #3
 80030fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 0310 	add.w	r3, r7, #16
 8003104:	4619      	mov	r1, r3
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <HAL_ADC_MspInit+0x74>)
 8003108:	f000 fea2 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800310c:	bf00      	nop
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012400 	.word	0x40012400
 8003118:	40021000 	.word	0x40021000
 800311c:	40010800 	.word	0x40010800

08003120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0318 	add.w	r3, r7, #24
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_I2C_MspInit+0xc8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d124      	bne.n	800318a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003158:	23c0      	movs	r3, #192	; 0xc0
 800315a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315c:	2312      	movs	r3, #18
 800315e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	4619      	mov	r1, r3
 800316a:	4821      	ldr	r0, [pc, #132]	; (80031f0 <HAL_I2C_MspInit+0xd0>)
 800316c:	f000 fe70 	bl	8003e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 8003176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800317a:	61d3      	str	r3, [r2, #28]
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003188:	e029      	b.n	80031de <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_I2C_MspInit+0xd4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d124      	bne.n	80031de <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 800319a:	f043 0308 	orr.w	r3, r3, #8
 800319e:	6193      	str	r3, [r2, #24]
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b2:	2312      	movs	r3, #18
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	f107 0318 	add.w	r3, r7, #24
 80031be:	4619      	mov	r1, r3
 80031c0:	480b      	ldr	r0, [pc, #44]	; (80031f0 <HAL_I2C_MspInit+0xd0>)
 80031c2:	f000 fe45 	bl	8003e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a08      	ldr	r2, [pc, #32]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 80031cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031d0:	61d3      	str	r3, [r2, #28]
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_I2C_MspInit+0xcc>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40005400 	.word	0x40005400
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	40005800 	.word	0x40005800

080031f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_UART_MspInit+0x8c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d131      	bne.n	800327c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_UART_MspInit+0x90>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_UART_MspInit+0x90>)
 800321e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003222:	6193      	str	r3, [r2, #24]
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_UART_MspInit+0x90>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_UART_MspInit+0x90>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_UART_MspInit+0x90>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_UART_MspInit+0x90>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	4619      	mov	r1, r3
 800325c:	480b      	ldr	r0, [pc, #44]	; (800328c <HAL_UART_MspInit+0x94>)
 800325e:	f000 fdf7 	bl	8003e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4619      	mov	r1, r3
 8003276:	4805      	ldr	r0, [pc, #20]	; (800328c <HAL_UART_MspInit+0x94>)
 8003278:	f000 fdea 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40013800 	.word	0x40013800
 8003288:	40021000 	.word	0x40021000
 800328c:	40010800 	.word	0x40010800

08003290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <NMI_Handler+0x4>

08003296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <HardFault_Handler+0x4>

0800329c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <MemManage_Handler+0x4>

080032a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <BusFault_Handler+0x4>

080032a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <UsageFault_Handler+0x4>

080032ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d6:	f000 f8ab 	bl	8003430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <_sbrk+0x5c>)
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <_sbrk+0x60>)
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <_sbrk+0x64>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <_sbrk+0x64>)
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <_sbrk+0x68>)
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	429a      	cmp	r2, r3
 800330e:	d207      	bcs.n	8003320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003310:	f003 fb10 	bl	8006934 <__errno>
 8003314:	4602      	mov	r2, r0
 8003316:	230c      	movs	r3, #12
 8003318:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e009      	b.n	8003334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <_sbrk+0x64>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <_sbrk+0x64>)
 8003330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003332:	68fb      	ldr	r3, [r7, #12]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20005000 	.word	0x20005000
 8003340:	00000400 	.word	0x00000400
 8003344:	200002b8 	.word	0x200002b8
 8003348:	20000638 	.word	0x20000638

0800334c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003358:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800335a:	e003      	b.n	8003364 <LoopCopyDataInit>

0800335c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800335e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003360:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003362:	3104      	adds	r1, #4

08003364 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003364:	480a      	ldr	r0, [pc, #40]	; (8003390 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003368:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800336a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800336c:	d3f6      	bcc.n	800335c <CopyDataInit>
  ldr r2, =_sbss
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003370:	e002      	b.n	8003378 <LoopFillZerobss>

08003372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003372:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003374:	f842 3b04 	str.w	r3, [r2], #4

08003378 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800337a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800337c:	d3f9      	bcc.n	8003372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800337e:	f7ff ffe5 	bl	800334c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003382:	f003 fadd 	bl	8006940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003386:	f7ff f83f 	bl	8002408 <main>
  bx lr
 800338a:	4770      	bx	lr
  ldr r3, =_sidata
 800338c:	0800aec8 	.word	0x0800aec8
  ldr r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003394:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8003398:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 800339c:	20000634 	.word	0x20000634

080033a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033a0:	e7fe      	b.n	80033a0 <ADC1_2_IRQHandler>
	...

080033a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_Init+0x28>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_Init+0x28>)
 80033ae:	f043 0310 	orr.w	r3, r3, #16
 80033b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b4:	2003      	movs	r0, #3
 80033b6:	f000 fd17 	bl	8003de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f000 f808 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c0:	f7ff fe40 	bl	8003044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40022000 	.word	0x40022000

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_InitTick+0x54>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x58>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fd21 	bl	8003e36 <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00e      	b.n	800341c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d80a      	bhi.n	800341a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003404:	2200      	movs	r2, #0
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 fcf7 	bl	8003dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <HAL_InitTick+0x5c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200001f0 	.word	0x200001f0
 8003428:	200001f8 	.word	0x200001f8
 800342c:	200001f4 	.word	0x200001f4

08003430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_IncTick+0x1c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_IncTick+0x20>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <HAL_IncTick+0x20>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	200001f8 	.word	0x200001f8
 8003450:	2000062c 	.word	0x2000062c

08003454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return uwTick;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_GetTick+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	2000062c 	.word	0x2000062c

08003468 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0be      	b.n	8003608 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fdfe 	bl	80030a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fbb1 	bl	8003c14 <ADC_ConversionStop_Disable>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 8099 	bne.w	80035f6 <HAL_ADC_Init+0x18e>
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8095 	bne.w	80035f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7b1b      	ldrb	r3, [r3, #12]
 80034ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d003      	beq.n	800350a <HAL_ADC_Init+0xa2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_ADC_Init+0xa8>
 800350a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800350e:	e000      	b.n	8003512 <HAL_ADC_Init+0xaa>
 8003510:	2300      	movs	r3, #0
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7d1b      	ldrb	r3, [r3, #20]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d119      	bne.n	8003554 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7b1b      	ldrb	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	3b01      	subs	r3, #1
 800352e:	035a      	lsls	r2, r3, #13
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e00b      	b.n	8003554 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_ADC_Init+0x1a8>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	430b      	orrs	r3, r1
 800357a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003584:	d003      	beq.n	800358e <HAL_ADC_Init+0x126>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	3b01      	subs	r3, #1
 8003594:	051b      	lsls	r3, r3, #20
 8003596:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_ADC_Init+0x1ac>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035d2:	e018      	b.n	8003606 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	f023 0312 	bic.w	r3, r3, #18
 80035dc:	f043 0210 	orr.w	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035f4:	e007      	b.n	8003606 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	ffe1f7fd 	.word	0xffe1f7fd
 8003614:	ff1f0efe 	.word	0xff1f0efe

08003618 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Start+0x1a>
 800362e:	2302      	movs	r3, #2
 8003630:	e098      	b.n	8003764 <HAL_ADC_Start+0x14c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa98 	bl	8003b70 <ADC_Enable>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8087 	bne.w	800375a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_ADC_Start+0x154>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d105      	bne.n	8003676 <HAL_ADC_Start+0x5e>
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_ADC_Start+0x158>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d026      	beq.n	80036de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003698:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036a0:	e01d      	b.n	80036de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <HAL_ADC_Start+0x158>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_ADC_Start+0xaa>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	; (800376c <HAL_ADC_Start+0x154>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10d      	bne.n	80036de <HAL_ADC_Start+0xc6>
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_ADC_Start+0x158>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f023 0206 	bic.w	r2, r3, #6
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036f6:	e002      	b.n	80036fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0202 	mvn.w	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800371a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800371e:	d113      	bne.n	8003748 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_ADC_Start+0x154>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d105      	bne.n	8003736 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_ADC_Start+0x158>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e00c      	b.n	8003762 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	e003      	b.n	8003762 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40012800 	.word	0x40012800
 8003770:	40012400 	.word	0x40012400

08003774 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800378a:	f7ff fe63 	bl	8003454 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0c8      	b.n	8003948 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d12a      	bne.n	800381a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d123      	bne.n	800381a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037d2:	e01a      	b.n	800380a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d016      	beq.n	800380a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_ADC_PollForConversion+0x7e>
 80037e2:	f7ff fe37 	bl	8003454 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20b      	bcs.n	800380a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e09e      	b.n	8003948 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0dd      	beq.n	80037d4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003818:	e06c      	b.n	80038f4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <HAL_ADC_PollForConversion+0x1dc>)
 800381c:	681c      	ldr	r4, [r3, #0]
 800381e:	2002      	movs	r0, #2
 8003820:	f002 fdf0 	bl	8006404 <HAL_RCCEx_GetPeriphCLKFreq>
 8003824:	4603      	mov	r3, r0
 8003826:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6919      	ldr	r1, [r3, #16]
 8003830:	4b48      	ldr	r3, [pc, #288]	; (8003954 <HAL_ADC_PollForConversion+0x1e0>)
 8003832:	400b      	ands	r3, r1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d118      	bne.n	800386a <HAL_ADC_PollForConversion+0xf6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68d9      	ldr	r1, [r3, #12]
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_ADC_PollForConversion+0x1e4>)
 8003840:	400b      	ands	r3, r1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d111      	bne.n	800386a <HAL_ADC_PollForConversion+0xf6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6919      	ldr	r1, [r3, #16]
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_ADC_PollForConversion+0x1e8>)
 800384e:	400b      	ands	r3, r1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_ADC_PollForConversion+0xf2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_ADC_PollForConversion+0x1ec>)
 800385c:	400b      	ands	r3, r1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_PollForConversion+0xf2>
 8003862:	2314      	movs	r3, #20
 8003864:	e020      	b.n	80038a8 <HAL_ADC_PollForConversion+0x134>
 8003866:	2329      	movs	r3, #41	; 0x29
 8003868:	e01e      	b.n	80038a8 <HAL_ADC_PollForConversion+0x134>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6919      	ldr	r1, [r3, #16]
 8003870:	4b3a      	ldr	r3, [pc, #232]	; (800395c <HAL_ADC_PollForConversion+0x1e8>)
 8003872:	400b      	ands	r3, r1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <HAL_ADC_PollForConversion+0x112>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68d9      	ldr	r1, [r3, #12]
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_ADC_PollForConversion+0x1ec>)
 8003880:	400b      	ands	r3, r1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <HAL_ADC_PollForConversion+0x12e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6919      	ldr	r1, [r3, #16]
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_ADC_PollForConversion+0x1f0>)
 800388e:	400b      	ands	r3, r1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x132>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68d9      	ldr	r1, [r3, #12]
 800389a:	4b32      	ldr	r3, [pc, #200]	; (8003964 <HAL_ADC_PollForConversion+0x1f0>)
 800389c:	400b      	ands	r3, r1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x132>
 80038a2:	2354      	movs	r3, #84	; 0x54
 80038a4:	e000      	b.n	80038a8 <HAL_ADC_PollForConversion+0x134>
 80038a6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038ae:	e01d      	b.n	80038ec <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d016      	beq.n	80038e6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_ADC_PollForConversion+0x15a>
 80038be:	f7ff fdc9 	bl	8003454 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d20b      	bcs.n	80038e6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e030      	b.n	8003948 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3301      	adds	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d8dd      	bhi.n	80038b0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0212 	mvn.w	r2, #18
 80038fc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003914:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003918:	d115      	bne.n	8003946 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800391e:	2b00      	cmp	r3, #0
 8003920:	d111      	bne.n	8003946 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	200001f0 	.word	0x200001f0
 8003954:	24924924 	.word	0x24924924
 8003958:	00924924 	.word	0x00924924
 800395c:	12492492 	.word	0x12492492
 8003960:	00492492 	.word	0x00492492
 8003964:	00249249 	.word	0x00249249

08003968 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x20>
 800399c:	2302      	movs	r3, #2
 800399e:	e0dc      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x1da>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d81c      	bhi.n	80039ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	3b05      	subs	r3, #5
 80039c2:	221f      	movs	r2, #31
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4019      	ands	r1, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	3b05      	subs	r3, #5
 80039dc:	fa00 f203 	lsl.w	r2, r0, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34
 80039e8:	e03c      	b.n	8003a64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d81c      	bhi.n	8003a2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	3b23      	subs	r3, #35	; 0x23
 8003a04:	221f      	movs	r2, #31
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	4019      	ands	r1, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3b23      	subs	r3, #35	; 0x23
 8003a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2a:	e01b      	b.n	8003a64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b41      	subs	r3, #65	; 0x41
 8003a3e:	221f      	movs	r2, #31
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	4019      	ands	r1, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	3b41      	subs	r3, #65	; 0x41
 8003a58:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d91c      	bls.n	8003aa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68d9      	ldr	r1, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b1e      	subs	r3, #30
 8003a7e:	2207      	movs	r2, #7
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	4019      	ands	r1, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6898      	ldr	r0, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	3b1e      	subs	r3, #30
 8003a98:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e019      	b.n	8003ada <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6919      	ldr	r1, [r3, #16]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	4019      	ands	r1, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6898      	ldr	r0, [r3, #8]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d003      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ae6:	2b11      	cmp	r3, #17
 8003ae8:	d132      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_ADC_ConfigChannel+0x1e4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d126      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b10:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d11a      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <HAL_ADC_ConfigChannel+0x1ec>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	0c9a      	lsrs	r2, r3, #18
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b30:	e002      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f9      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x1b2>
 8003b3e:	e007      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40012400 	.word	0x40012400
 8003b68:	200001f0 	.word	0x200001f0
 8003b6c:	431bde83 	.word	0x431bde83

08003b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d039      	beq.n	8003c02 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <ADC_Enable+0x9c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <ADC_Enable+0xa0>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	0c9b      	lsrs	r3, r3, #18
 8003baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bac:	e002      	b.n	8003bb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f9      	bne.n	8003bae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bba:	f7ff fc4b 	bl	8003454 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bc0:	e018      	b.n	8003bf4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc2:	f7ff fc47 	bl	8003454 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d911      	bls.n	8003bf4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e007      	b.n	8003c04 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d1df      	bne.n	8003bc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200001f0 	.word	0x200001f0
 8003c10:	431bde83 	.word	0x431bde83

08003c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d127      	bne.n	8003c7e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c3e:	f7ff fc09 	bl	8003454 <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c44:	e014      	b.n	8003c70 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c46:	f7ff fc05 	bl	8003454 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d90d      	bls.n	8003c70 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d0e3      	beq.n	8003c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db0a      	blt.n	8003d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	490c      	ldr	r1, [pc, #48]	; (8003d38 <__NVIC_SetPriority+0x4c>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d14:	e00a      	b.n	8003d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4908      	ldr	r1, [pc, #32]	; (8003d3c <__NVIC_SetPriority+0x50>)
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3b04      	subs	r3, #4
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	761a      	strb	r2, [r3, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f1c3 0307 	rsb	r3, r3, #7
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	bf28      	it	cs
 8003d5e:	2304      	movcs	r3, #4
 8003d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d902      	bls.n	8003d70 <NVIC_EncodePriority+0x30>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3b03      	subs	r3, #3
 8003d6e:	e000      	b.n	8003d72 <NVIC_EncodePriority+0x32>
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d88:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	43d9      	mvns	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	4313      	orrs	r3, r2
         );
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db4:	d301      	bcc.n	8003dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00f      	b.n	8003dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <SysTick_Config+0x40>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	f7ff ff90 	bl	8003cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <SysTick_Config+0x40>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SysTick_Config+0x40>)
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000e010 	.word	0xe000e010

08003de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff49 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e10:	f7ff ff5e 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff ff90 	bl	8003d40 <NVIC_EncodePriority>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff5f 	bl	8003cec <__NVIC_SetPriority>
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffb0 	bl	8003da4 <SysTick_Config>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b08b      	sub	sp, #44	; 0x2c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	e127      	b.n	80040b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e64:	2201      	movs	r2, #1
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	f040 8116 	bne.w	80040ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b12      	cmp	r3, #18
 8003e88:	d034      	beq.n	8003ef4 <HAL_GPIO_Init+0xa4>
 8003e8a:	2b12      	cmp	r3, #18
 8003e8c:	d80d      	bhi.n	8003eaa <HAL_GPIO_Init+0x5a>
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d02b      	beq.n	8003eea <HAL_GPIO_Init+0x9a>
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d804      	bhi.n	8003ea0 <HAL_GPIO_Init+0x50>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d031      	beq.n	8003efe <HAL_GPIO_Init+0xae>
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e9e:	e048      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d043      	beq.n	8003f2c <HAL_GPIO_Init+0xdc>
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_GPIO_Init+0x90>
          break;
 8003ea8:	e043      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003eaa:	4a89      	ldr	r2, [pc, #548]	; (80040d0 <HAL_GPIO_Init+0x280>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d026      	beq.n	8003efe <HAL_GPIO_Init+0xae>
 8003eb0:	4a87      	ldr	r2, [pc, #540]	; (80040d0 <HAL_GPIO_Init+0x280>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d806      	bhi.n	8003ec4 <HAL_GPIO_Init+0x74>
 8003eb6:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <HAL_GPIO_Init+0x284>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d020      	beq.n	8003efe <HAL_GPIO_Init+0xae>
 8003ebc:	4a86      	ldr	r2, [pc, #536]	; (80040d8 <HAL_GPIO_Init+0x288>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <HAL_GPIO_Init+0xae>
          break;
 8003ec2:	e036      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ec4:	4a85      	ldr	r2, [pc, #532]	; (80040dc <HAL_GPIO_Init+0x28c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_GPIO_Init+0xae>
 8003eca:	4a85      	ldr	r2, [pc, #532]	; (80040e0 <HAL_GPIO_Init+0x290>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d016      	beq.n	8003efe <HAL_GPIO_Init+0xae>
 8003ed0:	4a84      	ldr	r2, [pc, #528]	; (80040e4 <HAL_GPIO_Init+0x294>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_Init+0xae>
          break;
 8003ed6:	e02c      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	623b      	str	r3, [r7, #32]
          break;
 8003ede:	e028      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	623b      	str	r3, [r7, #32]
          break;
 8003ee8:	e023      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	623b      	str	r3, [r7, #32]
          break;
 8003ef2:	e01e      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	623b      	str	r3, [r7, #32]
          break;
 8003efc:	e019      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f06:	2304      	movs	r3, #4
 8003f08:	623b      	str	r3, [r7, #32]
          break;
 8003f0a:	e012      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f14:	2308      	movs	r3, #8
 8003f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	611a      	str	r2, [r3, #16]
          break;
 8003f1e:	e008      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f20:	2308      	movs	r3, #8
 8003f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	615a      	str	r2, [r3, #20]
          break;
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
          break;
 8003f30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2bff      	cmp	r3, #255	; 0xff
 8003f36:	d801      	bhi.n	8003f3c <HAL_GPIO_Init+0xec>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	e001      	b.n	8003f40 <HAL_GPIO_Init+0xf0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2bff      	cmp	r3, #255	; 0xff
 8003f46:	d802      	bhi.n	8003f4e <HAL_GPIO_Init+0xfe>
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_Init+0x104>
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3b08      	subs	r3, #8
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8096 	beq.w	80040ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f82:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_GPIO_Init+0x298>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_GPIO_Init+0x298>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6193      	str	r3, [r2, #24]
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_GPIO_Init+0x298>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f9a:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_GPIO_Init+0x29c>)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4b      	ldr	r2, [pc, #300]	; (80040f0 <HAL_GPIO_Init+0x2a0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_GPIO_Init+0x19e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <HAL_GPIO_Init+0x2a4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00d      	beq.n	8003fea <HAL_GPIO_Init+0x19a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a49      	ldr	r2, [pc, #292]	; (80040f8 <HAL_GPIO_Init+0x2a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x196>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a48      	ldr	r2, [pc, #288]	; (80040fc <HAL_GPIO_Init+0x2ac>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_GPIO_Init+0x192>
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x1a0>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x1a0>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x1a0>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x1a0>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004000:	493a      	ldr	r1, [pc, #232]	; (80040ec <HAL_GPIO_Init+0x29c>)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4938      	ldr	r1, [pc, #224]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
 8004026:	e006      	b.n	8004036 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	43db      	mvns	r3, r3
 8004030:	4933      	ldr	r1, [pc, #204]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004032:	4013      	ands	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	492e      	ldr	r1, [pc, #184]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
 800404e:	e006      	b.n	800405e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	43db      	mvns	r3, r3
 8004058:	4929      	ldr	r1, [pc, #164]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 800405a:	4013      	ands	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	4924      	ldr	r1, [pc, #144]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
 8004076:	e006      	b.n	8004086 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	43db      	mvns	r3, r3
 8004080:	491f      	ldr	r1, [pc, #124]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004082:	4013      	ands	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	491a      	ldr	r1, [pc, #104]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	60cb      	str	r3, [r1, #12]
 800409e:	e006      	b.n	80040ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	4915      	ldr	r1, [pc, #84]	; (8004100 <HAL_GPIO_Init+0x2b0>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	3301      	adds	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f aed0 	bne.w	8003e64 <HAL_GPIO_Init+0x14>
  }
}
 80040c4:	bf00      	nop
 80040c6:	372c      	adds	r7, #44	; 0x2c
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	10210000 	.word	0x10210000
 80040d4:	10110000 	.word	0x10110000
 80040d8:	10120000 	.word	0x10120000
 80040dc:	10310000 	.word	0x10310000
 80040e0:	10320000 	.word	0x10320000
 80040e4:	10220000 	.word	0x10220000
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010800 	.word	0x40010800
 80040f4:	40010c00 	.word	0x40010c00
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	40010400 	.word	0x40010400

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004120:	e003      	b.n	800412a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e11f      	b.n	8004386 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe ffe0 	bl	8003120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004198:	f002 f838 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 800419c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a7b      	ldr	r2, [pc, #492]	; (8004390 <HAL_I2C_Init+0x25c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d807      	bhi.n	80041b8 <HAL_I2C_Init+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_I2C_Init+0x260>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e006      	b.n	80041c6 <HAL_I2C_Init+0x92>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a77      	ldr	r2, [pc, #476]	; (8004398 <HAL_I2C_Init+0x264>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	bf94      	ite	ls
 80041c0:	2301      	movls	r3, #1
 80041c2:	2300      	movhi	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0db      	b.n	8004386 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a72      	ldr	r2, [pc, #456]	; (800439c <HAL_I2C_Init+0x268>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a64      	ldr	r2, [pc, #400]	; (8004390 <HAL_I2C_Init+0x25c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d802      	bhi.n	8004208 <HAL_I2C_Init+0xd4>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	e009      	b.n	800421c <HAL_I2C_Init+0xe8>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	4a63      	ldr	r2, [pc, #396]	; (80043a0 <HAL_I2C_Init+0x26c>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	3301      	adds	r3, #1
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	430b      	orrs	r3, r1
 8004222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800422e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4956      	ldr	r1, [pc, #344]	; (8004390 <HAL_I2C_Init+0x25c>)
 8004238:	428b      	cmp	r3, r1
 800423a:	d80d      	bhi.n	8004258 <HAL_I2C_Init+0x124>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e59      	subs	r1, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fbb1 f3f3 	udiv	r3, r1, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004250:	2b04      	cmp	r3, #4
 8004252:	bf38      	it	cc
 8004254:	2304      	movcc	r3, #4
 8004256:	e04f      	b.n	80042f8 <HAL_I2C_Init+0x1c4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d111      	bne.n	8004284 <HAL_I2C_Init+0x150>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1e58      	subs	r0, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	440b      	add	r3, r1
 800426e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e012      	b.n	80042aa <HAL_I2C_Init+0x176>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1e58      	subs	r0, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	0099      	lsls	r1, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	fbb0 f3f3 	udiv	r3, r0, r3
 800429a:	3301      	adds	r3, #1
 800429c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Init+0x17e>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e022      	b.n	80042f8 <HAL_I2C_Init+0x1c4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10e      	bne.n	80042d8 <HAL_I2C_Init+0x1a4>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1e58      	subs	r0, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	440b      	add	r3, r1
 80042c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Init+0x1c4>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e58      	subs	r0, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	0099      	lsls	r1, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	6809      	ldr	r1, [r1, #0]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004326:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6911      	ldr	r1, [r2, #16]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68d2      	ldr	r2, [r2, #12]
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	000186a0 	.word	0x000186a0
 8004394:	001e847f 	.word	0x001e847f
 8004398:	003d08ff 	.word	0x003d08ff
 800439c:	431bde83 	.word	0x431bde83
 80043a0:	10624dd3 	.word	0x10624dd3

080043a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	460b      	mov	r3, r1
 80043b2:	817b      	strh	r3, [r7, #10]
 80043b4:	4613      	mov	r3, r2
 80043b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043b8:	f7ff f84c 	bl	8003454 <HAL_GetTick>
 80043bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	f040 80e0 	bne.w	800458c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2319      	movs	r3, #25
 80043d2:	2201      	movs	r2, #1
 80043d4:	4970      	ldr	r1, [pc, #448]	; (8004598 <HAL_I2C_Master_Transmit+0x1f4>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f001 f966 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0d3      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x50>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e0cc      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d007      	beq.n	800441a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2221      	movs	r2, #33	; 0x21
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2210      	movs	r2, #16
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a50      	ldr	r2, [pc, #320]	; (800459c <HAL_I2C_Master_Transmit+0x1f8>)
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800445c:	8979      	ldrh	r1, [r7, #10]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fe52 	bl	800510c <I2C_MasterRequestWrite>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e08d      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004488:	e066      	b.n	8004558 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 f9e0 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e06b      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d11b      	bne.n	800452c <HAL_I2C_Master_Transmit+0x188>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	6a39      	ldr	r1, [r7, #32]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 f9d0 	bl	80058d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b04      	cmp	r3, #4
 8004542:	d107      	bne.n	8004554 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e01a      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d194      	bne.n	800448a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	00100002 	.word	0x00100002
 800459c:	ffff0000 	.word	0xffff0000

080045a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	461a      	mov	r2, r3
 80045ac:	460b      	mov	r3, r1
 80045ae:	817b      	strh	r3, [r7, #10]
 80045b0:	4613      	mov	r3, r2
 80045b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045b8:	f7fe ff4c 	bl	8003454 <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	f040 8238 	bne.w	8004a3c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2319      	movs	r3, #25
 80045d2:	2201      	movs	r2, #1
 80045d4:	497e      	ldr	r1, [pc, #504]	; (80047d0 <HAL_I2C_Master_Receive+0x230>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f001 f866 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	e22b      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_I2C_Master_Receive+0x54>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e224      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d007      	beq.n	800461a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2222      	movs	r2, #34	; 0x22
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2210      	movs	r2, #16
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	893a      	ldrh	r2, [r7, #8]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_I2C_Master_Receive+0x234>)
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fdd4 	bl	8005210 <I2C_MasterRequestRead>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e1e5      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e1b9      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11d      	bne.n	80046e6 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046e2:	b662      	cpsie	i
 80046e4:	e197      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d11d      	bne.n	800472a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046fe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004726:	b662      	cpsie	i
 8004728:	e175      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004750:	e161      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b03      	cmp	r3, #3
 8004758:	f200 811a 	bhi.w	8004990 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b01      	cmp	r3, #1
 8004762:	d123      	bne.n	80047ac <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f001 f8f5 	bl	8005958 <I2C_WaitOnRXNEFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e162      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047aa:	e134      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d150      	bne.n	8004856 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <HAL_I2C_Master_Receive+0x238>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 ff72 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e137      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
 80047ce:	bf00      	nop
 80047d0:	00100002 	.word	0x00100002
 80047d4:	ffff0000 	.word	0xffff0000
 80047d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047dc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004820:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004854:	e0df      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2200      	movs	r2, #0
 800485e:	497a      	ldr	r1, [pc, #488]	; (8004a48 <HAL_I2C_Master_Receive+0x4a8>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 ff21 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0e6      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004880:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b4:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_I2C_Master_Receive+0x4ac>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <HAL_I2C_Master_Receive+0x4b0>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	0a1a      	lsrs	r2, r3, #8
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	00da      	lsls	r2, r3, #3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d117      	bne.n	800490a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048fc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e099      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d1da      	bne.n	80048ce <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800498e:	e042      	b.n	8004a16 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 ffdf 	bl	8005958 <I2C_WaitOnRXNEFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e04c      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d118      	bne.n	8004a16 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f47f ae99 	bne.w	8004752 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e000      	b.n	8004a3e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00010004 	.word	0x00010004
 8004a4c:	200001f0 	.word	0x200001f0
 8004a50:	14f8b589 	.word	0x14f8b589

08004a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	817b      	strh	r3, [r7, #10]
 8004a66:	460b      	mov	r3, r1
 8004a68:	813b      	strh	r3, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7fe fcf1 	bl	8003454 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	f040 80d9 	bne.w	8004c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2319      	movs	r3, #25
 8004a88:	2201      	movs	r2, #1
 8004a8a:	496d      	ldr	r1, [pc, #436]	; (8004c40 <HAL_I2C_Mem_Write+0x1ec>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fe0b 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0cc      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Write+0x56>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0c5      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d007      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	; (8004c44 <HAL_I2C_Mem_Write+0x1f0>)
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b12:	88f8      	ldrh	r0, [r7, #6]
 8004b14:	893a      	ldrh	r2, [r7, #8]
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4603      	mov	r3, r0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fc42 	bl	80053ac <I2C_RequestMemoryWrite>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d052      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e081      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fe8c 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06b      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1aa      	bne.n	8004b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fe78 	bl	80058d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d107      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e016      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	00100002 	.word	0x00100002
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	817b      	strh	r3, [r7, #10]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	813b      	strh	r3, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c66:	f7fe fbf5 	bl	8003454 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	f040 823d 	bne.w	80050f4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2319      	movs	r3, #25
 8004c80:	2201      	movs	r2, #1
 8004c82:	4981      	ldr	r1, [pc, #516]	; (8004e88 <HAL_I2C_Mem_Read+0x240>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fd0f 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	e230      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_Mem_Read+0x5a>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e229      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d007      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2222      	movs	r2, #34	; 0x22
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a61      	ldr	r2, [pc, #388]	; (8004e8c <HAL_I2C_Mem_Read+0x244>)
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d0a:	88f8      	ldrh	r0, [r7, #6]
 8004d0c:	893a      	ldrh	r2, [r7, #8]
 8004d0e:	8979      	ldrh	r1, [r7, #10]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4603      	mov	r3, r0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fbdc 	bl	80054d8 <I2C_RequestMemoryRead>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1e5      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e1b9      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d11d      	bne.n	8004d9e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d72:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d9a:	b662      	cpsie	i
 8004d9c:	e197      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d11d      	bne.n	8004de2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004db6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dde:	b662      	cpsie	i
 8004de0:	e175      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e08:	e161      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	f200 811a 	bhi.w	8005048 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d123      	bne.n	8004e64 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fd99 	bl	8005958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e162      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e62:	e134      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d150      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2200      	movs	r2, #0
 8004e74:	4906      	ldr	r1, [pc, #24]	; (8004e90 <HAL_I2C_Mem_Read+0x248>)
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fc16 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e137      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
 8004e86:	bf00      	nop
 8004e88:	00100002 	.word	0x00100002
 8004e8c:	ffff0000 	.word	0xffff0000
 8004e90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e94:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ed8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f0c:	e0df      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2200      	movs	r2, #0
 8004f16:	497a      	ldr	r1, [pc, #488]	; (8005100 <HAL_I2C_Mem_Read+0x4b8>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fbc5 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0e6      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f38:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f6c:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_I2C_Mem_Read+0x4bc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	4a65      	ldr	r2, [pc, #404]	; (8005108 <HAL_I2C_Mem_Read+0x4c0>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	0a1a      	lsrs	r2, r3, #8
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	00da      	lsls	r2, r3, #3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d117      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fb4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e099      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d1da      	bne.n	8004f86 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005012:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005046:	e042      	b.n	80050ce <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fc83 	bl	8005958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04c      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b04      	cmp	r3, #4
 800509a:	d118      	bne.n	80050ce <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f47f ae99 	bne.w	8004e0a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	00010004 	.word	0x00010004
 8005104:	200001f0 	.word	0x200001f0
 8005108:	14f8b589 	.word	0x14f8b589

0800510c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d006      	beq.n	8005136 <I2C_MasterRequestWrite+0x2a>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d003      	beq.n	8005136 <I2C_MasterRequestWrite+0x2a>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005134:	d108      	bne.n	8005148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e00b      	b.n	8005160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	2b12      	cmp	r3, #18
 800514e:	d107      	bne.n	8005160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fa9b 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005186:	d103      	bne.n	8005190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e035      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519c:	d108      	bne.n	80051b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	e01b      	b.n	80051e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	11db      	asrs	r3, r3, #7
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 0306 	and.w	r3, r3, #6
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f063 030f 	orn	r3, r3, #15
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <I2C_MasterRequestWrite+0xfc>)
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fac1 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e010      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4907      	ldr	r1, [pc, #28]	; (800520c <I2C_MasterRequestWrite+0x100>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fab1 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	00010008 	.word	0x00010008
 800520c:	00010002 	.word	0x00010002

08005210 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	460b      	mov	r3, r1
 800521e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005234:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d006      	beq.n	800524a <I2C_MasterRequestRead+0x3a>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d003      	beq.n	800524a <I2C_MasterRequestRead+0x3a>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005248:	d108      	bne.n	800525c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e00b      	b.n	8005274 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	2b11      	cmp	r3, #17
 8005262:	d107      	bne.n	8005274 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa11 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529a:	d103      	bne.n	80052a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e079      	b.n	800539c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b0:	d108      	bne.n	80052c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	611a      	str	r2, [r3, #16]
 80052c2:	e05f      	b.n	8005384 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052c4:	897b      	ldrh	r3, [r7, #10]
 80052c6:	11db      	asrs	r3, r3, #7
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0306 	and.w	r3, r3, #6
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f063 030f 	orn	r3, r3, #15
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4930      	ldr	r1, [pc, #192]	; (80053a4 <I2C_MasterRequestRead+0x194>)
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fa37 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e054      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4929      	ldr	r1, [pc, #164]	; (80053a8 <I2C_MasterRequestRead+0x198>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fa27 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e044      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005336:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f9af 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535e:	d103      	bne.n	8005368 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005366:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e017      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	11db      	asrs	r3, r3, #7
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f063 030e 	orn	r3, r3, #14
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4907      	ldr	r1, [pc, #28]	; (80053a8 <I2C_MasterRequestRead+0x198>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f9e3 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00010008 	.word	0x00010008
 80053a8:	00010002 	.word	0x00010002

080053ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	4608      	mov	r0, r1
 80053b6:	4611      	mov	r1, r2
 80053b8:	461a      	mov	r2, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	817b      	strh	r3, [r7, #10]
 80053be:	460b      	mov	r3, r1
 80053c0:	813b      	strh	r3, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2200      	movs	r2, #0
 80053de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f960 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fc:	d103      	bne.n	8005406 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e05f      	b.n	80054ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	492d      	ldr	r1, [pc, #180]	; (80054d4 <I2C_RequestMemoryWrite+0x128>)
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f998 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e04c      	b.n	80054ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005448:	6a39      	ldr	r1, [r7, #32]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa02 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b04      	cmp	r3, #4
 800545c:	d107      	bne.n	800546e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e02b      	b.n	80054ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d105      	bne.n	8005484 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005478:	893b      	ldrh	r3, [r7, #8]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	e021      	b.n	80054c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	b29b      	uxth	r3, r3
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f9dc 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d107      	bne.n	80054ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e005      	b.n	80054ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054be:	893b      	ldrh	r3, [r7, #8]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	00010002 	.word	0x00010002

080054d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	817b      	strh	r3, [r7, #10]
 80054ea:	460b      	mov	r3, r1
 80054ec:	813b      	strh	r3, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005500:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	2200      	movs	r2, #0
 800551a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f8c2 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d103      	bne.n	8005542 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0aa      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005546:	897b      	ldrh	r3, [r7, #10]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	4952      	ldr	r1, [pc, #328]	; (80056a4 <I2C_RequestMemoryRead+0x1cc>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8fa 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e097      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	6a39      	ldr	r1, [r7, #32]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f964 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e076      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	611a      	str	r2, [r3, #16]
 80055be:	e021      	b.n	8005604 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055c0:	893b      	ldrh	r3, [r7, #8]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	6a39      	ldr	r1, [r7, #32]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f93e 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d107      	bne.n	80055f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e050      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055fa:	893b      	ldrh	r3, [r7, #8]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	6a39      	ldr	r1, [r7, #32]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f923 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b04      	cmp	r3, #4
 800561a:	d107      	bne.n	800562c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e035      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2200      	movs	r2, #0
 8005648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f82b 	bl	80056a8 <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d103      	bne.n	8005670 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e013      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005674:	897b      	ldrh	r3, [r7, #10]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	4906      	ldr	r1, [pc, #24]	; (80056a4 <I2C_RequestMemoryRead+0x1cc>)
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f863 	bl	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	00010002 	.word	0x00010002

080056a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b8:	e025      	b.n	8005706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d021      	beq.n	8005706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fd fec7 	bl	8003454 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d116      	bne.n	8005706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e023      	b.n	800574e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10d      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	43da      	mvns	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	e00c      	b.n	8005746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	43da      	mvns	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4013      	ands	r3, r2
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	429a      	cmp	r2, r3
 800574a:	d0b6      	beq.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005764:	e051      	b.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005774:	d123      	bne.n	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800578e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0204 	orr.w	r2, r3, #4
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e046      	b.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d021      	beq.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c6:	f7fd fe45 	bl	8003454 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d116      	bne.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f043 0220 	orr.w	r2, r3, #32
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e020      	b.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d10c      	bne.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	43da      	mvns	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e00b      	b.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	43da      	mvns	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d18d      	bne.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005860:	e02d      	b.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8ce 	bl	8005a04 <I2C_IsAcknowledgeFailed>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e02d      	b.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d021      	beq.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fd fdeb 	bl	8003454 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d116      	bne.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e007      	b.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d1ca      	bne.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e2:	e02d      	b.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f88d 	bl	8005a04 <I2C_IsAcknowledgeFailed>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e02d      	b.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d021      	beq.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fc:	f7fd fdaa 	bl	8003454 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e007      	b.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d1ca      	bne.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005964:	e042      	b.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b10      	cmp	r3, #16
 8005972:	d119      	bne.n	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0210 	mvn.w	r2, #16
 800597c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e029      	b.n	80059fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a8:	f7fd fd54 	bl	8003454 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d302      	bcc.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d116      	bne.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e007      	b.n	80059fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d1b5      	bne.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1a:	d11b      	bne.n	8005a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e26c      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8087 	beq.w	8005b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a80:	4b92      	ldr	r3, [pc, #584]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 030c 	and.w	r3, r3, #12
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a8c:	4b8f      	ldr	r3, [pc, #572]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d112      	bne.n	8005abe <HAL_RCC_OscConfig+0x5e>
 8005a98:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa4:	d10b      	bne.n	8005abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa6:	4b89      	ldr	r3, [pc, #548]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d06c      	beq.n	8005b8c <HAL_RCC_OscConfig+0x12c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d168      	bne.n	8005b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e246      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x76>
 8005ac8:	4b80      	ldr	r3, [pc, #512]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7f      	ldr	r2, [pc, #508]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e02e      	b.n	8005b34 <HAL_RCC_OscConfig+0xd4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x98>
 8005ade:	4b7b      	ldr	r3, [pc, #492]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a7a      	ldr	r2, [pc, #488]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b78      	ldr	r3, [pc, #480]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a77      	ldr	r2, [pc, #476]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e01d      	b.n	8005b34 <HAL_RCC_OscConfig+0xd4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0xbc>
 8005b02:	4b72      	ldr	r3, [pc, #456]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a71      	ldr	r2, [pc, #452]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b6f      	ldr	r3, [pc, #444]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a6e      	ldr	r2, [pc, #440]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0xd4>
 8005b1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6a      	ldr	r2, [pc, #424]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b68      	ldr	r3, [pc, #416]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a67      	ldr	r2, [pc, #412]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d013      	beq.n	8005b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fc8a 	bl	8003454 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fd fc86 	bl	8003454 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e1fa      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0xe4>
 8005b62:	e014      	b.n	8005b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fd fc76 	bl	8003454 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fd fc72 	bl	8003454 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e1e6      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x10c>
 8005b8a:	e000      	b.n	8005b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d063      	beq.n	8005c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b9a:	4b4c      	ldr	r3, [pc, #304]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ba6:	4b49      	ldr	r3, [pc, #292]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d11c      	bne.n	8005bec <HAL_RCC_OscConfig+0x18c>
 8005bb2:	4b46      	ldr	r3, [pc, #280]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d116      	bne.n	8005bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	4b43      	ldr	r3, [pc, #268]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x176>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e1ba      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4939      	ldr	r1, [pc, #228]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	e03a      	b.n	8005c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bf4:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <HAL_RCC_OscConfig+0x270>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fd fc2b 	bl	8003454 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fd fc27 	bl	8003454 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e19b      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c14:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c20:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4927      	ldr	r1, [pc, #156]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]
 8005c34:	e015      	b.n	8005c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c36:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_RCC_OscConfig+0x270>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3c:	f7fd fc0a 	bl	8003454 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c44:	f7fd fc06 	bl	8003454 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e17a      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d03a      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d019      	beq.n	8005caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c76:	4b17      	ldr	r3, [pc, #92]	; (8005cd4 <HAL_RCC_OscConfig+0x274>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7c:	f7fd fbea 	bl	8003454 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c84:	f7fd fbe6 	bl	8003454 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e15a      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <HAL_RCC_OscConfig+0x26c>)
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f000 fada 	bl	800625c <RCC_Delay>
 8005ca8:	e01c      	b.n	8005ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <HAL_RCC_OscConfig+0x274>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fbd0 	bl	8003454 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb6:	e00f      	b.n	8005cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb8:	f7fd fbcc 	bl	8003454 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d908      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e140      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	42420000 	.word	0x42420000
 8005cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd8:	4b9e      	ldr	r3, [pc, #632]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e9      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80a6 	beq.w	8005e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf6:	4b97      	ldr	r3, [pc, #604]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	4b94      	ldr	r3, [pc, #592]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	4a93      	ldr	r2, [pc, #588]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	61d3      	str	r3, [r2, #28]
 8005d0e:	4b91      	ldr	r3, [pc, #580]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1e:	4b8e      	ldr	r3, [pc, #568]	; (8005f58 <HAL_RCC_OscConfig+0x4f8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d118      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d2a:	4b8b      	ldr	r3, [pc, #556]	; (8005f58 <HAL_RCC_OscConfig+0x4f8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a8a      	ldr	r2, [pc, #552]	; (8005f58 <HAL_RCC_OscConfig+0x4f8>)
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d36:	f7fd fb8d 	bl	8003454 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3e:	f7fd fb89 	bl	8003454 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b64      	cmp	r3, #100	; 0x64
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0fd      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x312>
 8005d64:	4b7b      	ldr	r3, [pc, #492]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a7a      	ldr	r2, [pc, #488]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6213      	str	r3, [r2, #32]
 8005d70:	e02d      	b.n	8005dce <HAL_RCC_OscConfig+0x36e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x334>
 8005d7a:	4b76      	ldr	r3, [pc, #472]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	4a75      	ldr	r2, [pc, #468]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	6213      	str	r3, [r2, #32]
 8005d86:	4b73      	ldr	r3, [pc, #460]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4a72      	ldr	r2, [pc, #456]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d8c:	f023 0304 	bic.w	r3, r3, #4
 8005d90:	6213      	str	r3, [r2, #32]
 8005d92:	e01c      	b.n	8005dce <HAL_RCC_OscConfig+0x36e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCC_OscConfig+0x356>
 8005d9c:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	4a6c      	ldr	r2, [pc, #432]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005da2:	f043 0304 	orr.w	r3, r3, #4
 8005da6:	6213      	str	r3, [r2, #32]
 8005da8:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	4a69      	ldr	r2, [pc, #420]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6213      	str	r3, [r2, #32]
 8005db4:	e00b      	b.n	8005dce <HAL_RCC_OscConfig+0x36e>
 8005db6:	4b67      	ldr	r3, [pc, #412]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4a66      	ldr	r2, [pc, #408]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	6213      	str	r3, [r2, #32]
 8005dc2:	4b64      	ldr	r3, [pc, #400]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	4a63      	ldr	r2, [pc, #396]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d015      	beq.n	8005e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd6:	f7fd fb3d 	bl	8003454 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fd fb39 	bl	8003454 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e0ab      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df4:	4b57      	ldr	r3, [pc, #348]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0ee      	beq.n	8005dde <HAL_RCC_OscConfig+0x37e>
 8005e00:	e014      	b.n	8005e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e02:	f7fd fb27 	bl	8003454 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e08:	e00a      	b.n	8005e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0a:	f7fd fb23 	bl	8003454 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e095      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e20:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1ee      	bne.n	8005e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e32:	4b48      	ldr	r3, [pc, #288]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	4a47      	ldr	r2, [pc, #284]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8081 	beq.w	8005f4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e48:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 030c 	and.w	r3, r3, #12
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d061      	beq.n	8005f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d146      	bne.n	8005eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_OscConfig+0x4fc>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fd faf7 	bl	8003454 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fd faf3 	bl	8003454 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e067      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f0      	bne.n	8005e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d108      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e92:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	492d      	ldr	r1, [pc, #180]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea4:	4b2b      	ldr	r3, [pc, #172]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a19      	ldr	r1, [r3, #32]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	4927      	ldr	r1, [pc, #156]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ebc:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <HAL_RCC_OscConfig+0x4fc>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fd fac7 	bl	8003454 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eca:	f7fd fac3 	bl	8003454 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e037      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005edc:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x46a>
 8005ee8:	e02f      	b.n	8005f4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <HAL_RCC_OscConfig+0x4fc>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fab0 	bl	8003454 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd faac 	bl	8003454 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e020      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f0a:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x498>
 8005f16:	e018      	b.n	8005f4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e013      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_RCC_OscConfig+0x4f4>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d001      	beq.n	8005f4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	42420060 	.word	0x42420060

08005f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0d0      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f74:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d910      	bls.n	8005fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f82:	4b67      	ldr	r3, [pc, #412]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 0207 	bic.w	r2, r3, #7
 8005f8a:	4965      	ldr	r1, [pc, #404]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	4b63      	ldr	r3, [pc, #396]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0b8      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d020      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fbc:	4b59      	ldr	r3, [pc, #356]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a58      	ldr	r2, [pc, #352]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd4:	4b53      	ldr	r3, [pc, #332]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a52      	ldr	r2, [pc, #328]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe0:	4b50      	ldr	r3, [pc, #320]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	494d      	ldr	r1, [pc, #308]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d040      	beq.n	8006080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d107      	bne.n	8006016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006006:	4b47      	ldr	r3, [pc, #284]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d115      	bne.n	800603e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e07f      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d107      	bne.n	800602e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800601e:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e073      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602e:	4b3d      	ldr	r3, [pc, #244]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e06b      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800603e:	4b39      	ldr	r3, [pc, #228]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f023 0203 	bic.w	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4936      	ldr	r1, [pc, #216]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 800604c:	4313      	orrs	r3, r2
 800604e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006050:	f7fd fa00 	bl	8003454 <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	e00a      	b.n	800606e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006058:	f7fd f9fc 	bl	8003454 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e053      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606e:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 020c 	and.w	r2, r3, #12
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	429a      	cmp	r2, r3
 800607e:	d1eb      	bne.n	8006058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d210      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 0207 	bic.w	r2, r3, #7
 8006096:	4922      	ldr	r1, [pc, #136]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800609e:	4b20      	ldr	r3, [pc, #128]	; (8006120 <HAL_RCC_ClockConfig+0x1c0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d001      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e032      	b.n	8006116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4916      	ldr	r1, [pc, #88]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	490e      	ldr	r1, [pc, #56]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ee:	f000 f821 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060f2:	4601      	mov	r1, r0
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCC_ClockConfig+0x1c4>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <HAL_RCC_ClockConfig+0x1c8>)
 8006100:	5cd3      	ldrb	r3, [r2, r3]
 8006102:	fa21 f303 	lsr.w	r3, r1, r3
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <HAL_RCC_ClockConfig+0x1cc>)
 8006108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_RCC_ClockConfig+0x1d0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd f95e 	bl	80033d0 <HAL_InitTick>

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40022000 	.word	0x40022000
 8006124:	40021000 	.word	0x40021000
 8006128:	0800ab08 	.word	0x0800ab08
 800612c:	200001f0 	.word	0x200001f0
 8006130:	200001f4 	.word	0x200001f4

08006134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b490      	push	{r4, r7}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800613a:	4b2a      	ldr	r3, [pc, #168]	; (80061e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800613c:	1d3c      	adds	r4, r7, #4
 800613e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800615e:	4b23      	ldr	r3, [pc, #140]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b04      	cmp	r3, #4
 800616c:	d002      	beq.n	8006174 <HAL_RCC_GetSysClockFreq+0x40>
 800616e:	2b08      	cmp	r3, #8
 8006170:	d003      	beq.n	800617a <HAL_RCC_GetSysClockFreq+0x46>
 8006172:	e02d      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006176:	623b      	str	r3, [r7, #32]
      break;
 8006178:	e02d      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	0c9b      	lsrs	r3, r3, #18
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006186:	4413      	add	r3, r2
 8006188:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800618c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d013      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	0c5b      	lsrs	r3, r3, #17
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061a6:	4413      	add	r3, r2
 80061a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061b2:	fb02 f203 	mul.w	r2, r2, r3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e004      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	623b      	str	r3, [r7, #32]
      break;
 80061ce:	e002      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061d2:	623b      	str	r3, [r7, #32]
      break;
 80061d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc90      	pop	{r4, r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	0800aae0 	.word	0x0800aae0
 80061e8:	0800aaf0 	.word	0x0800aaf0
 80061ec:	40021000 	.word	0x40021000
 80061f0:	007a1200 	.word	0x007a1200
 80061f4:	003d0900 	.word	0x003d0900

080061f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <HAL_RCC_GetHCLKFreq+0x10>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	200001f0 	.word	0x200001f0

0800620c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006210:	f7ff fff2 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006214:	4601      	mov	r1, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4a03      	ldr	r2, [pc, #12]	; (8006230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006222:	5cd3      	ldrb	r3, [r2, r3]
 8006224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021000 	.word	0x40021000
 8006230:	0800ab18 	.word	0x0800ab18

08006234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006238:	f7ff ffde 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 800623c:	4601      	mov	r1, r0
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	0adb      	lsrs	r3, r3, #11
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	4a03      	ldr	r2, [pc, #12]	; (8006258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800624a:	5cd3      	ldrb	r3, [r2, r3]
 800624c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000
 8006258:	0800ab18 	.word	0x0800ab18

0800625c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <RCC_Delay+0x34>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a0a      	ldr	r2, [pc, #40]	; (8006294 <RCC_Delay+0x38>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	0a5b      	lsrs	r3, r3, #9
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006278:	bf00      	nop
  }
  while (Delay --);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	60fa      	str	r2, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f9      	bne.n	8006278 <RCC_Delay+0x1c>
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	200001f0 	.word	0x200001f0
 8006294:	10624dd3 	.word	0x10624dd3

08006298 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d07d      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b8:	4b4f      	ldr	r3, [pc, #316]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c4:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4a4b      	ldr	r2, [pc, #300]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ce:	61d3      	str	r3, [r2, #28]
 80062d0:	4b49      	ldr	r3, [pc, #292]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062dc:	2301      	movs	r3, #1
 80062de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e0:	4b46      	ldr	r3, [pc, #280]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d118      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ec:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a42      	ldr	r2, [pc, #264]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f8:	f7fd f8ac 	bl	8003454 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006300:	f7fd f8a8 	bl	8003454 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e06d      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006312:	4b3a      	ldr	r3, [pc, #232]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800631e:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d02e      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d027      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006344:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d014      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006362:	f7fd f877 	bl	8003454 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006368:	e00a      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636a:	f7fd f873 	bl	8003454 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f241 3288 	movw	r2, #5000	; 0x1388
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e036      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006380:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0ee      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4917      	ldr	r1, [pc, #92]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	4313      	orrs	r3, r2
 800639c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d105      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4904      	ldr	r1, [pc, #16]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40007000 	.word	0x40007000
 8006400:	42420440 	.word	0x42420440

08006404 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006404:	b590      	push	{r4, r7, lr}
 8006406:	b08d      	sub	sp, #52	; 0x34
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800640c:	4b55      	ldr	r3, [pc, #340]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800640e:	f107 040c 	add.w	r4, r7, #12
 8006412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006418:	4b53      	ldr	r3, [pc, #332]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	2300      	movs	r3, #0
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006426:	2300      	movs	r3, #0
 8006428:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	2300      	movs	r3, #0
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d07f      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d002      	beq.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800643c:	2b01      	cmp	r3, #1
 800643e:	d048      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006440:	e08b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006442:	4b4a      	ldr	r3, [pc, #296]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006448:	4b48      	ldr	r3, [pc, #288]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d07f      	beq.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	0c9b      	lsrs	r3, r3, #18
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006460:	4413      	add	r3, r2
 8006462:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006466:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006472:	4b3e      	ldr	r3, [pc, #248]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	0c5b      	lsrs	r3, r3, #17
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006480:	4413      	add	r3, r2
 8006482:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006492:	4a37      	ldr	r2, [pc, #220]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	fbb2 f2f3 	udiv	r2, r2, r3
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	e004      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	4a33      	ldr	r2, [pc, #204]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064a8:	fb02 f303 	mul.w	r3, r2, r3
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80064ae:	4b2f      	ldr	r3, [pc, #188]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ba:	d102      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064c0:	e048      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4a2c      	ldr	r2, [pc, #176]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064d0:	e040      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d108      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f4:	e01f      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d109      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800650e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006520:	d11a      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800652e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006534:	e010      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006536:	e00f      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006538:	f7ff fe7c 	bl	8006234 <HAL_RCC_GetPCLK2Freq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	0b9b      	lsrs	r3, r3, #14
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	3301      	adds	r3, #1
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006552:	e002      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006554:	bf00      	nop
 8006556:	e000      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006558:	bf00      	nop
    }
  }
  return (frequency);
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800655c:	4618      	mov	r0, r3
 800655e:	3734      	adds	r7, #52	; 0x34
 8006560:	46bd      	mov	sp, r7
 8006562:	bd90      	pop	{r4, r7, pc}
 8006564:	0800aaf4 	.word	0x0800aaf4
 8006568:	0800ab04 	.word	0x0800ab04
 800656c:	40021000 	.word	0x40021000
 8006570:	007a1200 	.word	0x007a1200
 8006574:	003d0900 	.word	0x003d0900
 8006578:	aaaaaaab 	.word	0xaaaaaaab

0800657c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e03f      	b.n	800660e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fc fe28 	bl	80031f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f905 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08a      	sub	sp, #40	; 0x28
 800661a:	af02      	add	r7, sp, #8
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b20      	cmp	r3, #32
 8006634:	d17c      	bne.n	8006730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_Transmit+0x2c>
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e075      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x3e>
 8006650:	2302      	movs	r3, #2
 8006652:	e06e      	b.n	8006732 <HAL_UART_Transmit+0x11c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2221      	movs	r2, #33	; 0x21
 8006666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800666a:	f7fc fef3 	bl	8003454 <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d108      	bne.n	8006698 <HAL_UART_Transmit+0x82>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e003      	b.n	80066a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80066a8:	e02a      	b.n	8006700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f840 	bl	800673a <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e036      	b.n	8006732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3302      	adds	r3, #2
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e007      	b.n	80066f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1cf      	bne.n	80066aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	2140      	movs	r1, #64	; 0x40
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f810 	bl	800673a <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674a:	e02c      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d028      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0x30>
 800675a:	f7fc fe7b 	bl	8003454 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d21d      	bcs.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006778:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e00f      	b.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d0c3      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800680a:	f023 030c 	bic.w	r3, r3, #12
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	430b      	orrs	r3, r1
 8006816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <UART_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d103      	bne.n	8006840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7ff fcfc 	bl	8006234 <HAL_RCC_GetPCLK2Freq>
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	e002      	b.n	8006846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7ff fce4 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 8006844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009a      	lsls	r2, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <UART_SetConfig+0x118>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	0119      	lsls	r1, r3, #4
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009a      	lsls	r2, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	fbb2 f2f3 	udiv	r2, r2, r3
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <UART_SetConfig+0x118>)
 800687e:	fba3 0302 	umull	r0, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2064      	movs	r0, #100	; 0x64
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	3332      	adds	r3, #50	; 0x32
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <UART_SetConfig+0x118>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800689c:	4419      	add	r1, r3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <UART_SetConfig+0x118>)
 80068b6:	fba3 0302 	umull	r0, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	fb00 f303 	mul.w	r3, r0, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <UART_SetConfig+0x118>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	440a      	add	r2, r1
 80068da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40013800 	.word	0x40013800
 80068e8:	51eb851f 	.word	0x51eb851f

080068ec <gcvt>:
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	461c      	mov	r4, r3
 80068f0:	b085      	sub	sp, #20
 80068f2:	2300      	movs	r3, #0
 80068f4:	4615      	mov	r5, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	4606      	mov	r6, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	f7fa f856 	bl	80009ac <__aeabi_dcmplt>
 8006900:	4623      	mov	r3, r4
 8006902:	b118      	cbz	r0, 800690c <gcvt+0x20>
 8006904:	222d      	movs	r2, #45	; 0x2d
 8006906:	3d01      	subs	r5, #1
 8006908:	f803 2b01 	strb.w	r2, [r3], #1
 800690c:	2267      	movs	r2, #103	; 0x67
 800690e:	2100      	movs	r1, #0
 8006910:	e9cd 5300 	strd	r5, r3, [sp]
 8006914:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8006918:	4905      	ldr	r1, [pc, #20]	; (8006930 <gcvt+0x44>)
 800691a:	4632      	mov	r2, r6
 800691c:	463b      	mov	r3, r7
 800691e:	6808      	ldr	r0, [r1, #0]
 8006920:	f000 f912 	bl	8006b48 <_gcvt>
 8006924:	2800      	cmp	r0, #0
 8006926:	bf14      	ite	ne
 8006928:	4620      	movne	r0, r4
 800692a:	2000      	moveq	r0, #0
 800692c:	b005      	add	sp, #20
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	200001fc 	.word	0x200001fc

08006934 <__errno>:
 8006934:	4b01      	ldr	r3, [pc, #4]	; (800693c <__errno+0x8>)
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	200001fc 	.word	0x200001fc

08006940 <__libc_init_array>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	2500      	movs	r5, #0
 8006944:	4e0c      	ldr	r6, [pc, #48]	; (8006978 <__libc_init_array+0x38>)
 8006946:	4c0d      	ldr	r4, [pc, #52]	; (800697c <__libc_init_array+0x3c>)
 8006948:	1ba4      	subs	r4, r4, r6
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	42a5      	cmp	r5, r4
 800694e:	d109      	bne.n	8006964 <__libc_init_array+0x24>
 8006950:	f004 f8ba 	bl	800aac8 <_init>
 8006954:	2500      	movs	r5, #0
 8006956:	4e0a      	ldr	r6, [pc, #40]	; (8006980 <__libc_init_array+0x40>)
 8006958:	4c0a      	ldr	r4, [pc, #40]	; (8006984 <__libc_init_array+0x44>)
 800695a:	1ba4      	subs	r4, r4, r6
 800695c:	10a4      	asrs	r4, r4, #2
 800695e:	42a5      	cmp	r5, r4
 8006960:	d105      	bne.n	800696e <__libc_init_array+0x2e>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006968:	4798      	blx	r3
 800696a:	3501      	adds	r5, #1
 800696c:	e7ee      	b.n	800694c <__libc_init_array+0xc>
 800696e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006972:	4798      	blx	r3
 8006974:	3501      	adds	r5, #1
 8006976:	e7f2      	b.n	800695e <__libc_init_array+0x1e>
 8006978:	0800aec0 	.word	0x0800aec0
 800697c:	0800aec0 	.word	0x0800aec0
 8006980:	0800aec0 	.word	0x0800aec0
 8006984:	0800aec4 	.word	0x0800aec4

08006988 <__itoa>:
 8006988:	1e93      	subs	r3, r2, #2
 800698a:	2b22      	cmp	r3, #34	; 0x22
 800698c:	b510      	push	{r4, lr}
 800698e:	460c      	mov	r4, r1
 8006990:	d904      	bls.n	800699c <__itoa+0x14>
 8006992:	2300      	movs	r3, #0
 8006994:	461c      	mov	r4, r3
 8006996:	700b      	strb	r3, [r1, #0]
 8006998:	4620      	mov	r0, r4
 800699a:	bd10      	pop	{r4, pc}
 800699c:	2a0a      	cmp	r2, #10
 800699e:	d109      	bne.n	80069b4 <__itoa+0x2c>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	da07      	bge.n	80069b4 <__itoa+0x2c>
 80069a4:	232d      	movs	r3, #45	; 0x2d
 80069a6:	700b      	strb	r3, [r1, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	4240      	negs	r0, r0
 80069ac:	4421      	add	r1, r4
 80069ae:	f000 f819 	bl	80069e4 <__utoa>
 80069b2:	e7f1      	b.n	8006998 <__itoa+0x10>
 80069b4:	2100      	movs	r1, #0
 80069b6:	e7f9      	b.n	80069ac <__itoa+0x24>

080069b8 <itoa>:
 80069b8:	f7ff bfe6 	b.w	8006988 <__itoa>

080069bc <memcpy>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	1e43      	subs	r3, r0, #1
 80069c0:	440a      	add	r2, r1
 80069c2:	4291      	cmp	r1, r2
 80069c4:	d100      	bne.n	80069c8 <memcpy+0xc>
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d0:	e7f7      	b.n	80069c2 <memcpy+0x6>

080069d2 <memset>:
 80069d2:	4603      	mov	r3, r0
 80069d4:	4402      	add	r2, r0
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d100      	bne.n	80069dc <memset+0xa>
 80069da:	4770      	bx	lr
 80069dc:	f803 1b01 	strb.w	r1, [r3], #1
 80069e0:	e7f9      	b.n	80069d6 <memset+0x4>
	...

080069e4 <__utoa>:
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b08b      	sub	sp, #44	; 0x2c
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	466e      	mov	r6, sp
 80069ee:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <__utoa+0x78>)
 80069f0:	f103 0c20 	add.w	ip, r3, #32
 80069f4:	4637      	mov	r7, r6
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	3308      	adds	r3, #8
 80069fc:	c703      	stmia	r7!, {r0, r1}
 80069fe:	4563      	cmp	r3, ip
 8006a00:	463e      	mov	r6, r7
 8006a02:	d1f7      	bne.n	80069f4 <__utoa+0x10>
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	6038      	str	r0, [r7, #0]
 8006a0a:	713b      	strb	r3, [r7, #4]
 8006a0c:	1e93      	subs	r3, r2, #2
 8006a0e:	2b22      	cmp	r3, #34	; 0x22
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	d904      	bls.n	8006a20 <__utoa+0x3c>
 8006a16:	7023      	strb	r3, [r4, #0]
 8006a18:	461c      	mov	r4, r3
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	b00b      	add	sp, #44	; 0x2c
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a20:	1e66      	subs	r6, r4, #1
 8006a22:	fbb5 f0f2 	udiv	r0, r5, r2
 8006a26:	fb02 5510 	mls	r5, r2, r0, r5
 8006a2a:	af0a      	add	r7, sp, #40	; 0x28
 8006a2c:	443d      	add	r5, r7
 8006a2e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b968      	cbnz	r0, 8006a58 <__utoa+0x74>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	5460      	strb	r0, [r4, r1]
 8006a40:	4423      	add	r3, r4
 8006a42:	1b19      	subs	r1, r3, r4
 8006a44:	1b10      	subs	r0, r2, r4
 8006a46:	4281      	cmp	r1, r0
 8006a48:	dde7      	ble.n	8006a1a <__utoa+0x36>
 8006a4a:	7811      	ldrb	r1, [r2, #0]
 8006a4c:	7818      	ldrb	r0, [r3, #0]
 8006a4e:	f802 0b01 	strb.w	r0, [r2], #1
 8006a52:	f803 1901 	strb.w	r1, [r3], #-1
 8006a56:	e7f4      	b.n	8006a42 <__utoa+0x5e>
 8006a58:	460b      	mov	r3, r1
 8006a5a:	e7e2      	b.n	8006a22 <__utoa+0x3e>
 8006a5c:	0800ab20 	.word	0x0800ab20

08006a60 <print_e>:
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	b08b      	sub	sp, #44	; 0x2c
 8006a64:	460f      	mov	r7, r1
 8006a66:	a908      	add	r1, sp, #32
 8006a68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006a6a:	9104      	str	r1, [sp, #16]
 8006a6c:	a907      	add	r1, sp, #28
 8006a6e:	9103      	str	r1, [sp, #12]
 8006a70:	a909      	add	r1, sp, #36	; 0x24
 8006a72:	9102      	str	r1, [sp, #8]
 8006a74:	1c61      	adds	r1, r4, #1
 8006a76:	9101      	str	r1, [sp, #4]
 8006a78:	2102      	movs	r1, #2
 8006a7a:	9100      	str	r1, [sp, #0]
 8006a7c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8006a80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006a82:	f000 fd35 	bl	80074f0 <_dtoa_r>
 8006a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8e:	4298      	cmp	r0, r3
 8006a90:	d104      	bne.n	8006a9c <print_e+0x3c>
 8006a92:	4638      	mov	r0, r7
 8006a94:	f000 fc96 	bl	80073c4 <strcpy>
 8006a98:	b00b      	add	sp, #44	; 0x2c
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	780b      	ldrb	r3, [r1, #0]
 8006a9e:	703b      	strb	r3, [r7, #0]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	d142      	bne.n	8006b2a <print_e+0xca>
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d140      	bne.n	8006b2a <print_e+0xca>
 8006aa8:	1c7b      	adds	r3, r7, #1
 8006aaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006aae:	b10a      	cbz	r2, 8006ab4 <print_e+0x54>
 8006ab0:	2c00      	cmp	r4, #0
 8006ab2:	dc3e      	bgt.n	8006b32 <print_e+0xd2>
 8006ab4:	2e67      	cmp	r6, #103	; 0x67
 8006ab6:	d043      	beq.n	8006b40 <print_e+0xe0>
 8006ab8:	2e47      	cmp	r6, #71	; 0x47
 8006aba:	d043      	beq.n	8006b44 <print_e+0xe4>
 8006abc:	461a      	mov	r2, r3
 8006abe:	2730      	movs	r7, #48	; 0x30
 8006ac0:	191d      	adds	r5, r3, r4
 8006ac2:	1aa9      	subs	r1, r5, r2
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	dc38      	bgt.n	8006b3a <print_e+0xda>
 8006ac8:	2c00      	cmp	r4, #0
 8006aca:	bfa8      	it	ge
 8006acc:	191b      	addge	r3, r3, r4
 8006ace:	1e41      	subs	r1, r0, #1
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	9109      	str	r1, [sp, #36]	; 0x24
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	bfb7      	itett	lt
 8006ad8:	212d      	movlt	r1, #45	; 0x2d
 8006ada:	212b      	movge	r1, #43	; 0x2b
 8006adc:	f1c0 0001 	rsblt	r0, r0, #1
 8006ae0:	9009      	strlt	r0, [sp, #36]	; 0x24
 8006ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae4:	f802 6b02 	strb.w	r6, [r2], #2
 8006ae8:	bfb4      	ite	lt
 8006aea:	7059      	strblt	r1, [r3, #1]
 8006aec:	7059      	strbge	r1, [r3, #1]
 8006aee:	2863      	cmp	r0, #99	; 0x63
 8006af0:	dd0b      	ble.n	8006b0a <print_e+0xaa>
 8006af2:	2164      	movs	r1, #100	; 0x64
 8006af4:	fb90 f1f1 	sdiv	r1, r0, r1
 8006af8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8006afc:	1cda      	adds	r2, r3, #3
 8006afe:	709c      	strb	r4, [r3, #2]
 8006b00:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006b04:	fb03 0101 	mla	r1, r3, r1, r0
 8006b08:	9109      	str	r1, [sp, #36]	; 0x24
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b12:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006b16:	7010      	strb	r0, [r2, #0]
 8006b18:	f06f 0009 	mvn.w	r0, #9
 8006b1c:	fb00 1303 	mla	r3, r0, r3, r1
 8006b20:	3330      	adds	r3, #48	; 0x30
 8006b22:	7053      	strb	r3, [r2, #1]
 8006b24:	2300      	movs	r3, #0
 8006b26:	7093      	strb	r3, [r2, #2]
 8006b28:	e7b6      	b.n	8006a98 <print_e+0x38>
 8006b2a:	222e      	movs	r2, #46	; 0x2e
 8006b2c:	1cbb      	adds	r3, r7, #2
 8006b2e:	707a      	strb	r2, [r7, #1]
 8006b30:	e7bb      	b.n	8006aaa <print_e+0x4a>
 8006b32:	f803 2b01 	strb.w	r2, [r3], #1
 8006b36:	3c01      	subs	r4, #1
 8006b38:	e7b7      	b.n	8006aaa <print_e+0x4a>
 8006b3a:	f802 7b01 	strb.w	r7, [r2], #1
 8006b3e:	e7c0      	b.n	8006ac2 <print_e+0x62>
 8006b40:	2665      	movs	r6, #101	; 0x65
 8006b42:	e7c4      	b.n	8006ace <print_e+0x6e>
 8006b44:	2645      	movs	r6, #69	; 0x45
 8006b46:	e7c2      	b.n	8006ace <print_e+0x6e>

08006b48 <_gcvt>:
 8006b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	4617      	mov	r7, r2
 8006b4e:	461d      	mov	r5, r3
 8006b50:	b08b      	sub	sp, #44	; 0x2c
 8006b52:	4681      	mov	r9, r0
 8006b54:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8006b64:	f7f9 ff22 	bl	80009ac <__aeabi_dcmplt>
 8006b68:	b108      	cbz	r0, 8006b6e <_gcvt+0x26>
 8006b6a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2300      	movs	r3, #0
 8006b72:	4638      	mov	r0, r7
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7f9 ff0f 	bl	8000998 <__aeabi_dcmpeq>
 8006b7a:	b138      	cbz	r0, 8006b8c <_gcvt+0x44>
 8006b7c:	2330      	movs	r3, #48	; 0x30
 8006b7e:	7023      	strb	r3, [r4, #0]
 8006b80:	2300      	movs	r3, #0
 8006b82:	7063      	strb	r3, [r4, #1]
 8006b84:	4620      	mov	r0, r4
 8006b86:	b00b      	add	sp, #44	; 0x2c
 8006b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b8c:	a352      	add	r3, pc, #328	; (adr r3, 8006cd8 <_gcvt+0x190>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	4638      	mov	r0, r7
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 ff13 	bl	80009c0 <__aeabi_dcmple>
 8006b9a:	b168      	cbz	r0, 8006bb8 <_gcvt+0x70>
 8006b9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8006ba0:	3e01      	subs	r6, #1
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	f8cd 8008 	str.w	r8, [sp, #8]
 8006ba8:	9600      	str	r6, [sp, #0]
 8006baa:	463a      	mov	r2, r7
 8006bac:	462b      	mov	r3, r5
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4648      	mov	r0, r9
 8006bb2:	f7ff ff55 	bl	8006a60 <print_e>
 8006bb6:	e7e5      	b.n	8006b84 <_gcvt+0x3c>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 fb6f 	bl	800729c <_mprec_log10>
 8006bbe:	463a      	mov	r2, r7
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	f7f9 fefd 	bl	80009c0 <__aeabi_dcmple>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1e8      	bne.n	8006b9c <_gcvt+0x54>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4b44      	ldr	r3, [pc, #272]	; (8006ce0 <_gcvt+0x198>)
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7f9 feeb 	bl	80009ac <__aeabi_dcmplt>
 8006bd6:	a909      	add	r1, sp, #36	; 0x24
 8006bd8:	aa08      	add	r2, sp, #32
 8006bda:	ab07      	add	r3, sp, #28
 8006bdc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8006be0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006be4:	b388      	cbz	r0, 8006c4a <_gcvt+0x102>
 8006be6:	2303      	movs	r3, #3
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	463a      	mov	r2, r7
 8006bec:	462b      	mov	r3, r5
 8006bee:	4648      	mov	r0, r9
 8006bf0:	f000 fc7e 	bl	80074f0 <_dtoa_r>
 8006bf4:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bf8:	9a07      	ldr	r2, [sp, #28]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d027      	beq.n	8006c4e <_gcvt+0x106>
 8006bfe:	4623      	mov	r3, r4
 8006c00:	4426      	add	r6, r4
 8006c02:	4607      	mov	r7, r0
 8006c04:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006c08:	1af2      	subs	r2, r6, r3
 8006c0a:	9d07      	ldr	r5, [sp, #28]
 8006c0c:	b349      	cbz	r1, 8006c62 <_gcvt+0x11a>
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	dc22      	bgt.n	8006c58 <_gcvt+0x110>
 8006c12:	f1b8 0f00 	cmp.w	r8, #0
 8006c16:	d102      	bne.n	8006c1e <_gcvt+0xd6>
 8006c18:	7839      	ldrb	r1, [r7, #0]
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	d049      	beq.n	8006cb2 <_gcvt+0x16a>
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	bf04      	itt	eq
 8006c22:	2130      	moveq	r1, #48	; 0x30
 8006c24:	7021      	strbeq	r1, [r4, #0]
 8006c26:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8006c2a:	f04f 0000 	mov.w	r0, #0
 8006c2e:	f04f 0630 	mov.w	r6, #48	; 0x30
 8006c32:	bf08      	it	eq
 8006c34:	1c63      	addeq	r3, r4, #1
 8006c36:	7019      	strb	r1, [r3, #0]
 8006c38:	9907      	ldr	r1, [sp, #28]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	db24      	blt.n	8006c8c <_gcvt+0x144>
 8006c42:	b100      	cbz	r0, 8006c46 <_gcvt+0xfe>
 8006c44:	9107      	str	r1, [sp, #28]
 8006c46:	1e79      	subs	r1, r7, #1
 8006c48:	e02b      	b.n	8006ca2 <_gcvt+0x15a>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e7cc      	b.n	8006be8 <_gcvt+0xa0>
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fbb7 	bl	80073c4 <strcpy>
 8006c56:	e795      	b.n	8006b84 <_gcvt+0x3c>
 8006c58:	3d01      	subs	r5, #1
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	9507      	str	r5, [sp, #28]
 8006c60:	e7cf      	b.n	8006c02 <_gcvt+0xba>
 8006c62:	1aad      	subs	r5, r5, r2
 8006c64:	2630      	movs	r6, #48	; 0x30
 8006c66:	e005      	b.n	8006c74 <_gcvt+0x12c>
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	dd06      	ble.n	8006c7a <_gcvt+0x132>
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	f803 6b01 	strb.w	r6, [r3], #1
 8006c72:	3a01      	subs	r2, #1
 8006c74:	18a8      	adds	r0, r5, r2
 8006c76:	2800      	cmp	r0, #0
 8006c78:	dcf6      	bgt.n	8006c68 <_gcvt+0x120>
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d0c9      	beq.n	8006c12 <_gcvt+0xca>
 8006c7e:	9007      	str	r0, [sp, #28]
 8006c80:	e7c7      	b.n	8006c12 <_gcvt+0xca>
 8006c82:	f803 6b01 	strb.w	r6, [r3], #1
 8006c86:	3a01      	subs	r2, #1
 8006c88:	2001      	movs	r0, #1
 8006c8a:	e7d7      	b.n	8006c3c <_gcvt+0xf4>
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f101 0101 	add.w	r1, r1, #1
 8006c92:	dcf6      	bgt.n	8006c82 <_gcvt+0x13a>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0d6      	beq.n	8006c46 <_gcvt+0xfe>
 8006c98:	9507      	str	r5, [sp, #28]
 8006c9a:	e7d4      	b.n	8006c46 <_gcvt+0xfe>
 8006c9c:	f803 0b01 	strb.w	r0, [r3], #1
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ca6:	b108      	cbz	r0, 8006cac <_gcvt+0x164>
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	dcf7      	bgt.n	8006c9c <_gcvt+0x154>
 8006cac:	f1b8 0f00 	cmp.w	r8, #0
 8006cb0:	d10b      	bne.n	8006cca <_gcvt+0x182>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e765      	b.n	8006b84 <_gcvt+0x3c>
 8006cb8:	f801 6b01 	strb.w	r6, [r1], #1
 8006cbc:	1a68      	subs	r0, r5, r1
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dcfa      	bgt.n	8006cb8 <_gcvt+0x170>
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	bfa8      	it	ge
 8006cc6:	189b      	addge	r3, r3, r2
 8006cc8:	e7f3      	b.n	8006cb2 <_gcvt+0x16a>
 8006cca:	4619      	mov	r1, r3
 8006ccc:	189d      	adds	r5, r3, r2
 8006cce:	2630      	movs	r6, #48	; 0x30
 8006cd0:	e7f4      	b.n	8006cbc <_gcvt+0x174>
 8006cd2:	bf00      	nop
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	eb1c432d 	.word	0xeb1c432d
 8006cdc:	3f1a36e2 	.word	0x3f1a36e2
 8006ce0:	3ff00000 	.word	0x3ff00000

08006ce4 <_Balloc>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460e      	mov	r6, r1
 8006cec:	b93d      	cbnz	r5, 8006cfe <_Balloc+0x1a>
 8006cee:	2010      	movs	r0, #16
 8006cf0:	f001 f9b2 	bl	8008058 <malloc>
 8006cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8006cf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cfa:	6005      	str	r5, [r0, #0]
 8006cfc:	60c5      	str	r5, [r0, #12]
 8006cfe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d00:	68eb      	ldr	r3, [r5, #12]
 8006d02:	b183      	cbz	r3, 8006d26 <_Balloc+0x42>
 8006d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d0c:	b9b8      	cbnz	r0, 8006d3e <_Balloc+0x5a>
 8006d0e:	2101      	movs	r1, #1
 8006d10:	fa01 f506 	lsl.w	r5, r1, r6
 8006d14:	1d6a      	adds	r2, r5, #5
 8006d16:	0092      	lsls	r2, r2, #2
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fadb 	bl	80072d4 <_calloc_r>
 8006d1e:	b160      	cbz	r0, 8006d3a <_Balloc+0x56>
 8006d20:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d24:	e00e      	b.n	8006d44 <_Balloc+0x60>
 8006d26:	2221      	movs	r2, #33	; 0x21
 8006d28:	2104      	movs	r1, #4
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 fad2 	bl	80072d4 <_calloc_r>
 8006d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d32:	60e8      	str	r0, [r5, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e4      	bne.n	8006d04 <_Balloc+0x20>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	6802      	ldr	r2, [r0, #0]
 8006d40:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d44:	2300      	movs	r3, #0
 8006d46:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d4a:	e7f7      	b.n	8006d3c <_Balloc+0x58>

08006d4c <_Bfree>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d50:	4606      	mov	r6, r0
 8006d52:	460d      	mov	r5, r1
 8006d54:	b93c      	cbnz	r4, 8006d66 <_Bfree+0x1a>
 8006d56:	2010      	movs	r0, #16
 8006d58:	f001 f97e 	bl	8008058 <malloc>
 8006d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8006d5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d62:	6004      	str	r4, [r0, #0]
 8006d64:	60c4      	str	r4, [r0, #12]
 8006d66:	b13d      	cbz	r5, 8006d78 <_Bfree+0x2c>
 8006d68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d6a:	686a      	ldr	r2, [r5, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d72:	6029      	str	r1, [r5, #0]
 8006d74:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d78:	bd70      	pop	{r4, r5, r6, pc}

08006d7a <__multadd>:
 8006d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7e:	461f      	mov	r7, r3
 8006d80:	4606      	mov	r6, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	2300      	movs	r3, #0
 8006d86:	690d      	ldr	r5, [r1, #16]
 8006d88:	f101 0c14 	add.w	ip, r1, #20
 8006d8c:	f8dc 0000 	ldr.w	r0, [ip]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b281      	uxth	r1, r0
 8006d94:	fb02 7101 	mla	r1, r2, r1, r7
 8006d98:	0c00      	lsrs	r0, r0, #16
 8006d9a:	0c0f      	lsrs	r7, r1, #16
 8006d9c:	fb02 7000 	mla	r0, r2, r0, r7
 8006da0:	b289      	uxth	r1, r1
 8006da2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006da6:	429d      	cmp	r5, r3
 8006da8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006dac:	f84c 1b04 	str.w	r1, [ip], #4
 8006db0:	dcec      	bgt.n	8006d8c <__multadd+0x12>
 8006db2:	b1d7      	cbz	r7, 8006dea <__multadd+0x70>
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	42ab      	cmp	r3, r5
 8006db8:	dc12      	bgt.n	8006de0 <__multadd+0x66>
 8006dba:	6861      	ldr	r1, [r4, #4]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	3101      	adds	r1, #1
 8006dc0:	f7ff ff90 	bl	8006ce4 <_Balloc>
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	6922      	ldr	r2, [r4, #16]
 8006dc8:	f104 010c 	add.w	r1, r4, #12
 8006dcc:	3202      	adds	r2, #2
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	300c      	adds	r0, #12
 8006dd2:	f7ff fdf3 	bl	80069bc <memcpy>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff ffb7 	bl	8006d4c <_Bfree>
 8006dde:	4644      	mov	r4, r8
 8006de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006de4:	3501      	adds	r5, #1
 8006de6:	615f      	str	r7, [r3, #20]
 8006de8:	6125      	str	r5, [r4, #16]
 8006dea:	4620      	mov	r0, r4
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006df0 <__hi0bits>:
 8006df0:	0c02      	lsrs	r2, r0, #16
 8006df2:	0412      	lsls	r2, r2, #16
 8006df4:	4603      	mov	r3, r0
 8006df6:	b9b2      	cbnz	r2, 8006e26 <__hi0bits+0x36>
 8006df8:	0403      	lsls	r3, r0, #16
 8006dfa:	2010      	movs	r0, #16
 8006dfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e00:	bf04      	itt	eq
 8006e02:	021b      	lsleq	r3, r3, #8
 8006e04:	3008      	addeq	r0, #8
 8006e06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e0a:	bf04      	itt	eq
 8006e0c:	011b      	lsleq	r3, r3, #4
 8006e0e:	3004      	addeq	r0, #4
 8006e10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e14:	bf04      	itt	eq
 8006e16:	009b      	lsleq	r3, r3, #2
 8006e18:	3002      	addeq	r0, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	db06      	blt.n	8006e2c <__hi0bits+0x3c>
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	d503      	bpl.n	8006e2a <__hi0bits+0x3a>
 8006e22:	3001      	adds	r0, #1
 8006e24:	4770      	bx	lr
 8006e26:	2000      	movs	r0, #0
 8006e28:	e7e8      	b.n	8006dfc <__hi0bits+0xc>
 8006e2a:	2020      	movs	r0, #32
 8006e2c:	4770      	bx	lr

08006e2e <__lo0bits>:
 8006e2e:	6803      	ldr	r3, [r0, #0]
 8006e30:	4601      	mov	r1, r0
 8006e32:	f013 0207 	ands.w	r2, r3, #7
 8006e36:	d00b      	beq.n	8006e50 <__lo0bits+0x22>
 8006e38:	07da      	lsls	r2, r3, #31
 8006e3a:	d423      	bmi.n	8006e84 <__lo0bits+0x56>
 8006e3c:	0798      	lsls	r0, r3, #30
 8006e3e:	bf49      	itett	mi
 8006e40:	085b      	lsrmi	r3, r3, #1
 8006e42:	089b      	lsrpl	r3, r3, #2
 8006e44:	2001      	movmi	r0, #1
 8006e46:	600b      	strmi	r3, [r1, #0]
 8006e48:	bf5c      	itt	pl
 8006e4a:	600b      	strpl	r3, [r1, #0]
 8006e4c:	2002      	movpl	r0, #2
 8006e4e:	4770      	bx	lr
 8006e50:	b298      	uxth	r0, r3
 8006e52:	b9a8      	cbnz	r0, 8006e80 <__lo0bits+0x52>
 8006e54:	2010      	movs	r0, #16
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e5c:	bf04      	itt	eq
 8006e5e:	0a1b      	lsreq	r3, r3, #8
 8006e60:	3008      	addeq	r0, #8
 8006e62:	071a      	lsls	r2, r3, #28
 8006e64:	bf04      	itt	eq
 8006e66:	091b      	lsreq	r3, r3, #4
 8006e68:	3004      	addeq	r0, #4
 8006e6a:	079a      	lsls	r2, r3, #30
 8006e6c:	bf04      	itt	eq
 8006e6e:	089b      	lsreq	r3, r3, #2
 8006e70:	3002      	addeq	r0, #2
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d402      	bmi.n	8006e7c <__lo0bits+0x4e>
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	d006      	beq.n	8006e88 <__lo0bits+0x5a>
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	600b      	str	r3, [r1, #0]
 8006e7e:	4770      	bx	lr
 8006e80:	4610      	mov	r0, r2
 8006e82:	e7e9      	b.n	8006e58 <__lo0bits+0x2a>
 8006e84:	2000      	movs	r0, #0
 8006e86:	4770      	bx	lr
 8006e88:	2020      	movs	r0, #32
 8006e8a:	4770      	bx	lr

08006e8c <__i2b>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	460c      	mov	r4, r1
 8006e90:	2101      	movs	r1, #1
 8006e92:	f7ff ff27 	bl	8006ce4 <_Balloc>
 8006e96:	2201      	movs	r2, #1
 8006e98:	6144      	str	r4, [r0, #20]
 8006e9a:	6102      	str	r2, [r0, #16]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__multiply>:
 8006e9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	690a      	ldr	r2, [r1, #16]
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	4688      	mov	r8, r1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	bfbe      	ittt	lt
 8006eae:	460b      	movlt	r3, r1
 8006eb0:	46a0      	movlt	r8, r4
 8006eb2:	461c      	movlt	r4, r3
 8006eb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006eb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ebc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ec4:	eb07 0609 	add.w	r6, r7, r9
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	bfb8      	it	lt
 8006ecc:	3101      	addlt	r1, #1
 8006ece:	f7ff ff09 	bl	8006ce4 <_Balloc>
 8006ed2:	f100 0514 	add.w	r5, r0, #20
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	2200      	movs	r2, #0
 8006eda:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ede:	4573      	cmp	r3, lr
 8006ee0:	d316      	bcc.n	8006f10 <__multiply+0x72>
 8006ee2:	f104 0214 	add.w	r2, r4, #20
 8006ee6:	f108 0114 	add.w	r1, r8, #20
 8006eea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006eee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	9b00      	ldr	r3, [sp, #0]
 8006ef6:	9201      	str	r2, [sp, #4]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d80c      	bhi.n	8006f16 <__multiply+0x78>
 8006efc:	2e00      	cmp	r6, #0
 8006efe:	dd03      	ble.n	8006f08 <__multiply+0x6a>
 8006f00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d05d      	beq.n	8006fc4 <__multiply+0x126>
 8006f08:	6106      	str	r6, [r0, #16]
 8006f0a:	b003      	add	sp, #12
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	f843 2b04 	str.w	r2, [r3], #4
 8006f14:	e7e3      	b.n	8006ede <__multiply+0x40>
 8006f16:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f1a:	f1bb 0f00 	cmp.w	fp, #0
 8006f1e:	d023      	beq.n	8006f68 <__multiply+0xca>
 8006f20:	4689      	mov	r9, r1
 8006f22:	46ac      	mov	ip, r5
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f2c:	f8dc a000 	ldr.w	sl, [ip]
 8006f30:	b2a3      	uxth	r3, r4
 8006f32:	fa1f fa8a 	uxth.w	sl, sl
 8006f36:	fb0b a303 	mla	r3, fp, r3, sl
 8006f3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f3e:	f8dc 4000 	ldr.w	r4, [ip]
 8006f42:	4443      	add	r3, r8
 8006f44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f48:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f4c:	46e2      	mov	sl, ip
 8006f4e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f58:	454f      	cmp	r7, r9
 8006f5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f5e:	f84a 3b04 	str.w	r3, [sl], #4
 8006f62:	d82b      	bhi.n	8006fbc <__multiply+0x11e>
 8006f64:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	3204      	adds	r2, #4
 8006f6c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	d020      	beq.n	8006fb8 <__multiply+0x11a>
 8006f76:	4689      	mov	r9, r1
 8006f78:	46a8      	mov	r8, r5
 8006f7a:	f04f 0b00 	mov.w	fp, #0
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f84:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f8e:	46c4      	mov	ip, r8
 8006f90:	445c      	add	r4, fp
 8006f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f96:	f84c 3b04 	str.w	r3, [ip], #4
 8006f9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f9e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	fb0a b303 	mla	r3, sl, r3, fp
 8006fa8:	454f      	cmp	r7, r9
 8006faa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006fb2:	d805      	bhi.n	8006fc0 <__multiply+0x122>
 8006fb4:	f8c8 3004 	str.w	r3, [r8, #4]
 8006fb8:	3504      	adds	r5, #4
 8006fba:	e79b      	b.n	8006ef4 <__multiply+0x56>
 8006fbc:	46d4      	mov	ip, sl
 8006fbe:	e7b3      	b.n	8006f28 <__multiply+0x8a>
 8006fc0:	46e0      	mov	r8, ip
 8006fc2:	e7dd      	b.n	8006f80 <__multiply+0xe2>
 8006fc4:	3e01      	subs	r6, #1
 8006fc6:	e799      	b.n	8006efc <__multiply+0x5e>

08006fc8 <__pow5mult>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	f012 0203 	ands.w	r2, r2, #3
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460f      	mov	r7, r1
 8006fd6:	d007      	beq.n	8006fe8 <__pow5mult+0x20>
 8006fd8:	4c21      	ldr	r4, [pc, #132]	; (8007060 <__pow5mult+0x98>)
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe2:	f7ff feca 	bl	8006d7a <__multadd>
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	d035      	beq.n	8007058 <__pow5mult+0x90>
 8006fec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fee:	b93c      	cbnz	r4, 8007000 <__pow5mult+0x38>
 8006ff0:	2010      	movs	r0, #16
 8006ff2:	f001 f831 	bl	8008058 <malloc>
 8006ff6:	6270      	str	r0, [r6, #36]	; 0x24
 8006ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ffc:	6004      	str	r4, [r0, #0]
 8006ffe:	60c4      	str	r4, [r0, #12]
 8007000:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007008:	b94c      	cbnz	r4, 800701e <__pow5mult+0x56>
 800700a:	f240 2171 	movw	r1, #625	; 0x271
 800700e:	4630      	mov	r0, r6
 8007010:	f7ff ff3c 	bl	8006e8c <__i2b>
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	f8c8 0008 	str.w	r0, [r8, #8]
 800701c:	6003      	str	r3, [r0, #0]
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	07eb      	lsls	r3, r5, #31
 8007024:	d50a      	bpl.n	800703c <__pow5mult+0x74>
 8007026:	4639      	mov	r1, r7
 8007028:	4622      	mov	r2, r4
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff ff37 	bl	8006e9e <__multiply>
 8007030:	4681      	mov	r9, r0
 8007032:	4639      	mov	r1, r7
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff fe89 	bl	8006d4c <_Bfree>
 800703a:	464f      	mov	r7, r9
 800703c:	106d      	asrs	r5, r5, #1
 800703e:	d00b      	beq.n	8007058 <__pow5mult+0x90>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	b938      	cbnz	r0, 8007054 <__pow5mult+0x8c>
 8007044:	4622      	mov	r2, r4
 8007046:	4621      	mov	r1, r4
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff ff28 	bl	8006e9e <__multiply>
 800704e:	6020      	str	r0, [r4, #0]
 8007050:	f8c0 8000 	str.w	r8, [r0]
 8007054:	4604      	mov	r4, r0
 8007056:	e7e4      	b.n	8007022 <__pow5mult+0x5a>
 8007058:	4638      	mov	r0, r7
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	bf00      	nop
 8007060:	0800ac38 	.word	0x0800ac38

08007064 <__lshift>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	460c      	mov	r4, r1
 800706a:	4607      	mov	r7, r0
 800706c:	4616      	mov	r6, r2
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007074:	eb0a 0903 	add.w	r9, sl, r3
 8007078:	6849      	ldr	r1, [r1, #4]
 800707a:	68a3      	ldr	r3, [r4, #8]
 800707c:	f109 0501 	add.w	r5, r9, #1
 8007080:	42ab      	cmp	r3, r5
 8007082:	db32      	blt.n	80070ea <__lshift+0x86>
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff fe2d 	bl	8006ce4 <_Balloc>
 800708a:	2300      	movs	r3, #0
 800708c:	4680      	mov	r8, r0
 800708e:	461a      	mov	r2, r3
 8007090:	f100 0114 	add.w	r1, r0, #20
 8007094:	4553      	cmp	r3, sl
 8007096:	db2b      	blt.n	80070f0 <__lshift+0x8c>
 8007098:	6920      	ldr	r0, [r4, #16]
 800709a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800709e:	f104 0314 	add.w	r3, r4, #20
 80070a2:	f016 021f 	ands.w	r2, r6, #31
 80070a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070ae:	d025      	beq.n	80070fc <__lshift+0x98>
 80070b0:	2000      	movs	r0, #0
 80070b2:	f1c2 0e20 	rsb	lr, r2, #32
 80070b6:	468a      	mov	sl, r1
 80070b8:	681e      	ldr	r6, [r3, #0]
 80070ba:	4096      	lsls	r6, r2
 80070bc:	4330      	orrs	r0, r6
 80070be:	f84a 0b04 	str.w	r0, [sl], #4
 80070c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80070c6:	459c      	cmp	ip, r3
 80070c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80070cc:	d814      	bhi.n	80070f8 <__lshift+0x94>
 80070ce:	6048      	str	r0, [r1, #4]
 80070d0:	b108      	cbz	r0, 80070d6 <__lshift+0x72>
 80070d2:	f109 0502 	add.w	r5, r9, #2
 80070d6:	3d01      	subs	r5, #1
 80070d8:	4638      	mov	r0, r7
 80070da:	f8c8 5010 	str.w	r5, [r8, #16]
 80070de:	4621      	mov	r1, r4
 80070e0:	f7ff fe34 	bl	8006d4c <_Bfree>
 80070e4:	4640      	mov	r0, r8
 80070e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ea:	3101      	adds	r1, #1
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	e7c7      	b.n	8007080 <__lshift+0x1c>
 80070f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070f4:	3301      	adds	r3, #1
 80070f6:	e7cd      	b.n	8007094 <__lshift+0x30>
 80070f8:	4651      	mov	r1, sl
 80070fa:	e7dc      	b.n	80070b6 <__lshift+0x52>
 80070fc:	3904      	subs	r1, #4
 80070fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007102:	459c      	cmp	ip, r3
 8007104:	f841 2f04 	str.w	r2, [r1, #4]!
 8007108:	d8f9      	bhi.n	80070fe <__lshift+0x9a>
 800710a:	e7e4      	b.n	80070d6 <__lshift+0x72>

0800710c <__mcmp>:
 800710c:	6903      	ldr	r3, [r0, #16]
 800710e:	690a      	ldr	r2, [r1, #16]
 8007110:	b530      	push	{r4, r5, lr}
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	d10c      	bne.n	8007130 <__mcmp+0x24>
 8007116:	0092      	lsls	r2, r2, #2
 8007118:	3014      	adds	r0, #20
 800711a:	3114      	adds	r1, #20
 800711c:	1884      	adds	r4, r0, r2
 800711e:	4411      	add	r1, r2
 8007120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007128:	4295      	cmp	r5, r2
 800712a:	d003      	beq.n	8007134 <__mcmp+0x28>
 800712c:	d305      	bcc.n	800713a <__mcmp+0x2e>
 800712e:	2301      	movs	r3, #1
 8007130:	4618      	mov	r0, r3
 8007132:	bd30      	pop	{r4, r5, pc}
 8007134:	42a0      	cmp	r0, r4
 8007136:	d3f3      	bcc.n	8007120 <__mcmp+0x14>
 8007138:	e7fa      	b.n	8007130 <__mcmp+0x24>
 800713a:	f04f 33ff 	mov.w	r3, #4294967295
 800713e:	e7f7      	b.n	8007130 <__mcmp+0x24>

08007140 <__mdiff>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	460d      	mov	r5, r1
 8007146:	4607      	mov	r7, r0
 8007148:	4611      	mov	r1, r2
 800714a:	4628      	mov	r0, r5
 800714c:	4614      	mov	r4, r2
 800714e:	f7ff ffdd 	bl	800710c <__mcmp>
 8007152:	1e06      	subs	r6, r0, #0
 8007154:	d108      	bne.n	8007168 <__mdiff+0x28>
 8007156:	4631      	mov	r1, r6
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff fdc3 	bl	8006ce4 <_Balloc>
 800715e:	2301      	movs	r3, #1
 8007160:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007168:	bfa4      	itt	ge
 800716a:	4623      	movge	r3, r4
 800716c:	462c      	movge	r4, r5
 800716e:	4638      	mov	r0, r7
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	bfa6      	itte	ge
 8007174:	461d      	movge	r5, r3
 8007176:	2600      	movge	r6, #0
 8007178:	2601      	movlt	r6, #1
 800717a:	f7ff fdb3 	bl	8006ce4 <_Balloc>
 800717e:	f04f 0e00 	mov.w	lr, #0
 8007182:	60c6      	str	r6, [r0, #12]
 8007184:	692b      	ldr	r3, [r5, #16]
 8007186:	6926      	ldr	r6, [r4, #16]
 8007188:	f104 0214 	add.w	r2, r4, #20
 800718c:	f105 0914 	add.w	r9, r5, #20
 8007190:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007194:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007198:	f100 0114 	add.w	r1, r0, #20
 800719c:	f852 ab04 	ldr.w	sl, [r2], #4
 80071a0:	f859 5b04 	ldr.w	r5, [r9], #4
 80071a4:	fa1f f38a 	uxth.w	r3, sl
 80071a8:	4473      	add	r3, lr
 80071aa:	b2ac      	uxth	r4, r5
 80071ac:	1b1b      	subs	r3, r3, r4
 80071ae:	0c2c      	lsrs	r4, r5, #16
 80071b0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80071b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80071be:	45c8      	cmp	r8, r9
 80071c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80071c4:	4694      	mov	ip, r2
 80071c6:	f841 4b04 	str.w	r4, [r1], #4
 80071ca:	d8e7      	bhi.n	800719c <__mdiff+0x5c>
 80071cc:	45bc      	cmp	ip, r7
 80071ce:	d304      	bcc.n	80071da <__mdiff+0x9a>
 80071d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071d4:	b183      	cbz	r3, 80071f8 <__mdiff+0xb8>
 80071d6:	6106      	str	r6, [r0, #16]
 80071d8:	e7c4      	b.n	8007164 <__mdiff+0x24>
 80071da:	f85c 4b04 	ldr.w	r4, [ip], #4
 80071de:	b2a2      	uxth	r2, r4
 80071e0:	4472      	add	r2, lr
 80071e2:	1413      	asrs	r3, r2, #16
 80071e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80071e8:	b292      	uxth	r2, r2
 80071ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071ee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80071f2:	f841 2b04 	str.w	r2, [r1], #4
 80071f6:	e7e9      	b.n	80071cc <__mdiff+0x8c>
 80071f8:	3e01      	subs	r6, #1
 80071fa:	e7e9      	b.n	80071d0 <__mdiff+0x90>

080071fc <__d2b>:
 80071fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007200:	461c      	mov	r4, r3
 8007202:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007206:	2101      	movs	r1, #1
 8007208:	4690      	mov	r8, r2
 800720a:	f7ff fd6b 	bl	8006ce4 <_Balloc>
 800720e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007212:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007216:	4607      	mov	r7, r0
 8007218:	bb34      	cbnz	r4, 8007268 <__d2b+0x6c>
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	f1b8 0200 	subs.w	r2, r8, #0
 8007220:	d027      	beq.n	8007272 <__d2b+0x76>
 8007222:	a802      	add	r0, sp, #8
 8007224:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007228:	f7ff fe01 	bl	8006e2e <__lo0bits>
 800722c:	9900      	ldr	r1, [sp, #0]
 800722e:	b1f0      	cbz	r0, 800726e <__d2b+0x72>
 8007230:	9a01      	ldr	r2, [sp, #4]
 8007232:	f1c0 0320 	rsb	r3, r0, #32
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	430b      	orrs	r3, r1
 800723c:	40c2      	lsrs	r2, r0
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	9201      	str	r2, [sp, #4]
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2102      	movne	r1, #2
 800724a:	2101      	moveq	r1, #1
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	6139      	str	r1, [r7, #16]
 8007250:	b1c4      	cbz	r4, 8007284 <__d2b+0x88>
 8007252:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007256:	4404      	add	r4, r0
 8007258:	6034      	str	r4, [r6, #0]
 800725a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800725e:	6028      	str	r0, [r5, #0]
 8007260:	4638      	mov	r0, r7
 8007262:	b002      	add	sp, #8
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007268:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800726c:	e7d5      	b.n	800721a <__d2b+0x1e>
 800726e:	6179      	str	r1, [r7, #20]
 8007270:	e7e7      	b.n	8007242 <__d2b+0x46>
 8007272:	a801      	add	r0, sp, #4
 8007274:	f7ff fddb 	bl	8006e2e <__lo0bits>
 8007278:	2101      	movs	r1, #1
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	6139      	str	r1, [r7, #16]
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	3020      	adds	r0, #32
 8007282:	e7e5      	b.n	8007250 <__d2b+0x54>
 8007284:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007288:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	6918      	ldr	r0, [r3, #16]
 8007290:	f7ff fdae 	bl	8006df0 <__hi0bits>
 8007294:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007298:	e7e1      	b.n	800725e <__d2b+0x62>
	...

0800729c <_mprec_log10>:
 800729c:	2817      	cmp	r0, #23
 800729e:	b5d0      	push	{r4, r6, r7, lr}
 80072a0:	4604      	mov	r4, r0
 80072a2:	dc05      	bgt.n	80072b0 <_mprec_log10+0x14>
 80072a4:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <_mprec_log10+0x2c>)
 80072a6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80072aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80072ae:	bdd0      	pop	{r4, r6, r7, pc}
 80072b0:	2000      	movs	r0, #0
 80072b2:	2600      	movs	r6, #0
 80072b4:	4905      	ldr	r1, [pc, #20]	; (80072cc <_mprec_log10+0x30>)
 80072b6:	4f06      	ldr	r7, [pc, #24]	; (80072d0 <_mprec_log10+0x34>)
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 f904 	bl	80004c8 <__aeabi_dmul>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	d1f9      	bne.n	80072b8 <_mprec_log10+0x1c>
 80072c4:	e7f3      	b.n	80072ae <_mprec_log10+0x12>
 80072c6:	bf00      	nop
 80072c8:	0800ab70 	.word	0x0800ab70
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	40240000 	.word	0x40240000

080072d4 <_calloc_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	fb02 f401 	mul.w	r4, r2, r1
 80072da:	4621      	mov	r1, r4
 80072dc:	f000 f808 	bl	80072f0 <_malloc_r>
 80072e0:	4605      	mov	r5, r0
 80072e2:	b118      	cbz	r0, 80072ec <_calloc_r+0x18>
 80072e4:	4622      	mov	r2, r4
 80072e6:	2100      	movs	r1, #0
 80072e8:	f7ff fb73 	bl	80069d2 <memset>
 80072ec:	4628      	mov	r0, r5
 80072ee:	bd38      	pop	{r3, r4, r5, pc}

080072f0 <_malloc_r>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	1ccd      	adds	r5, r1, #3
 80072f4:	f025 0503 	bic.w	r5, r5, #3
 80072f8:	3508      	adds	r5, #8
 80072fa:	2d0c      	cmp	r5, #12
 80072fc:	bf38      	it	cc
 80072fe:	250c      	movcc	r5, #12
 8007300:	2d00      	cmp	r5, #0
 8007302:	4606      	mov	r6, r0
 8007304:	db01      	blt.n	800730a <_malloc_r+0x1a>
 8007306:	42a9      	cmp	r1, r5
 8007308:	d903      	bls.n	8007312 <_malloc_r+0x22>
 800730a:	230c      	movs	r3, #12
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	2000      	movs	r0, #0
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	f000 fea9 	bl	8008068 <__malloc_lock>
 8007316:	4a21      	ldr	r2, [pc, #132]	; (800739c <_malloc_r+0xac>)
 8007318:	6814      	ldr	r4, [r2, #0]
 800731a:	4621      	mov	r1, r4
 800731c:	b991      	cbnz	r1, 8007344 <_malloc_r+0x54>
 800731e:	4c20      	ldr	r4, [pc, #128]	; (80073a0 <_malloc_r+0xb0>)
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	b91b      	cbnz	r3, 800732c <_malloc_r+0x3c>
 8007324:	4630      	mov	r0, r6
 8007326:	f000 f83d 	bl	80073a4 <_sbrk_r>
 800732a:	6020      	str	r0, [r4, #0]
 800732c:	4629      	mov	r1, r5
 800732e:	4630      	mov	r0, r6
 8007330:	f000 f838 	bl	80073a4 <_sbrk_r>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d124      	bne.n	8007382 <_malloc_r+0x92>
 8007338:	230c      	movs	r3, #12
 800733a:	4630      	mov	r0, r6
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	f000 fe94 	bl	800806a <__malloc_unlock>
 8007342:	e7e4      	b.n	800730e <_malloc_r+0x1e>
 8007344:	680b      	ldr	r3, [r1, #0]
 8007346:	1b5b      	subs	r3, r3, r5
 8007348:	d418      	bmi.n	800737c <_malloc_r+0x8c>
 800734a:	2b0b      	cmp	r3, #11
 800734c:	d90f      	bls.n	800736e <_malloc_r+0x7e>
 800734e:	600b      	str	r3, [r1, #0]
 8007350:	18cc      	adds	r4, r1, r3
 8007352:	50cd      	str	r5, [r1, r3]
 8007354:	4630      	mov	r0, r6
 8007356:	f000 fe88 	bl	800806a <__malloc_unlock>
 800735a:	f104 000b 	add.w	r0, r4, #11
 800735e:	1d23      	adds	r3, r4, #4
 8007360:	f020 0007 	bic.w	r0, r0, #7
 8007364:	1ac3      	subs	r3, r0, r3
 8007366:	d0d3      	beq.n	8007310 <_malloc_r+0x20>
 8007368:	425a      	negs	r2, r3
 800736a:	50e2      	str	r2, [r4, r3]
 800736c:	e7d0      	b.n	8007310 <_malloc_r+0x20>
 800736e:	684b      	ldr	r3, [r1, #4]
 8007370:	428c      	cmp	r4, r1
 8007372:	bf16      	itet	ne
 8007374:	6063      	strne	r3, [r4, #4]
 8007376:	6013      	streq	r3, [r2, #0]
 8007378:	460c      	movne	r4, r1
 800737a:	e7eb      	b.n	8007354 <_malloc_r+0x64>
 800737c:	460c      	mov	r4, r1
 800737e:	6849      	ldr	r1, [r1, #4]
 8007380:	e7cc      	b.n	800731c <_malloc_r+0x2c>
 8007382:	1cc4      	adds	r4, r0, #3
 8007384:	f024 0403 	bic.w	r4, r4, #3
 8007388:	42a0      	cmp	r0, r4
 800738a:	d005      	beq.n	8007398 <_malloc_r+0xa8>
 800738c:	1a21      	subs	r1, r4, r0
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f808 	bl	80073a4 <_sbrk_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d0cf      	beq.n	8007338 <_malloc_r+0x48>
 8007398:	6025      	str	r5, [r4, #0]
 800739a:	e7db      	b.n	8007354 <_malloc_r+0x64>
 800739c:	200002bc 	.word	0x200002bc
 80073a0:	200002c0 	.word	0x200002c0

080073a4 <_sbrk_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	2300      	movs	r3, #0
 80073a8:	4c05      	ldr	r4, [pc, #20]	; (80073c0 <_sbrk_r+0x1c>)
 80073aa:	4605      	mov	r5, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	f7fb ff96 	bl	80032e0 <_sbrk>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_sbrk_r+0x1a>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	b103      	cbz	r3, 80073be <_sbrk_r+0x1a>
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000630 	.word	0x20000630

080073c4 <strcpy>:
 80073c4:	4603      	mov	r3, r0
 80073c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ca:	f803 2b01 	strb.w	r2, [r3], #1
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	d1f9      	bne.n	80073c6 <strcpy+0x2>
 80073d2:	4770      	bx	lr

080073d4 <quorem>:
 80073d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	6903      	ldr	r3, [r0, #16]
 80073da:	690c      	ldr	r4, [r1, #16]
 80073dc:	4680      	mov	r8, r0
 80073de:	42a3      	cmp	r3, r4
 80073e0:	f2c0 8084 	blt.w	80074ec <quorem+0x118>
 80073e4:	3c01      	subs	r4, #1
 80073e6:	f101 0714 	add.w	r7, r1, #20
 80073ea:	f100 0614 	add.w	r6, r0, #20
 80073ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80073f6:	3501      	adds	r5, #1
 80073f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80073fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007400:	eb06 030c 	add.w	r3, r6, ip
 8007404:	eb07 090c 	add.w	r9, r7, ip
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	b39d      	cbz	r5, 8007474 <quorem+0xa0>
 800740c:	f04f 0a00 	mov.w	sl, #0
 8007410:	4638      	mov	r0, r7
 8007412:	46b6      	mov	lr, r6
 8007414:	46d3      	mov	fp, sl
 8007416:	f850 2b04 	ldr.w	r2, [r0], #4
 800741a:	b293      	uxth	r3, r2
 800741c:	fb05 a303 	mla	r3, r5, r3, sl
 8007420:	0c12      	lsrs	r2, r2, #16
 8007422:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007426:	fb05 a202 	mla	r2, r5, r2, sl
 800742a:	b29b      	uxth	r3, r3
 800742c:	ebab 0303 	sub.w	r3, fp, r3
 8007430:	f8de b000 	ldr.w	fp, [lr]
 8007434:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007438:	fa1f fb8b 	uxth.w	fp, fp
 800743c:	445b      	add	r3, fp
 800743e:	fa1f fb82 	uxth.w	fp, r2
 8007442:	f8de 2000 	ldr.w	r2, [lr]
 8007446:	4581      	cmp	r9, r0
 8007448:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800744c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007456:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800745a:	f84e 3b04 	str.w	r3, [lr], #4
 800745e:	d2da      	bcs.n	8007416 <quorem+0x42>
 8007460:	f856 300c 	ldr.w	r3, [r6, ip]
 8007464:	b933      	cbnz	r3, 8007474 <quorem+0xa0>
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	3b04      	subs	r3, #4
 800746a:	429e      	cmp	r6, r3
 800746c:	461a      	mov	r2, r3
 800746e:	d331      	bcc.n	80074d4 <quorem+0x100>
 8007470:	f8c8 4010 	str.w	r4, [r8, #16]
 8007474:	4640      	mov	r0, r8
 8007476:	f7ff fe49 	bl	800710c <__mcmp>
 800747a:	2800      	cmp	r0, #0
 800747c:	db26      	blt.n	80074cc <quorem+0xf8>
 800747e:	4630      	mov	r0, r6
 8007480:	f04f 0c00 	mov.w	ip, #0
 8007484:	3501      	adds	r5, #1
 8007486:	f857 1b04 	ldr.w	r1, [r7], #4
 800748a:	f8d0 e000 	ldr.w	lr, [r0]
 800748e:	b28b      	uxth	r3, r1
 8007490:	ebac 0303 	sub.w	r3, ip, r3
 8007494:	fa1f f28e 	uxth.w	r2, lr
 8007498:	4413      	add	r3, r2
 800749a:	0c0a      	lsrs	r2, r1, #16
 800749c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074aa:	45b9      	cmp	r9, r7
 80074ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b0:	f840 3b04 	str.w	r3, [r0], #4
 80074b4:	d2e7      	bcs.n	8007486 <quorem+0xb2>
 80074b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074be:	b92a      	cbnz	r2, 80074cc <quorem+0xf8>
 80074c0:	3b04      	subs	r3, #4
 80074c2:	429e      	cmp	r6, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	d30b      	bcc.n	80074e0 <quorem+0x10c>
 80074c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80074cc:	4628      	mov	r0, r5
 80074ce:	b003      	add	sp, #12
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	3b04      	subs	r3, #4
 80074d8:	2a00      	cmp	r2, #0
 80074da:	d1c9      	bne.n	8007470 <quorem+0x9c>
 80074dc:	3c01      	subs	r4, #1
 80074de:	e7c4      	b.n	800746a <quorem+0x96>
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	3b04      	subs	r3, #4
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	d1ef      	bne.n	80074c8 <quorem+0xf4>
 80074e8:	3c01      	subs	r4, #1
 80074ea:	e7ea      	b.n	80074c2 <quorem+0xee>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7ee      	b.n	80074ce <quorem+0xfa>

080074f0 <_dtoa_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4616      	mov	r6, r2
 80074f6:	461f      	mov	r7, r3
 80074f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074fa:	b095      	sub	sp, #84	; 0x54
 80074fc:	4604      	mov	r4, r0
 80074fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007502:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007506:	b93d      	cbnz	r5, 8007518 <_dtoa_r+0x28>
 8007508:	2010      	movs	r0, #16
 800750a:	f000 fda5 	bl	8008058 <malloc>
 800750e:	6260      	str	r0, [r4, #36]	; 0x24
 8007510:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007514:	6005      	str	r5, [r0, #0]
 8007516:	60c5      	str	r5, [r0, #12]
 8007518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751a:	6819      	ldr	r1, [r3, #0]
 800751c:	b151      	cbz	r1, 8007534 <_dtoa_r+0x44>
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	2301      	movs	r3, #1
 8007522:	4093      	lsls	r3, r2
 8007524:	604a      	str	r2, [r1, #4]
 8007526:	608b      	str	r3, [r1, #8]
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff fc0f 	bl	8006d4c <_Bfree>
 800752e:	2200      	movs	r2, #0
 8007530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	1e3b      	subs	r3, r7, #0
 8007536:	bfaf      	iteee	ge
 8007538:	2300      	movge	r3, #0
 800753a:	2201      	movlt	r2, #1
 800753c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007540:	9303      	strlt	r3, [sp, #12]
 8007542:	bfac      	ite	ge
 8007544:	f8c8 3000 	strge.w	r3, [r8]
 8007548:	f8c8 2000 	strlt.w	r2, [r8]
 800754c:	4bae      	ldr	r3, [pc, #696]	; (8007808 <_dtoa_r+0x318>)
 800754e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007552:	ea33 0308 	bics.w	r3, r3, r8
 8007556:	d11b      	bne.n	8007590 <_dtoa_r+0xa0>
 8007558:	f242 730f 	movw	r3, #9999	; 0x270f
 800755c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	b923      	cbnz	r3, 800756e <_dtoa_r+0x7e>
 8007564:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007568:	2800      	cmp	r0, #0
 800756a:	f000 8545 	beq.w	8007ff8 <_dtoa_r+0xb08>
 800756e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007570:	b953      	cbnz	r3, 8007588 <_dtoa_r+0x98>
 8007572:	4ba6      	ldr	r3, [pc, #664]	; (800780c <_dtoa_r+0x31c>)
 8007574:	e021      	b.n	80075ba <_dtoa_r+0xca>
 8007576:	4ba6      	ldr	r3, [pc, #664]	; (8007810 <_dtoa_r+0x320>)
 8007578:	9306      	str	r3, [sp, #24]
 800757a:	3308      	adds	r3, #8
 800757c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	9806      	ldr	r0, [sp, #24]
 8007582:	b015      	add	sp, #84	; 0x54
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	4ba0      	ldr	r3, [pc, #640]	; (800780c <_dtoa_r+0x31c>)
 800758a:	9306      	str	r3, [sp, #24]
 800758c:	3303      	adds	r3, #3
 800758e:	e7f5      	b.n	800757c <_dtoa_r+0x8c>
 8007590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f7f9 f9fc 	bl	8000998 <__aeabi_dcmpeq>
 80075a0:	4682      	mov	sl, r0
 80075a2:	b160      	cbz	r0, 80075be <_dtoa_r+0xce>
 80075a4:	2301      	movs	r3, #1
 80075a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8520 	beq.w	8007ff2 <_dtoa_r+0xb02>
 80075b2:	4b98      	ldr	r3, [pc, #608]	; (8007814 <_dtoa_r+0x324>)
 80075b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	e7e0      	b.n	8007580 <_dtoa_r+0x90>
 80075be:	ab12      	add	r3, sp, #72	; 0x48
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	ab13      	add	r3, sp, #76	; 0x4c
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	4632      	mov	r2, r6
 80075c8:	463b      	mov	r3, r7
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7ff fe16 	bl	80071fc <__d2b>
 80075d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075d4:	4683      	mov	fp, r0
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	d07d      	beq.n	80076d6 <_dtoa_r+0x1e6>
 80075da:	46b0      	mov	r8, r6
 80075dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80075e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80075e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80075f0:	2200      	movs	r2, #0
 80075f2:	4b89      	ldr	r3, [pc, #548]	; (8007818 <_dtoa_r+0x328>)
 80075f4:	4640      	mov	r0, r8
 80075f6:	4649      	mov	r1, r9
 80075f8:	f7f8 fdae 	bl	8000158 <__aeabi_dsub>
 80075fc:	a37c      	add	r3, pc, #496	; (adr r3, 80077f0 <_dtoa_r+0x300>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 ff61 	bl	80004c8 <__aeabi_dmul>
 8007606:	a37c      	add	r3, pc, #496	; (adr r3, 80077f8 <_dtoa_r+0x308>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fda6 	bl	800015c <__adddf3>
 8007610:	4606      	mov	r6, r0
 8007612:	4628      	mov	r0, r5
 8007614:	460f      	mov	r7, r1
 8007616:	f7f8 feed 	bl	80003f4 <__aeabi_i2d>
 800761a:	a379      	add	r3, pc, #484	; (adr r3, 8007800 <_dtoa_r+0x310>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 ff52 	bl	80004c8 <__aeabi_dmul>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f8 fd96 	bl	800015c <__adddf3>
 8007630:	4606      	mov	r6, r0
 8007632:	460f      	mov	r7, r1
 8007634:	f7f9 f9f8 	bl	8000a28 <__aeabi_d2iz>
 8007638:	2200      	movs	r2, #0
 800763a:	4682      	mov	sl, r0
 800763c:	2300      	movs	r3, #0
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 f9b3 	bl	80009ac <__aeabi_dcmplt>
 8007646:	b148      	cbz	r0, 800765c <_dtoa_r+0x16c>
 8007648:	4650      	mov	r0, sl
 800764a:	f7f8 fed3 	bl	80003f4 <__aeabi_i2d>
 800764e:	4632      	mov	r2, r6
 8007650:	463b      	mov	r3, r7
 8007652:	f7f9 f9a1 	bl	8000998 <__aeabi_dcmpeq>
 8007656:	b908      	cbnz	r0, 800765c <_dtoa_r+0x16c>
 8007658:	f10a 3aff 	add.w	sl, sl, #4294967295
 800765c:	f1ba 0f16 	cmp.w	sl, #22
 8007660:	d85a      	bhi.n	8007718 <_dtoa_r+0x228>
 8007662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007666:	496d      	ldr	r1, [pc, #436]	; (800781c <_dtoa_r+0x32c>)
 8007668:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800766c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007670:	f7f9 f9ba 	bl	80009e8 <__aeabi_dcmpgt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d051      	beq.n	800771c <_dtoa_r+0x22c>
 8007678:	2300      	movs	r3, #0
 800767a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800767e:	930d      	str	r3, [sp, #52]	; 0x34
 8007680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007682:	1b5d      	subs	r5, r3, r5
 8007684:	1e6b      	subs	r3, r5, #1
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	bf43      	ittte	mi
 800768a:	2300      	movmi	r3, #0
 800768c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007690:	9307      	strmi	r3, [sp, #28]
 8007692:	f04f 0900 	movpl.w	r9, #0
 8007696:	f1ba 0f00 	cmp.w	sl, #0
 800769a:	db41      	blt.n	8007720 <_dtoa_r+0x230>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80076a2:	4453      	add	r3, sl
 80076a4:	9307      	str	r3, [sp, #28]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9308      	str	r3, [sp, #32]
 80076aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076ac:	2b09      	cmp	r3, #9
 80076ae:	f200 808f 	bhi.w	80077d0 <_dtoa_r+0x2e0>
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	bfc4      	itt	gt
 80076b6:	3b04      	subgt	r3, #4
 80076b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80076ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076bc:	bfc8      	it	gt
 80076be:	2500      	movgt	r5, #0
 80076c0:	f1a3 0302 	sub.w	r3, r3, #2
 80076c4:	bfd8      	it	le
 80076c6:	2501      	movle	r5, #1
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	f200 808d 	bhi.w	80077e8 <_dtoa_r+0x2f8>
 80076ce:	e8df f003 	tbb	[pc, r3]
 80076d2:	7d7b      	.short	0x7d7b
 80076d4:	6f2f      	.short	0x6f2f
 80076d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80076da:	441d      	add	r5, r3
 80076dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076e0:	2820      	cmp	r0, #32
 80076e2:	dd13      	ble.n	800770c <_dtoa_r+0x21c>
 80076e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	fa08 f800 	lsl.w	r8, r8, r0
 80076ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076f2:	fa23 f000 	lsr.w	r0, r3, r0
 80076f6:	ea48 0000 	orr.w	r0, r8, r0
 80076fa:	f7f8 fe6b 	bl	80003d4 <__aeabi_ui2d>
 80076fe:	2301      	movs	r3, #1
 8007700:	4680      	mov	r8, r0
 8007702:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007706:	3d01      	subs	r5, #1
 8007708:	9310      	str	r3, [sp, #64]	; 0x40
 800770a:	e771      	b.n	80075f0 <_dtoa_r+0x100>
 800770c:	9b02      	ldr	r3, [sp, #8]
 800770e:	f1c0 0020 	rsb	r0, r0, #32
 8007712:	fa03 f000 	lsl.w	r0, r3, r0
 8007716:	e7f0      	b.n	80076fa <_dtoa_r+0x20a>
 8007718:	2301      	movs	r3, #1
 800771a:	e7b0      	b.n	800767e <_dtoa_r+0x18e>
 800771c:	900d      	str	r0, [sp, #52]	; 0x34
 800771e:	e7af      	b.n	8007680 <_dtoa_r+0x190>
 8007720:	f1ca 0300 	rsb	r3, sl, #0
 8007724:	9308      	str	r3, [sp, #32]
 8007726:	2300      	movs	r3, #0
 8007728:	eba9 090a 	sub.w	r9, r9, sl
 800772c:	930c      	str	r3, [sp, #48]	; 0x30
 800772e:	e7bc      	b.n	80076aa <_dtoa_r+0x1ba>
 8007730:	2301      	movs	r3, #1
 8007732:	9309      	str	r3, [sp, #36]	; 0x24
 8007734:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007736:	2b00      	cmp	r3, #0
 8007738:	dd74      	ble.n	8007824 <_dtoa_r+0x334>
 800773a:	4698      	mov	r8, r3
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	2200      	movs	r2, #0
 8007740:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007742:	6072      	str	r2, [r6, #4]
 8007744:	2204      	movs	r2, #4
 8007746:	f102 0014 	add.w	r0, r2, #20
 800774a:	4298      	cmp	r0, r3
 800774c:	6871      	ldr	r1, [r6, #4]
 800774e:	d96e      	bls.n	800782e <_dtoa_r+0x33e>
 8007750:	4620      	mov	r0, r4
 8007752:	f7ff fac7 	bl	8006ce4 <_Balloc>
 8007756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f1b8 0f0e 	cmp.w	r8, #14
 8007760:	9306      	str	r3, [sp, #24]
 8007762:	f200 80ed 	bhi.w	8007940 <_dtoa_r+0x450>
 8007766:	2d00      	cmp	r5, #0
 8007768:	f000 80ea 	beq.w	8007940 <_dtoa_r+0x450>
 800776c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007770:	f1ba 0f00 	cmp.w	sl, #0
 8007774:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007778:	dd77      	ble.n	800786a <_dtoa_r+0x37a>
 800777a:	4a28      	ldr	r2, [pc, #160]	; (800781c <_dtoa_r+0x32c>)
 800777c:	f00a 030f 	and.w	r3, sl, #15
 8007780:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007788:	06f0      	lsls	r0, r6, #27
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007792:	d568      	bpl.n	8007866 <_dtoa_r+0x376>
 8007794:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007798:	4b21      	ldr	r3, [pc, #132]	; (8007820 <_dtoa_r+0x330>)
 800779a:	2503      	movs	r5, #3
 800779c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077a0:	f7f8 ffbc 	bl	800071c <__aeabi_ddiv>
 80077a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a8:	f006 060f 	and.w	r6, r6, #15
 80077ac:	4f1c      	ldr	r7, [pc, #112]	; (8007820 <_dtoa_r+0x330>)
 80077ae:	e04f      	b.n	8007850 <_dtoa_r+0x360>
 80077b0:	2301      	movs	r3, #1
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077b6:	4453      	add	r3, sl
 80077b8:	f103 0801 	add.w	r8, r3, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	4643      	mov	r3, r8
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	bfb8      	it	lt
 80077c4:	2301      	movlt	r3, #1
 80077c6:	e7ba      	b.n	800773e <_dtoa_r+0x24e>
 80077c8:	2300      	movs	r3, #0
 80077ca:	e7b2      	b.n	8007732 <_dtoa_r+0x242>
 80077cc:	2300      	movs	r3, #0
 80077ce:	e7f0      	b.n	80077b2 <_dtoa_r+0x2c2>
 80077d0:	2501      	movs	r5, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	9509      	str	r5, [sp, #36]	; 0x24
 80077d6:	931e      	str	r3, [sp, #120]	; 0x78
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	2200      	movs	r2, #0
 80077de:	9304      	str	r3, [sp, #16]
 80077e0:	4698      	mov	r8, r3
 80077e2:	2312      	movs	r3, #18
 80077e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80077e6:	e7aa      	b.n	800773e <_dtoa_r+0x24e>
 80077e8:	2301      	movs	r3, #1
 80077ea:	9309      	str	r3, [sp, #36]	; 0x24
 80077ec:	e7f4      	b.n	80077d8 <_dtoa_r+0x2e8>
 80077ee:	bf00      	nop
 80077f0:	636f4361 	.word	0x636f4361
 80077f4:	3fd287a7 	.word	0x3fd287a7
 80077f8:	8b60c8b3 	.word	0x8b60c8b3
 80077fc:	3fc68a28 	.word	0x3fc68a28
 8007800:	509f79fb 	.word	0x509f79fb
 8007804:	3fd34413 	.word	0x3fd34413
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	0800ac4d 	.word	0x0800ac4d
 8007810:	0800ac44 	.word	0x0800ac44
 8007814:	0800ac52 	.word	0x0800ac52
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	0800ab70 	.word	0x0800ab70
 8007820:	0800ab48 	.word	0x0800ab48
 8007824:	2301      	movs	r3, #1
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	4698      	mov	r8, r3
 800782a:	461a      	mov	r2, r3
 800782c:	e7da      	b.n	80077e4 <_dtoa_r+0x2f4>
 800782e:	3101      	adds	r1, #1
 8007830:	6071      	str	r1, [r6, #4]
 8007832:	0052      	lsls	r2, r2, #1
 8007834:	e787      	b.n	8007746 <_dtoa_r+0x256>
 8007836:	07f1      	lsls	r1, r6, #31
 8007838:	d508      	bpl.n	800784c <_dtoa_r+0x35c>
 800783a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800783e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007842:	f7f8 fe41 	bl	80004c8 <__aeabi_dmul>
 8007846:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800784a:	3501      	adds	r5, #1
 800784c:	1076      	asrs	r6, r6, #1
 800784e:	3708      	adds	r7, #8
 8007850:	2e00      	cmp	r6, #0
 8007852:	d1f0      	bne.n	8007836 <_dtoa_r+0x346>
 8007854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785c:	f7f8 ff5e 	bl	800071c <__aeabi_ddiv>
 8007860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007864:	e01b      	b.n	800789e <_dtoa_r+0x3ae>
 8007866:	2502      	movs	r5, #2
 8007868:	e7a0      	b.n	80077ac <_dtoa_r+0x2bc>
 800786a:	f000 80a4 	beq.w	80079b6 <_dtoa_r+0x4c6>
 800786e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007872:	f1ca 0600 	rsb	r6, sl, #0
 8007876:	4ba0      	ldr	r3, [pc, #640]	; (8007af8 <_dtoa_r+0x608>)
 8007878:	f006 020f 	and.w	r2, r6, #15
 800787c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fe20 	bl	80004c8 <__aeabi_dmul>
 8007888:	2502      	movs	r5, #2
 800788a:	2300      	movs	r3, #0
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	4f9a      	ldr	r7, [pc, #616]	; (8007afc <_dtoa_r+0x60c>)
 8007892:	1136      	asrs	r6, r6, #4
 8007894:	2e00      	cmp	r6, #0
 8007896:	f040 8083 	bne.w	80079a0 <_dtoa_r+0x4b0>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e0      	bne.n	8007860 <_dtoa_r+0x370>
 800789e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 808a 	beq.w	80079ba <_dtoa_r+0x4ca>
 80078a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80078ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b92      	ldr	r3, [pc, #584]	; (8007b00 <_dtoa_r+0x610>)
 80078b6:	f7f9 f879 	bl	80009ac <__aeabi_dcmplt>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d07d      	beq.n	80079ba <_dtoa_r+0x4ca>
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	d07a      	beq.n	80079ba <_dtoa_r+0x4ca>
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dd36      	ble.n	8007938 <_dtoa_r+0x448>
 80078ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ce:	2200      	movs	r2, #0
 80078d0:	4b8c      	ldr	r3, [pc, #560]	; (8007b04 <_dtoa_r+0x614>)
 80078d2:	f7f8 fdf9 	bl	80004c8 <__aeabi_dmul>
 80078d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078da:	9e04      	ldr	r6, [sp, #16]
 80078dc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80078e0:	3501      	adds	r5, #1
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7f8 fd86 	bl	80003f4 <__aeabi_i2d>
 80078e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ec:	f7f8 fdec 	bl	80004c8 <__aeabi_dmul>
 80078f0:	2200      	movs	r2, #0
 80078f2:	4b85      	ldr	r3, [pc, #532]	; (8007b08 <_dtoa_r+0x618>)
 80078f4:	f7f8 fc32 	bl	800015c <__adddf3>
 80078f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80078fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007900:	950b      	str	r5, [sp, #44]	; 0x2c
 8007902:	2e00      	cmp	r6, #0
 8007904:	d15c      	bne.n	80079c0 <_dtoa_r+0x4d0>
 8007906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	4b7f      	ldr	r3, [pc, #508]	; (8007b0c <_dtoa_r+0x61c>)
 800790e:	f7f8 fc23 	bl	8000158 <__aeabi_dsub>
 8007912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007914:	462b      	mov	r3, r5
 8007916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791a:	f7f9 f865 	bl	80009e8 <__aeabi_dcmpgt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f040 8281 	bne.w	8007e26 <_dtoa_r+0x936>
 8007924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800792e:	f7f9 f83d 	bl	80009ac <__aeabi_dcmplt>
 8007932:	2800      	cmp	r0, #0
 8007934:	f040 8275 	bne.w	8007e22 <_dtoa_r+0x932>
 8007938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800793c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007942:	2b00      	cmp	r3, #0
 8007944:	f2c0 814b 	blt.w	8007bde <_dtoa_r+0x6ee>
 8007948:	f1ba 0f0e 	cmp.w	sl, #14
 800794c:	f300 8147 	bgt.w	8007bde <_dtoa_r+0x6ee>
 8007950:	4b69      	ldr	r3, [pc, #420]	; (8007af8 <_dtoa_r+0x608>)
 8007952:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800795e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007960:	2b00      	cmp	r3, #0
 8007962:	f280 80d7 	bge.w	8007b14 <_dtoa_r+0x624>
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	f300 80d3 	bgt.w	8007b14 <_dtoa_r+0x624>
 800796e:	f040 8257 	bne.w	8007e20 <_dtoa_r+0x930>
 8007972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007976:	2200      	movs	r2, #0
 8007978:	4b64      	ldr	r3, [pc, #400]	; (8007b0c <_dtoa_r+0x61c>)
 800797a:	f7f8 fda5 	bl	80004c8 <__aeabi_dmul>
 800797e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007982:	f7f9 f827 	bl	80009d4 <__aeabi_dcmpge>
 8007986:	4646      	mov	r6, r8
 8007988:	4647      	mov	r7, r8
 800798a:	2800      	cmp	r0, #0
 800798c:	f040 822d 	bne.w	8007dea <_dtoa_r+0x8fa>
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	9a06      	ldr	r2, [sp, #24]
 8007994:	1c5d      	adds	r5, r3, #1
 8007996:	2331      	movs	r3, #49	; 0x31
 8007998:	f10a 0a01 	add.w	sl, sl, #1
 800799c:	7013      	strb	r3, [r2, #0]
 800799e:	e228      	b.n	8007df2 <_dtoa_r+0x902>
 80079a0:	07f2      	lsls	r2, r6, #31
 80079a2:	d505      	bpl.n	80079b0 <_dtoa_r+0x4c0>
 80079a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a8:	f7f8 fd8e 	bl	80004c8 <__aeabi_dmul>
 80079ac:	2301      	movs	r3, #1
 80079ae:	3501      	adds	r5, #1
 80079b0:	1076      	asrs	r6, r6, #1
 80079b2:	3708      	adds	r7, #8
 80079b4:	e76e      	b.n	8007894 <_dtoa_r+0x3a4>
 80079b6:	2502      	movs	r5, #2
 80079b8:	e771      	b.n	800789e <_dtoa_r+0x3ae>
 80079ba:	4657      	mov	r7, sl
 80079bc:	4646      	mov	r6, r8
 80079be:	e790      	b.n	80078e2 <_dtoa_r+0x3f2>
 80079c0:	4b4d      	ldr	r3, [pc, #308]	; (8007af8 <_dtoa_r+0x608>)
 80079c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80079ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d048      	beq.n	8007a62 <_dtoa_r+0x572>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	2000      	movs	r0, #0
 80079d6:	494e      	ldr	r1, [pc, #312]	; (8007b10 <_dtoa_r+0x620>)
 80079d8:	f7f8 fea0 	bl	800071c <__aeabi_ddiv>
 80079dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079e0:	f7f8 fbba 	bl	8000158 <__aeabi_dsub>
 80079e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80079e8:	9d06      	ldr	r5, [sp, #24]
 80079ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ee:	f7f9 f81b 	bl	8000a28 <__aeabi_d2iz>
 80079f2:	9011      	str	r0, [sp, #68]	; 0x44
 80079f4:	f7f8 fcfe 	bl	80003f4 <__aeabi_i2d>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a00:	f7f8 fbaa 	bl	8000158 <__aeabi_dsub>
 8007a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a0a:	3330      	adds	r3, #48	; 0x30
 8007a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a14:	f7f8 ffca 	bl	80009ac <__aeabi_dcmplt>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d163      	bne.n	8007ae4 <_dtoa_r+0x5f4>
 8007a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a20:	2000      	movs	r0, #0
 8007a22:	4937      	ldr	r1, [pc, #220]	; (8007b00 <_dtoa_r+0x610>)
 8007a24:	f7f8 fb98 	bl	8000158 <__aeabi_dsub>
 8007a28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a2c:	f7f8 ffbe 	bl	80009ac <__aeabi_dcmplt>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f040 80b5 	bne.w	8007ba0 <_dtoa_r+0x6b0>
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	1aeb      	subs	r3, r5, r3
 8007a3a:	429e      	cmp	r6, r3
 8007a3c:	f77f af7c 	ble.w	8007938 <_dtoa_r+0x448>
 8007a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a44:	2200      	movs	r2, #0
 8007a46:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <_dtoa_r+0x614>)
 8007a48:	f7f8 fd3e 	bl	80004c8 <__aeabi_dmul>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a56:	4b2b      	ldr	r3, [pc, #172]	; (8007b04 <_dtoa_r+0x614>)
 8007a58:	f7f8 fd36 	bl	80004c8 <__aeabi_dmul>
 8007a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a60:	e7c3      	b.n	80079ea <_dtoa_r+0x4fa>
 8007a62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a66:	f7f8 fd2f 	bl	80004c8 <__aeabi_dmul>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a70:	199d      	adds	r5, r3, r6
 8007a72:	461e      	mov	r6, r3
 8007a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a78:	f7f8 ffd6 	bl	8000a28 <__aeabi_d2iz>
 8007a7c:	9011      	str	r0, [sp, #68]	; 0x44
 8007a7e:	f7f8 fcb9 	bl	80003f4 <__aeabi_i2d>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a8a:	f7f8 fb65 	bl	8000158 <__aeabi_dsub>
 8007a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a94:	3330      	adds	r3, #48	; 0x30
 8007a96:	f806 3b01 	strb.w	r3, [r6], #1
 8007a9a:	42ae      	cmp	r6, r5
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	d124      	bne.n	8007aec <_dtoa_r+0x5fc>
 8007aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <_dtoa_r+0x620>)
 8007aa8:	f7f8 fb58 	bl	800015c <__adddf3>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab4:	f7f8 ff98 	bl	80009e8 <__aeabi_dcmpgt>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d171      	bne.n	8007ba0 <_dtoa_r+0x6b0>
 8007abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4913      	ldr	r1, [pc, #76]	; (8007b10 <_dtoa_r+0x620>)
 8007ac4:	f7f8 fb48 	bl	8000158 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad0:	f7f8 ff6c 	bl	80009ac <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f43f af2f 	beq.w	8007938 <_dtoa_r+0x448>
 8007ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ade:	1e6a      	subs	r2, r5, #1
 8007ae0:	2b30      	cmp	r3, #48	; 0x30
 8007ae2:	d001      	beq.n	8007ae8 <_dtoa_r+0x5f8>
 8007ae4:	46ba      	mov	sl, r7
 8007ae6:	e04a      	b.n	8007b7e <_dtoa_r+0x68e>
 8007ae8:	4615      	mov	r5, r2
 8007aea:	e7f6      	b.n	8007ada <_dtoa_r+0x5ea>
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <_dtoa_r+0x614>)
 8007aee:	f7f8 fceb 	bl	80004c8 <__aeabi_dmul>
 8007af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af6:	e7bd      	b.n	8007a74 <_dtoa_r+0x584>
 8007af8:	0800ab70 	.word	0x0800ab70
 8007afc:	0800ab48 	.word	0x0800ab48
 8007b00:	3ff00000 	.word	0x3ff00000
 8007b04:	40240000 	.word	0x40240000
 8007b08:	401c0000 	.word	0x401c0000
 8007b0c:	40140000 	.word	0x40140000
 8007b10:	3fe00000 	.word	0x3fe00000
 8007b14:	9d06      	ldr	r5, [sp, #24]
 8007b16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4639      	mov	r1, r7
 8007b22:	f7f8 fdfb 	bl	800071c <__aeabi_ddiv>
 8007b26:	f7f8 ff7f 	bl	8000a28 <__aeabi_d2iz>
 8007b2a:	4681      	mov	r9, r0
 8007b2c:	f7f8 fc62 	bl	80003f4 <__aeabi_i2d>
 8007b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b34:	f7f8 fcc8 	bl	80004c8 <__aeabi_dmul>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f8 fb0a 	bl	8000158 <__aeabi_dsub>
 8007b44:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007b48:	f805 6b01 	strb.w	r6, [r5], #1
 8007b4c:	9e06      	ldr	r6, [sp, #24]
 8007b4e:	4602      	mov	r2, r0
 8007b50:	1bae      	subs	r6, r5, r6
 8007b52:	45b0      	cmp	r8, r6
 8007b54:	460b      	mov	r3, r1
 8007b56:	d135      	bne.n	8007bc4 <_dtoa_r+0x6d4>
 8007b58:	f7f8 fb00 	bl	800015c <__adddf3>
 8007b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	f7f8 ff40 	bl	80009e8 <__aeabi_dcmpgt>
 8007b68:	b9c8      	cbnz	r0, 8007b9e <_dtoa_r+0x6ae>
 8007b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 ff11 	bl	8000998 <__aeabi_dcmpeq>
 8007b76:	b110      	cbz	r0, 8007b7e <_dtoa_r+0x68e>
 8007b78:	f019 0f01 	tst.w	r9, #1
 8007b7c:	d10f      	bne.n	8007b9e <_dtoa_r+0x6ae>
 8007b7e:	4659      	mov	r1, fp
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7ff f8e3 	bl	8006d4c <_Bfree>
 8007b86:	2300      	movs	r3, #0
 8007b88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b8a:	702b      	strb	r3, [r5, #0]
 8007b8c:	f10a 0301 	add.w	r3, sl, #1
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f43f acf3 	beq.w	8007580 <_dtoa_r+0x90>
 8007b9a:	601d      	str	r5, [r3, #0]
 8007b9c:	e4f0      	b.n	8007580 <_dtoa_r+0x90>
 8007b9e:	4657      	mov	r7, sl
 8007ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ba4:	1e6b      	subs	r3, r5, #1
 8007ba6:	2a39      	cmp	r2, #57	; 0x39
 8007ba8:	d106      	bne.n	8007bb8 <_dtoa_r+0x6c8>
 8007baa:	9a06      	ldr	r2, [sp, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d107      	bne.n	8007bc0 <_dtoa_r+0x6d0>
 8007bb0:	2330      	movs	r3, #48	; 0x30
 8007bb2:	7013      	strb	r3, [r2, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	3701      	adds	r7, #1
 8007bb8:	781a      	ldrb	r2, [r3, #0]
 8007bba:	3201      	adds	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e791      	b.n	8007ae4 <_dtoa_r+0x5f4>
 8007bc0:	461d      	mov	r5, r3
 8007bc2:	e7ed      	b.n	8007ba0 <_dtoa_r+0x6b0>
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4b99      	ldr	r3, [pc, #612]	; (8007e2c <_dtoa_r+0x93c>)
 8007bc8:	f7f8 fc7e 	bl	80004c8 <__aeabi_dmul>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	460f      	mov	r7, r1
 8007bd4:	f7f8 fee0 	bl	8000998 <__aeabi_dcmpeq>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d09e      	beq.n	8007b1a <_dtoa_r+0x62a>
 8007bdc:	e7cf      	b.n	8007b7e <_dtoa_r+0x68e>
 8007bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	f000 8088 	beq.w	8007cf6 <_dtoa_r+0x806>
 8007be6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	dc6d      	bgt.n	8007cc8 <_dtoa_r+0x7d8>
 8007bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bee:	2a00      	cmp	r2, #0
 8007bf0:	d066      	beq.n	8007cc0 <_dtoa_r+0x7d0>
 8007bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bf6:	464d      	mov	r5, r9
 8007bf8:	9e08      	ldr	r6, [sp, #32]
 8007bfa:	9a07      	ldr	r2, [sp, #28]
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	441a      	add	r2, r3
 8007c00:	4620      	mov	r0, r4
 8007c02:	4499      	add	r9, r3
 8007c04:	9207      	str	r2, [sp, #28]
 8007c06:	f7ff f941 	bl	8006e8c <__i2b>
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	dd0b      	ble.n	8007c28 <_dtoa_r+0x738>
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dd08      	ble.n	8007c28 <_dtoa_r+0x738>
 8007c16:	42ab      	cmp	r3, r5
 8007c18:	bfa8      	it	ge
 8007c1a:	462b      	movge	r3, r5
 8007c1c:	9a07      	ldr	r2, [sp, #28]
 8007c1e:	eba9 0903 	sub.w	r9, r9, r3
 8007c22:	1aed      	subs	r5, r5, r3
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	b1eb      	cbz	r3, 8007c68 <_dtoa_r+0x778>
 8007c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d065      	beq.n	8007cfe <_dtoa_r+0x80e>
 8007c32:	b18e      	cbz	r6, 8007c58 <_dtoa_r+0x768>
 8007c34:	4639      	mov	r1, r7
 8007c36:	4632      	mov	r2, r6
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7ff f9c5 	bl	8006fc8 <__pow5mult>
 8007c3e:	465a      	mov	r2, fp
 8007c40:	4601      	mov	r1, r0
 8007c42:	4607      	mov	r7, r0
 8007c44:	4620      	mov	r0, r4
 8007c46:	f7ff f92a 	bl	8006e9e <__multiply>
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff f87c 	bl	8006d4c <_Bfree>
 8007c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c56:	469b      	mov	fp, r3
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	1b9a      	subs	r2, r3, r6
 8007c5c:	d004      	beq.n	8007c68 <_dtoa_r+0x778>
 8007c5e:	4659      	mov	r1, fp
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff f9b1 	bl	8006fc8 <__pow5mult>
 8007c66:	4683      	mov	fp, r0
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7ff f90e 	bl	8006e8c <__i2b>
 8007c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c72:	4606      	mov	r6, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 81c6 	beq.w	8008006 <_dtoa_r+0xb16>
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff f9a2 	bl	8006fc8 <__pow5mult>
 8007c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c86:	4606      	mov	r6, r0
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	dc3e      	bgt.n	8007d0a <_dtoa_r+0x81a>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d137      	bne.n	8007d02 <_dtoa_r+0x812>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d134      	bne.n	8007d06 <_dtoa_r+0x816>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ca2:	0d1b      	lsrs	r3, r3, #20
 8007ca4:	051b      	lsls	r3, r3, #20
 8007ca6:	b12b      	cbz	r3, 8007cb4 <_dtoa_r+0x7c4>
 8007ca8:	9b07      	ldr	r3, [sp, #28]
 8007caa:	f109 0901 	add.w	r9, r9, #1
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	9308      	str	r3, [sp, #32]
 8007cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d128      	bne.n	8007d0e <_dtoa_r+0x81e>
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e02e      	b.n	8007d1e <_dtoa_r+0x82e>
 8007cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cc6:	e796      	b.n	8007bf6 <_dtoa_r+0x706>
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	f108 36ff 	add.w	r6, r8, #4294967295
 8007cce:	42b3      	cmp	r3, r6
 8007cd0:	bfb7      	itett	lt
 8007cd2:	9b08      	ldrlt	r3, [sp, #32]
 8007cd4:	1b9e      	subge	r6, r3, r6
 8007cd6:	1af2      	sublt	r2, r6, r3
 8007cd8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007cda:	bfbf      	itttt	lt
 8007cdc:	9608      	strlt	r6, [sp, #32]
 8007cde:	189b      	addlt	r3, r3, r2
 8007ce0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007ce2:	2600      	movlt	r6, #0
 8007ce4:	f1b8 0f00 	cmp.w	r8, #0
 8007ce8:	bfb9      	ittee	lt
 8007cea:	eba9 0508 	sublt.w	r5, r9, r8
 8007cee:	2300      	movlt	r3, #0
 8007cf0:	464d      	movge	r5, r9
 8007cf2:	4643      	movge	r3, r8
 8007cf4:	e781      	b.n	8007bfa <_dtoa_r+0x70a>
 8007cf6:	9e08      	ldr	r6, [sp, #32]
 8007cf8:	464d      	mov	r5, r9
 8007cfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cfc:	e786      	b.n	8007c0c <_dtoa_r+0x71c>
 8007cfe:	9a08      	ldr	r2, [sp, #32]
 8007d00:	e7ad      	b.n	8007c5e <_dtoa_r+0x76e>
 8007d02:	2300      	movs	r3, #0
 8007d04:	e7d6      	b.n	8007cb4 <_dtoa_r+0x7c4>
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	e7d4      	b.n	8007cb4 <_dtoa_r+0x7c4>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9308      	str	r3, [sp, #32]
 8007d0e:	6933      	ldr	r3, [r6, #16]
 8007d10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d14:	6918      	ldr	r0, [r3, #16]
 8007d16:	f7ff f86b 	bl	8006df0 <__hi0bits>
 8007d1a:	f1c0 0020 	rsb	r0, r0, #32
 8007d1e:	9b07      	ldr	r3, [sp, #28]
 8007d20:	4418      	add	r0, r3
 8007d22:	f010 001f 	ands.w	r0, r0, #31
 8007d26:	d047      	beq.n	8007db8 <_dtoa_r+0x8c8>
 8007d28:	f1c0 0320 	rsb	r3, r0, #32
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	dd3b      	ble.n	8007da8 <_dtoa_r+0x8b8>
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	f1c0 001c 	rsb	r0, r0, #28
 8007d36:	4481      	add	r9, r0
 8007d38:	4405      	add	r5, r0
 8007d3a:	4403      	add	r3, r0
 8007d3c:	9307      	str	r3, [sp, #28]
 8007d3e:	f1b9 0f00 	cmp.w	r9, #0
 8007d42:	dd05      	ble.n	8007d50 <_dtoa_r+0x860>
 8007d44:	4659      	mov	r1, fp
 8007d46:	464a      	mov	r2, r9
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7ff f98b 	bl	8007064 <__lshift>
 8007d4e:	4683      	mov	fp, r0
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dd05      	ble.n	8007d62 <_dtoa_r+0x872>
 8007d56:	4631      	mov	r1, r6
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff f982 	bl	8007064 <__lshift>
 8007d60:	4606      	mov	r6, r0
 8007d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d64:	b353      	cbz	r3, 8007dbc <_dtoa_r+0x8cc>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4658      	mov	r0, fp
 8007d6a:	f7ff f9cf 	bl	800710c <__mcmp>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	da24      	bge.n	8007dbc <_dtoa_r+0x8cc>
 8007d72:	2300      	movs	r3, #0
 8007d74:	4659      	mov	r1, fp
 8007d76:	220a      	movs	r2, #10
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7fe fffe 	bl	8006d7a <__multadd>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d84:	4683      	mov	fp, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 8144 	beq.w	8008014 <_dtoa_r+0xb24>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4639      	mov	r1, r7
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f7fe fff1 	bl	8006d7a <__multadd>
 8007d98:	9b04      	ldr	r3, [sp, #16]
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dc4d      	bgt.n	8007e3c <_dtoa_r+0x94c>
 8007da0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	dd4a      	ble.n	8007e3c <_dtoa_r+0x94c>
 8007da6:	e011      	b.n	8007dcc <_dtoa_r+0x8dc>
 8007da8:	d0c9      	beq.n	8007d3e <_dtoa_r+0x84e>
 8007daa:	9a07      	ldr	r2, [sp, #28]
 8007dac:	331c      	adds	r3, #28
 8007dae:	441a      	add	r2, r3
 8007db0:	4499      	add	r9, r3
 8007db2:	441d      	add	r5, r3
 8007db4:	4613      	mov	r3, r2
 8007db6:	e7c1      	b.n	8007d3c <_dtoa_r+0x84c>
 8007db8:	4603      	mov	r3, r0
 8007dba:	e7f6      	b.n	8007daa <_dtoa_r+0x8ba>
 8007dbc:	f1b8 0f00 	cmp.w	r8, #0
 8007dc0:	dc36      	bgt.n	8007e30 <_dtoa_r+0x940>
 8007dc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	dd33      	ble.n	8007e30 <_dtoa_r+0x940>
 8007dc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	b963      	cbnz	r3, 8007dea <_dtoa_r+0x8fa>
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7fe ffd0 	bl	8006d7a <__multadd>
 8007dda:	4601      	mov	r1, r0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	4658      	mov	r0, fp
 8007de0:	f7ff f994 	bl	800710c <__mcmp>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f73f add3 	bgt.w	8007990 <_dtoa_r+0x4a0>
 8007dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dec:	9d06      	ldr	r5, [sp, #24]
 8007dee:	ea6f 0a03 	mvn.w	sl, r3
 8007df2:	f04f 0900 	mov.w	r9, #0
 8007df6:	4631      	mov	r1, r6
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f7fe ffa7 	bl	8006d4c <_Bfree>
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	f43f aebd 	beq.w	8007b7e <_dtoa_r+0x68e>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	d005      	beq.n	8007e16 <_dtoa_r+0x926>
 8007e0a:	45b9      	cmp	r9, r7
 8007e0c:	d003      	beq.n	8007e16 <_dtoa_r+0x926>
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7fe ff9b 	bl	8006d4c <_Bfree>
 8007e16:	4639      	mov	r1, r7
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7fe ff97 	bl	8006d4c <_Bfree>
 8007e1e:	e6ae      	b.n	8007b7e <_dtoa_r+0x68e>
 8007e20:	2600      	movs	r6, #0
 8007e22:	4637      	mov	r7, r6
 8007e24:	e7e1      	b.n	8007dea <_dtoa_r+0x8fa>
 8007e26:	46ba      	mov	sl, r7
 8007e28:	4637      	mov	r7, r6
 8007e2a:	e5b1      	b.n	8007990 <_dtoa_r+0x4a0>
 8007e2c:	40240000 	.word	0x40240000
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 80f3 	beq.w	8008022 <_dtoa_r+0xb32>
 8007e3c:	2d00      	cmp	r5, #0
 8007e3e:	dd05      	ble.n	8007e4c <_dtoa_r+0x95c>
 8007e40:	4639      	mov	r1, r7
 8007e42:	462a      	mov	r2, r5
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff f90d 	bl	8007064 <__lshift>
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04c      	beq.n	8007eec <_dtoa_r+0x9fc>
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7fe ff45 	bl	8006ce4 <_Balloc>
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	f107 010c 	add.w	r1, r7, #12
 8007e62:	3202      	adds	r2, #2
 8007e64:	0092      	lsls	r2, r2, #2
 8007e66:	300c      	adds	r0, #12
 8007e68:	f7fe fda8 	bl	80069bc <memcpy>
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7ff f8f7 	bl	8007064 <__lshift>
 8007e76:	46b9      	mov	r9, r7
 8007e78:	4607      	mov	r7, r0
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	9b02      	ldr	r3, [sp, #8]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	9308      	str	r3, [sp, #32]
 8007e86:	4631      	mov	r1, r6
 8007e88:	4658      	mov	r0, fp
 8007e8a:	f7ff faa3 	bl	80073d4 <quorem>
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4605      	mov	r5, r0
 8007e92:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e96:	4658      	mov	r0, fp
 8007e98:	f7ff f938 	bl	800710c <__mcmp>
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	9002      	str	r0, [sp, #8]
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff f94c 	bl	8007140 <__mdiff>
 8007ea8:	68c3      	ldr	r3, [r0, #12]
 8007eaa:	4602      	mov	r2, r0
 8007eac:	bb03      	cbnz	r3, 8007ef0 <_dtoa_r+0xa00>
 8007eae:	4601      	mov	r1, r0
 8007eb0:	9009      	str	r0, [sp, #36]	; 0x24
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f7ff f92a 	bl	800710c <__mcmp>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec2:	f7fe ff43 	bl	8006d4c <_Bfree>
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	b9a3      	cbnz	r3, 8007ef4 <_dtoa_r+0xa04>
 8007eca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ecc:	b992      	cbnz	r2, 8007ef4 <_dtoa_r+0xa04>
 8007ece:	9a08      	ldr	r2, [sp, #32]
 8007ed0:	b982      	cbnz	r2, 8007ef4 <_dtoa_r+0xa04>
 8007ed2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ed6:	d029      	beq.n	8007f2c <_dtoa_r+0xa3c>
 8007ed8:	9b02      	ldr	r3, [sp, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dd01      	ble.n	8007ee2 <_dtoa_r+0x9f2>
 8007ede:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ee2:	9b07      	ldr	r3, [sp, #28]
 8007ee4:	1c5d      	adds	r5, r3, #1
 8007ee6:	f883 8000 	strb.w	r8, [r3]
 8007eea:	e784      	b.n	8007df6 <_dtoa_r+0x906>
 8007eec:	4638      	mov	r0, r7
 8007eee:	e7c2      	b.n	8007e76 <_dtoa_r+0x986>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7e3      	b.n	8007ebc <_dtoa_r+0x9cc>
 8007ef4:	9a02      	ldr	r2, [sp, #8]
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	db04      	blt.n	8007f04 <_dtoa_r+0xa14>
 8007efa:	d123      	bne.n	8007f44 <_dtoa_r+0xa54>
 8007efc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007efe:	bb0a      	cbnz	r2, 8007f44 <_dtoa_r+0xa54>
 8007f00:	9a08      	ldr	r2, [sp, #32]
 8007f02:	b9fa      	cbnz	r2, 8007f44 <_dtoa_r+0xa54>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	ddec      	ble.n	8007ee2 <_dtoa_r+0x9f2>
 8007f08:	4659      	mov	r1, fp
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff f8a9 	bl	8007064 <__lshift>
 8007f12:	4631      	mov	r1, r6
 8007f14:	4683      	mov	fp, r0
 8007f16:	f7ff f8f9 	bl	800710c <__mcmp>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	dc03      	bgt.n	8007f26 <_dtoa_r+0xa36>
 8007f1e:	d1e0      	bne.n	8007ee2 <_dtoa_r+0x9f2>
 8007f20:	f018 0f01 	tst.w	r8, #1
 8007f24:	d0dd      	beq.n	8007ee2 <_dtoa_r+0x9f2>
 8007f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f2a:	d1d8      	bne.n	8007ede <_dtoa_r+0x9ee>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	9a07      	ldr	r2, [sp, #28]
 8007f30:	1c5d      	adds	r5, r3, #1
 8007f32:	2339      	movs	r3, #57	; 0x39
 8007f34:	7013      	strb	r3, [r2, #0]
 8007f36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f3a:	1e6a      	subs	r2, r5, #1
 8007f3c:	2b39      	cmp	r3, #57	; 0x39
 8007f3e:	d04d      	beq.n	8007fdc <_dtoa_r+0xaec>
 8007f40:	3301      	adds	r3, #1
 8007f42:	e052      	b.n	8007fea <_dtoa_r+0xafa>
 8007f44:	9a07      	ldr	r2, [sp, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f102 0501 	add.w	r5, r2, #1
 8007f4c:	dd06      	ble.n	8007f5c <_dtoa_r+0xa6c>
 8007f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f52:	d0eb      	beq.n	8007f2c <_dtoa_r+0xa3c>
 8007f54:	f108 0801 	add.w	r8, r8, #1
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	e7c4      	b.n	8007ee6 <_dtoa_r+0x9f6>
 8007f5c:	9b06      	ldr	r3, [sp, #24]
 8007f5e:	9a04      	ldr	r2, [sp, #16]
 8007f60:	1aeb      	subs	r3, r5, r3
 8007f62:	4293      	cmp	r3, r2
 8007f64:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f68:	d021      	beq.n	8007fae <_dtoa_r+0xabe>
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7fe ff02 	bl	8006d7a <__multadd>
 8007f76:	45b9      	cmp	r9, r7
 8007f78:	4683      	mov	fp, r0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	f04f 020a 	mov.w	r2, #10
 8007f82:	4649      	mov	r1, r9
 8007f84:	4620      	mov	r0, r4
 8007f86:	d105      	bne.n	8007f94 <_dtoa_r+0xaa4>
 8007f88:	f7fe fef7 	bl	8006d7a <__multadd>
 8007f8c:	4681      	mov	r9, r0
 8007f8e:	4607      	mov	r7, r0
 8007f90:	9507      	str	r5, [sp, #28]
 8007f92:	e778      	b.n	8007e86 <_dtoa_r+0x996>
 8007f94:	f7fe fef1 	bl	8006d7a <__multadd>
 8007f98:	4639      	mov	r1, r7
 8007f9a:	4681      	mov	r9, r0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7fe feea 	bl	8006d7a <__multadd>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	e7f2      	b.n	8007f90 <_dtoa_r+0xaa0>
 8007faa:	f04f 0900 	mov.w	r9, #0
 8007fae:	4659      	mov	r1, fp
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f7ff f856 	bl	8007064 <__lshift>
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4683      	mov	fp, r0
 8007fbc:	f7ff f8a6 	bl	800710c <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dcb8      	bgt.n	8007f36 <_dtoa_r+0xa46>
 8007fc4:	d102      	bne.n	8007fcc <_dtoa_r+0xadc>
 8007fc6:	f018 0f01 	tst.w	r8, #1
 8007fca:	d1b4      	bne.n	8007f36 <_dtoa_r+0xa46>
 8007fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd0:	1e6a      	subs	r2, r5, #1
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	f47f af0f 	bne.w	8007df6 <_dtoa_r+0x906>
 8007fd8:	4615      	mov	r5, r2
 8007fda:	e7f7      	b.n	8007fcc <_dtoa_r+0xadc>
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d105      	bne.n	8007fee <_dtoa_r+0xafe>
 8007fe2:	2331      	movs	r3, #49	; 0x31
 8007fe4:	9a06      	ldr	r2, [sp, #24]
 8007fe6:	f10a 0a01 	add.w	sl, sl, #1
 8007fea:	7013      	strb	r3, [r2, #0]
 8007fec:	e703      	b.n	8007df6 <_dtoa_r+0x906>
 8007fee:	4615      	mov	r5, r2
 8007ff0:	e7a1      	b.n	8007f36 <_dtoa_r+0xa46>
 8007ff2:	4b17      	ldr	r3, [pc, #92]	; (8008050 <_dtoa_r+0xb60>)
 8007ff4:	f7ff bae1 	b.w	80075ba <_dtoa_r+0xca>
 8007ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f aabb 	bne.w	8007576 <_dtoa_r+0x86>
 8008000:	4b14      	ldr	r3, [pc, #80]	; (8008054 <_dtoa_r+0xb64>)
 8008002:	f7ff bada 	b.w	80075ba <_dtoa_r+0xca>
 8008006:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008008:	2b01      	cmp	r3, #1
 800800a:	f77f ae3f 	ble.w	8007c8c <_dtoa_r+0x79c>
 800800e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008010:	9308      	str	r3, [sp, #32]
 8008012:	e653      	b.n	8007cbc <_dtoa_r+0x7cc>
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dc03      	bgt.n	8008022 <_dtoa_r+0xb32>
 800801a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800801c:	2b02      	cmp	r3, #2
 800801e:	f73f aed5 	bgt.w	8007dcc <_dtoa_r+0x8dc>
 8008022:	9d06      	ldr	r5, [sp, #24]
 8008024:	4631      	mov	r1, r6
 8008026:	4658      	mov	r0, fp
 8008028:	f7ff f9d4 	bl	80073d4 <quorem>
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008032:	f805 8b01 	strb.w	r8, [r5], #1
 8008036:	9a04      	ldr	r2, [sp, #16]
 8008038:	1aeb      	subs	r3, r5, r3
 800803a:	429a      	cmp	r2, r3
 800803c:	ddb5      	ble.n	8007faa <_dtoa_r+0xaba>
 800803e:	4659      	mov	r1, fp
 8008040:	2300      	movs	r3, #0
 8008042:	220a      	movs	r2, #10
 8008044:	4620      	mov	r0, r4
 8008046:	f7fe fe98 	bl	8006d7a <__multadd>
 800804a:	4683      	mov	fp, r0
 800804c:	e7ea      	b.n	8008024 <_dtoa_r+0xb34>
 800804e:	bf00      	nop
 8008050:	0800ac51 	.word	0x0800ac51
 8008054:	0800ac44 	.word	0x0800ac44

08008058 <malloc>:
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <malloc+0xc>)
 800805a:	4601      	mov	r1, r0
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f7ff b947 	b.w	80072f0 <_malloc_r>
 8008062:	bf00      	nop
 8008064:	200001fc 	.word	0x200001fc

08008068 <__malloc_lock>:
 8008068:	4770      	bx	lr

0800806a <__malloc_unlock>:
 800806a:	4770      	bx	lr
 800806c:	0000      	movs	r0, r0
	...

08008070 <atan>:
 8008070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4bb6      	ldr	r3, [pc, #728]	; (8008350 <atan+0x2e0>)
 8008076:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800807a:	429e      	cmp	r6, r3
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	468b      	mov	fp, r1
 8008082:	dd17      	ble.n	80080b4 <atan+0x44>
 8008084:	4bb3      	ldr	r3, [pc, #716]	; (8008354 <atan+0x2e4>)
 8008086:	429e      	cmp	r6, r3
 8008088:	dc01      	bgt.n	800808e <atan+0x1e>
 800808a:	d109      	bne.n	80080a0 <atan+0x30>
 800808c:	b140      	cbz	r0, 80080a0 <atan+0x30>
 800808e:	4622      	mov	r2, r4
 8008090:	462b      	mov	r3, r5
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 f861 	bl	800015c <__adddf3>
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	e005      	b.n	80080ac <atan+0x3c>
 80080a0:	f1bb 0f00 	cmp.w	fp, #0
 80080a4:	4cac      	ldr	r4, [pc, #688]	; (8008358 <atan+0x2e8>)
 80080a6:	f340 8121 	ble.w	80082ec <atan+0x27c>
 80080aa:	4dac      	ldr	r5, [pc, #688]	; (800835c <atan+0x2ec>)
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	4baa      	ldr	r3, [pc, #680]	; (8008360 <atan+0x2f0>)
 80080b6:	429e      	cmp	r6, r3
 80080b8:	dc11      	bgt.n	80080de <atan+0x6e>
 80080ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80080be:	429e      	cmp	r6, r3
 80080c0:	dc0a      	bgt.n	80080d8 <atan+0x68>
 80080c2:	a38b      	add	r3, pc, #556	; (adr r3, 80082f0 <atan+0x280>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f848 	bl	800015c <__adddf3>
 80080cc:	2200      	movs	r2, #0
 80080ce:	4ba5      	ldr	r3, [pc, #660]	; (8008364 <atan+0x2f4>)
 80080d0:	f7f8 fc8a 	bl	80009e8 <__aeabi_dcmpgt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d1e9      	bne.n	80080ac <atan+0x3c>
 80080d8:	f04f 3aff 	mov.w	sl, #4294967295
 80080dc:	e027      	b.n	800812e <atan+0xbe>
 80080de:	f000 f987 	bl	80083f0 <fabs>
 80080e2:	4ba1      	ldr	r3, [pc, #644]	; (8008368 <atan+0x2f8>)
 80080e4:	4604      	mov	r4, r0
 80080e6:	429e      	cmp	r6, r3
 80080e8:	460d      	mov	r5, r1
 80080ea:	f300 80b8 	bgt.w	800825e <atan+0x1ee>
 80080ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80080f2:	429e      	cmp	r6, r3
 80080f4:	f300 809c 	bgt.w	8008230 <atan+0x1c0>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	f7f8 f82e 	bl	800015c <__adddf3>
 8008100:	2200      	movs	r2, #0
 8008102:	4b98      	ldr	r3, [pc, #608]	; (8008364 <atan+0x2f4>)
 8008104:	f7f8 f828 	bl	8000158 <__aeabi_dsub>
 8008108:	2200      	movs	r2, #0
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f821 	bl	800015c <__adddf3>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fafb 	bl	800071c <__aeabi_ddiv>
 8008126:	f04f 0a00 	mov.w	sl, #0
 800812a:	4604      	mov	r4, r0
 800812c:	460d      	mov	r5, r1
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	f7f8 f9c7 	bl	80004c8 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4680      	mov	r8, r0
 8008140:	4689      	mov	r9, r1
 8008142:	f7f8 f9c1 	bl	80004c8 <__aeabi_dmul>
 8008146:	a36c      	add	r3, pc, #432	; (adr r3, 80082f8 <atan+0x288>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	4606      	mov	r6, r0
 800814e:	460f      	mov	r7, r1
 8008150:	f7f8 f9ba 	bl	80004c8 <__aeabi_dmul>
 8008154:	a36a      	add	r3, pc, #424	; (adr r3, 8008300 <atan+0x290>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f7 ffff 	bl	800015c <__adddf3>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	a368      	add	r3, pc, #416	; (adr r3, 8008308 <atan+0x298>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f7 fff6 	bl	800015c <__adddf3>
 8008170:	4632      	mov	r2, r6
 8008172:	463b      	mov	r3, r7
 8008174:	f7f8 f9a8 	bl	80004c8 <__aeabi_dmul>
 8008178:	a365      	add	r3, pc, #404	; (adr r3, 8008310 <atan+0x2a0>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f7 ffed 	bl	800015c <__adddf3>
 8008182:	4632      	mov	r2, r6
 8008184:	463b      	mov	r3, r7
 8008186:	f7f8 f99f 	bl	80004c8 <__aeabi_dmul>
 800818a:	a363      	add	r3, pc, #396	; (adr r3, 8008318 <atan+0x2a8>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f7 ffe4 	bl	800015c <__adddf3>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	f7f8 f996 	bl	80004c8 <__aeabi_dmul>
 800819c:	a360      	add	r3, pc, #384	; (adr r3, 8008320 <atan+0x2b0>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f7 ffdb 	bl	800015c <__adddf3>
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	f7f8 f98d 	bl	80004c8 <__aeabi_dmul>
 80081ae:	a35e      	add	r3, pc, #376	; (adr r3, 8008328 <atan+0x2b8>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	4680      	mov	r8, r0
 80081b6:	4689      	mov	r9, r1
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 f984 	bl	80004c8 <__aeabi_dmul>
 80081c0:	a35b      	add	r3, pc, #364	; (adr r3, 8008330 <atan+0x2c0>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f7 ffc7 	bl	8000158 <__aeabi_dsub>
 80081ca:	4632      	mov	r2, r6
 80081cc:	463b      	mov	r3, r7
 80081ce:	f7f8 f97b 	bl	80004c8 <__aeabi_dmul>
 80081d2:	a359      	add	r3, pc, #356	; (adr r3, 8008338 <atan+0x2c8>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f7 ffbe 	bl	8000158 <__aeabi_dsub>
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	f7f8 f972 	bl	80004c8 <__aeabi_dmul>
 80081e4:	a356      	add	r3, pc, #344	; (adr r3, 8008340 <atan+0x2d0>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f7f7 ffb5 	bl	8000158 <__aeabi_dsub>
 80081ee:	4632      	mov	r2, r6
 80081f0:	463b      	mov	r3, r7
 80081f2:	f7f8 f969 	bl	80004c8 <__aeabi_dmul>
 80081f6:	a354      	add	r3, pc, #336	; (adr r3, 8008348 <atan+0x2d8>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f7 ffac 	bl	8000158 <__aeabi_dsub>
 8008200:	4632      	mov	r2, r6
 8008202:	463b      	mov	r3, r7
 8008204:	f7f8 f960 	bl	80004c8 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f7 ffa4 	bl	800015c <__adddf3>
 8008214:	4622      	mov	r2, r4
 8008216:	462b      	mov	r3, r5
 8008218:	f7f8 f956 	bl	80004c8 <__aeabi_dmul>
 800821c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	d144      	bne.n	80082b0 <atan+0x240>
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f7 ff95 	bl	8000158 <__aeabi_dsub>
 800822e:	e734      	b.n	800809a <atan+0x2a>
 8008230:	2200      	movs	r2, #0
 8008232:	4b4c      	ldr	r3, [pc, #304]	; (8008364 <atan+0x2f4>)
 8008234:	f7f7 ff90 	bl	8000158 <__aeabi_dsub>
 8008238:	2200      	movs	r2, #0
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	4b49      	ldr	r3, [pc, #292]	; (8008364 <atan+0x2f4>)
 8008240:	4620      	mov	r0, r4
 8008242:	4629      	mov	r1, r5
 8008244:	f7f7 ff8a 	bl	800015c <__adddf3>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 fa64 	bl	800071c <__aeabi_ddiv>
 8008254:	f04f 0a01 	mov.w	sl, #1
 8008258:	4604      	mov	r4, r0
 800825a:	460d      	mov	r5, r1
 800825c:	e767      	b.n	800812e <atan+0xbe>
 800825e:	4b43      	ldr	r3, [pc, #268]	; (800836c <atan+0x2fc>)
 8008260:	429e      	cmp	r6, r3
 8008262:	dc1a      	bgt.n	800829a <atan+0x22a>
 8008264:	2200      	movs	r2, #0
 8008266:	4b42      	ldr	r3, [pc, #264]	; (8008370 <atan+0x300>)
 8008268:	f7f7 ff76 	bl	8000158 <__aeabi_dsub>
 800826c:	2200      	movs	r2, #0
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <atan+0x300>)
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 f926 	bl	80004c8 <__aeabi_dmul>
 800827c:	2200      	movs	r2, #0
 800827e:	4b39      	ldr	r3, [pc, #228]	; (8008364 <atan+0x2f4>)
 8008280:	f7f7 ff6c 	bl	800015c <__adddf3>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fa46 	bl	800071c <__aeabi_ddiv>
 8008290:	f04f 0a02 	mov.w	sl, #2
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	e749      	b.n	800812e <atan+0xbe>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	2000      	movs	r0, #0
 80082a0:	4934      	ldr	r1, [pc, #208]	; (8008374 <atan+0x304>)
 80082a2:	f7f8 fa3b 	bl	800071c <__aeabi_ddiv>
 80082a6:	f04f 0a03 	mov.w	sl, #3
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
 80082ae:	e73e      	b.n	800812e <atan+0xbe>
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <atan+0x308>)
 80082b2:	4e32      	ldr	r6, [pc, #200]	; (800837c <atan+0x30c>)
 80082b4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80082b8:	4456      	add	r6, sl
 80082ba:	449a      	add	sl, r3
 80082bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80082c0:	f7f7 ff4a 	bl	8000158 <__aeabi_dsub>
 80082c4:	4622      	mov	r2, r4
 80082c6:	462b      	mov	r3, r5
 80082c8:	f7f7 ff46 	bl	8000158 <__aeabi_dsub>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80082d4:	f7f7 ff40 	bl	8000158 <__aeabi_dsub>
 80082d8:	f1bb 0f00 	cmp.w	fp, #0
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	f6bf aee4 	bge.w	80080ac <atan+0x3c>
 80082e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082e8:	461d      	mov	r5, r3
 80082ea:	e6df      	b.n	80080ac <atan+0x3c>
 80082ec:	4d24      	ldr	r5, [pc, #144]	; (8008380 <atan+0x310>)
 80082ee:	e6dd      	b.n	80080ac <atan+0x3c>
 80082f0:	8800759c 	.word	0x8800759c
 80082f4:	7e37e43c 	.word	0x7e37e43c
 80082f8:	e322da11 	.word	0xe322da11
 80082fc:	3f90ad3a 	.word	0x3f90ad3a
 8008300:	24760deb 	.word	0x24760deb
 8008304:	3fa97b4b 	.word	0x3fa97b4b
 8008308:	a0d03d51 	.word	0xa0d03d51
 800830c:	3fb10d66 	.word	0x3fb10d66
 8008310:	c54c206e 	.word	0xc54c206e
 8008314:	3fb745cd 	.word	0x3fb745cd
 8008318:	920083ff 	.word	0x920083ff
 800831c:	3fc24924 	.word	0x3fc24924
 8008320:	5555550d 	.word	0x5555550d
 8008324:	3fd55555 	.word	0x3fd55555
 8008328:	2c6a6c2f 	.word	0x2c6a6c2f
 800832c:	bfa2b444 	.word	0xbfa2b444
 8008330:	52defd9a 	.word	0x52defd9a
 8008334:	3fadde2d 	.word	0x3fadde2d
 8008338:	af749a6d 	.word	0xaf749a6d
 800833c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008340:	fe231671 	.word	0xfe231671
 8008344:	3fbc71c6 	.word	0x3fbc71c6
 8008348:	9998ebc4 	.word	0x9998ebc4
 800834c:	3fc99999 	.word	0x3fc99999
 8008350:	440fffff 	.word	0x440fffff
 8008354:	7ff00000 	.word	0x7ff00000
 8008358:	54442d18 	.word	0x54442d18
 800835c:	3ff921fb 	.word	0x3ff921fb
 8008360:	3fdbffff 	.word	0x3fdbffff
 8008364:	3ff00000 	.word	0x3ff00000
 8008368:	3ff2ffff 	.word	0x3ff2ffff
 800836c:	40037fff 	.word	0x40037fff
 8008370:	3ff80000 	.word	0x3ff80000
 8008374:	bff00000 	.word	0xbff00000
 8008378:	0800ac78 	.word	0x0800ac78
 800837c:	0800ac58 	.word	0x0800ac58
 8008380:	bff921fb 	.word	0xbff921fb

08008384 <cos>:
 8008384:	b530      	push	{r4, r5, lr}
 8008386:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <cos+0x64>)
 8008388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800838c:	4293      	cmp	r3, r2
 800838e:	b087      	sub	sp, #28
 8008390:	dc04      	bgt.n	800839c <cos+0x18>
 8008392:	2200      	movs	r2, #0
 8008394:	2300      	movs	r3, #0
 8008396:	f001 fd43 	bl	8009e20 <__kernel_cos>
 800839a:	e006      	b.n	80083aa <cos+0x26>
 800839c:	4a13      	ldr	r2, [pc, #76]	; (80083ec <cos+0x68>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	dd05      	ble.n	80083ae <cos+0x2a>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	f7f7 fed7 	bl	8000158 <__aeabi_dsub>
 80083aa:	b007      	add	sp, #28
 80083ac:	bd30      	pop	{r4, r5, pc}
 80083ae:	aa02      	add	r2, sp, #8
 80083b0:	f001 fa9a 	bl	80098e8 <__ieee754_rem_pio2>
 80083b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b8:	f000 0403 	and.w	r4, r0, #3
 80083bc:	2c01      	cmp	r4, #1
 80083be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c2:	d008      	beq.n	80083d6 <cos+0x52>
 80083c4:	2c02      	cmp	r4, #2
 80083c6:	d00c      	beq.n	80083e2 <cos+0x5e>
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d0e4      	beq.n	8008396 <cos+0x12>
 80083cc:	2401      	movs	r4, #1
 80083ce:	9400      	str	r4, [sp, #0]
 80083d0:	f002 f92e 	bl	800a630 <__kernel_sin>
 80083d4:	e7e9      	b.n	80083aa <cos+0x26>
 80083d6:	9400      	str	r4, [sp, #0]
 80083d8:	f002 f92a 	bl	800a630 <__kernel_sin>
 80083dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80083e0:	e7e3      	b.n	80083aa <cos+0x26>
 80083e2:	f001 fd1d 	bl	8009e20 <__kernel_cos>
 80083e6:	e7f9      	b.n	80083dc <cos+0x58>
 80083e8:	3fe921fb 	.word	0x3fe921fb
 80083ec:	7fefffff 	.word	0x7fefffff

080083f0 <fabs>:
 80083f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083f4:	4619      	mov	r1, r3
 80083f6:	4770      	bx	lr

080083f8 <sin>:
 80083f8:	b530      	push	{r4, r5, lr}
 80083fa:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <sin+0x6c>)
 80083fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008400:	4293      	cmp	r3, r2
 8008402:	b087      	sub	sp, #28
 8008404:	dc06      	bgt.n	8008414 <sin+0x1c>
 8008406:	2300      	movs	r3, #0
 8008408:	2200      	movs	r2, #0
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	f002 f90f 	bl	800a630 <__kernel_sin>
 8008412:	e006      	b.n	8008422 <sin+0x2a>
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <sin+0x70>)
 8008416:	4293      	cmp	r3, r2
 8008418:	dd05      	ble.n	8008426 <sin+0x2e>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	f7f7 fe9b 	bl	8000158 <__aeabi_dsub>
 8008422:	b007      	add	sp, #28
 8008424:	bd30      	pop	{r4, r5, pc}
 8008426:	aa02      	add	r2, sp, #8
 8008428:	f001 fa5e 	bl	80098e8 <__ieee754_rem_pio2>
 800842c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008430:	f000 0403 	and.w	r4, r0, #3
 8008434:	2c01      	cmp	r4, #1
 8008436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800843a:	d005      	beq.n	8008448 <sin+0x50>
 800843c:	2c02      	cmp	r4, #2
 800843e:	d006      	beq.n	800844e <sin+0x56>
 8008440:	b964      	cbnz	r4, 800845c <sin+0x64>
 8008442:	2401      	movs	r4, #1
 8008444:	9400      	str	r4, [sp, #0]
 8008446:	e7e2      	b.n	800840e <sin+0x16>
 8008448:	f001 fcea 	bl	8009e20 <__kernel_cos>
 800844c:	e7e9      	b.n	8008422 <sin+0x2a>
 800844e:	2401      	movs	r4, #1
 8008450:	9400      	str	r4, [sp, #0]
 8008452:	f002 f8ed 	bl	800a630 <__kernel_sin>
 8008456:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800845a:	e7e2      	b.n	8008422 <sin+0x2a>
 800845c:	f001 fce0 	bl	8009e20 <__kernel_cos>
 8008460:	e7f9      	b.n	8008456 <sin+0x5e>
 8008462:	bf00      	nop
 8008464:	3fe921fb 	.word	0x3fe921fb
 8008468:	7fefffff 	.word	0x7fefffff

0800846c <acos>:
 800846c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008470:	b08b      	sub	sp, #44	; 0x2c
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	f000 f9ff 	bl	8008878 <__ieee754_acos>
 800847a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8008510 <acos+0xa4>
 800847e:	4606      	mov	r6, r0
 8008480:	f998 3000 	ldrsb.w	r3, [r8]
 8008484:	460f      	mov	r7, r1
 8008486:	3301      	adds	r3, #1
 8008488:	d036      	beq.n	80084f8 <acos+0x8c>
 800848a:	4622      	mov	r2, r4
 800848c:	462b      	mov	r3, r5
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f8 fab3 	bl	80009fc <__aeabi_dcmpun>
 8008496:	4681      	mov	r9, r0
 8008498:	2800      	cmp	r0, #0
 800849a:	d12d      	bne.n	80084f8 <acos+0x8c>
 800849c:	4620      	mov	r0, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	f7ff ffa6 	bl	80083f0 <fabs>
 80084a4:	2200      	movs	r2, #0
 80084a6:	4b17      	ldr	r3, [pc, #92]	; (8008504 <acos+0x98>)
 80084a8:	f7f8 fa9e 	bl	80009e8 <__aeabi_dcmpgt>
 80084ac:	b320      	cbz	r0, 80084f8 <acos+0x8c>
 80084ae:	2301      	movs	r3, #1
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <acos+0x9c>)
 80084b4:	4815      	ldr	r0, [pc, #84]	; (800850c <acos+0xa0>)
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80084bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80084c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80084c4:	f002 f9f6 	bl	800a8b4 <nan>
 80084c8:	f998 3000 	ldrsb.w	r3, [r8]
 80084cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d104      	bne.n	80084de <acos+0x72>
 80084d4:	f7fe fa2e 	bl	8006934 <__errno>
 80084d8:	2321      	movs	r3, #33	; 0x21
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	e004      	b.n	80084e8 <acos+0x7c>
 80084de:	4668      	mov	r0, sp
 80084e0:	f002 f9e6 	bl	800a8b0 <matherr>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d0f5      	beq.n	80084d4 <acos+0x68>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	b11b      	cbz	r3, 80084f4 <acos+0x88>
 80084ec:	f7fe fa22 	bl	8006934 <__errno>
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	6003      	str	r3, [r0, #0]
 80084f4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	b00b      	add	sp, #44	; 0x2c
 80084fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008502:	bf00      	nop
 8008504:	3ff00000 	.word	0x3ff00000
 8008508:	0800ac98 	.word	0x0800ac98
 800850c:	0800ac52 	.word	0x0800ac52
 8008510:	20000260 	.word	0x20000260

08008514 <atan2>:
 8008514:	f000 bbfc 	b.w	8008d10 <__ieee754_atan2>

08008518 <pow>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	b08f      	sub	sp, #60	; 0x3c
 800851e:	461d      	mov	r5, r3
 8008520:	4680      	mov	r8, r0
 8008522:	4689      	mov	r9, r1
 8008524:	4614      	mov	r4, r2
 8008526:	f000 fcd3 	bl	8008ed0 <__ieee754_pow>
 800852a:	4fa1      	ldr	r7, [pc, #644]	; (80087b0 <pow+0x298>)
 800852c:	e9cd 0100 	strd	r0, r1, [sp]
 8008530:	f997 3000 	ldrsb.w	r3, [r7]
 8008534:	463e      	mov	r6, r7
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	3301      	adds	r3, #1
 800853a:	d05f      	beq.n	80085fc <pow+0xe4>
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f8 fa5a 	bl	80009fc <__aeabi_dcmpun>
 8008548:	4682      	mov	sl, r0
 800854a:	2800      	cmp	r0, #0
 800854c:	d156      	bne.n	80085fc <pow+0xe4>
 800854e:	4642      	mov	r2, r8
 8008550:	464b      	mov	r3, r9
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f8 fa51 	bl	80009fc <__aeabi_dcmpun>
 800855a:	9003      	str	r0, [sp, #12]
 800855c:	b1e8      	cbz	r0, 800859a <pow+0x82>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f8 fa17 	bl	8000998 <__aeabi_dcmpeq>
 800856a:	2800      	cmp	r0, #0
 800856c:	d046      	beq.n	80085fc <pow+0xe4>
 800856e:	2301      	movs	r3, #1
 8008570:	2200      	movs	r2, #0
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	4b8f      	ldr	r3, [pc, #572]	; (80087b4 <pow+0x29c>)
 8008576:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	4b8e      	ldr	r3, [pc, #568]	; (80087b8 <pow+0x2a0>)
 800857e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008582:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d031      	beq.n	80085f4 <pow+0xdc>
 8008590:	a804      	add	r0, sp, #16
 8008592:	f002 f98d 	bl	800a8b0 <matherr>
 8008596:	bb38      	cbnz	r0, 80085e8 <pow+0xd0>
 8008598:	e058      	b.n	800864c <pow+0x134>
 800859a:	f04f 0a00 	mov.w	sl, #0
 800859e:	f04f 0b00 	mov.w	fp, #0
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f8 f9f5 	bl	8000998 <__aeabi_dcmpeq>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d051      	beq.n	8008656 <pow+0x13e>
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 f9ed 	bl	8000998 <__aeabi_dcmpeq>
 80085be:	4606      	mov	r6, r0
 80085c0:	b308      	cbz	r0, 8008606 <pow+0xee>
 80085c2:	2301      	movs	r3, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	4b7b      	ldr	r3, [pc, #492]	; (80087b4 <pow+0x29c>)
 80085c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80085d4:	930c      	str	r3, [sp, #48]	; 0x30
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0d7      	beq.n	8008590 <pow+0x78>
 80085e0:	2200      	movs	r2, #0
 80085e2:	4b75      	ldr	r3, [pc, #468]	; (80087b8 <pow+0x2a0>)
 80085e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ea:	b11b      	cbz	r3, 80085f4 <pow+0xdc>
 80085ec:	f7fe f9a2 	bl	8006934 <__errno>
 80085f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f2:	6003      	str	r3, [r0, #0]
 80085f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80085f8:	e9cd 3400 	strd	r3, r4, [sp]
 80085fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008600:	b00f      	add	sp, #60	; 0x3c
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f002 f8c7 	bl	800a79c <finite>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0f4      	beq.n	80085fc <pow+0xe4>
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 f9c7 	bl	80009ac <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0ec      	beq.n	80085fc <pow+0xe4>
 8008622:	2301      	movs	r3, #1
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	4b63      	ldr	r3, [pc, #396]	; (80087b4 <pow+0x29c>)
 8008628:	960c      	str	r6, [sp, #48]	; 0x30
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f997 3000 	ldrsb.w	r3, [r7]
 8008630:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008634:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008638:	b913      	cbnz	r3, 8008640 <pow+0x128>
 800863a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800863e:	e7a7      	b.n	8008590 <pow+0x78>
 8008640:	2000      	movs	r0, #0
 8008642:	495e      	ldr	r1, [pc, #376]	; (80087bc <pow+0x2a4>)
 8008644:	2b02      	cmp	r3, #2
 8008646:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800864a:	d1a1      	bne.n	8008590 <pow+0x78>
 800864c:	f7fe f972 	bl	8006934 <__errno>
 8008650:	2321      	movs	r3, #33	; 0x21
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	e7c8      	b.n	80085e8 <pow+0xd0>
 8008656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800865a:	f002 f89f 	bl	800a79c <finite>
 800865e:	9002      	str	r0, [sp, #8]
 8008660:	2800      	cmp	r0, #0
 8008662:	d177      	bne.n	8008754 <pow+0x23c>
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f002 f898 	bl	800a79c <finite>
 800866c:	2800      	cmp	r0, #0
 800866e:	d071      	beq.n	8008754 <pow+0x23c>
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	f002 f892 	bl	800a79c <finite>
 8008678:	2800      	cmp	r0, #0
 800867a:	d06b      	beq.n	8008754 <pow+0x23c>
 800867c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7f8 f9ba 	bl	80009fc <__aeabi_dcmpun>
 8008688:	f997 7000 	ldrsb.w	r7, [r7]
 800868c:	4b49      	ldr	r3, [pc, #292]	; (80087b4 <pow+0x29c>)
 800868e:	b1a0      	cbz	r0, 80086ba <pow+0x1a2>
 8008690:	2201      	movs	r2, #1
 8008692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800869c:	930c      	str	r3, [sp, #48]	; 0x30
 800869e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d0c9      	beq.n	800863a <pow+0x122>
 80086a6:	4652      	mov	r2, sl
 80086a8:	465b      	mov	r3, fp
 80086aa:	4650      	mov	r0, sl
 80086ac:	4659      	mov	r1, fp
 80086ae:	f7f8 f835 	bl	800071c <__aeabi_ddiv>
 80086b2:	2f02      	cmp	r7, #2
 80086b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086b8:	e7c7      	b.n	800864a <pow+0x132>
 80086ba:	2203      	movs	r2, #3
 80086bc:	900c      	str	r0, [sp, #48]	; 0x30
 80086be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	2200      	movs	r2, #0
 80086c8:	4b3d      	ldr	r3, [pc, #244]	; (80087c0 <pow+0x2a8>)
 80086ca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80086ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80086d2:	f7f7 fef9 	bl	80004c8 <__aeabi_dmul>
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	bb17      	cbnz	r7, 8008722 <pow+0x20a>
 80086dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80086e0:	4b38      	ldr	r3, [pc, #224]	; (80087c4 <pow+0x2ac>)
 80086e2:	4640      	mov	r0, r8
 80086e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086e8:	4649      	mov	r1, r9
 80086ea:	4652      	mov	r2, sl
 80086ec:	465b      	mov	r3, fp
 80086ee:	f7f8 f95d 	bl	80009ac <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d054      	beq.n	80087a0 <pow+0x288>
 80086f6:	4620      	mov	r0, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	f002 f8e1 	bl	800a8c0 <rint>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	f7f8 f949 	bl	8000998 <__aeabi_dcmpeq>
 8008706:	b920      	cbnz	r0, 8008712 <pow+0x1fa>
 8008708:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800870c:	4b2e      	ldr	r3, [pc, #184]	; (80087c8 <pow+0x2b0>)
 800870e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008712:	f996 3000 	ldrsb.w	r3, [r6]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d142      	bne.n	80087a0 <pow+0x288>
 800871a:	f7fe f90b 	bl	8006934 <__errno>
 800871e:	2322      	movs	r3, #34	; 0x22
 8008720:	e797      	b.n	8008652 <pow+0x13a>
 8008722:	2200      	movs	r2, #0
 8008724:	4b29      	ldr	r3, [pc, #164]	; (80087cc <pow+0x2b4>)
 8008726:	4640      	mov	r0, r8
 8008728:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800872c:	4649      	mov	r1, r9
 800872e:	4652      	mov	r2, sl
 8008730:	465b      	mov	r3, fp
 8008732:	f7f8 f93b 	bl	80009ac <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d0eb      	beq.n	8008712 <pow+0x1fa>
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f002 f8bf 	bl	800a8c0 <rint>
 8008742:	4622      	mov	r2, r4
 8008744:	462b      	mov	r3, r5
 8008746:	f7f8 f927 	bl	8000998 <__aeabi_dcmpeq>
 800874a:	2800      	cmp	r0, #0
 800874c:	d1e1      	bne.n	8008712 <pow+0x1fa>
 800874e:	2200      	movs	r2, #0
 8008750:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <pow+0x2a4>)
 8008752:	e7dc      	b.n	800870e <pow+0x1f6>
 8008754:	2200      	movs	r2, #0
 8008756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800875a:	2300      	movs	r3, #0
 800875c:	f7f8 f91c 	bl	8000998 <__aeabi_dcmpeq>
 8008760:	2800      	cmp	r0, #0
 8008762:	f43f af4b 	beq.w	80085fc <pow+0xe4>
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f002 f817 	bl	800a79c <finite>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af44 	beq.w	80085fc <pow+0xe4>
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f002 f810 	bl	800a79c <finite>
 800877c:	2800      	cmp	r0, #0
 800877e:	f43f af3d 	beq.w	80085fc <pow+0xe4>
 8008782:	2304      	movs	r3, #4
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <pow+0x29c>)
 8008788:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800878c:	9305      	str	r3, [sp, #20]
 800878e:	2300      	movs	r3, #0
 8008790:	2400      	movs	r4, #0
 8008792:	930c      	str	r3, [sp, #48]	; 0x30
 8008794:	2300      	movs	r3, #0
 8008796:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800879a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800879e:	e7b8      	b.n	8008712 <pow+0x1fa>
 80087a0:	a804      	add	r0, sp, #16
 80087a2:	f002 f885 	bl	800a8b0 <matherr>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f47f af1e 	bne.w	80085e8 <pow+0xd0>
 80087ac:	e7b5      	b.n	800871a <pow+0x202>
 80087ae:	bf00      	nop
 80087b0:	20000260 	.word	0x20000260
 80087b4:	0800ac9d 	.word	0x0800ac9d
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	fff00000 	.word	0xfff00000
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	47efffff 	.word	0x47efffff
 80087c8:	c7efffff 	.word	0xc7efffff
 80087cc:	7ff00000 	.word	0x7ff00000

080087d0 <sqrt>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	b08b      	sub	sp, #44	; 0x2c
 80087d6:	4604      	mov	r4, r0
 80087d8:	460d      	mov	r5, r1
 80087da:	f001 fa75 	bl	8009cc8 <__ieee754_sqrt>
 80087de:	4b24      	ldr	r3, [pc, #144]	; (8008870 <sqrt+0xa0>)
 80087e0:	4680      	mov	r8, r0
 80087e2:	f993 a000 	ldrsb.w	sl, [r3]
 80087e6:	4689      	mov	r9, r1
 80087e8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80087ec:	d02b      	beq.n	8008846 <sqrt+0x76>
 80087ee:	4622      	mov	r2, r4
 80087f0:	462b      	mov	r3, r5
 80087f2:	4620      	mov	r0, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	f7f8 f901 	bl	80009fc <__aeabi_dcmpun>
 80087fa:	4683      	mov	fp, r0
 80087fc:	bb18      	cbnz	r0, 8008846 <sqrt+0x76>
 80087fe:	2600      	movs	r6, #0
 8008800:	2700      	movs	r7, #0
 8008802:	4632      	mov	r2, r6
 8008804:	463b      	mov	r3, r7
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f8 f8cf 	bl	80009ac <__aeabi_dcmplt>
 800880e:	b1d0      	cbz	r0, 8008846 <sqrt+0x76>
 8008810:	2301      	movs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4b17      	ldr	r3, [pc, #92]	; (8008874 <sqrt+0xa4>)
 8008816:	f8cd b020 	str.w	fp, [sp, #32]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008820:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008824:	f1ba 0f00 	cmp.w	sl, #0
 8008828:	d112      	bne.n	8008850 <sqrt+0x80>
 800882a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800882e:	4668      	mov	r0, sp
 8008830:	f002 f83e 	bl	800a8b0 <matherr>
 8008834:	b1b8      	cbz	r0, 8008866 <sqrt+0x96>
 8008836:	9b08      	ldr	r3, [sp, #32]
 8008838:	b11b      	cbz	r3, 8008842 <sqrt+0x72>
 800883a:	f7fe f87b 	bl	8006934 <__errno>
 800883e:	9b08      	ldr	r3, [sp, #32]
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008846:	4640      	mov	r0, r8
 8008848:	4649      	mov	r1, r9
 800884a:	b00b      	add	sp, #44	; 0x2c
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	f7f7 ff60 	bl	800071c <__aeabi_ddiv>
 800885c:	f1ba 0f02 	cmp.w	sl, #2
 8008860:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008864:	d1e3      	bne.n	800882e <sqrt+0x5e>
 8008866:	f7fe f865 	bl	8006934 <__errno>
 800886a:	2321      	movs	r3, #33	; 0x21
 800886c:	6003      	str	r3, [r0, #0]
 800886e:	e7e2      	b.n	8008836 <sqrt+0x66>
 8008870:	20000260 	.word	0x20000260
 8008874:	0800aca1 	.word	0x0800aca1

08008878 <__ieee754_acos>:
 8008878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4cb2      	ldr	r4, [pc, #712]	; (8008b48 <__ieee754_acos+0x2d0>)
 800887e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008882:	42a3      	cmp	r3, r4
 8008884:	4607      	mov	r7, r0
 8008886:	460e      	mov	r6, r1
 8008888:	dd16      	ble.n	80088b8 <__ieee754_acos+0x40>
 800888a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800888e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008892:	4303      	orrs	r3, r0
 8008894:	d107      	bne.n	80088a6 <__ieee754_acos+0x2e>
 8008896:	2900      	cmp	r1, #0
 8008898:	f300 8202 	bgt.w	8008ca0 <__ieee754_acos+0x428>
 800889c:	a190      	add	r1, pc, #576	; (adr r1, 8008ae0 <__ieee754_acos+0x268>)
 800889e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	f7f7 fc55 	bl	8000158 <__aeabi_dsub>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	f7f7 ff33 	bl	800071c <__aeabi_ddiv>
 80088b6:	e7f4      	b.n	80088a2 <__ieee754_acos+0x2a>
 80088b8:	4ca4      	ldr	r4, [pc, #656]	; (8008b4c <__ieee754_acos+0x2d4>)
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	f300 8083 	bgt.w	80089c6 <__ieee754_acos+0x14e>
 80088c0:	4aa3      	ldr	r2, [pc, #652]	; (8008b50 <__ieee754_acos+0x2d8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	f340 81ef 	ble.w	8008ca6 <__ieee754_acos+0x42e>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	f7f7 fdfc 	bl	80004c8 <__aeabi_dmul>
 80088d0:	a385      	add	r3, pc, #532	; (adr r3, 8008ae8 <__ieee754_acos+0x270>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	f7f7 fdf5 	bl	80004c8 <__aeabi_dmul>
 80088de:	a384      	add	r3, pc, #528	; (adr r3, 8008af0 <__ieee754_acos+0x278>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fc3a 	bl	800015c <__adddf3>
 80088e8:	4622      	mov	r2, r4
 80088ea:	462b      	mov	r3, r5
 80088ec:	f7f7 fdec 	bl	80004c8 <__aeabi_dmul>
 80088f0:	a381      	add	r3, pc, #516	; (adr r3, 8008af8 <__ieee754_acos+0x280>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f7 fc2f 	bl	8000158 <__aeabi_dsub>
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f7f7 fde3 	bl	80004c8 <__aeabi_dmul>
 8008902:	a37f      	add	r3, pc, #508	; (adr r3, 8008b00 <__ieee754_acos+0x288>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fc28 	bl	800015c <__adddf3>
 800890c:	4622      	mov	r2, r4
 800890e:	462b      	mov	r3, r5
 8008910:	f7f7 fdda 	bl	80004c8 <__aeabi_dmul>
 8008914:	a37c      	add	r3, pc, #496	; (adr r3, 8008b08 <__ieee754_acos+0x290>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 fc1d 	bl	8000158 <__aeabi_dsub>
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	f7f7 fdd1 	bl	80004c8 <__aeabi_dmul>
 8008926:	a37a      	add	r3, pc, #488	; (adr r3, 8008b10 <__ieee754_acos+0x298>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc16 	bl	800015c <__adddf3>
 8008930:	4622      	mov	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	f7f7 fdc8 	bl	80004c8 <__aeabi_dmul>
 8008938:	a377      	add	r3, pc, #476	; (adr r3, 8008b18 <__ieee754_acos+0x2a0>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	4680      	mov	r8, r0
 8008940:	4689      	mov	r9, r1
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fdbf 	bl	80004c8 <__aeabi_dmul>
 800894a:	a375      	add	r3, pc, #468	; (adr r3, 8008b20 <__ieee754_acos+0x2a8>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fc02 	bl	8000158 <__aeabi_dsub>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fdb6 	bl	80004c8 <__aeabi_dmul>
 800895c:	a372      	add	r3, pc, #456	; (adr r3, 8008b28 <__ieee754_acos+0x2b0>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fbfb 	bl	800015c <__adddf3>
 8008966:	4622      	mov	r2, r4
 8008968:	462b      	mov	r3, r5
 800896a:	f7f7 fdad 	bl	80004c8 <__aeabi_dmul>
 800896e:	a370      	add	r3, pc, #448	; (adr r3, 8008b30 <__ieee754_acos+0x2b8>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fbf0 	bl	8000158 <__aeabi_dsub>
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	f7f7 fda4 	bl	80004c8 <__aeabi_dmul>
 8008980:	2200      	movs	r2, #0
 8008982:	4b74      	ldr	r3, [pc, #464]	; (8008b54 <__ieee754_acos+0x2dc>)
 8008984:	f7f7 fbea 	bl	800015c <__adddf3>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4640      	mov	r0, r8
 800898e:	4649      	mov	r1, r9
 8008990:	f7f7 fec4 	bl	800071c <__aeabi_ddiv>
 8008994:	463a      	mov	r2, r7
 8008996:	4633      	mov	r3, r6
 8008998:	f7f7 fd96 	bl	80004c8 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	a165      	add	r1, pc, #404	; (adr r1, 8008b38 <__ieee754_acos+0x2c0>)
 80089a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a6:	f7f7 fbd7 	bl	8000158 <__aeabi_dsub>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4638      	mov	r0, r7
 80089b0:	4631      	mov	r1, r6
 80089b2:	f7f7 fbd1 	bl	8000158 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	a161      	add	r1, pc, #388	; (adr r1, 8008b40 <__ieee754_acos+0x2c8>)
 80089bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c0:	f7f7 fbca 	bl	8000158 <__aeabi_dsub>
 80089c4:	e76d      	b.n	80088a2 <__ieee754_acos+0x2a>
 80089c6:	2900      	cmp	r1, #0
 80089c8:	f280 80c8 	bge.w	8008b5c <__ieee754_acos+0x2e4>
 80089cc:	2200      	movs	r2, #0
 80089ce:	4b61      	ldr	r3, [pc, #388]	; (8008b54 <__ieee754_acos+0x2dc>)
 80089d0:	f7f7 fbc4 	bl	800015c <__adddf3>
 80089d4:	2200      	movs	r2, #0
 80089d6:	4b60      	ldr	r3, [pc, #384]	; (8008b58 <__ieee754_acos+0x2e0>)
 80089d8:	f7f7 fd76 	bl	80004c8 <__aeabi_dmul>
 80089dc:	a342      	add	r3, pc, #264	; (adr r3, 8008ae8 <__ieee754_acos+0x270>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	4604      	mov	r4, r0
 80089e4:	460d      	mov	r5, r1
 80089e6:	f7f7 fd6f 	bl	80004c8 <__aeabi_dmul>
 80089ea:	a341      	add	r3, pc, #260	; (adr r3, 8008af0 <__ieee754_acos+0x278>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fbb4 	bl	800015c <__adddf3>
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	f7f7 fd66 	bl	80004c8 <__aeabi_dmul>
 80089fc:	a33e      	add	r3, pc, #248	; (adr r3, 8008af8 <__ieee754_acos+0x280>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fba9 	bl	8000158 <__aeabi_dsub>
 8008a06:	4622      	mov	r2, r4
 8008a08:	462b      	mov	r3, r5
 8008a0a:	f7f7 fd5d 	bl	80004c8 <__aeabi_dmul>
 8008a0e:	a33c      	add	r3, pc, #240	; (adr r3, 8008b00 <__ieee754_acos+0x288>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fba2 	bl	800015c <__adddf3>
 8008a18:	4622      	mov	r2, r4
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	f7f7 fd54 	bl	80004c8 <__aeabi_dmul>
 8008a20:	a339      	add	r3, pc, #228	; (adr r3, 8008b08 <__ieee754_acos+0x290>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fb97 	bl	8000158 <__aeabi_dsub>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	f7f7 fd4b 	bl	80004c8 <__aeabi_dmul>
 8008a32:	a337      	add	r3, pc, #220	; (adr r3, 8008b10 <__ieee754_acos+0x298>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fb90 	bl	800015c <__adddf3>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f7f7 fd42 	bl	80004c8 <__aeabi_dmul>
 8008a44:	4680      	mov	r8, r0
 8008a46:	4689      	mov	r9, r1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	f001 f93c 	bl	8009cc8 <__ieee754_sqrt>
 8008a50:	a331      	add	r3, pc, #196	; (adr r3, 8008b18 <__ieee754_acos+0x2a0>)
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	4606      	mov	r6, r0
 8008a58:	460f      	mov	r7, r1
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 fd33 	bl	80004c8 <__aeabi_dmul>
 8008a62:	a32f      	add	r3, pc, #188	; (adr r3, 8008b20 <__ieee754_acos+0x2a8>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fb76 	bl	8000158 <__aeabi_dsub>
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f7f7 fd2a 	bl	80004c8 <__aeabi_dmul>
 8008a74:	a32c      	add	r3, pc, #176	; (adr r3, 8008b28 <__ieee754_acos+0x2b0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fb6f 	bl	800015c <__adddf3>
 8008a7e:	4622      	mov	r2, r4
 8008a80:	462b      	mov	r3, r5
 8008a82:	f7f7 fd21 	bl	80004c8 <__aeabi_dmul>
 8008a86:	a32a      	add	r3, pc, #168	; (adr r3, 8008b30 <__ieee754_acos+0x2b8>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fb64 	bl	8000158 <__aeabi_dsub>
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fd18 	bl	80004c8 <__aeabi_dmul>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <__ieee754_acos+0x2dc>)
 8008a9c:	f7f7 fb5e 	bl	800015c <__adddf3>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f7 fe38 	bl	800071c <__aeabi_ddiv>
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	f7f7 fd0a 	bl	80004c8 <__aeabi_dmul>
 8008ab4:	a320      	add	r3, pc, #128	; (adr r3, 8008b38 <__ieee754_acos+0x2c0>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fb4d 	bl	8000158 <__aeabi_dsub>
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	f7f7 fb4b 	bl	800015c <__adddf3>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	f7f7 fb47 	bl	800015c <__adddf3>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	a103      	add	r1, pc, #12	; (adr r1, 8008ae0 <__ieee754_acos+0x268>)
 8008ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad8:	e772      	b.n	80089c0 <__ieee754_acos+0x148>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	54442d18 	.word	0x54442d18
 8008ae4:	400921fb 	.word	0x400921fb
 8008ae8:	0dfdf709 	.word	0x0dfdf709
 8008aec:	3f023de1 	.word	0x3f023de1
 8008af0:	7501b288 	.word	0x7501b288
 8008af4:	3f49efe0 	.word	0x3f49efe0
 8008af8:	b5688f3b 	.word	0xb5688f3b
 8008afc:	3fa48228 	.word	0x3fa48228
 8008b00:	0e884455 	.word	0x0e884455
 8008b04:	3fc9c155 	.word	0x3fc9c155
 8008b08:	03eb6f7d 	.word	0x03eb6f7d
 8008b0c:	3fd4d612 	.word	0x3fd4d612
 8008b10:	55555555 	.word	0x55555555
 8008b14:	3fc55555 	.word	0x3fc55555
 8008b18:	b12e9282 	.word	0xb12e9282
 8008b1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008b20:	1b8d0159 	.word	0x1b8d0159
 8008b24:	3fe6066c 	.word	0x3fe6066c
 8008b28:	9c598ac8 	.word	0x9c598ac8
 8008b2c:	40002ae5 	.word	0x40002ae5
 8008b30:	1c8a2d4b 	.word	0x1c8a2d4b
 8008b34:	40033a27 	.word	0x40033a27
 8008b38:	33145c07 	.word	0x33145c07
 8008b3c:	3c91a626 	.word	0x3c91a626
 8008b40:	54442d18 	.word	0x54442d18
 8008b44:	3ff921fb 	.word	0x3ff921fb
 8008b48:	3fefffff 	.word	0x3fefffff
 8008b4c:	3fdfffff 	.word	0x3fdfffff
 8008b50:	3c600000 	.word	0x3c600000
 8008b54:	3ff00000 	.word	0x3ff00000
 8008b58:	3fe00000 	.word	0x3fe00000
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	2000      	movs	r0, #0
 8008b62:	4969      	ldr	r1, [pc, #420]	; (8008d08 <__ieee754_acos+0x490>)
 8008b64:	f7f7 faf8 	bl	8000158 <__aeabi_dsub>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	4b68      	ldr	r3, [pc, #416]	; (8008d0c <__ieee754_acos+0x494>)
 8008b6c:	f7f7 fcac 	bl	80004c8 <__aeabi_dmul>
 8008b70:	4604      	mov	r4, r0
 8008b72:	460d      	mov	r5, r1
 8008b74:	f001 f8a8 	bl	8009cc8 <__ieee754_sqrt>
 8008b78:	a34d      	add	r3, pc, #308	; (adr r3, 8008cb0 <__ieee754_acos+0x438>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	4689      	mov	r9, r1
 8008b80:	4680      	mov	r8, r0
 8008b82:	4629      	mov	r1, r5
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7f7 fc9f 	bl	80004c8 <__aeabi_dmul>
 8008b8a:	a34b      	add	r3, pc, #300	; (adr r3, 8008cb8 <__ieee754_acos+0x440>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fae4 	bl	800015c <__adddf3>
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	f7f7 fc96 	bl	80004c8 <__aeabi_dmul>
 8008b9c:	a348      	add	r3, pc, #288	; (adr r3, 8008cc0 <__ieee754_acos+0x448>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fad9 	bl	8000158 <__aeabi_dsub>
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	f7f7 fc8d 	bl	80004c8 <__aeabi_dmul>
 8008bae:	a346      	add	r3, pc, #280	; (adr r3, 8008cc8 <__ieee754_acos+0x450>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 fad2 	bl	800015c <__adddf3>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	462b      	mov	r3, r5
 8008bbc:	f7f7 fc84 	bl	80004c8 <__aeabi_dmul>
 8008bc0:	a343      	add	r3, pc, #268	; (adr r3, 8008cd0 <__ieee754_acos+0x458>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fac7 	bl	8000158 <__aeabi_dsub>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	462b      	mov	r3, r5
 8008bce:	f7f7 fc7b 	bl	80004c8 <__aeabi_dmul>
 8008bd2:	a341      	add	r3, pc, #260	; (adr r3, 8008cd8 <__ieee754_acos+0x460>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fac0 	bl	800015c <__adddf3>
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	f7f7 fc72 	bl	80004c8 <__aeabi_dmul>
 8008be4:	a33e      	add	r3, pc, #248	; (adr r3, 8008ce0 <__ieee754_acos+0x468>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	4682      	mov	sl, r0
 8008bec:	468b      	mov	fp, r1
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 fc69 	bl	80004c8 <__aeabi_dmul>
 8008bf6:	a33c      	add	r3, pc, #240	; (adr r3, 8008ce8 <__ieee754_acos+0x470>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 faac 	bl	8000158 <__aeabi_dsub>
 8008c00:	4622      	mov	r2, r4
 8008c02:	462b      	mov	r3, r5
 8008c04:	f7f7 fc60 	bl	80004c8 <__aeabi_dmul>
 8008c08:	a339      	add	r3, pc, #228	; (adr r3, 8008cf0 <__ieee754_acos+0x478>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 faa5 	bl	800015c <__adddf3>
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	f7f7 fc57 	bl	80004c8 <__aeabi_dmul>
 8008c1a:	a337      	add	r3, pc, #220	; (adr r3, 8008cf8 <__ieee754_acos+0x480>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fa9a 	bl	8000158 <__aeabi_dsub>
 8008c24:	4622      	mov	r2, r4
 8008c26:	462b      	mov	r3, r5
 8008c28:	f7f7 fc4e 	bl	80004c8 <__aeabi_dmul>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4b36      	ldr	r3, [pc, #216]	; (8008d08 <__ieee754_acos+0x490>)
 8008c30:	f7f7 fa94 	bl	800015c <__adddf3>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4650      	mov	r0, sl
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	f7f7 fd6e 	bl	800071c <__aeabi_ddiv>
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	f7f7 fc40 	bl	80004c8 <__aeabi_dmul>
 8008c48:	2600      	movs	r6, #0
 8008c4a:	4682      	mov	sl, r0
 8008c4c:	468b      	mov	fp, r1
 8008c4e:	4632      	mov	r2, r6
 8008c50:	464b      	mov	r3, r9
 8008c52:	4630      	mov	r0, r6
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fc37 	bl	80004c8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fa79 	bl	8000158 <__aeabi_dsub>
 8008c66:	4632      	mov	r2, r6
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fa73 	bl	800015c <__adddf3>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fd4d 	bl	800071c <__aeabi_ddiv>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	f7f7 fa67 	bl	800015c <__adddf3>
 8008c8e:	4632      	mov	r2, r6
 8008c90:	464b      	mov	r3, r9
 8008c92:	f7f7 fa63 	bl	800015c <__adddf3>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	f7f7 fa5f 	bl	800015c <__adddf3>
 8008c9e:	e600      	b.n	80088a2 <__ieee754_acos+0x2a>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	e5fd      	b.n	80088a2 <__ieee754_acos+0x2a>
 8008ca6:	a116      	add	r1, pc, #88	; (adr r1, 8008d00 <__ieee754_acos+0x488>)
 8008ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cac:	e5f9      	b.n	80088a2 <__ieee754_acos+0x2a>
 8008cae:	bf00      	nop
 8008cb0:	0dfdf709 	.word	0x0dfdf709
 8008cb4:	3f023de1 	.word	0x3f023de1
 8008cb8:	7501b288 	.word	0x7501b288
 8008cbc:	3f49efe0 	.word	0x3f49efe0
 8008cc0:	b5688f3b 	.word	0xb5688f3b
 8008cc4:	3fa48228 	.word	0x3fa48228
 8008cc8:	0e884455 	.word	0x0e884455
 8008ccc:	3fc9c155 	.word	0x3fc9c155
 8008cd0:	03eb6f7d 	.word	0x03eb6f7d
 8008cd4:	3fd4d612 	.word	0x3fd4d612
 8008cd8:	55555555 	.word	0x55555555
 8008cdc:	3fc55555 	.word	0x3fc55555
 8008ce0:	b12e9282 	.word	0xb12e9282
 8008ce4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008ce8:	1b8d0159 	.word	0x1b8d0159
 8008cec:	3fe6066c 	.word	0x3fe6066c
 8008cf0:	9c598ac8 	.word	0x9c598ac8
 8008cf4:	40002ae5 	.word	0x40002ae5
 8008cf8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008cfc:	40033a27 	.word	0x40033a27
 8008d00:	54442d18 	.word	0x54442d18
 8008d04:	3ff921fb 	.word	0x3ff921fb
 8008d08:	3ff00000 	.word	0x3ff00000
 8008d0c:	3fe00000 	.word	0x3fe00000

08008d10 <__ieee754_atan2>:
 8008d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	4256      	negs	r6, r2
 8008d16:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8008d1a:	4316      	orrs	r6, r2
 8008d1c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008ec8 <__ieee754_atan2+0x1b8>
 8008d20:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8008d24:	454e      	cmp	r6, r9
 8008d26:	4604      	mov	r4, r0
 8008d28:	460d      	mov	r5, r1
 8008d2a:	469e      	mov	lr, r3
 8008d2c:	d808      	bhi.n	8008d40 <__ieee754_atan2+0x30>
 8008d2e:	4246      	negs	r6, r0
 8008d30:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008d34:	4306      	orrs	r6, r0
 8008d36:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8008d3a:	454e      	cmp	r6, r9
 8008d3c:	4688      	mov	r8, r1
 8008d3e:	d906      	bls.n	8008d4e <__ieee754_atan2+0x3e>
 8008d40:	4620      	mov	r0, r4
 8008d42:	4629      	mov	r1, r5
 8008d44:	f7f7 fa0a 	bl	800015c <__adddf3>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	e030      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008d4e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8008d52:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008d56:	4316      	orrs	r6, r2
 8008d58:	d103      	bne.n	8008d62 <__ieee754_atan2+0x52>
 8008d5a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5e:	f7ff b987 	b.w	8008070 <atan>
 8008d62:	179e      	asrs	r6, r3, #30
 8008d64:	f006 0602 	and.w	r6, r6, #2
 8008d68:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008d6c:	ea57 0100 	orrs.w	r1, r7, r0
 8008d70:	d107      	bne.n	8008d82 <__ieee754_atan2+0x72>
 8008d72:	2e02      	cmp	r6, #2
 8008d74:	d079      	beq.n	8008e6a <__ieee754_atan2+0x15a>
 8008d76:	2e03      	cmp	r6, #3
 8008d78:	d11a      	bne.n	8008db0 <__ieee754_atan2+0xa0>
 8008d7a:	a541      	add	r5, pc, #260	; (adr r5, 8008e80 <__ieee754_atan2+0x170>)
 8008d7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d80:	e016      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008d82:	ea5c 0102 	orrs.w	r1, ip, r2
 8008d86:	d106      	bne.n	8008d96 <__ieee754_atan2+0x86>
 8008d88:	f1b8 0f00 	cmp.w	r8, #0
 8008d8c:	da71      	bge.n	8008e72 <__ieee754_atan2+0x162>
 8008d8e:	a53e      	add	r5, pc, #248	; (adr r5, 8008e88 <__ieee754_atan2+0x178>)
 8008d90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d94:	e00c      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008d96:	45cc      	cmp	ip, r9
 8008d98:	d123      	bne.n	8008de2 <__ieee754_atan2+0xd2>
 8008d9a:	4567      	cmp	r7, ip
 8008d9c:	d114      	bne.n	8008dc8 <__ieee754_atan2+0xb8>
 8008d9e:	2e02      	cmp	r6, #2
 8008da0:	d00a      	beq.n	8008db8 <__ieee754_atan2+0xa8>
 8008da2:	2e03      	cmp	r6, #3
 8008da4:	d00c      	beq.n	8008dc0 <__ieee754_atan2+0xb0>
 8008da6:	2e01      	cmp	r6, #1
 8008da8:	d15b      	bne.n	8008e62 <__ieee754_atan2+0x152>
 8008daa:	a539      	add	r5, pc, #228	; (adr r5, 8008e90 <__ieee754_atan2+0x180>)
 8008dac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	a537      	add	r5, pc, #220	; (adr r5, 8008e98 <__ieee754_atan2+0x188>)
 8008dba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dbe:	e7f7      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008dc0:	a537      	add	r5, pc, #220	; (adr r5, 8008ea0 <__ieee754_atan2+0x190>)
 8008dc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dc6:	e7f3      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008dc8:	2e02      	cmp	r6, #2
 8008dca:	d04e      	beq.n	8008e6a <__ieee754_atan2+0x15a>
 8008dcc:	2e03      	cmp	r6, #3
 8008dce:	d0d4      	beq.n	8008d7a <__ieee754_atan2+0x6a>
 8008dd0:	2e01      	cmp	r6, #1
 8008dd2:	f04f 0400 	mov.w	r4, #0
 8008dd6:	d102      	bne.n	8008dde <__ieee754_atan2+0xce>
 8008dd8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008ddc:	e7e8      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008dde:	2500      	movs	r5, #0
 8008de0:	e7e6      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008de2:	454f      	cmp	r7, r9
 8008de4:	d0d0      	beq.n	8008d88 <__ieee754_atan2+0x78>
 8008de6:	eba7 070c 	sub.w	r7, r7, ip
 8008dea:	153f      	asrs	r7, r7, #20
 8008dec:	2f3c      	cmp	r7, #60	; 0x3c
 8008dee:	dc1e      	bgt.n	8008e2e <__ieee754_atan2+0x11e>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	da01      	bge.n	8008df8 <__ieee754_atan2+0xe8>
 8008df4:	373c      	adds	r7, #60	; 0x3c
 8008df6:	db1e      	blt.n	8008e36 <__ieee754_atan2+0x126>
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fc8e 	bl	800071c <__aeabi_ddiv>
 8008e00:	f7ff faf6 	bl	80083f0 <fabs>
 8008e04:	f7ff f934 	bl	8008070 <atan>
 8008e08:	4604      	mov	r4, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	2e01      	cmp	r6, #1
 8008e0e:	d015      	beq.n	8008e3c <__ieee754_atan2+0x12c>
 8008e10:	2e02      	cmp	r6, #2
 8008e12:	d017      	beq.n	8008e44 <__ieee754_atan2+0x134>
 8008e14:	2e00      	cmp	r6, #0
 8008e16:	d0cb      	beq.n	8008db0 <__ieee754_atan2+0xa0>
 8008e18:	a323      	add	r3, pc, #140	; (adr r3, 8008ea8 <__ieee754_atan2+0x198>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 f999 	bl	8000158 <__aeabi_dsub>
 8008e26:	a322      	add	r3, pc, #136	; (adr r3, 8008eb0 <__ieee754_atan2+0x1a0>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	e016      	b.n	8008e5c <__ieee754_atan2+0x14c>
 8008e2e:	a522      	add	r5, pc, #136	; (adr r5, 8008eb8 <__ieee754_atan2+0x1a8>)
 8008e30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e34:	e7ea      	b.n	8008e0c <__ieee754_atan2+0xfc>
 8008e36:	2400      	movs	r4, #0
 8008e38:	2500      	movs	r5, #0
 8008e3a:	e7e7      	b.n	8008e0c <__ieee754_atan2+0xfc>
 8008e3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e40:	461d      	mov	r5, r3
 8008e42:	e7b5      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008e44:	a318      	add	r3, pc, #96	; (adr r3, 8008ea8 <__ieee754_atan2+0x198>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 f983 	bl	8000158 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	a116      	add	r1, pc, #88	; (adr r1, 8008eb0 <__ieee754_atan2+0x1a0>)
 8008e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5c:	f7f7 f97c 	bl	8000158 <__aeabi_dsub>
 8008e60:	e772      	b.n	8008d48 <__ieee754_atan2+0x38>
 8008e62:	a517      	add	r5, pc, #92	; (adr r5, 8008ec0 <__ieee754_atan2+0x1b0>)
 8008e64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e68:	e7a2      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008e6a:	a511      	add	r5, pc, #68	; (adr r5, 8008eb0 <__ieee754_atan2+0x1a0>)
 8008e6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e70:	e79e      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008e72:	a511      	add	r5, pc, #68	; (adr r5, 8008eb8 <__ieee754_atan2+0x1a8>)
 8008e74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e78:	e79a      	b.n	8008db0 <__ieee754_atan2+0xa0>
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
 8008e80:	54442d18 	.word	0x54442d18
 8008e84:	c00921fb 	.word	0xc00921fb
 8008e88:	54442d18 	.word	0x54442d18
 8008e8c:	bff921fb 	.word	0xbff921fb
 8008e90:	54442d18 	.word	0x54442d18
 8008e94:	bfe921fb 	.word	0xbfe921fb
 8008e98:	7f3321d2 	.word	0x7f3321d2
 8008e9c:	4002d97c 	.word	0x4002d97c
 8008ea0:	7f3321d2 	.word	0x7f3321d2
 8008ea4:	c002d97c 	.word	0xc002d97c
 8008ea8:	33145c07 	.word	0x33145c07
 8008eac:	3ca1a626 	.word	0x3ca1a626
 8008eb0:	54442d18 	.word	0x54442d18
 8008eb4:	400921fb 	.word	0x400921fb
 8008eb8:	54442d18 	.word	0x54442d18
 8008ebc:	3ff921fb 	.word	0x3ff921fb
 8008ec0:	54442d18 	.word	0x54442d18
 8008ec4:	3fe921fb 	.word	0x3fe921fb
 8008ec8:	7ff00000 	.word	0x7ff00000
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <__ieee754_pow>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	b091      	sub	sp, #68	; 0x44
 8008ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eda:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8008ede:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008ee2:	ea55 0302 	orrs.w	r3, r5, r2
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	4688      	mov	r8, r1
 8008eea:	f000 84b7 	beq.w	800985c <__ieee754_pow+0x98c>
 8008eee:	4b80      	ldr	r3, [pc, #512]	; (80090f0 <__ieee754_pow+0x220>)
 8008ef0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	4682      	mov	sl, r0
 8008efa:	dc09      	bgt.n	8008f10 <__ieee754_pow+0x40>
 8008efc:	d103      	bne.n	8008f06 <__ieee754_pow+0x36>
 8008efe:	b938      	cbnz	r0, 8008f10 <__ieee754_pow+0x40>
 8008f00:	42a5      	cmp	r5, r4
 8008f02:	dc0d      	bgt.n	8008f20 <__ieee754_pow+0x50>
 8008f04:	e001      	b.n	8008f0a <__ieee754_pow+0x3a>
 8008f06:	429d      	cmp	r5, r3
 8008f08:	dc02      	bgt.n	8008f10 <__ieee754_pow+0x40>
 8008f0a:	429d      	cmp	r5, r3
 8008f0c:	d10e      	bne.n	8008f2c <__ieee754_pow+0x5c>
 8008f0e:	b16a      	cbz	r2, 8008f2c <__ieee754_pow+0x5c>
 8008f10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f18:	ea54 030a 	orrs.w	r3, r4, sl
 8008f1c:	f000 849e 	beq.w	800985c <__ieee754_pow+0x98c>
 8008f20:	4874      	ldr	r0, [pc, #464]	; (80090f4 <__ieee754_pow+0x224>)
 8008f22:	b011      	add	sp, #68	; 0x44
 8008f24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	f001 bcc4 	b.w	800a8b4 <nan>
 8008f2c:	f1b9 0f00 	cmp.w	r9, #0
 8008f30:	da53      	bge.n	8008fda <__ieee754_pow+0x10a>
 8008f32:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <__ieee754_pow+0x228>)
 8008f34:	429d      	cmp	r5, r3
 8008f36:	dc4e      	bgt.n	8008fd6 <__ieee754_pow+0x106>
 8008f38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f3c:	429d      	cmp	r5, r3
 8008f3e:	dd4c      	ble.n	8008fda <__ieee754_pow+0x10a>
 8008f40:	152b      	asrs	r3, r5, #20
 8008f42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f46:	2b14      	cmp	r3, #20
 8008f48:	dd28      	ble.n	8008f9c <__ieee754_pow+0xcc>
 8008f4a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f4e:	fa22 f103 	lsr.w	r1, r2, r3
 8008f52:	fa01 f303 	lsl.w	r3, r1, r3
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d13f      	bne.n	8008fda <__ieee754_pow+0x10a>
 8008f5a:	f001 0101 	and.w	r1, r1, #1
 8008f5e:	f1c1 0302 	rsb	r3, r1, #2
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	d15c      	bne.n	8009022 <__ieee754_pow+0x152>
 8008f68:	4b61      	ldr	r3, [pc, #388]	; (80090f0 <__ieee754_pow+0x220>)
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	d126      	bne.n	8008fbc <__ieee754_pow+0xec>
 8008f6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008f72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008f76:	ea53 030a 	orrs.w	r3, r3, sl
 8008f7a:	f000 846f 	beq.w	800985c <__ieee754_pow+0x98c>
 8008f7e:	4b5f      	ldr	r3, [pc, #380]	; (80090fc <__ieee754_pow+0x22c>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	dd2c      	ble.n	8008fde <__ieee754_pow+0x10e>
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	f280 846f 	bge.w	8009868 <__ieee754_pow+0x998>
 8008f8a:	f04f 0b00 	mov.w	fp, #0
 8008f8e:	f04f 0c00 	mov.w	ip, #0
 8008f92:	4658      	mov	r0, fp
 8008f94:	4661      	mov	r1, ip
 8008f96:	b011      	add	sp, #68	; 0x44
 8008f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d13e      	bne.n	800901e <__ieee754_pow+0x14e>
 8008fa0:	f1c3 0314 	rsb	r3, r3, #20
 8008fa4:	fa45 f103 	asr.w	r1, r5, r3
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	42ab      	cmp	r3, r5
 8008fae:	f040 8463 	bne.w	8009878 <__ieee754_pow+0x9a8>
 8008fb2:	f001 0101 	and.w	r1, r1, #1
 8008fb6:	f1c1 0302 	rsb	r3, r1, #2
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4b50      	ldr	r3, [pc, #320]	; (8009100 <__ieee754_pow+0x230>)
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	d114      	bne.n	8008fec <__ieee754_pow+0x11c>
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	f280 8454 	bge.w	8009870 <__ieee754_pow+0x9a0>
 8008fc8:	463a      	mov	r2, r7
 8008fca:	4643      	mov	r3, r8
 8008fcc:	2000      	movs	r0, #0
 8008fce:	494c      	ldr	r1, [pc, #304]	; (8009100 <__ieee754_pow+0x230>)
 8008fd0:	f7f7 fba4 	bl	800071c <__aeabi_ddiv>
 8008fd4:	e013      	b.n	8008ffe <__ieee754_pow+0x12e>
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	e7c3      	b.n	8008f62 <__ieee754_pow+0x92>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e7c1      	b.n	8008f62 <__ieee754_pow+0x92>
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	dad3      	bge.n	8008f8a <__ieee754_pow+0xba>
 8008fe2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008fe6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008fea:	e7d2      	b.n	8008f92 <__ieee754_pow+0xc2>
 8008fec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008ff0:	d108      	bne.n	8009004 <__ieee754_pow+0x134>
 8008ff2:	463a      	mov	r2, r7
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	f7f7 fa65 	bl	80004c8 <__aeabi_dmul>
 8008ffe:	4683      	mov	fp, r0
 8009000:	468c      	mov	ip, r1
 8009002:	e7c6      	b.n	8008f92 <__ieee754_pow+0xc2>
 8009004:	4b3f      	ldr	r3, [pc, #252]	; (8009104 <__ieee754_pow+0x234>)
 8009006:	429e      	cmp	r6, r3
 8009008:	d10b      	bne.n	8009022 <__ieee754_pow+0x152>
 800900a:	f1b9 0f00 	cmp.w	r9, #0
 800900e:	db08      	blt.n	8009022 <__ieee754_pow+0x152>
 8009010:	4638      	mov	r0, r7
 8009012:	4641      	mov	r1, r8
 8009014:	b011      	add	sp, #68	; 0x44
 8009016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	f000 be55 	b.w	8009cc8 <__ieee754_sqrt>
 800901e:	2300      	movs	r3, #0
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	4641      	mov	r1, r8
 8009026:	f7ff f9e3 	bl	80083f0 <fabs>
 800902a:	4683      	mov	fp, r0
 800902c:	468c      	mov	ip, r1
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d12b      	bne.n	800908c <__ieee754_pow+0x1bc>
 8009034:	b124      	cbz	r4, 8009040 <__ieee754_pow+0x170>
 8009036:	4b32      	ldr	r3, [pc, #200]	; (8009100 <__ieee754_pow+0x230>)
 8009038:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800903c:	429a      	cmp	r2, r3
 800903e:	d125      	bne.n	800908c <__ieee754_pow+0x1bc>
 8009040:	2e00      	cmp	r6, #0
 8009042:	da07      	bge.n	8009054 <__ieee754_pow+0x184>
 8009044:	465a      	mov	r2, fp
 8009046:	4663      	mov	r3, ip
 8009048:	2000      	movs	r0, #0
 800904a:	492d      	ldr	r1, [pc, #180]	; (8009100 <__ieee754_pow+0x230>)
 800904c:	f7f7 fb66 	bl	800071c <__aeabi_ddiv>
 8009050:	4683      	mov	fp, r0
 8009052:	468c      	mov	ip, r1
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	da9b      	bge.n	8008f92 <__ieee754_pow+0xc2>
 800905a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800905e:	9b00      	ldr	r3, [sp, #0]
 8009060:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009064:	4323      	orrs	r3, r4
 8009066:	d108      	bne.n	800907a <__ieee754_pow+0x1aa>
 8009068:	465a      	mov	r2, fp
 800906a:	4663      	mov	r3, ip
 800906c:	4658      	mov	r0, fp
 800906e:	4661      	mov	r1, ip
 8009070:	f7f7 f872 	bl	8000158 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	e7aa      	b.n	8008fd0 <__ieee754_pow+0x100>
 800907a:	9b00      	ldr	r3, [sp, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d188      	bne.n	8008f92 <__ieee754_pow+0xc2>
 8009080:	4658      	mov	r0, fp
 8009082:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009086:	4683      	mov	fp, r0
 8009088:	469c      	mov	ip, r3
 800908a:	e782      	b.n	8008f92 <__ieee754_pow+0xc2>
 800908c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009090:	f109 33ff 	add.w	r3, r9, #4294967295
 8009094:	930d      	str	r3, [sp, #52]	; 0x34
 8009096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009098:	9b00      	ldr	r3, [sp, #0]
 800909a:	4313      	orrs	r3, r2
 800909c:	d104      	bne.n	80090a8 <__ieee754_pow+0x1d8>
 800909e:	463a      	mov	r2, r7
 80090a0:	4643      	mov	r3, r8
 80090a2:	4638      	mov	r0, r7
 80090a4:	4641      	mov	r1, r8
 80090a6:	e7e3      	b.n	8009070 <__ieee754_pow+0x1a0>
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <__ieee754_pow+0x238>)
 80090aa:	429d      	cmp	r5, r3
 80090ac:	f340 80fe 	ble.w	80092ac <__ieee754_pow+0x3dc>
 80090b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80090b4:	429d      	cmp	r5, r3
 80090b6:	dd0b      	ble.n	80090d0 <__ieee754_pow+0x200>
 80090b8:	4b10      	ldr	r3, [pc, #64]	; (80090fc <__ieee754_pow+0x22c>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	dc0e      	bgt.n	80090dc <__ieee754_pow+0x20c>
 80090be:	2e00      	cmp	r6, #0
 80090c0:	f6bf af63 	bge.w	8008f8a <__ieee754_pow+0xba>
 80090c4:	a308      	add	r3, pc, #32	; (adr r3, 80090e8 <__ieee754_pow+0x218>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	e794      	b.n	8008ffa <__ieee754_pow+0x12a>
 80090d0:	4b0e      	ldr	r3, [pc, #56]	; (800910c <__ieee754_pow+0x23c>)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	ddf3      	ble.n	80090be <__ieee754_pow+0x1ee>
 80090d6:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <__ieee754_pow+0x230>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	dd19      	ble.n	8009110 <__ieee754_pow+0x240>
 80090dc:	2e00      	cmp	r6, #0
 80090de:	dcf1      	bgt.n	80090c4 <__ieee754_pow+0x1f4>
 80090e0:	e753      	b.n	8008f8a <__ieee754_pow+0xba>
 80090e2:	bf00      	nop
 80090e4:	f3af 8000 	nop.w
 80090e8:	8800759c 	.word	0x8800759c
 80090ec:	7e37e43c 	.word	0x7e37e43c
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	0800ac52 	.word	0x0800ac52
 80090f8:	433fffff 	.word	0x433fffff
 80090fc:	3fefffff 	.word	0x3fefffff
 8009100:	3ff00000 	.word	0x3ff00000
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	41e00000 	.word	0x41e00000
 800910c:	3feffffe 	.word	0x3feffffe
 8009110:	4661      	mov	r1, ip
 8009112:	2200      	movs	r2, #0
 8009114:	4b60      	ldr	r3, [pc, #384]	; (8009298 <__ieee754_pow+0x3c8>)
 8009116:	4658      	mov	r0, fp
 8009118:	f7f7 f81e 	bl	8000158 <__aeabi_dsub>
 800911c:	a354      	add	r3, pc, #336	; (adr r3, 8009270 <__ieee754_pow+0x3a0>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	f7f7 f9cf 	bl	80004c8 <__aeabi_dmul>
 800912a:	a353      	add	r3, pc, #332	; (adr r3, 8009278 <__ieee754_pow+0x3a8>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	4606      	mov	r6, r0
 8009132:	460f      	mov	r7, r1
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f9c6 	bl	80004c8 <__aeabi_dmul>
 800913c:	2200      	movs	r2, #0
 800913e:	4682      	mov	sl, r0
 8009140:	468b      	mov	fp, r1
 8009142:	4b56      	ldr	r3, [pc, #344]	; (800929c <__ieee754_pow+0x3cc>)
 8009144:	4620      	mov	r0, r4
 8009146:	4629      	mov	r1, r5
 8009148:	f7f7 f9be 	bl	80004c8 <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	a14b      	add	r1, pc, #300	; (adr r1, 8009280 <__ieee754_pow+0x3b0>)
 8009152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009156:	f7f6 ffff 	bl	8000158 <__aeabi_dsub>
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	f7f7 f9b3 	bl	80004c8 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	2000      	movs	r0, #0
 8009168:	494d      	ldr	r1, [pc, #308]	; (80092a0 <__ieee754_pow+0x3d0>)
 800916a:	f7f6 fff5 	bl	8000158 <__aeabi_dsub>
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	4680      	mov	r8, r0
 8009174:	4689      	mov	r9, r1
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 f9a5 	bl	80004c8 <__aeabi_dmul>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 f99f 	bl	80004c8 <__aeabi_dmul>
 800918a:	a33f      	add	r3, pc, #252	; (adr r3, 8009288 <__ieee754_pow+0x3b8>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 f99a 	bl	80004c8 <__aeabi_dmul>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	f7f6 ffdc 	bl	8000158 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4604      	mov	r4, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f6 ffd6 	bl	800015c <__adddf3>
 80091b0:	2000      	movs	r0, #0
 80091b2:	468b      	mov	fp, r1
 80091b4:	4682      	mov	sl, r0
 80091b6:	4632      	mov	r2, r6
 80091b8:	463b      	mov	r3, r7
 80091ba:	f7f6 ffcd 	bl	8000158 <__aeabi_dsub>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f6 ffc7 	bl	8000158 <__aeabi_dsub>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ce:	3b01      	subs	r3, #1
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f04f 0300 	mov.w	r3, #0
 80091d6:	bf0c      	ite	eq
 80091d8:	4c32      	ldreq	r4, [pc, #200]	; (80092a4 <__ieee754_pow+0x3d4>)
 80091da:	4c2f      	ldrne	r4, [pc, #188]	; (8009298 <__ieee754_pow+0x3c8>)
 80091dc:	4606      	mov	r6, r0
 80091de:	e9cd 3400 	strd	r3, r4, [sp]
 80091e2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091e6:	2400      	movs	r4, #0
 80091e8:	460f      	mov	r7, r1
 80091ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	f7f6 ffb1 	bl	8000158 <__aeabi_dsub>
 80091f6:	4652      	mov	r2, sl
 80091f8:	465b      	mov	r3, fp
 80091fa:	f7f7 f965 	bl	80004c8 <__aeabi_dmul>
 80091fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009202:	4680      	mov	r8, r0
 8009204:	4689      	mov	r9, r1
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	f7f7 f95d 	bl	80004c8 <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f7f6 ffa1 	bl	800015c <__adddf3>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	4680      	mov	r8, r0
 8009220:	4689      	mov	r9, r1
 8009222:	4650      	mov	r0, sl
 8009224:	4659      	mov	r1, fp
 8009226:	f7f7 f94f 	bl	80004c8 <__aeabi_dmul>
 800922a:	4604      	mov	r4, r0
 800922c:	460d      	mov	r5, r1
 800922e:	460b      	mov	r3, r1
 8009230:	4602      	mov	r2, r0
 8009232:	4649      	mov	r1, r9
 8009234:	4640      	mov	r0, r8
 8009236:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800923a:	f7f6 ff8f 	bl	800015c <__adddf3>
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <__ieee754_pow+0x3d8>)
 8009240:	4682      	mov	sl, r0
 8009242:	4299      	cmp	r1, r3
 8009244:	460f      	mov	r7, r1
 8009246:	460e      	mov	r6, r1
 8009248:	f340 82e1 	ble.w	800980e <__ieee754_pow+0x93e>
 800924c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009250:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009254:	4303      	orrs	r3, r0
 8009256:	f000 81db 	beq.w	8009610 <__ieee754_pow+0x740>
 800925a:	a30d      	add	r3, pc, #52	; (adr r3, 8009290 <__ieee754_pow+0x3c0>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009264:	f7f7 f930 	bl	80004c8 <__aeabi_dmul>
 8009268:	a309      	add	r3, pc, #36	; (adr r3, 8009290 <__ieee754_pow+0x3c0>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	e6c4      	b.n	8008ffa <__ieee754_pow+0x12a>
 8009270:	60000000 	.word	0x60000000
 8009274:	3ff71547 	.word	0x3ff71547
 8009278:	f85ddf44 	.word	0xf85ddf44
 800927c:	3e54ae0b 	.word	0x3e54ae0b
 8009280:	55555555 	.word	0x55555555
 8009284:	3fd55555 	.word	0x3fd55555
 8009288:	652b82fe 	.word	0x652b82fe
 800928c:	3ff71547 	.word	0x3ff71547
 8009290:	8800759c 	.word	0x8800759c
 8009294:	7e37e43c 	.word	0x7e37e43c
 8009298:	3ff00000 	.word	0x3ff00000
 800929c:	3fd00000 	.word	0x3fd00000
 80092a0:	3fe00000 	.word	0x3fe00000
 80092a4:	bff00000 	.word	0xbff00000
 80092a8:	408fffff 	.word	0x408fffff
 80092ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	da08      	bge.n	80092c8 <__ieee754_pow+0x3f8>
 80092b6:	4658      	mov	r0, fp
 80092b8:	4bcd      	ldr	r3, [pc, #820]	; (80095f0 <__ieee754_pow+0x720>)
 80092ba:	4661      	mov	r1, ip
 80092bc:	f7f7 f904 	bl	80004c8 <__aeabi_dmul>
 80092c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80092c4:	4683      	mov	fp, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	1523      	asrs	r3, r4, #20
 80092ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092ce:	4413      	add	r3, r2
 80092d0:	930c      	str	r3, [sp, #48]	; 0x30
 80092d2:	4bc8      	ldr	r3, [pc, #800]	; (80095f4 <__ieee754_pow+0x724>)
 80092d4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092d8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80092dc:	429c      	cmp	r4, r3
 80092de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092e2:	dd08      	ble.n	80092f6 <__ieee754_pow+0x426>
 80092e4:	4bc4      	ldr	r3, [pc, #784]	; (80095f8 <__ieee754_pow+0x728>)
 80092e6:	429c      	cmp	r4, r3
 80092e8:	f340 815b 	ble.w	80095a2 <__ieee754_pow+0x6d2>
 80092ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80092f2:	3301      	adds	r3, #1
 80092f4:	930c      	str	r3, [sp, #48]	; 0x30
 80092f6:	f04f 0800 	mov.w	r8, #0
 80092fa:	4658      	mov	r0, fp
 80092fc:	4629      	mov	r1, r5
 80092fe:	4bbf      	ldr	r3, [pc, #764]	; (80095fc <__ieee754_pow+0x72c>)
 8009300:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009304:	444b      	add	r3, r9
 8009306:	e9d3 3400 	ldrd	r3, r4, [r3]
 800930a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800930e:	461a      	mov	r2, r3
 8009310:	4623      	mov	r3, r4
 8009312:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009316:	f7f6 ff1f 	bl	8000158 <__aeabi_dsub>
 800931a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009326:	f7f6 ff19 	bl	800015c <__adddf3>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	2000      	movs	r0, #0
 8009330:	49b3      	ldr	r1, [pc, #716]	; (8009600 <__ieee754_pow+0x730>)
 8009332:	f7f7 f9f3 	bl	800071c <__aeabi_ddiv>
 8009336:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 f8c1 	bl	80004c8 <__aeabi_dmul>
 8009346:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800934a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800934e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009352:	2300      	movs	r3, #0
 8009354:	2200      	movs	r2, #0
 8009356:	106d      	asrs	r5, r5, #1
 8009358:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009362:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009366:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800936a:	4650      	mov	r0, sl
 800936c:	4659      	mov	r1, fp
 800936e:	4614      	mov	r4, r2
 8009370:	461d      	mov	r5, r3
 8009372:	f7f7 f8a9 	bl	80004c8 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4630      	mov	r0, r6
 800937c:	4639      	mov	r1, r7
 800937e:	f7f6 feeb 	bl	8000158 <__aeabi_dsub>
 8009382:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	4620      	mov	r0, r4
 800938c:	4629      	mov	r1, r5
 800938e:	f7f6 fee3 	bl	8000158 <__aeabi_dsub>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800939a:	f7f6 fedd 	bl	8000158 <__aeabi_dsub>
 800939e:	4652      	mov	r2, sl
 80093a0:	465b      	mov	r3, fp
 80093a2:	f7f7 f891 	bl	80004c8 <__aeabi_dmul>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	f7f6 fed3 	bl	8000158 <__aeabi_dsub>
 80093b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80093b6:	f7f7 f887 	bl	80004c8 <__aeabi_dmul>
 80093ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093c2:	4610      	mov	r0, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7f7 f87f 	bl	80004c8 <__aeabi_dmul>
 80093ca:	a377      	add	r3, pc, #476	; (adr r3, 80095a8 <__ieee754_pow+0x6d8>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	f7f7 f878 	bl	80004c8 <__aeabi_dmul>
 80093d8:	a375      	add	r3, pc, #468	; (adr r3, 80095b0 <__ieee754_pow+0x6e0>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f6 febd 	bl	800015c <__adddf3>
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	f7f7 f86f 	bl	80004c8 <__aeabi_dmul>
 80093ea:	a373      	add	r3, pc, #460	; (adr r3, 80095b8 <__ieee754_pow+0x6e8>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 feb4 	bl	800015c <__adddf3>
 80093f4:	4622      	mov	r2, r4
 80093f6:	462b      	mov	r3, r5
 80093f8:	f7f7 f866 	bl	80004c8 <__aeabi_dmul>
 80093fc:	a370      	add	r3, pc, #448	; (adr r3, 80095c0 <__ieee754_pow+0x6f0>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f7f6 feab 	bl	800015c <__adddf3>
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	f7f7 f85d 	bl	80004c8 <__aeabi_dmul>
 800940e:	a36e      	add	r3, pc, #440	; (adr r3, 80095c8 <__ieee754_pow+0x6f8>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f6 fea2 	bl	800015c <__adddf3>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f7 f854 	bl	80004c8 <__aeabi_dmul>
 8009420:	a36b      	add	r3, pc, #428	; (adr r3, 80095d0 <__ieee754_pow+0x700>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 fe99 	bl	800015c <__adddf3>
 800942a:	4622      	mov	r2, r4
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1
 8009430:	462b      	mov	r3, r5
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f7 f847 	bl	80004c8 <__aeabi_dmul>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 f841 	bl	80004c8 <__aeabi_dmul>
 8009446:	4604      	mov	r4, r0
 8009448:	460d      	mov	r5, r1
 800944a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800944e:	4652      	mov	r2, sl
 8009450:	465b      	mov	r3, fp
 8009452:	f7f6 fe83 	bl	800015c <__adddf3>
 8009456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800945a:	f7f7 f835 	bl	80004c8 <__aeabi_dmul>
 800945e:	4622      	mov	r2, r4
 8009460:	462b      	mov	r3, r5
 8009462:	f7f6 fe7b 	bl	800015c <__adddf3>
 8009466:	4652      	mov	r2, sl
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	465b      	mov	r3, fp
 800946e:	4650      	mov	r0, sl
 8009470:	4659      	mov	r1, fp
 8009472:	f7f7 f829 	bl	80004c8 <__aeabi_dmul>
 8009476:	2200      	movs	r2, #0
 8009478:	4b62      	ldr	r3, [pc, #392]	; (8009604 <__ieee754_pow+0x734>)
 800947a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800947e:	f7f6 fe6d 	bl	800015c <__adddf3>
 8009482:	4632      	mov	r2, r6
 8009484:	463b      	mov	r3, r7
 8009486:	f7f6 fe69 	bl	800015c <__adddf3>
 800948a:	9804      	ldr	r0, [sp, #16]
 800948c:	460d      	mov	r5, r1
 800948e:	4604      	mov	r4, r0
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4650      	mov	r0, sl
 8009496:	4659      	mov	r1, fp
 8009498:	f7f7 f816 	bl	80004c8 <__aeabi_dmul>
 800949c:	2200      	movs	r2, #0
 800949e:	4682      	mov	sl, r0
 80094a0:	468b      	mov	fp, r1
 80094a2:	4b58      	ldr	r3, [pc, #352]	; (8009604 <__ieee754_pow+0x734>)
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f6 fe56 	bl	8000158 <__aeabi_dsub>
 80094ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094b0:	f7f6 fe52 	bl	8000158 <__aeabi_dsub>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f6 fe4c 	bl	8000158 <__aeabi_dsub>
 80094c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c4:	f7f7 f800 	bl	80004c8 <__aeabi_dmul>
 80094c8:	4622      	mov	r2, r4
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094d2:	462b      	mov	r3, r5
 80094d4:	f7f6 fff8 	bl	80004c8 <__aeabi_dmul>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f6 fe3c 	bl	800015c <__adddf3>
 80094e4:	4606      	mov	r6, r0
 80094e6:	460f      	mov	r7, r1
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4650      	mov	r0, sl
 80094ee:	4659      	mov	r1, fp
 80094f0:	f7f6 fe34 	bl	800015c <__adddf3>
 80094f4:	a338      	add	r3, pc, #224	; (adr r3, 80095d8 <__ieee754_pow+0x708>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	9804      	ldr	r0, [sp, #16]
 80094fc:	460d      	mov	r5, r1
 80094fe:	4604      	mov	r4, r0
 8009500:	f7f6 ffe2 	bl	80004c8 <__aeabi_dmul>
 8009504:	4652      	mov	r2, sl
 8009506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800950a:	465b      	mov	r3, fp
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f6 fe22 	bl	8000158 <__aeabi_dsub>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f6 fe1c 	bl	8000158 <__aeabi_dsub>
 8009520:	a32f      	add	r3, pc, #188	; (adr r3, 80095e0 <__ieee754_pow+0x710>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f6 ffcf 	bl	80004c8 <__aeabi_dmul>
 800952a:	a32f      	add	r3, pc, #188	; (adr r3, 80095e8 <__ieee754_pow+0x718>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	4606      	mov	r6, r0
 8009532:	460f      	mov	r7, r1
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f6 ffc6 	bl	80004c8 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f6 fe0a 	bl	800015c <__adddf3>
 8009548:	4b2f      	ldr	r3, [pc, #188]	; (8009608 <__ieee754_pow+0x738>)
 800954a:	444b      	add	r3, r9
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f6 fe04 	bl	800015c <__adddf3>
 8009554:	4604      	mov	r4, r0
 8009556:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009558:	460d      	mov	r5, r1
 800955a:	f7f6 ff4b 	bl	80003f4 <__aeabi_i2d>
 800955e:	4606      	mov	r6, r0
 8009560:	460f      	mov	r7, r1
 8009562:	4b2a      	ldr	r3, [pc, #168]	; (800960c <__ieee754_pow+0x73c>)
 8009564:	4622      	mov	r2, r4
 8009566:	444b      	add	r3, r9
 8009568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800956c:	462b      	mov	r3, r5
 800956e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009572:	f7f6 fdf3 	bl	800015c <__adddf3>
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	f7f6 fdef 	bl	800015c <__adddf3>
 800957e:	4632      	mov	r2, r6
 8009580:	463b      	mov	r3, r7
 8009582:	f7f6 fdeb 	bl	800015c <__adddf3>
 8009586:	9804      	ldr	r0, [sp, #16]
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	4682      	mov	sl, r0
 800958e:	468b      	mov	fp, r1
 8009590:	f7f6 fde2 	bl	8000158 <__aeabi_dsub>
 8009594:	4642      	mov	r2, r8
 8009596:	464b      	mov	r3, r9
 8009598:	f7f6 fdde 	bl	8000158 <__aeabi_dsub>
 800959c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a0:	e60b      	b.n	80091ba <__ieee754_pow+0x2ea>
 80095a2:	f04f 0801 	mov.w	r8, #1
 80095a6:	e6a8      	b.n	80092fa <__ieee754_pow+0x42a>
 80095a8:	4a454eef 	.word	0x4a454eef
 80095ac:	3fca7e28 	.word	0x3fca7e28
 80095b0:	93c9db65 	.word	0x93c9db65
 80095b4:	3fcd864a 	.word	0x3fcd864a
 80095b8:	a91d4101 	.word	0xa91d4101
 80095bc:	3fd17460 	.word	0x3fd17460
 80095c0:	518f264d 	.word	0x518f264d
 80095c4:	3fd55555 	.word	0x3fd55555
 80095c8:	db6fabff 	.word	0xdb6fabff
 80095cc:	3fdb6db6 	.word	0x3fdb6db6
 80095d0:	33333303 	.word	0x33333303
 80095d4:	3fe33333 	.word	0x3fe33333
 80095d8:	e0000000 	.word	0xe0000000
 80095dc:	3feec709 	.word	0x3feec709
 80095e0:	dc3a03fd 	.word	0xdc3a03fd
 80095e4:	3feec709 	.word	0x3feec709
 80095e8:	145b01f5 	.word	0x145b01f5
 80095ec:	be3e2fe0 	.word	0xbe3e2fe0
 80095f0:	43400000 	.word	0x43400000
 80095f4:	0003988e 	.word	0x0003988e
 80095f8:	000bb679 	.word	0x000bb679
 80095fc:	0800aca8 	.word	0x0800aca8
 8009600:	3ff00000 	.word	0x3ff00000
 8009604:	40080000 	.word	0x40080000
 8009608:	0800acc8 	.word	0x0800acc8
 800960c:	0800acb8 	.word	0x0800acb8
 8009610:	a39b      	add	r3, pc, #620	; (adr r3, 8009880 <__ieee754_pow+0x9b0>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	4640      	mov	r0, r8
 8009618:	4649      	mov	r1, r9
 800961a:	f7f6 fd9f 	bl	800015c <__adddf3>
 800961e:	4622      	mov	r2, r4
 8009620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009624:	462b      	mov	r3, r5
 8009626:	4650      	mov	r0, sl
 8009628:	4639      	mov	r1, r7
 800962a:	f7f6 fd95 	bl	8000158 <__aeabi_dsub>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009636:	f7f7 f9d7 	bl	80009e8 <__aeabi_dcmpgt>
 800963a:	2800      	cmp	r0, #0
 800963c:	f47f ae0d 	bne.w	800925a <__ieee754_pow+0x38a>
 8009640:	4aa3      	ldr	r2, [pc, #652]	; (80098d0 <__ieee754_pow+0xa00>)
 8009642:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009646:	4293      	cmp	r3, r2
 8009648:	f340 8103 	ble.w	8009852 <__ieee754_pow+0x982>
 800964c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009650:	2000      	movs	r0, #0
 8009652:	151b      	asrs	r3, r3, #20
 8009654:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009658:	fa4a f303 	asr.w	r3, sl, r3
 800965c:	4433      	add	r3, r6
 800965e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009662:	4f9c      	ldr	r7, [pc, #624]	; (80098d4 <__ieee754_pow+0xa04>)
 8009664:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009668:	4117      	asrs	r7, r2
 800966a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800966e:	ea23 0107 	bic.w	r1, r3, r7
 8009672:	f1c2 0214 	rsb	r2, r2, #20
 8009676:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800967a:	fa4a fa02 	asr.w	sl, sl, r2
 800967e:	2e00      	cmp	r6, #0
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	bfb8      	it	lt
 800968a:	f1ca 0a00 	rsblt	sl, sl, #0
 800968e:	f7f6 fd63 	bl	8000158 <__aeabi_dsub>
 8009692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800969a:	4642      	mov	r2, r8
 800969c:	464b      	mov	r3, r9
 800969e:	f7f6 fd5d 	bl	800015c <__adddf3>
 80096a2:	a379      	add	r3, pc, #484	; (adr r3, 8009888 <__ieee754_pow+0x9b8>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	2000      	movs	r0, #0
 80096aa:	460d      	mov	r5, r1
 80096ac:	4604      	mov	r4, r0
 80096ae:	f7f6 ff0b 	bl	80004c8 <__aeabi_dmul>
 80096b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	4620      	mov	r0, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	f7f6 fd4b 	bl	8000158 <__aeabi_dsub>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f6 fd45 	bl	8000158 <__aeabi_dsub>
 80096ce:	a370      	add	r3, pc, #448	; (adr r3, 8009890 <__ieee754_pow+0x9c0>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fef8 	bl	80004c8 <__aeabi_dmul>
 80096d8:	a36f      	add	r3, pc, #444	; (adr r3, 8009898 <__ieee754_pow+0x9c8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 feef 	bl	80004c8 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4640      	mov	r0, r8
 80096f0:	4649      	mov	r1, r9
 80096f2:	f7f6 fd33 	bl	800015c <__adddf3>
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fd2b 	bl	800015c <__adddf3>
 8009706:	4632      	mov	r2, r6
 8009708:	463b      	mov	r3, r7
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	f7f6 fd23 	bl	8000158 <__aeabi_dsub>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f7f6 fd1d 	bl	8000158 <__aeabi_dsub>
 800971e:	4642      	mov	r2, r8
 8009720:	4606      	mov	r6, r0
 8009722:	460f      	mov	r7, r1
 8009724:	464b      	mov	r3, r9
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	f7f6 fecd 	bl	80004c8 <__aeabi_dmul>
 800972e:	a35c      	add	r3, pc, #368	; (adr r3, 80098a0 <__ieee754_pow+0x9d0>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	4604      	mov	r4, r0
 8009736:	460d      	mov	r5, r1
 8009738:	f7f6 fec6 	bl	80004c8 <__aeabi_dmul>
 800973c:	a35a      	add	r3, pc, #360	; (adr r3, 80098a8 <__ieee754_pow+0x9d8>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f7f6 fd09 	bl	8000158 <__aeabi_dsub>
 8009746:	4622      	mov	r2, r4
 8009748:	462b      	mov	r3, r5
 800974a:	f7f6 febd 	bl	80004c8 <__aeabi_dmul>
 800974e:	a358      	add	r3, pc, #352	; (adr r3, 80098b0 <__ieee754_pow+0x9e0>)
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f6 fd02 	bl	800015c <__adddf3>
 8009758:	4622      	mov	r2, r4
 800975a:	462b      	mov	r3, r5
 800975c:	f7f6 feb4 	bl	80004c8 <__aeabi_dmul>
 8009760:	a355      	add	r3, pc, #340	; (adr r3, 80098b8 <__ieee754_pow+0x9e8>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f7f6 fcf7 	bl	8000158 <__aeabi_dsub>
 800976a:	4622      	mov	r2, r4
 800976c:	462b      	mov	r3, r5
 800976e:	f7f6 feab 	bl	80004c8 <__aeabi_dmul>
 8009772:	a353      	add	r3, pc, #332	; (adr r3, 80098c0 <__ieee754_pow+0x9f0>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 fcf0 	bl	800015c <__adddf3>
 800977c:	4622      	mov	r2, r4
 800977e:	462b      	mov	r3, r5
 8009780:	f7f6 fea2 	bl	80004c8 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	f7f6 fce4 	bl	8000158 <__aeabi_dsub>
 8009790:	4604      	mov	r4, r0
 8009792:	460d      	mov	r5, r1
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f6 fe94 	bl	80004c8 <__aeabi_dmul>
 80097a0:	2200      	movs	r2, #0
 80097a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f6 fcd3 	bl	8000158 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ba:	f7f6 ffaf 	bl	800071c <__aeabi_ddiv>
 80097be:	4632      	mov	r2, r6
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	463b      	mov	r3, r7
 80097c6:	4640      	mov	r0, r8
 80097c8:	4649      	mov	r1, r9
 80097ca:	f7f6 fe7d 	bl	80004c8 <__aeabi_dmul>
 80097ce:	4632      	mov	r2, r6
 80097d0:	463b      	mov	r3, r7
 80097d2:	f7f6 fcc3 	bl	800015c <__adddf3>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f7f6 fcbb 	bl	8000158 <__aeabi_dsub>
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	f7f6 fcb7 	bl	8000158 <__aeabi_dsub>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	2000      	movs	r0, #0
 80097f0:	4939      	ldr	r1, [pc, #228]	; (80098d8 <__ieee754_pow+0xa08>)
 80097f2:	f7f6 fcb1 	bl	8000158 <__aeabi_dsub>
 80097f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80097fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80097fe:	da2b      	bge.n	8009858 <__ieee754_pow+0x988>
 8009800:	4652      	mov	r2, sl
 8009802:	f001 f8e9 	bl	800a9d8 <scalbn>
 8009806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800980a:	f7ff bbf6 	b.w	8008ffa <__ieee754_pow+0x12a>
 800980e:	4b33      	ldr	r3, [pc, #204]	; (80098dc <__ieee754_pow+0xa0c>)
 8009810:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009814:	429f      	cmp	r7, r3
 8009816:	f77f af13 	ble.w	8009640 <__ieee754_pow+0x770>
 800981a:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <__ieee754_pow+0xa10>)
 800981c:	440b      	add	r3, r1
 800981e:	4303      	orrs	r3, r0
 8009820:	d00b      	beq.n	800983a <__ieee754_pow+0x96a>
 8009822:	a329      	add	r3, pc, #164	; (adr r3, 80098c8 <__ieee754_pow+0x9f8>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800982c:	f7f6 fe4c 	bl	80004c8 <__aeabi_dmul>
 8009830:	a325      	add	r3, pc, #148	; (adr r3, 80098c8 <__ieee754_pow+0x9f8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7ff bbe0 	b.w	8008ffa <__ieee754_pow+0x12a>
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	f7f6 fc8b 	bl	8000158 <__aeabi_dsub>
 8009842:	4642      	mov	r2, r8
 8009844:	464b      	mov	r3, r9
 8009846:	f7f7 f8c5 	bl	80009d4 <__aeabi_dcmpge>
 800984a:	2800      	cmp	r0, #0
 800984c:	f43f aef8 	beq.w	8009640 <__ieee754_pow+0x770>
 8009850:	e7e7      	b.n	8009822 <__ieee754_pow+0x952>
 8009852:	f04f 0a00 	mov.w	sl, #0
 8009856:	e71e      	b.n	8009696 <__ieee754_pow+0x7c6>
 8009858:	4621      	mov	r1, r4
 800985a:	e7d4      	b.n	8009806 <__ieee754_pow+0x936>
 800985c:	f04f 0b00 	mov.w	fp, #0
 8009860:	f8df c074 	ldr.w	ip, [pc, #116]	; 80098d8 <__ieee754_pow+0xa08>
 8009864:	f7ff bb95 	b.w	8008f92 <__ieee754_pow+0xc2>
 8009868:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800986c:	f7ff bb91 	b.w	8008f92 <__ieee754_pow+0xc2>
 8009870:	4638      	mov	r0, r7
 8009872:	4641      	mov	r1, r8
 8009874:	f7ff bbc3 	b.w	8008ffe <__ieee754_pow+0x12e>
 8009878:	9200      	str	r2, [sp, #0]
 800987a:	f7ff bb9f 	b.w	8008fbc <__ieee754_pow+0xec>
 800987e:	bf00      	nop
 8009880:	652b82fe 	.word	0x652b82fe
 8009884:	3c971547 	.word	0x3c971547
 8009888:	00000000 	.word	0x00000000
 800988c:	3fe62e43 	.word	0x3fe62e43
 8009890:	fefa39ef 	.word	0xfefa39ef
 8009894:	3fe62e42 	.word	0x3fe62e42
 8009898:	0ca86c39 	.word	0x0ca86c39
 800989c:	be205c61 	.word	0xbe205c61
 80098a0:	72bea4d0 	.word	0x72bea4d0
 80098a4:	3e663769 	.word	0x3e663769
 80098a8:	c5d26bf1 	.word	0xc5d26bf1
 80098ac:	3ebbbd41 	.word	0x3ebbbd41
 80098b0:	af25de2c 	.word	0xaf25de2c
 80098b4:	3f11566a 	.word	0x3f11566a
 80098b8:	16bebd93 	.word	0x16bebd93
 80098bc:	3f66c16c 	.word	0x3f66c16c
 80098c0:	5555553e 	.word	0x5555553e
 80098c4:	3fc55555 	.word	0x3fc55555
 80098c8:	c2f8f359 	.word	0xc2f8f359
 80098cc:	01a56e1f 	.word	0x01a56e1f
 80098d0:	3fe00000 	.word	0x3fe00000
 80098d4:	000fffff 	.word	0x000fffff
 80098d8:	3ff00000 	.word	0x3ff00000
 80098dc:	4090cbff 	.word	0x4090cbff
 80098e0:	3f6f3400 	.word	0x3f6f3400
 80098e4:	00000000 	.word	0x00000000

080098e8 <__ieee754_rem_pio2>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	4614      	mov	r4, r2
 80098ee:	4ac2      	ldr	r2, [pc, #776]	; (8009bf8 <__ieee754_rem_pio2+0x310>)
 80098f0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80098f4:	4592      	cmp	sl, r2
 80098f6:	b08d      	sub	sp, #52	; 0x34
 80098f8:	468b      	mov	fp, r1
 80098fa:	dc07      	bgt.n	800990c <__ieee754_rem_pio2+0x24>
 80098fc:	2200      	movs	r2, #0
 80098fe:	2300      	movs	r3, #0
 8009900:	e9c4 0100 	strd	r0, r1, [r4]
 8009904:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009908:	2500      	movs	r5, #0
 800990a:	e023      	b.n	8009954 <__ieee754_rem_pio2+0x6c>
 800990c:	4abb      	ldr	r2, [pc, #748]	; (8009bfc <__ieee754_rem_pio2+0x314>)
 800990e:	4592      	cmp	sl, r2
 8009910:	dc71      	bgt.n	80099f6 <__ieee754_rem_pio2+0x10e>
 8009912:	a3ab      	add	r3, pc, #684	; (adr r3, 8009bc0 <__ieee754_rem_pio2+0x2d8>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	2900      	cmp	r1, #0
 800991a:	4db9      	ldr	r5, [pc, #740]	; (8009c00 <__ieee754_rem_pio2+0x318>)
 800991c:	dd36      	ble.n	800998c <__ieee754_rem_pio2+0xa4>
 800991e:	f7f6 fc1b 	bl	8000158 <__aeabi_dsub>
 8009922:	45aa      	cmp	sl, r5
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
 8009928:	d018      	beq.n	800995c <__ieee754_rem_pio2+0x74>
 800992a:	a3a7      	add	r3, pc, #668	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x2e0>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f6 fc12 	bl	8000158 <__aeabi_dsub>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4630      	mov	r0, r6
 800993a:	e9c4 2300 	strd	r2, r3, [r4]
 800993e:	4639      	mov	r1, r7
 8009940:	f7f6 fc0a 	bl	8000158 <__aeabi_dsub>
 8009944:	a3a0      	add	r3, pc, #640	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x2e0>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fc05 	bl	8000158 <__aeabi_dsub>
 800994e:	2501      	movs	r5, #1
 8009950:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009954:	4628      	mov	r0, r5
 8009956:	b00d      	add	sp, #52	; 0x34
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	a39c      	add	r3, pc, #624	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x2e8>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fbf9 	bl	8000158 <__aeabi_dsub>
 8009966:	a39c      	add	r3, pc, #624	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x2f0>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	f7f6 fbf2 	bl	8000158 <__aeabi_dsub>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	e9c4 2300 	strd	r2, r3, [r4]
 800997e:	4639      	mov	r1, r7
 8009980:	f7f6 fbea 	bl	8000158 <__aeabi_dsub>
 8009984:	a394      	add	r3, pc, #592	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x2f0>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	e7de      	b.n	800994a <__ieee754_rem_pio2+0x62>
 800998c:	f7f6 fbe6 	bl	800015c <__adddf3>
 8009990:	45aa      	cmp	sl, r5
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	d016      	beq.n	80099c6 <__ieee754_rem_pio2+0xde>
 8009998:	a38b      	add	r3, pc, #556	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x2e0>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f7f6 fbdd 	bl	800015c <__adddf3>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4630      	mov	r0, r6
 80099a8:	e9c4 2300 	strd	r2, r3, [r4]
 80099ac:	4639      	mov	r1, r7
 80099ae:	f7f6 fbd3 	bl	8000158 <__aeabi_dsub>
 80099b2:	a385      	add	r3, pc, #532	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x2e0>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fbd0 	bl	800015c <__adddf3>
 80099bc:	f04f 35ff 	mov.w	r5, #4294967295
 80099c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099c4:	e7c6      	b.n	8009954 <__ieee754_rem_pio2+0x6c>
 80099c6:	a382      	add	r3, pc, #520	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x2e8>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fbc6 	bl	800015c <__adddf3>
 80099d0:	a381      	add	r3, pc, #516	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x2f0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	f7f6 fbbf 	bl	800015c <__adddf3>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4630      	mov	r0, r6
 80099e4:	e9c4 2300 	strd	r2, r3, [r4]
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 fbb5 	bl	8000158 <__aeabi_dsub>
 80099ee:	a37a      	add	r3, pc, #488	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x2f0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	e7e0      	b.n	80099b8 <__ieee754_rem_pio2+0xd0>
 80099f6:	4a83      	ldr	r2, [pc, #524]	; (8009c04 <__ieee754_rem_pio2+0x31c>)
 80099f8:	4592      	cmp	sl, r2
 80099fa:	f300 80d2 	bgt.w	8009ba2 <__ieee754_rem_pio2+0x2ba>
 80099fe:	f7fe fcf7 	bl	80083f0 <fabs>
 8009a02:	a377      	add	r3, pc, #476	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x2f8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	4606      	mov	r6, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	f7f6 fd5c 	bl	80004c8 <__aeabi_dmul>
 8009a10:	2200      	movs	r2, #0
 8009a12:	4b7d      	ldr	r3, [pc, #500]	; (8009c08 <__ieee754_rem_pio2+0x320>)
 8009a14:	f7f6 fba2 	bl	800015c <__adddf3>
 8009a18:	f7f7 f806 	bl	8000a28 <__aeabi_d2iz>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	f7f6 fce9 	bl	80003f4 <__aeabi_i2d>
 8009a22:	a367      	add	r3, pc, #412	; (adr r3, 8009bc0 <__ieee754_rem_pio2+0x2d8>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a2c:	f7f6 fd4c 	bl	80004c8 <__aeabi_dmul>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4630      	mov	r0, r6
 8009a36:	4639      	mov	r1, r7
 8009a38:	f7f6 fb8e 	bl	8000158 <__aeabi_dsub>
 8009a3c:	a362      	add	r3, pc, #392	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x2e0>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4a:	f7f6 fd3d 	bl	80004c8 <__aeabi_dmul>
 8009a4e:	2d1f      	cmp	r5, #31
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	dc0e      	bgt.n	8009a74 <__ieee754_rem_pio2+0x18c>
 8009a56:	4b6d      	ldr	r3, [pc, #436]	; (8009c0c <__ieee754_rem_pio2+0x324>)
 8009a58:	1e6a      	subs	r2, r5, #1
 8009a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5e:	4553      	cmp	r3, sl
 8009a60:	d008      	beq.n	8009a74 <__ieee754_rem_pio2+0x18c>
 8009a62:	4642      	mov	r2, r8
 8009a64:	464b      	mov	r3, r9
 8009a66:	4630      	mov	r0, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	f7f6 fb75 	bl	8000158 <__aeabi_dsub>
 8009a6e:	e9c4 0100 	strd	r0, r1, [r4]
 8009a72:	e011      	b.n	8009a98 <__ieee754_rem_pio2+0x1b0>
 8009a74:	464b      	mov	r3, r9
 8009a76:	4642      	mov	r2, r8
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fb6c 	bl	8000158 <__aeabi_dsub>
 8009a80:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009a84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a88:	ebaa 0303 	sub.w	r3, sl, r3
 8009a8c:	2b10      	cmp	r3, #16
 8009a8e:	dc1f      	bgt.n	8009ad0 <__ieee754_rem_pio2+0x1e8>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	e9c4 2300 	strd	r2, r3, [r4]
 8009a98:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	4653      	mov	r3, sl
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 fb59 	bl	8000158 <__aeabi_dsub>
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	f7f6 fb55 	bl	8000158 <__aeabi_dsub>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	f1bb 0f00 	cmp.w	fp, #0
 8009ab6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009aba:	f6bf af4b 	bge.w	8009954 <__ieee754_rem_pio2+0x6c>
 8009abe:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009ac2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8009ac6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009aca:	60e1      	str	r1, [r4, #12]
 8009acc:	426d      	negs	r5, r5
 8009ace:	e741      	b.n	8009954 <__ieee754_rem_pio2+0x6c>
 8009ad0:	a33f      	add	r3, pc, #252	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x2e8>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ada:	f7f6 fcf5 	bl	80004c8 <__aeabi_dmul>
 8009ade:	4680      	mov	r8, r0
 8009ae0:	4689      	mov	r9, r1
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	4639      	mov	r1, r7
 8009aea:	f7f6 fb35 	bl	8000158 <__aeabi_dsub>
 8009aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f6 fb2d 	bl	8000158 <__aeabi_dsub>
 8009afe:	4642      	mov	r2, r8
 8009b00:	464b      	mov	r3, r9
 8009b02:	f7f6 fb29 	bl	8000158 <__aeabi_dsub>
 8009b06:	a334      	add	r3, pc, #208	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x2f0>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b14:	f7f6 fcd8 	bl	80004c8 <__aeabi_dmul>
 8009b18:	4632      	mov	r2, r6
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	f7f6 fb1c 	bl	8000158 <__aeabi_dsub>
 8009b20:	460b      	mov	r3, r1
 8009b22:	4602      	mov	r2, r0
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b2c:	f7f6 fb14 	bl	8000158 <__aeabi_dsub>
 8009b30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b34:	ebaa 0a03 	sub.w	sl, sl, r3
 8009b38:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8009b3c:	dc06      	bgt.n	8009b4c <__ieee754_rem_pio2+0x264>
 8009b3e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	e9c4 2300 	strd	r2, r3, [r4]
 8009b4a:	e7a5      	b.n	8009a98 <__ieee754_rem_pio2+0x1b0>
 8009b4c:	a326      	add	r3, pc, #152	; (adr r3, 8009be8 <__ieee754_rem_pio2+0x300>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b56:	f7f6 fcb7 	bl	80004c8 <__aeabi_dmul>
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b66:	f7f6 faf7 	bl	8000158 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b76:	f7f6 faef 	bl	8000158 <__aeabi_dsub>
 8009b7a:	4642      	mov	r2, r8
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	f7f6 faeb 	bl	8000158 <__aeabi_dsub>
 8009b82:	a31b      	add	r3, pc, #108	; (adr r3, 8009bf0 <__ieee754_rem_pio2+0x308>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b90:	f7f6 fc9a 	bl	80004c8 <__aeabi_dmul>
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	f7f6 fade 	bl	8000158 <__aeabi_dsub>
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4689      	mov	r9, r1
 8009ba0:	e75f      	b.n	8009a62 <__ieee754_rem_pio2+0x17a>
 8009ba2:	4a1b      	ldr	r2, [pc, #108]	; (8009c10 <__ieee754_rem_pio2+0x328>)
 8009ba4:	4592      	cmp	sl, r2
 8009ba6:	dd35      	ble.n	8009c14 <__ieee754_rem_pio2+0x32c>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	f7f6 fad4 	bl	8000158 <__aeabi_dsub>
 8009bb0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009bb4:	e9c4 0100 	strd	r0, r1, [r4]
 8009bb8:	e6a6      	b.n	8009908 <__ieee754_rem_pio2+0x20>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	54400000 	.word	0x54400000
 8009bc4:	3ff921fb 	.word	0x3ff921fb
 8009bc8:	1a626331 	.word	0x1a626331
 8009bcc:	3dd0b461 	.word	0x3dd0b461
 8009bd0:	1a600000 	.word	0x1a600000
 8009bd4:	3dd0b461 	.word	0x3dd0b461
 8009bd8:	2e037073 	.word	0x2e037073
 8009bdc:	3ba3198a 	.word	0x3ba3198a
 8009be0:	6dc9c883 	.word	0x6dc9c883
 8009be4:	3fe45f30 	.word	0x3fe45f30
 8009be8:	2e000000 	.word	0x2e000000
 8009bec:	3ba3198a 	.word	0x3ba3198a
 8009bf0:	252049c1 	.word	0x252049c1
 8009bf4:	397b839a 	.word	0x397b839a
 8009bf8:	3fe921fb 	.word	0x3fe921fb
 8009bfc:	4002d97b 	.word	0x4002d97b
 8009c00:	3ff921fb 	.word	0x3ff921fb
 8009c04:	413921fb 	.word	0x413921fb
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	0800acd8 	.word	0x0800acd8
 8009c10:	7fefffff 	.word	0x7fefffff
 8009c14:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009c18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009c1c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009c20:	460f      	mov	r7, r1
 8009c22:	4606      	mov	r6, r0
 8009c24:	f7f6 ff00 	bl	8000a28 <__aeabi_d2iz>
 8009c28:	f7f6 fbe4 	bl	80003f4 <__aeabi_i2d>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4630      	mov	r0, r6
 8009c32:	4639      	mov	r1, r7
 8009c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c38:	f7f6 fa8e 	bl	8000158 <__aeabi_dsub>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <__ieee754_rem_pio2+0x3d8>)
 8009c40:	f7f6 fc42 	bl	80004c8 <__aeabi_dmul>
 8009c44:	460f      	mov	r7, r1
 8009c46:	4606      	mov	r6, r0
 8009c48:	f7f6 feee 	bl	8000a28 <__aeabi_d2iz>
 8009c4c:	f7f6 fbd2 	bl	80003f4 <__aeabi_i2d>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c5c:	f7f6 fa7c 	bl	8000158 <__aeabi_dsub>
 8009c60:	2200      	movs	r2, #0
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <__ieee754_rem_pio2+0x3d8>)
 8009c64:	f7f6 fc30 	bl	80004c8 <__aeabi_dmul>
 8009c68:	f04f 0803 	mov.w	r8, #3
 8009c6c:	2600      	movs	r6, #0
 8009c6e:	2700      	movs	r7, #0
 8009c70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009c78:	4632      	mov	r2, r6
 8009c7a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009c7e:	463b      	mov	r3, r7
 8009c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8009c84:	f7f6 fe88 	bl	8000998 <__aeabi_dcmpeq>
 8009c88:	b9b8      	cbnz	r0, 8009cba <__ieee754_rem_pio2+0x3d2>
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <__ieee754_rem_pio2+0x3dc>)
 8009c8c:	462a      	mov	r2, r5
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2302      	movs	r3, #2
 8009c92:	4621      	mov	r1, r4
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	a806      	add	r0, sp, #24
 8009c98:	4643      	mov	r3, r8
 8009c9a:	f000 f97f 	bl	8009f9c <__kernel_rem_pio2>
 8009c9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	f6bf ae56 	bge.w	8009954 <__ieee754_rem_pio2+0x6c>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	68e3      	ldr	r3, [r4, #12]
 8009cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cb6:	60e3      	str	r3, [r4, #12]
 8009cb8:	e708      	b.n	8009acc <__ieee754_rem_pio2+0x1e4>
 8009cba:	46d0      	mov	r8, sl
 8009cbc:	e7dc      	b.n	8009c78 <__ieee754_rem_pio2+0x390>
 8009cbe:	bf00      	nop
 8009cc0:	41700000 	.word	0x41700000
 8009cc4:	0800ad58 	.word	0x0800ad58

08009cc8 <__ieee754_sqrt>:
 8009cc8:	4b54      	ldr	r3, [pc, #336]	; (8009e1c <__ieee754_sqrt+0x154>)
 8009cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	438b      	bics	r3, r1
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	460a      	mov	r2, r1
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	d10f      	bne.n	8009cfa <__ieee754_sqrt+0x32>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	f7f6 fbf3 	bl	80004c8 <__aeabi_dmul>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 fa37 	bl	800015c <__adddf3>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460d      	mov	r5, r1
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	dc0e      	bgt.n	8009d20 <__ieee754_sqrt+0x58>
 8009d02:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009d06:	ea5c 0707 	orrs.w	r7, ip, r7
 8009d0a:	d0f2      	beq.n	8009cf2 <__ieee754_sqrt+0x2a>
 8009d0c:	b141      	cbz	r1, 8009d20 <__ieee754_sqrt+0x58>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	f7f6 fa21 	bl	8000158 <__aeabi_dsub>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	f7f6 fcff 	bl	800071c <__aeabi_ddiv>
 8009d1e:	e7e6      	b.n	8009cee <__ieee754_sqrt+0x26>
 8009d20:	1512      	asrs	r2, r2, #20
 8009d22:	d074      	beq.n	8009e0e <__ieee754_sqrt+0x146>
 8009d24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d28:	07d5      	lsls	r5, r2, #31
 8009d2a:	f04f 0500 	mov.w	r5, #0
 8009d2e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d32:	bf48      	it	mi
 8009d34:	0fd9      	lsrmi	r1, r3, #31
 8009d36:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009d3a:	bf44      	itt	mi
 8009d3c:	005b      	lslmi	r3, r3, #1
 8009d3e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009d42:	1051      	asrs	r1, r2, #1
 8009d44:	0fda      	lsrs	r2, r3, #31
 8009d46:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	2216      	movs	r2, #22
 8009d4e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	1987      	adds	r7, r0, r6
 8009d56:	42a7      	cmp	r7, r4
 8009d58:	bfde      	ittt	le
 8009d5a:	19b8      	addle	r0, r7, r6
 8009d5c:	1be4      	suble	r4, r4, r7
 8009d5e:	19ad      	addle	r5, r5, r6
 8009d60:	0fdf      	lsrs	r7, r3, #31
 8009d62:	3a01      	subs	r2, #1
 8009d64:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d70:	d1f0      	bne.n	8009d54 <__ieee754_sqrt+0x8c>
 8009d72:	f04f 0c20 	mov.w	ip, #32
 8009d76:	4696      	mov	lr, r2
 8009d78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d7c:	4284      	cmp	r4, r0
 8009d7e:	eb06 070e 	add.w	r7, r6, lr
 8009d82:	dc02      	bgt.n	8009d8a <__ieee754_sqrt+0xc2>
 8009d84:	d112      	bne.n	8009dac <__ieee754_sqrt+0xe4>
 8009d86:	429f      	cmp	r7, r3
 8009d88:	d810      	bhi.n	8009dac <__ieee754_sqrt+0xe4>
 8009d8a:	2f00      	cmp	r7, #0
 8009d8c:	eb07 0e06 	add.w	lr, r7, r6
 8009d90:	da42      	bge.n	8009e18 <__ieee754_sqrt+0x150>
 8009d92:	f1be 0f00 	cmp.w	lr, #0
 8009d96:	db3f      	blt.n	8009e18 <__ieee754_sqrt+0x150>
 8009d98:	f100 0801 	add.w	r8, r0, #1
 8009d9c:	1a24      	subs	r4, r4, r0
 8009d9e:	4640      	mov	r0, r8
 8009da0:	429f      	cmp	r7, r3
 8009da2:	bf88      	it	hi
 8009da4:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8009da8:	1bdb      	subs	r3, r3, r7
 8009daa:	4432      	add	r2, r6
 8009dac:	0064      	lsls	r4, r4, #1
 8009dae:	f1bc 0c01 	subs.w	ip, ip, #1
 8009db2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009db6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009dba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dbe:	d1dd      	bne.n	8009d7c <__ieee754_sqrt+0xb4>
 8009dc0:	4323      	orrs	r3, r4
 8009dc2:	d006      	beq.n	8009dd2 <__ieee754_sqrt+0x10a>
 8009dc4:	1c54      	adds	r4, r2, #1
 8009dc6:	bf0b      	itete	eq
 8009dc8:	4662      	moveq	r2, ip
 8009dca:	3201      	addne	r2, #1
 8009dcc:	3501      	addeq	r5, #1
 8009dce:	f022 0201 	bicne.w	r2, r2, #1
 8009dd2:	106b      	asrs	r3, r5, #1
 8009dd4:	0852      	lsrs	r2, r2, #1
 8009dd6:	07e8      	lsls	r0, r5, #31
 8009dd8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ddc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009de0:	bf48      	it	mi
 8009de2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009de6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009dea:	4616      	mov	r6, r2
 8009dec:	e781      	b.n	8009cf2 <__ieee754_sqrt+0x2a>
 8009dee:	0adc      	lsrs	r4, r3, #11
 8009df0:	3915      	subs	r1, #21
 8009df2:	055b      	lsls	r3, r3, #21
 8009df4:	2c00      	cmp	r4, #0
 8009df6:	d0fa      	beq.n	8009dee <__ieee754_sqrt+0x126>
 8009df8:	02e6      	lsls	r6, r4, #11
 8009dfa:	d50a      	bpl.n	8009e12 <__ieee754_sqrt+0x14a>
 8009dfc:	f1c2 0020 	rsb	r0, r2, #32
 8009e00:	fa23 f000 	lsr.w	r0, r3, r0
 8009e04:	1e55      	subs	r5, r2, #1
 8009e06:	4093      	lsls	r3, r2
 8009e08:	4304      	orrs	r4, r0
 8009e0a:	1b4a      	subs	r2, r1, r5
 8009e0c:	e78a      	b.n	8009d24 <__ieee754_sqrt+0x5c>
 8009e0e:	4611      	mov	r1, r2
 8009e10:	e7f0      	b.n	8009df4 <__ieee754_sqrt+0x12c>
 8009e12:	0064      	lsls	r4, r4, #1
 8009e14:	3201      	adds	r2, #1
 8009e16:	e7ef      	b.n	8009df8 <__ieee754_sqrt+0x130>
 8009e18:	4680      	mov	r8, r0
 8009e1a:	e7bf      	b.n	8009d9c <__ieee754_sqrt+0xd4>
 8009e1c:	7ff00000 	.word	0x7ff00000

08009e20 <__kernel_cos>:
 8009e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e28:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	e9cd 2300 	strd	r2, r3, [sp]
 8009e34:	da04      	bge.n	8009e40 <__kernel_cos+0x20>
 8009e36:	f7f6 fdf7 	bl	8000a28 <__aeabi_d2iz>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f000 8086 	beq.w	8009f4c <__kernel_cos+0x12c>
 8009e40:	4642      	mov	r2, r8
 8009e42:	463b      	mov	r3, r7
 8009e44:	4640      	mov	r0, r8
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 fb3e 	bl	80004c8 <__aeabi_dmul>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4b4e      	ldr	r3, [pc, #312]	; (8009f88 <__kernel_cos+0x168>)
 8009e50:	4604      	mov	r4, r0
 8009e52:	460d      	mov	r5, r1
 8009e54:	f7f6 fb38 	bl	80004c8 <__aeabi_dmul>
 8009e58:	a33f      	add	r3, pc, #252	; (adr r3, 8009f58 <__kernel_cos+0x138>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	4682      	mov	sl, r0
 8009e60:	468b      	mov	fp, r1
 8009e62:	4620      	mov	r0, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7f6 fb2f 	bl	80004c8 <__aeabi_dmul>
 8009e6a:	a33d      	add	r3, pc, #244	; (adr r3, 8009f60 <__kernel_cos+0x140>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 f974 	bl	800015c <__adddf3>
 8009e74:	4622      	mov	r2, r4
 8009e76:	462b      	mov	r3, r5
 8009e78:	f7f6 fb26 	bl	80004c8 <__aeabi_dmul>
 8009e7c:	a33a      	add	r3, pc, #232	; (adr r3, 8009f68 <__kernel_cos+0x148>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	f7f6 f969 	bl	8000158 <__aeabi_dsub>
 8009e86:	4622      	mov	r2, r4
 8009e88:	462b      	mov	r3, r5
 8009e8a:	f7f6 fb1d 	bl	80004c8 <__aeabi_dmul>
 8009e8e:	a338      	add	r3, pc, #224	; (adr r3, 8009f70 <__kernel_cos+0x150>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f7f6 f962 	bl	800015c <__adddf3>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fb14 	bl	80004c8 <__aeabi_dmul>
 8009ea0:	a335      	add	r3, pc, #212	; (adr r3, 8009f78 <__kernel_cos+0x158>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 f957 	bl	8000158 <__aeabi_dsub>
 8009eaa:	4622      	mov	r2, r4
 8009eac:	462b      	mov	r3, r5
 8009eae:	f7f6 fb0b 	bl	80004c8 <__aeabi_dmul>
 8009eb2:	a333      	add	r3, pc, #204	; (adr r3, 8009f80 <__kernel_cos+0x160>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 f950 	bl	800015c <__adddf3>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	f7f6 fb02 	bl	80004c8 <__aeabi_dmul>
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	f7f6 fafe 	bl	80004c8 <__aeabi_dmul>
 8009ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 faf6 	bl	80004c8 <__aeabi_dmul>
 8009edc:	460b      	mov	r3, r1
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7f6 f938 	bl	8000158 <__aeabi_dsub>
 8009ee8:	4b28      	ldr	r3, [pc, #160]	; (8009f8c <__kernel_cos+0x16c>)
 8009eea:	4680      	mov	r8, r0
 8009eec:	429e      	cmp	r6, r3
 8009eee:	4689      	mov	r9, r1
 8009ef0:	dc0e      	bgt.n	8009f10 <__kernel_cos+0xf0>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	4659      	mov	r1, fp
 8009efa:	f7f6 f92d 	bl	8000158 <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	2000      	movs	r0, #0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4922      	ldr	r1, [pc, #136]	; (8009f90 <__kernel_cos+0x170>)
 8009f06:	f7f6 f927 	bl	8000158 <__aeabi_dsub>
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f10:	2400      	movs	r4, #0
 8009f12:	4b20      	ldr	r3, [pc, #128]	; (8009f94 <__kernel_cos+0x174>)
 8009f14:	4622      	mov	r2, r4
 8009f16:	429e      	cmp	r6, r3
 8009f18:	bfcc      	ite	gt
 8009f1a:	4d1f      	ldrgt	r5, [pc, #124]	; (8009f98 <__kernel_cos+0x178>)
 8009f1c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009f20:	462b      	mov	r3, r5
 8009f22:	2000      	movs	r0, #0
 8009f24:	491a      	ldr	r1, [pc, #104]	; (8009f90 <__kernel_cos+0x170>)
 8009f26:	f7f6 f917 	bl	8000158 <__aeabi_dsub>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	462b      	mov	r3, r5
 8009f32:	4650      	mov	r0, sl
 8009f34:	4659      	mov	r1, fp
 8009f36:	f7f6 f90f 	bl	8000158 <__aeabi_dsub>
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	f7f6 f90b 	bl	8000158 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	e7dc      	b.n	8009f06 <__kernel_cos+0xe6>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	4910      	ldr	r1, [pc, #64]	; (8009f90 <__kernel_cos+0x170>)
 8009f50:	e7db      	b.n	8009f0a <__kernel_cos+0xea>
 8009f52:	bf00      	nop
 8009f54:	f3af 8000 	nop.w
 8009f58:	be8838d4 	.word	0xbe8838d4
 8009f5c:	bda8fae9 	.word	0xbda8fae9
 8009f60:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f64:	3e21ee9e 	.word	0x3e21ee9e
 8009f68:	809c52ad 	.word	0x809c52ad
 8009f6c:	3e927e4f 	.word	0x3e927e4f
 8009f70:	19cb1590 	.word	0x19cb1590
 8009f74:	3efa01a0 	.word	0x3efa01a0
 8009f78:	16c15177 	.word	0x16c15177
 8009f7c:	3f56c16c 	.word	0x3f56c16c
 8009f80:	5555554c 	.word	0x5555554c
 8009f84:	3fa55555 	.word	0x3fa55555
 8009f88:	3fe00000 	.word	0x3fe00000
 8009f8c:	3fd33332 	.word	0x3fd33332
 8009f90:	3ff00000 	.word	0x3ff00000
 8009f94:	3fe90000 	.word	0x3fe90000
 8009f98:	3fd20000 	.word	0x3fd20000

08009f9c <__kernel_rem_pio2>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009fa4:	9307      	str	r3, [sp, #28]
 8009fa6:	9104      	str	r1, [sp, #16]
 8009fa8:	4bbf      	ldr	r3, [pc, #764]	; (800a2a8 <__kernel_rem_pio2+0x30c>)
 8009faa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009fac:	1ed4      	subs	r4, r2, #3
 8009fae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fb2:	2500      	movs	r5, #0
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	9b07      	ldr	r3, [sp, #28]
 8009fb8:	9008      	str	r0, [sp, #32]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	9306      	str	r3, [sp, #24]
 8009fbe:	2318      	movs	r3, #24
 8009fc0:	fb94 f4f3 	sdiv	r4, r4, r3
 8009fc4:	f06f 0317 	mvn.w	r3, #23
 8009fc8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009fcc:	fb04 3303 	mla	r3, r4, r3, r3
 8009fd0:	eb03 0a02 	add.w	sl, r3, r2
 8009fd4:	9a06      	ldr	r2, [sp, #24]
 8009fd6:	9b02      	ldr	r3, [sp, #8]
 8009fd8:	1aa7      	subs	r7, r4, r2
 8009fda:	eb03 0802 	add.w	r8, r3, r2
 8009fde:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	ae1e      	add	r6, sp, #120	; 0x78
 8009fea:	4545      	cmp	r5, r8
 8009fec:	dd14      	ble.n	800a018 <__kernel_rem_pio2+0x7c>
 8009fee:	2600      	movs	r6, #0
 8009ff0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8009ff4:	9b02      	ldr	r3, [sp, #8]
 8009ff6:	429e      	cmp	r6, r3
 8009ff8:	dc39      	bgt.n	800a06e <__kernel_rem_pio2+0xd2>
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	f04f 0800 	mov.w	r8, #0
 800a000:	3b08      	subs	r3, #8
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	9b07      	ldr	r3, [sp, #28]
 800a006:	f04f 0900 	mov.w	r9, #0
 800a00a:	199d      	adds	r5, r3, r6
 800a00c:	ab20      	add	r3, sp, #128	; 0x80
 800a00e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	2700      	movs	r7, #0
 800a016:	e023      	b.n	800a060 <__kernel_rem_pio2+0xc4>
 800a018:	42ef      	cmn	r7, r5
 800a01a:	d40b      	bmi.n	800a034 <__kernel_rem_pio2+0x98>
 800a01c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a020:	e9cd 2300 	strd	r2, r3, [sp]
 800a024:	f7f6 f9e6 	bl	80003f4 <__aeabi_i2d>
 800a028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a02c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800a030:	3501      	adds	r5, #1
 800a032:	e7da      	b.n	8009fea <__kernel_rem_pio2+0x4e>
 800a034:	4610      	mov	r0, r2
 800a036:	4619      	mov	r1, r3
 800a038:	e7f8      	b.n	800a02c <__kernel_rem_pio2+0x90>
 800a03a:	9905      	ldr	r1, [sp, #20]
 800a03c:	9d00      	ldr	r5, [sp, #0]
 800a03e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a042:	9105      	str	r1, [sp, #20]
 800a044:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a048:	9500      	str	r5, [sp, #0]
 800a04a:	f7f6 fa3d 	bl	80004c8 <__aeabi_dmul>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f881 	bl	800015c <__adddf3>
 800a05a:	4680      	mov	r8, r0
 800a05c:	4689      	mov	r9, r1
 800a05e:	3701      	adds	r7, #1
 800a060:	9b06      	ldr	r3, [sp, #24]
 800a062:	429f      	cmp	r7, r3
 800a064:	dde9      	ble.n	800a03a <__kernel_rem_pio2+0x9e>
 800a066:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a06a:	3601      	adds	r6, #1
 800a06c:	e7c2      	b.n	8009ff4 <__kernel_rem_pio2+0x58>
 800a06e:	9b02      	ldr	r3, [sp, #8]
 800a070:	aa0c      	add	r2, sp, #48	; 0x30
 800a072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a076:	930b      	str	r3, [sp, #44]	; 0x2c
 800a078:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a07a:	9f02      	ldr	r7, [sp, #8]
 800a07c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a080:	930a      	str	r3, [sp, #40]	; 0x28
 800a082:	2600      	movs	r6, #0
 800a084:	ab98      	add	r3, sp, #608	; 0x260
 800a086:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a08a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a08e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a092:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a096:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a09a:	ab98      	add	r3, sp, #608	; 0x260
 800a09c:	445b      	add	r3, fp
 800a09e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800a0a2:	1bbb      	subs	r3, r7, r6
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dc71      	bgt.n	800a18c <__kernel_rem_pio2+0x1f0>
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f000 fc93 	bl	800a9d8 <scalbn>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	f7f6 fa04 	bl	80004c8 <__aeabi_dmul>
 800a0c0:	f000 fb72 	bl	800a7a8 <floor>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4b79      	ldr	r3, [pc, #484]	; (800a2ac <__kernel_rem_pio2+0x310>)
 800a0c8:	f7f6 f9fe 	bl	80004c8 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 f840 	bl	8000158 <__aeabi_dsub>
 800a0d8:	460d      	mov	r5, r1
 800a0da:	4604      	mov	r4, r0
 800a0dc:	f7f6 fca4 	bl	8000a28 <__aeabi_d2iz>
 800a0e0:	9005      	str	r0, [sp, #20]
 800a0e2:	f7f6 f987 	bl	80003f4 <__aeabi_i2d>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7f6 f833 	bl	8000158 <__aeabi_dsub>
 800a0f2:	f1ba 0f00 	cmp.w	sl, #0
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	dd6c      	ble.n	800a1d6 <__kernel_rem_pio2+0x23a>
 800a0fc:	1e7a      	subs	r2, r7, #1
 800a0fe:	ab0c      	add	r3, sp, #48	; 0x30
 800a100:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a104:	f1ca 0118 	rsb	r1, sl, #24
 800a108:	9c05      	ldr	r4, [sp, #20]
 800a10a:	fa40 f301 	asr.w	r3, r0, r1
 800a10e:	441c      	add	r4, r3
 800a110:	408b      	lsls	r3, r1
 800a112:	1ac0      	subs	r0, r0, r3
 800a114:	ab0c      	add	r3, sp, #48	; 0x30
 800a116:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a11a:	f1ca 0317 	rsb	r3, sl, #23
 800a11e:	9405      	str	r4, [sp, #20]
 800a120:	fa40 f303 	asr.w	r3, r0, r3
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	9b00      	ldr	r3, [sp, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dd62      	ble.n	800a1f2 <__kernel_rem_pio2+0x256>
 800a12c:	2200      	movs	r2, #0
 800a12e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a132:	4614      	mov	r4, r2
 800a134:	9b05      	ldr	r3, [sp, #20]
 800a136:	3301      	adds	r3, #1
 800a138:	9305      	str	r3, [sp, #20]
 800a13a:	4297      	cmp	r7, r2
 800a13c:	f300 809f 	bgt.w	800a27e <__kernel_rem_pio2+0x2e2>
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	dd07      	ble.n	800a156 <__kernel_rem_pio2+0x1ba>
 800a146:	f1ba 0f01 	cmp.w	sl, #1
 800a14a:	f000 80bb 	beq.w	800a2c4 <__kernel_rem_pio2+0x328>
 800a14e:	f1ba 0f02 	cmp.w	sl, #2
 800a152:	f000 80c1 	beq.w	800a2d8 <__kernel_rem_pio2+0x33c>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d14a      	bne.n	800a1f2 <__kernel_rem_pio2+0x256>
 800a15c:	4642      	mov	r2, r8
 800a15e:	464b      	mov	r3, r9
 800a160:	2000      	movs	r0, #0
 800a162:	4953      	ldr	r1, [pc, #332]	; (800a2b0 <__kernel_rem_pio2+0x314>)
 800a164:	f7f5 fff8 	bl	8000158 <__aeabi_dsub>
 800a168:	4680      	mov	r8, r0
 800a16a:	4689      	mov	r9, r1
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	d040      	beq.n	800a1f2 <__kernel_rem_pio2+0x256>
 800a170:	4652      	mov	r2, sl
 800a172:	2000      	movs	r0, #0
 800a174:	494e      	ldr	r1, [pc, #312]	; (800a2b0 <__kernel_rem_pio2+0x314>)
 800a176:	f000 fc2f 	bl	800a9d8 <scalbn>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4640      	mov	r0, r8
 800a180:	4649      	mov	r1, r9
 800a182:	f7f5 ffe9 	bl	8000158 <__aeabi_dsub>
 800a186:	4680      	mov	r8, r0
 800a188:	4689      	mov	r9, r1
 800a18a:	e032      	b.n	800a1f2 <__kernel_rem_pio2+0x256>
 800a18c:	2200      	movs	r2, #0
 800a18e:	4b49      	ldr	r3, [pc, #292]	; (800a2b4 <__kernel_rem_pio2+0x318>)
 800a190:	4640      	mov	r0, r8
 800a192:	4649      	mov	r1, r9
 800a194:	f7f6 f998 	bl	80004c8 <__aeabi_dmul>
 800a198:	f7f6 fc46 	bl	8000a28 <__aeabi_d2iz>
 800a19c:	f7f6 f92a 	bl	80003f4 <__aeabi_i2d>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4b45      	ldr	r3, [pc, #276]	; (800a2b8 <__kernel_rem_pio2+0x31c>)
 800a1a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1a8:	f7f6 f98e 	bl	80004c8 <__aeabi_dmul>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	f7f5 ffd0 	bl	8000158 <__aeabi_dsub>
 800a1b8:	f7f6 fc36 	bl	8000a28 <__aeabi_d2iz>
 800a1bc:	ab0c      	add	r3, sp, #48	; 0x30
 800a1be:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a1c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ca:	f7f5 ffc7 	bl	800015c <__adddf3>
 800a1ce:	3601      	adds	r6, #1
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	e765      	b.n	800a0a2 <__kernel_rem_pio2+0x106>
 800a1d6:	d105      	bne.n	800a1e4 <__kernel_rem_pio2+0x248>
 800a1d8:	1e7b      	subs	r3, r7, #1
 800a1da:	aa0c      	add	r2, sp, #48	; 0x30
 800a1dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a1e0:	15c3      	asrs	r3, r0, #23
 800a1e2:	e79f      	b.n	800a124 <__kernel_rem_pio2+0x188>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4b35      	ldr	r3, [pc, #212]	; (800a2bc <__kernel_rem_pio2+0x320>)
 800a1e8:	f7f6 fbf4 	bl	80009d4 <__aeabi_dcmpge>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d143      	bne.n	800a278 <__kernel_rem_pio2+0x2dc>
 800a1f0:	9000      	str	r0, [sp, #0]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	f7f6 fbcd 	bl	8000998 <__aeabi_dcmpeq>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f000 80c3 	beq.w	800a38a <__kernel_rem_pio2+0x3ee>
 800a204:	1e7c      	subs	r4, r7, #1
 800a206:	4623      	mov	r3, r4
 800a208:	2200      	movs	r2, #0
 800a20a:	9902      	ldr	r1, [sp, #8]
 800a20c:	428b      	cmp	r3, r1
 800a20e:	da6a      	bge.n	800a2e6 <__kernel_rem_pio2+0x34a>
 800a210:	2a00      	cmp	r2, #0
 800a212:	f000 8084 	beq.w	800a31e <__kernel_rem_pio2+0x382>
 800a216:	ab0c      	add	r3, sp, #48	; 0x30
 800a218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a21c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 80b0 	beq.w	800a386 <__kernel_rem_pio2+0x3ea>
 800a226:	4652      	mov	r2, sl
 800a228:	2000      	movs	r0, #0
 800a22a:	4921      	ldr	r1, [pc, #132]	; (800a2b0 <__kernel_rem_pio2+0x314>)
 800a22c:	f000 fbd4 	bl	800a9d8 <scalbn>
 800a230:	4625      	mov	r5, r4
 800a232:	4606      	mov	r6, r0
 800a234:	460f      	mov	r7, r1
 800a236:	f04f 0a00 	mov.w	sl, #0
 800a23a:	00e3      	lsls	r3, r4, #3
 800a23c:	aa98      	add	r2, sp, #608	; 0x260
 800a23e:	eb02 0803 	add.w	r8, r2, r3
 800a242:	f8df b070 	ldr.w	fp, [pc, #112]	; 800a2b4 <__kernel_rem_pio2+0x318>
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800a24c:	2d00      	cmp	r5, #0
 800a24e:	f280 80d2 	bge.w	800a3f6 <__kernel_rem_pio2+0x45a>
 800a252:	2500      	movs	r5, #0
 800a254:	9a06      	ldr	r2, [sp, #24]
 800a256:	ab98      	add	r3, sp, #608	; 0x260
 800a258:	189e      	adds	r6, r3, r2
 800a25a:	3ea8      	subs	r6, #168	; 0xa8
 800a25c:	1b63      	subs	r3, r4, r5
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f2c0 80f9 	blt.w	800a456 <__kernel_rem_pio2+0x4ba>
 800a264:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a2c0 <__kernel_rem_pio2+0x324>
 800a268:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800a26c:	f04f 0a00 	mov.w	sl, #0
 800a270:	f04f 0b00 	mov.w	fp, #0
 800a274:	2700      	movs	r7, #0
 800a276:	e0e2      	b.n	800a43e <__kernel_rem_pio2+0x4a2>
 800a278:	2302      	movs	r3, #2
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	e756      	b.n	800a12c <__kernel_rem_pio2+0x190>
 800a27e:	ab0c      	add	r3, sp, #48	; 0x30
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	b94c      	cbnz	r4, 800a29a <__kernel_rem_pio2+0x2fe>
 800a286:	b12b      	cbz	r3, 800a294 <__kernel_rem_pio2+0x2f8>
 800a288:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a28c:	a80c      	add	r0, sp, #48	; 0x30
 800a28e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a292:	2301      	movs	r3, #1
 800a294:	3201      	adds	r2, #1
 800a296:	461c      	mov	r4, r3
 800a298:	e74f      	b.n	800a13a <__kernel_rem_pio2+0x19e>
 800a29a:	1acb      	subs	r3, r1, r3
 800a29c:	a80c      	add	r0, sp, #48	; 0x30
 800a29e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	e7f6      	b.n	800a294 <__kernel_rem_pio2+0x2f8>
 800a2a6:	bf00      	nop
 800a2a8:	0800aea0 	.word	0x0800aea0
 800a2ac:	40200000 	.word	0x40200000
 800a2b0:	3ff00000 	.word	0x3ff00000
 800a2b4:	3e700000 	.word	0x3e700000
 800a2b8:	41700000 	.word	0x41700000
 800a2bc:	3fe00000 	.word	0x3fe00000
 800a2c0:	0800ae58 	.word	0x0800ae58
 800a2c4:	1e7a      	subs	r2, r7, #1
 800a2c6:	ab0c      	add	r3, sp, #48	; 0x30
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2d0:	a90c      	add	r1, sp, #48	; 0x30
 800a2d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a2d6:	e73e      	b.n	800a156 <__kernel_rem_pio2+0x1ba>
 800a2d8:	1e7a      	subs	r2, r7, #1
 800a2da:	ab0c      	add	r3, sp, #48	; 0x30
 800a2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2e4:	e7f4      	b.n	800a2d0 <__kernel_rem_pio2+0x334>
 800a2e6:	a90c      	add	r1, sp, #48	; 0x30
 800a2e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	e78b      	b.n	800a20a <__kernel_rem_pio2+0x26e>
 800a2f2:	3401      	adds	r4, #1
 800a2f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d0fa      	beq.n	800a2f2 <__kernel_rem_pio2+0x356>
 800a2fc:	ab98      	add	r3, sp, #608	; 0x260
 800a2fe:	449b      	add	fp, r3
 800a300:	9b07      	ldr	r3, [sp, #28]
 800a302:	1c7e      	adds	r6, r7, #1
 800a304:	19dd      	adds	r5, r3, r7
 800a306:	ab98      	add	r3, sp, #608	; 0x260
 800a308:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a30c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800a310:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800a314:	443c      	add	r4, r7
 800a316:	42b4      	cmp	r4, r6
 800a318:	da04      	bge.n	800a324 <__kernel_rem_pio2+0x388>
 800a31a:	4627      	mov	r7, r4
 800a31c:	e6b1      	b.n	800a082 <__kernel_rem_pio2+0xe6>
 800a31e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a320:	2401      	movs	r4, #1
 800a322:	e7e7      	b.n	800a2f4 <__kernel_rem_pio2+0x358>
 800a324:	f105 0308 	add.w	r3, r5, #8
 800a328:	9309      	str	r3, [sp, #36]	; 0x24
 800a32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32c:	2700      	movs	r7, #0
 800a32e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a332:	f7f6 f85f 	bl	80003f4 <__aeabi_i2d>
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	9b08      	ldr	r3, [sp, #32]
 800a340:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a344:	3b08      	subs	r3, #8
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	f105 0310 	add.w	r3, r5, #16
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	9b06      	ldr	r3, [sp, #24]
 800a350:	429f      	cmp	r7, r3
 800a352:	dd04      	ble.n	800a35e <__kernel_rem_pio2+0x3c2>
 800a354:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a358:	3601      	adds	r6, #1
 800a35a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a35c:	e7db      	b.n	800a316 <__kernel_rem_pio2+0x37a>
 800a35e:	9905      	ldr	r1, [sp, #20]
 800a360:	9d00      	ldr	r5, [sp, #0]
 800a362:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a366:	9105      	str	r1, [sp, #20]
 800a368:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a36c:	9500      	str	r5, [sp, #0]
 800a36e:	f7f6 f8ab 	bl	80004c8 <__aeabi_dmul>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4640      	mov	r0, r8
 800a378:	4649      	mov	r1, r9
 800a37a:	f7f5 feef 	bl	800015c <__adddf3>
 800a37e:	3701      	adds	r7, #1
 800a380:	4680      	mov	r8, r0
 800a382:	4689      	mov	r9, r1
 800a384:	e7e3      	b.n	800a34e <__kernel_rem_pio2+0x3b2>
 800a386:	3c01      	subs	r4, #1
 800a388:	e745      	b.n	800a216 <__kernel_rem_pio2+0x27a>
 800a38a:	f1ca 0200 	rsb	r2, sl, #0
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f000 fb21 	bl	800a9d8 <scalbn>
 800a396:	2200      	movs	r2, #0
 800a398:	4ba3      	ldr	r3, [pc, #652]	; (800a628 <__kernel_rem_pio2+0x68c>)
 800a39a:	4604      	mov	r4, r0
 800a39c:	460d      	mov	r5, r1
 800a39e:	f7f6 fb19 	bl	80009d4 <__aeabi_dcmpge>
 800a3a2:	b1f8      	cbz	r0, 800a3e4 <__kernel_rem_pio2+0x448>
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4ba1      	ldr	r3, [pc, #644]	; (800a62c <__kernel_rem_pio2+0x690>)
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f7f6 f88c 	bl	80004c8 <__aeabi_dmul>
 800a3b0:	f7f6 fb3a 	bl	8000a28 <__aeabi_d2iz>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	f7f6 f81d 	bl	80003f4 <__aeabi_i2d>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4b9a      	ldr	r3, [pc, #616]	; (800a628 <__kernel_rem_pio2+0x68c>)
 800a3be:	f7f6 f883 	bl	80004c8 <__aeabi_dmul>
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f7f5 fec5 	bl	8000158 <__aeabi_dsub>
 800a3ce:	f7f6 fb2b 	bl	8000a28 <__aeabi_d2iz>
 800a3d2:	1c7c      	adds	r4, r7, #1
 800a3d4:	ab0c      	add	r3, sp, #48	; 0x30
 800a3d6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a3da:	f10a 0a18 	add.w	sl, sl, #24
 800a3de:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a3e2:	e720      	b.n	800a226 <__kernel_rem_pio2+0x28a>
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 fb1e 	bl	8000a28 <__aeabi_d2iz>
 800a3ec:	ab0c      	add	r3, sp, #48	; 0x30
 800a3ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a3f2:	463c      	mov	r4, r7
 800a3f4:	e717      	b.n	800a226 <__kernel_rem_pio2+0x28a>
 800a3f6:	ab0c      	add	r3, sp, #48	; 0x30
 800a3f8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3fc:	f7f5 fffa 	bl	80003f4 <__aeabi_i2d>
 800a400:	4632      	mov	r2, r6
 800a402:	463b      	mov	r3, r7
 800a404:	f7f6 f860 	bl	80004c8 <__aeabi_dmul>
 800a408:	4652      	mov	r2, sl
 800a40a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a40e:	465b      	mov	r3, fp
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f6 f858 	bl	80004c8 <__aeabi_dmul>
 800a418:	3d01      	subs	r5, #1
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	e715      	b.n	800a24c <__kernel_rem_pio2+0x2b0>
 800a420:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a424:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a428:	f7f6 f84e 	bl	80004c8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	f7f5 fe92 	bl	800015c <__adddf3>
 800a438:	4682      	mov	sl, r0
 800a43a:	468b      	mov	fp, r1
 800a43c:	3701      	adds	r7, #1
 800a43e:	9b02      	ldr	r3, [sp, #8]
 800a440:	429f      	cmp	r7, r3
 800a442:	dc01      	bgt.n	800a448 <__kernel_rem_pio2+0x4ac>
 800a444:	42bd      	cmp	r5, r7
 800a446:	daeb      	bge.n	800a420 <__kernel_rem_pio2+0x484>
 800a448:	ab48      	add	r3, sp, #288	; 0x120
 800a44a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a44e:	e9c3 ab00 	strd	sl, fp, [r3]
 800a452:	3501      	adds	r5, #1
 800a454:	e702      	b.n	800a25c <__kernel_rem_pio2+0x2c0>
 800a456:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d86c      	bhi.n	800a536 <__kernel_rem_pio2+0x59a>
 800a45c:	e8df f003 	tbb	[pc, r3]
 800a460:	022f2f59 	.word	0x022f2f59
 800a464:	9a06      	ldr	r2, [sp, #24]
 800a466:	ab48      	add	r3, sp, #288	; 0x120
 800a468:	189d      	adds	r5, r3, r2
 800a46a:	46aa      	mov	sl, r5
 800a46c:	46a3      	mov	fp, r4
 800a46e:	f1bb 0f00 	cmp.w	fp, #0
 800a472:	f300 8087 	bgt.w	800a584 <__kernel_rem_pio2+0x5e8>
 800a476:	46a2      	mov	sl, r4
 800a478:	f1ba 0f01 	cmp.w	sl, #1
 800a47c:	f300 809f 	bgt.w	800a5be <__kernel_rem_pio2+0x622>
 800a480:	2700      	movs	r7, #0
 800a482:	463e      	mov	r6, r7
 800a484:	9d06      	ldr	r5, [sp, #24]
 800a486:	ab48      	add	r3, sp, #288	; 0x120
 800a488:	3508      	adds	r5, #8
 800a48a:	441d      	add	r5, r3
 800a48c:	2c01      	cmp	r4, #1
 800a48e:	f300 80b3 	bgt.w	800a5f8 <__kernel_rem_pio2+0x65c>
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800a496:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a498:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a49a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f040 80b5 	bne.w	800a60c <__kernel_rem_pio2+0x670>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	9804      	ldr	r0, [sp, #16]
 800a4a8:	e9c0 2300 	strd	r2, r3, [r0]
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4633      	mov	r3, r6
 800a4b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a4bc:	e03b      	b.n	800a536 <__kernel_rem_pio2+0x59a>
 800a4be:	f04f 0c00 	mov.w	ip, #0
 800a4c2:	4626      	mov	r6, r4
 800a4c4:	4667      	mov	r7, ip
 800a4c6:	9d06      	ldr	r5, [sp, #24]
 800a4c8:	ab48      	add	r3, sp, #288	; 0x120
 800a4ca:	3508      	adds	r5, #8
 800a4cc:	441d      	add	r5, r3
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	da42      	bge.n	800a558 <__kernel_rem_pio2+0x5bc>
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d049      	beq.n	800a56c <__kernel_rem_pio2+0x5d0>
 800a4d8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a4dc:	4662      	mov	r2, ip
 800a4de:	460b      	mov	r3, r1
 800a4e0:	9904      	ldr	r1, [sp, #16]
 800a4e2:	2601      	movs	r6, #1
 800a4e4:	e9c1 2300 	strd	r2, r3, [r1]
 800a4e8:	a948      	add	r1, sp, #288	; 0x120
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4f0:	f7f5 fe32 	bl	8000158 <__aeabi_dsub>
 800a4f4:	4684      	mov	ip, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	ad48      	add	r5, sp, #288	; 0x120
 800a4fa:	42b4      	cmp	r4, r6
 800a4fc:	da38      	bge.n	800a570 <__kernel_rem_pio2+0x5d4>
 800a4fe:	9b00      	ldr	r3, [sp, #0]
 800a500:	b10b      	cbz	r3, 800a506 <__kernel_rem_pio2+0x56a>
 800a502:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a506:	4662      	mov	r2, ip
 800a508:	463b      	mov	r3, r7
 800a50a:	9904      	ldr	r1, [sp, #16]
 800a50c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a510:	e011      	b.n	800a536 <__kernel_rem_pio2+0x59a>
 800a512:	2700      	movs	r7, #0
 800a514:	463d      	mov	r5, r7
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	aa98      	add	r2, sp, #608	; 0x260
 800a51a:	4413      	add	r3, r2
 800a51c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800a520:	2c00      	cmp	r4, #0
 800a522:	da0f      	bge.n	800a544 <__kernel_rem_pio2+0x5a8>
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	b10b      	cbz	r3, 800a52c <__kernel_rem_pio2+0x590>
 800a528:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a52c:	463a      	mov	r2, r7
 800a52e:	462b      	mov	r3, r5
 800a530:	9904      	ldr	r1, [sp, #16]
 800a532:	e9c1 2300 	strd	r2, r3, [r1]
 800a536:	9b05      	ldr	r3, [sp, #20]
 800a538:	f003 0007 	and.w	r0, r3, #7
 800a53c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	4638      	mov	r0, r7
 800a546:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f5 fe06 	bl	800015c <__adddf3>
 800a550:	3c01      	subs	r4, #1
 800a552:	4607      	mov	r7, r0
 800a554:	460d      	mov	r5, r1
 800a556:	e7e3      	b.n	800a520 <__kernel_rem_pio2+0x584>
 800a558:	4660      	mov	r0, ip
 800a55a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a55e:	4639      	mov	r1, r7
 800a560:	f7f5 fdfc 	bl	800015c <__adddf3>
 800a564:	3e01      	subs	r6, #1
 800a566:	4684      	mov	ip, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	e7b0      	b.n	800a4ce <__kernel_rem_pio2+0x532>
 800a56c:	4639      	mov	r1, r7
 800a56e:	e7b5      	b.n	800a4dc <__kernel_rem_pio2+0x540>
 800a570:	4660      	mov	r0, ip
 800a572:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a576:	4639      	mov	r1, r7
 800a578:	f7f5 fdf0 	bl	800015c <__adddf3>
 800a57c:	3601      	adds	r6, #1
 800a57e:	4684      	mov	ip, r0
 800a580:	460f      	mov	r7, r1
 800a582:	e7ba      	b.n	800a4fa <__kernel_rem_pio2+0x55e>
 800a584:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800a588:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800a58c:	4640      	mov	r0, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a594:	f7f5 fde2 	bl	800015c <__adddf3>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	f7f5 fdd8 	bl	8000158 <__aeabi_dsub>
 800a5a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ac:	f7f5 fdd6 	bl	800015c <__adddf3>
 800a5b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5b8:	e9ca 6700 	strd	r6, r7, [sl]
 800a5bc:	e757      	b.n	800a46e <__kernel_rem_pio2+0x4d2>
 800a5be:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800a5c2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5ce:	f7f5 fdc5 	bl	800015c <__adddf3>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4689      	mov	r9, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fdbb 	bl	8000158 <__aeabi_dsub>
 800a5e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5e6:	f7f5 fdb9 	bl	800015c <__adddf3>
 800a5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a5f2:	e9c5 8900 	strd	r8, r9, [r5]
 800a5f6:	e73f      	b.n	800a478 <__kernel_rem_pio2+0x4dc>
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a5fe:	4631      	mov	r1, r6
 800a600:	f7f5 fdac 	bl	800015c <__adddf3>
 800a604:	3c01      	subs	r4, #1
 800a606:	4607      	mov	r7, r0
 800a608:	460e      	mov	r6, r1
 800a60a:	e73f      	b.n	800a48c <__kernel_rem_pio2+0x4f0>
 800a60c:	9b04      	ldr	r3, [sp, #16]
 800a60e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a612:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a616:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a61a:	601d      	str	r5, [r3, #0]
 800a61c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a620:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a624:	615e      	str	r6, [r3, #20]
 800a626:	e786      	b.n	800a536 <__kernel_rem_pio2+0x59a>
 800a628:	41700000 	.word	0x41700000
 800a62c:	3e700000 	.word	0x3e700000

0800a630 <__kernel_sin>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	b086      	sub	sp, #24
 800a636:	e9cd 2300 	strd	r2, r3, [sp]
 800a63a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a63e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a642:	4682      	mov	sl, r0
 800a644:	460c      	mov	r4, r1
 800a646:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a648:	da03      	bge.n	800a652 <__kernel_sin+0x22>
 800a64a:	f7f6 f9ed 	bl	8000a28 <__aeabi_d2iz>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d050      	beq.n	800a6f4 <__kernel_sin+0xc4>
 800a652:	4652      	mov	r2, sl
 800a654:	4623      	mov	r3, r4
 800a656:	4650      	mov	r0, sl
 800a658:	4621      	mov	r1, r4
 800a65a:	f7f5 ff35 	bl	80004c8 <__aeabi_dmul>
 800a65e:	4606      	mov	r6, r0
 800a660:	460f      	mov	r7, r1
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	4650      	mov	r0, sl
 800a668:	4621      	mov	r1, r4
 800a66a:	f7f5 ff2d 	bl	80004c8 <__aeabi_dmul>
 800a66e:	a33e      	add	r3, pc, #248	; (adr r3, 800a768 <__kernel_sin+0x138>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	4680      	mov	r8, r0
 800a676:	4689      	mov	r9, r1
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7f5 ff24 	bl	80004c8 <__aeabi_dmul>
 800a680:	a33b      	add	r3, pc, #236	; (adr r3, 800a770 <__kernel_sin+0x140>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	f7f5 fd67 	bl	8000158 <__aeabi_dsub>
 800a68a:	4632      	mov	r2, r6
 800a68c:	463b      	mov	r3, r7
 800a68e:	f7f5 ff1b 	bl	80004c8 <__aeabi_dmul>
 800a692:	a339      	add	r3, pc, #228	; (adr r3, 800a778 <__kernel_sin+0x148>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f7f5 fd60 	bl	800015c <__adddf3>
 800a69c:	4632      	mov	r2, r6
 800a69e:	463b      	mov	r3, r7
 800a6a0:	f7f5 ff12 	bl	80004c8 <__aeabi_dmul>
 800a6a4:	a336      	add	r3, pc, #216	; (adr r3, 800a780 <__kernel_sin+0x150>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 fd55 	bl	8000158 <__aeabi_dsub>
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	463b      	mov	r3, r7
 800a6b2:	f7f5 ff09 	bl	80004c8 <__aeabi_dmul>
 800a6b6:	a334      	add	r3, pc, #208	; (adr r3, 800a788 <__kernel_sin+0x158>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f7f5 fd4e 	bl	800015c <__adddf3>
 800a6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c4:	b9dd      	cbnz	r5, 800a6fe <__kernel_sin+0xce>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	f7f5 fefb 	bl	80004c8 <__aeabi_dmul>
 800a6d2:	a32f      	add	r3, pc, #188	; (adr r3, 800a790 <__kernel_sin+0x160>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fd3e 	bl	8000158 <__aeabi_dsub>
 800a6dc:	4642      	mov	r2, r8
 800a6de:	464b      	mov	r3, r9
 800a6e0:	f7f5 fef2 	bl	80004c8 <__aeabi_dmul>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	f7f5 fd36 	bl	800015c <__adddf3>
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	b006      	add	sp, #24
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	2200      	movs	r2, #0
 800a700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a704:	4b24      	ldr	r3, [pc, #144]	; (800a798 <__kernel_sin+0x168>)
 800a706:	f7f5 fedf 	bl	80004c8 <__aeabi_dmul>
 800a70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	f7f5 fed7 	bl	80004c8 <__aeabi_dmul>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a722:	f7f5 fd19 	bl	8000158 <__aeabi_dsub>
 800a726:	4632      	mov	r2, r6
 800a728:	463b      	mov	r3, r7
 800a72a:	f7f5 fecd 	bl	80004c8 <__aeabi_dmul>
 800a72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a732:	f7f5 fd11 	bl	8000158 <__aeabi_dsub>
 800a736:	a316      	add	r3, pc, #88	; (adr r3, 800a790 <__kernel_sin+0x160>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	4640      	mov	r0, r8
 800a742:	4649      	mov	r1, r9
 800a744:	f7f5 fec0 	bl	80004c8 <__aeabi_dmul>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f5 fd04 	bl	800015c <__adddf3>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4650      	mov	r0, sl
 800a75a:	4621      	mov	r1, r4
 800a75c:	f7f5 fcfc 	bl	8000158 <__aeabi_dsub>
 800a760:	e7c6      	b.n	800a6f0 <__kernel_sin+0xc0>
 800a762:	bf00      	nop
 800a764:	f3af 8000 	nop.w
 800a768:	5acfd57c 	.word	0x5acfd57c
 800a76c:	3de5d93a 	.word	0x3de5d93a
 800a770:	8a2b9ceb 	.word	0x8a2b9ceb
 800a774:	3e5ae5e6 	.word	0x3e5ae5e6
 800a778:	57b1fe7d 	.word	0x57b1fe7d
 800a77c:	3ec71de3 	.word	0x3ec71de3
 800a780:	19c161d5 	.word	0x19c161d5
 800a784:	3f2a01a0 	.word	0x3f2a01a0
 800a788:	1110f8a6 	.word	0x1110f8a6
 800a78c:	3f811111 	.word	0x3f811111
 800a790:	55555549 	.word	0x55555549
 800a794:	3fc55555 	.word	0x3fc55555
 800a798:	3fe00000 	.word	0x3fe00000

0800a79c <finite>:
 800a79c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a7a0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a7a4:	0fc0      	lsrs	r0, r0, #31
 800a7a6:	4770      	bx	lr

0800a7a8 <floor>:
 800a7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a7b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a7b4:	2e13      	cmp	r6, #19
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4605      	mov	r5, r0
 800a7be:	dc35      	bgt.n	800a82c <floor+0x84>
 800a7c0:	2e00      	cmp	r6, #0
 800a7c2:	da16      	bge.n	800a7f2 <floor+0x4a>
 800a7c4:	a336      	add	r3, pc, #216	; (adr r3, 800a8a0 <floor+0xf8>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fcc7 	bl	800015c <__adddf3>
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f7f6 f909 	bl	80009e8 <__aeabi_dcmpgt>
 800a7d6:	b148      	cbz	r0, 800a7ec <floor+0x44>
 800a7d8:	2c00      	cmp	r4, #0
 800a7da:	da5b      	bge.n	800a894 <floor+0xec>
 800a7dc:	2500      	movs	r5, #0
 800a7de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a7e2:	4a31      	ldr	r2, [pc, #196]	; (800a8a8 <floor+0x100>)
 800a7e4:	433b      	orrs	r3, r7
 800a7e6:	42ab      	cmp	r3, r5
 800a7e8:	bf18      	it	ne
 800a7ea:	4614      	movne	r4, r2
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	462f      	mov	r7, r5
 800a7f0:	e026      	b.n	800a840 <floor+0x98>
 800a7f2:	4a2e      	ldr	r2, [pc, #184]	; (800a8ac <floor+0x104>)
 800a7f4:	fa42 f806 	asr.w	r8, r2, r6
 800a7f8:	ea01 0208 	and.w	r2, r1, r8
 800a7fc:	4302      	orrs	r2, r0
 800a7fe:	d01f      	beq.n	800a840 <floor+0x98>
 800a800:	a327      	add	r3, pc, #156	; (adr r3, 800a8a0 <floor+0xf8>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 fca9 	bl	800015c <__adddf3>
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	f7f6 f8eb 	bl	80009e8 <__aeabi_dcmpgt>
 800a812:	2800      	cmp	r0, #0
 800a814:	d0ea      	beq.n	800a7ec <floor+0x44>
 800a816:	2c00      	cmp	r4, #0
 800a818:	bfbe      	ittt	lt
 800a81a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a81e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a822:	19a4      	addlt	r4, r4, r6
 800a824:	ea24 0408 	bic.w	r4, r4, r8
 800a828:	2500      	movs	r5, #0
 800a82a:	e7df      	b.n	800a7ec <floor+0x44>
 800a82c:	2e33      	cmp	r6, #51	; 0x33
 800a82e:	dd0b      	ble.n	800a848 <floor+0xa0>
 800a830:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a834:	d104      	bne.n	800a840 <floor+0x98>
 800a836:	4602      	mov	r2, r0
 800a838:	f7f5 fc90 	bl	800015c <__adddf3>
 800a83c:	4607      	mov	r7, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4638      	mov	r0, r7
 800a842:	4619      	mov	r1, r3
 800a844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a848:	f04f 32ff 	mov.w	r2, #4294967295
 800a84c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a850:	fa22 f808 	lsr.w	r8, r2, r8
 800a854:	ea18 0f00 	tst.w	r8, r0
 800a858:	d0f2      	beq.n	800a840 <floor+0x98>
 800a85a:	a311      	add	r3, pc, #68	; (adr r3, 800a8a0 <floor+0xf8>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f7f5 fc7c 	bl	800015c <__adddf3>
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	f7f6 f8be 	bl	80009e8 <__aeabi_dcmpgt>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d0bd      	beq.n	800a7ec <floor+0x44>
 800a870:	2c00      	cmp	r4, #0
 800a872:	da02      	bge.n	800a87a <floor+0xd2>
 800a874:	2e14      	cmp	r6, #20
 800a876:	d103      	bne.n	800a880 <floor+0xd8>
 800a878:	3401      	adds	r4, #1
 800a87a:	ea25 0508 	bic.w	r5, r5, r8
 800a87e:	e7b5      	b.n	800a7ec <floor+0x44>
 800a880:	2301      	movs	r3, #1
 800a882:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a886:	fa03 f606 	lsl.w	r6, r3, r6
 800a88a:	4435      	add	r5, r6
 800a88c:	42bd      	cmp	r5, r7
 800a88e:	bf38      	it	cc
 800a890:	18e4      	addcc	r4, r4, r3
 800a892:	e7f2      	b.n	800a87a <floor+0xd2>
 800a894:	2500      	movs	r5, #0
 800a896:	462c      	mov	r4, r5
 800a898:	e7a8      	b.n	800a7ec <floor+0x44>
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w
 800a8a0:	8800759c 	.word	0x8800759c
 800a8a4:	7e37e43c 	.word	0x7e37e43c
 800a8a8:	bff00000 	.word	0xbff00000
 800a8ac:	000fffff 	.word	0x000fffff

0800a8b0 <matherr>:
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	4770      	bx	lr

0800a8b4 <nan>:
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	4901      	ldr	r1, [pc, #4]	; (800a8bc <nan+0x8>)
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	7ff80000 	.word	0x7ff80000

0800a8c0 <rint>:
 800a8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8c6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a8ca:	f1bc 0f13 	cmp.w	ip, #19
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a8da:	dc5a      	bgt.n	800a992 <rint+0xd2>
 800a8dc:	f1bc 0f00 	cmp.w	ip, #0
 800a8e0:	da2b      	bge.n	800a93a <rint+0x7a>
 800a8e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a8e6:	4302      	orrs	r2, r0
 800a8e8:	d023      	beq.n	800a932 <rint+0x72>
 800a8ea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a8ee:	4302      	orrs	r2, r0
 800a8f0:	4256      	negs	r6, r2
 800a8f2:	4316      	orrs	r6, r2
 800a8f4:	0c4b      	lsrs	r3, r1, #17
 800a8f6:	0b36      	lsrs	r6, r6, #12
 800a8f8:	4934      	ldr	r1, [pc, #208]	; (800a9cc <rint+0x10c>)
 800a8fa:	045b      	lsls	r3, r3, #17
 800a8fc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a900:	ea46 0503 	orr.w	r5, r6, r3
 800a904:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a908:	4602      	mov	r2, r0
 800a90a:	462b      	mov	r3, r5
 800a90c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f5 fc22 	bl	800015c <__adddf3>
 800a918:	e9cd 0100 	strd	r0, r1, [sp]
 800a91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a920:	462b      	mov	r3, r5
 800a922:	4622      	mov	r2, r4
 800a924:	f7f5 fc18 	bl	8000158 <__aeabi_dsub>
 800a928:	4604      	mov	r4, r0
 800a92a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a92e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a932:	4620      	mov	r0, r4
 800a934:	4629      	mov	r1, r5
 800a936:	b003      	add	sp, #12
 800a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93a:	4a25      	ldr	r2, [pc, #148]	; (800a9d0 <rint+0x110>)
 800a93c:	fa42 f20c 	asr.w	r2, r2, ip
 800a940:	4011      	ands	r1, r2
 800a942:	4301      	orrs	r1, r0
 800a944:	d0f5      	beq.n	800a932 <rint+0x72>
 800a946:	0852      	lsrs	r2, r2, #1
 800a948:	ea05 0102 	and.w	r1, r5, r2
 800a94c:	ea50 0601 	orrs.w	r6, r0, r1
 800a950:	d00c      	beq.n	800a96c <rint+0xac>
 800a952:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a956:	f1bc 0f13 	cmp.w	ip, #19
 800a95a:	bf0c      	ite	eq
 800a95c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a960:	2600      	movne	r6, #0
 800a962:	ea25 0202 	bic.w	r2, r5, r2
 800a966:	fa43 f30c 	asr.w	r3, r3, ip
 800a96a:	4313      	orrs	r3, r2
 800a96c:	4917      	ldr	r1, [pc, #92]	; (800a9cc <rint+0x10c>)
 800a96e:	4632      	mov	r2, r6
 800a970:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a974:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fbee 	bl	800015c <__adddf3>
 800a980:	e9cd 0100 	strd	r0, r1, [sp]
 800a984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fbe4 	bl	8000158 <__aeabi_dsub>
 800a990:	e008      	b.n	800a9a4 <rint+0xe4>
 800a992:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a996:	dd08      	ble.n	800a9aa <rint+0xea>
 800a998:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a99c:	d1c9      	bne.n	800a932 <rint+0x72>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	f7f5 fbdc 	bl	800015c <__adddf3>
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	e7c3      	b.n	800a932 <rint+0x72>
 800a9aa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b2:	40ca      	lsrs	r2, r1
 800a9b4:	4210      	tst	r0, r2
 800a9b6:	d0bc      	beq.n	800a932 <rint+0x72>
 800a9b8:	0852      	lsrs	r2, r2, #1
 800a9ba:	4210      	tst	r0, r2
 800a9bc:	bf1f      	itttt	ne
 800a9be:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a9c2:	ea20 0202 	bicne.w	r2, r0, r2
 800a9c6:	410e      	asrne	r6, r1
 800a9c8:	4316      	orrne	r6, r2
 800a9ca:	e7cf      	b.n	800a96c <rint+0xac>
 800a9cc:	0800aeb0 	.word	0x0800aeb0
 800a9d0:	000fffff 	.word	0x000fffff
 800a9d4:	00000000 	.word	0x00000000

0800a9d8 <scalbn>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	4616      	mov	r6, r2
 800a9dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	460d      	mov	r5, r1
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	b982      	cbnz	r2, 800aa0a <scalbn+0x32>
 800a9e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9ec:	4303      	orrs	r3, r0
 800a9ee:	d034      	beq.n	800aa5a <scalbn+0x82>
 800a9f0:	4b2d      	ldr	r3, [pc, #180]	; (800aaa8 <scalbn+0xd0>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f7f5 fd68 	bl	80004c8 <__aeabi_dmul>
 800a9f8:	4b2c      	ldr	r3, [pc, #176]	; (800aaac <scalbn+0xd4>)
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	429e      	cmp	r6, r3
 800a9fe:	460d      	mov	r5, r1
 800aa00:	da0d      	bge.n	800aa1e <scalbn+0x46>
 800aa02:	a325      	add	r3, pc, #148	; (adr r3, 800aa98 <scalbn+0xc0>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	e01c      	b.n	800aa44 <scalbn+0x6c>
 800aa0a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800aa0e:	42ba      	cmp	r2, r7
 800aa10:	d109      	bne.n	800aa26 <scalbn+0x4e>
 800aa12:	4602      	mov	r2, r0
 800aa14:	f7f5 fba2 	bl	800015c <__adddf3>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	e01d      	b.n	800aa5a <scalbn+0x82>
 800aa1e:	460b      	mov	r3, r1
 800aa20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa24:	3a36      	subs	r2, #54	; 0x36
 800aa26:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa2a:	4432      	add	r2, r6
 800aa2c:	428a      	cmp	r2, r1
 800aa2e:	dd0c      	ble.n	800aa4a <scalbn+0x72>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	a11a      	add	r1, pc, #104	; (adr r1, 800aaa0 <scalbn+0xc8>)
 800aa36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3a:	f000 f83b 	bl	800aab4 <copysign>
 800aa3e:	a318      	add	r3, pc, #96	; (adr r3, 800aaa0 <scalbn+0xc8>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fd40 	bl	80004c8 <__aeabi_dmul>
 800aa48:	e7e6      	b.n	800aa18 <scalbn+0x40>
 800aa4a:	2a00      	cmp	r2, #0
 800aa4c:	dd08      	ble.n	800aa60 <scalbn+0x88>
 800aa4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa60:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa64:	da0b      	bge.n	800aa7e <scalbn+0xa6>
 800aa66:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa6a:	429e      	cmp	r6, r3
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	462b      	mov	r3, r5
 800aa70:	dce0      	bgt.n	800aa34 <scalbn+0x5c>
 800aa72:	a109      	add	r1, pc, #36	; (adr r1, 800aa98 <scalbn+0xc0>)
 800aa74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa78:	f000 f81c 	bl	800aab4 <copysign>
 800aa7c:	e7c1      	b.n	800aa02 <scalbn+0x2a>
 800aa7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa82:	3236      	adds	r2, #54	; 0x36
 800aa84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <scalbn+0xd8>)
 800aa94:	e7d6      	b.n	800aa44 <scalbn+0x6c>
 800aa96:	bf00      	nop
 800aa98:	c2f8f359 	.word	0xc2f8f359
 800aa9c:	01a56e1f 	.word	0x01a56e1f
 800aaa0:	8800759c 	.word	0x8800759c
 800aaa4:	7e37e43c 	.word	0x7e37e43c
 800aaa8:	43500000 	.word	0x43500000
 800aaac:	ffff3cb0 	.word	0xffff3cb0
 800aab0:	3c900000 	.word	0x3c900000

0800aab4 <copysign>:
 800aab4:	b530      	push	{r4, r5, lr}
 800aab6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aaba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aabe:	ea42 0503 	orr.w	r5, r2, r3
 800aac2:	4629      	mov	r1, r5
 800aac4:	bd30      	pop	{r4, r5, pc}
	...

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
