
BluePill_Captador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080094b8  080094b8  000194b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080098a0  080098a0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098a0  080098a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080098a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000088  08009930  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08009930  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a86d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f2  00000000  00000000  0002a91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002cc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178d9  00000000  00000000  0002d550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a52  00000000  00000000  00044e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008908c  00000000  00000000  0004d87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e8  00000000  00000000  000d6984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080094a0 	.word	0x080094a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080094a0 	.word	0x080094a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <MPU6050_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int MPU6050_Init (I2C_HandleTypeDef hi2c)
{
 800110c:	b084      	sub	sp, #16
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af04      	add	r7, sp, #16
 8001114:	f107 0c10 	add.w	ip, r7, #16
 8001118:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t check;
	uint8_t Data;

		// check device ID WHO_AM_I
		Data = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	71bb      	strb	r3, [r7, #6]
		check= 0;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	226b      	movs	r2, #107	; 0x6b
 8001136:	21d0      	movs	r1, #208	; 0xd0
 8001138:	f107 0010 	add.w	r0, r7, #16
 800113c:	f002 fe44 	bl	8003dc8 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2275      	movs	r2, #117	; 0x75
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	f107 0010 	add.w	r0, r7, #16
 8001158:	f002 ff30 	bl	8003fbc <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b68      	cmp	r3, #104	; 0x68
 8001160:	d131      	bne.n	80011c6 <MPU6050_Init+0xba>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up


			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8001162:	2307      	movs	r3, #7
 8001164:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2219      	movs	r2, #25
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	f107 0010 	add.w	r0, r7, #16
 800117e:	f002 fe23 	bl	8003dc8 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8001182:	2300      	movs	r3, #0
 8001184:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221c      	movs	r2, #28
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	f107 0010 	add.w	r0, r7, #16
 800119e:	f002 fe13 	bl	8003dc8 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	221b      	movs	r2, #27
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	f107 0010 	add.w	r0, r7, #16
 80011be:	f002 fe03 	bl	8003dc8 <HAL_I2C_Mem_Write>
			return 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <MPU6050_Init+0xbc>
		}
 return 0;
 80011c6:	2300      	movs	r3, #0
	}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d2:	b004      	add	sp, #16
 80011d4:	4770      	bx	lr
	...

080011d8 <MPU6050_Read_Accel>:

Accel MPU6050_Read_Accel (int selector)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0a3      	sub	sp, #140	; 0x8c
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];
	Accel lectura;

	//valores en RAW temporales de GYRO Y ACCEL
	int16_t Accel_X_RAW = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Accel_Y_RAW = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Accel_Z_RAW = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	I2C_HandleTypeDef hi2c;

	if (selector == 1) hi2c = hi2c1;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <MPU6050_Read_Accel+0x32>
 80011fa:	4a41      	ldr	r2, [pc, #260]	; (8001300 <MPU6050_Read_Accel+0x128>)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4611      	mov	r1, r2
 8001202:	2254      	movs	r2, #84	; 0x54
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fc43 	bl	8005a90 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d107      	bne.n	8001220 <MPU6050_Read_Accel+0x48>
 8001210:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <MPU6050_Read_Accel+0x12c>)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	2254      	movs	r2, #84	; 0x54
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fc38 	bl	8005a90 <memcpy>

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001220:	f107 000c 	add.w	r0, r7, #12
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2306      	movs	r3, #6
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	223b      	movs	r2, #59	; 0x3b
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	f002 febf 	bl	8003fbc <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800123e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001252:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001266:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	lectura.Ax = Accel_X_RAW/16384.0;
 800127a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8b8 	bl	80003f4 <__aeabi_i2d>
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MPU6050_Read_Accel+0x130>)
 800128a:	f7ff fa47 	bl	800071c <__aeabi_ddiv>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fbef 	bl	8000a78 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	663b      	str	r3, [r7, #96]	; 0x60
	lectura.Ay = Accel_Y_RAW/16384.0;
 800129e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8a6 	bl	80003f4 <__aeabi_i2d>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MPU6050_Read_Accel+0x130>)
 80012ae:	f7ff fa35 	bl	800071c <__aeabi_ddiv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	4618      	mov	r0, r3
 80012b8:	4621      	mov	r1, r4
 80012ba:	f7ff fbdd 	bl	8000a78 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Az = Accel_Z_RAW/16384.0;
 80012c2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MPU6050_Read_Accel+0x130>)
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_ddiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fbcb 	bl	8000a78 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	66bb      	str	r3, [r7, #104]	; 0x68
	return lectura;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	461c      	mov	r4, r3
 80012ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	377c      	adds	r7, #124	; 0x7c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000fc 	.word	0x200000fc
 8001304:	20000154 	.word	0x20000154
 8001308:	40d00000 	.word	0x40d00000
 800130c:	00000000 	.word	0x00000000

08001310 <MPU6050_Read_Gyro>:


Gyro MPU6050_Read_Gyro (int selector)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b0a3      	sub	sp, #140	; 0x8c
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	Gyro lectura;
	uint8_t Rec_Data[6];
	I2C_HandleTypeDef hi2c;

	int16_t Gyro_X_RAW = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t Gyro_Y_RAW = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t Gyro_Z_RAW = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	if (selector == 1) hi2c = hi2c1;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <MPU6050_Read_Gyro+0x32>
 8001332:	4a43      	ldr	r2, [pc, #268]	; (8001440 <MPU6050_Read_Gyro+0x130>)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4611      	mov	r1, r2
 800133a:	2254      	movs	r2, #84	; 0x54
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fba7 	bl	8005a90 <memcpy>
	if (selector == 2) hi2c = hi2c2;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d107      	bne.n	8001358 <MPU6050_Read_Gyro+0x48>
 8001348:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <MPU6050_Read_Gyro+0x134>)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4611      	mov	r1, r2
 8001350:	2254      	movs	r2, #84	; 0x54
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fb9c 	bl	8005a90 <memcpy>
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001358:	f107 0008 	add.w	r0, r7, #8
 800135c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2306      	movs	r3, #6
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2243      	movs	r2, #67	; 0x43
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	f002 fe23 	bl	8003fbc <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001376:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800138a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800139e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	lectura.Gx = Gyro_X_RAW/131.0;
 80013b2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f81c 	bl	80003f4 <__aeabi_i2d>
 80013bc:	a31e      	add	r3, pc, #120	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f9ab 	bl	800071c <__aeabi_ddiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	f7ff fb53 	bl	8000a78 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	667b      	str	r3, [r7, #100]	; 0x64
	lectura.Gy = Gyro_Y_RAW/131.0;
 80013d6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f80a 	bl	80003f4 <__aeabi_i2d>
 80013e0:	a315      	add	r3, pc, #84	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f999 	bl	800071c <__aeabi_ddiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	4618      	mov	r0, r3
 80013f0:	4621      	mov	r1, r4
 80013f2:	f7ff fb41 	bl	8000a78 <__aeabi_d2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	66bb      	str	r3, [r7, #104]	; 0x68
	lectura.Gz = Gyro_Z_RAW/131.0;
 80013fa:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe fff8 	bl	80003f4 <__aeabi_i2d>
 8001404:	a30c      	add	r3, pc, #48	; (adr r3, 8001438 <MPU6050_Read_Gyro+0x128>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f987 	bl	800071c <__aeabi_ddiv>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff fb2f 	bl	8000a78 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	66fb      	str	r3, [r7, #108]	; 0x6c

return lectura;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	461c      	mov	r4, r3
 8001422:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800142a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	377c      	adds	r7, #124	; 0x7c
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	00000000 	.word	0x00000000
 800143c:	40606000 	.word	0x40606000
 8001440:	200000fc 	.word	0x200000fc
 8001444:	20000154 	.word	0x20000154

08001448 <KalmanMPU>:





float KalmanMPU(float newAngle, float newRate, float dt,int identifier, int axis){  //1 x, 2 y , 3 z
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b09f      	sub	sp, #124	; 0x7c
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]

	float P[2][2];
	if(identifier == 1 && axis == 1 ){
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d126      	bne.n	80014aa <KalmanMPU+0x62>
 800145c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001460:	2b01      	cmp	r3, #1
 8001462:	d122      	bne.n	80014aa <KalmanMPU+0x62>
		for(int i = 0; i<2;i++){
 8001464:	2300      	movs	r3, #0
 8001466:	677b      	str	r3, [r7, #116]	; 0x74
 8001468:	e01c      	b.n	80014a4 <KalmanMPU+0x5c>
			for(int j=0;j<2;j++){
 800146a:	2300      	movs	r3, #0
 800146c:	673b      	str	r3, [r7, #112]	; 0x70
 800146e:	e013      	b.n	8001498 <KalmanMPU+0x50>
				P[i][j]=P1[i][j];
 8001470:	493e      	ldr	r1, [pc, #248]	; (800156c <KalmanMPU+0x124>)
 8001472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001478:	4413      	add	r3, r2
 800147a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800147e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001480:	0059      	lsls	r1, r3, #1
 8001482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001484:	440b      	add	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800148c:	440b      	add	r3, r1
 800148e:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 8001492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001494:	3301      	adds	r3, #1
 8001496:	673b      	str	r3, [r7, #112]	; 0x70
 8001498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800149a:	2b01      	cmp	r3, #1
 800149c:	dde8      	ble.n	8001470 <KalmanMPU+0x28>
		for(int i = 0; i<2;i++){
 800149e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a0:	3301      	adds	r3, #1
 80014a2:	677b      	str	r3, [r7, #116]	; 0x74
 80014a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	dddf      	ble.n	800146a <KalmanMPU+0x22>
			}
		}
	}

	if(identifier == 2 && axis ==1){
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d126      	bne.n	80014fe <KalmanMPU+0xb6>
 80014b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d122      	bne.n	80014fe <KalmanMPU+0xb6>
		for(int i = 0; i<2;i++){
 80014b8:	2300      	movs	r3, #0
 80014ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014bc:	e01c      	b.n	80014f8 <KalmanMPU+0xb0>
			for(int j=0;j<2;j++){
 80014be:	2300      	movs	r3, #0
 80014c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80014c2:	e013      	b.n	80014ec <KalmanMPU+0xa4>
				P[i][j]=P2[i][j];
 80014c4:	492a      	ldr	r1, [pc, #168]	; (8001570 <KalmanMPU+0x128>)
 80014c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c8:	005a      	lsls	r2, r3, #1
 80014ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014cc:	4413      	add	r3, r2
 80014ce:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d4:	0059      	lsls	r1, r3, #1
 80014d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014d8:	440b      	add	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80014e0:	440b      	add	r3, r1
 80014e2:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 80014e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014e8:	3301      	adds	r3, #1
 80014ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80014ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	dde8      	ble.n	80014c4 <KalmanMPU+0x7c>
		for(int i = 0; i<2;i++){
 80014f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f4:	3301      	adds	r3, #1
 80014f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	dddf      	ble.n	80014be <KalmanMPU+0x76>
			}
		}
	}

	if(identifier == 1 && axis == 2){
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d126      	bne.n	8001552 <KalmanMPU+0x10a>
 8001504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001508:	2b02      	cmp	r3, #2
 800150a:	d122      	bne.n	8001552 <KalmanMPU+0x10a>
		for(int i = 0; i<2;i++){
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	; 0x64
 8001510:	e01c      	b.n	800154c <KalmanMPU+0x104>
			for(int j=0;j<2;j++){
 8001512:	2300      	movs	r3, #0
 8001514:	663b      	str	r3, [r7, #96]	; 0x60
 8001516:	e013      	b.n	8001540 <KalmanMPU+0xf8>
				P[i][j]=P3[i][j];
 8001518:	4916      	ldr	r1, [pc, #88]	; (8001574 <KalmanMPU+0x12c>)
 800151a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800151c:	005a      	lsls	r2, r3, #1
 800151e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001520:	4413      	add	r3, r2
 8001522:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001528:	0059      	lsls	r1, r3, #1
 800152a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152c:	440b      	add	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001534:	440b      	add	r3, r1
 8001536:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 800153a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153c:	3301      	adds	r3, #1
 800153e:	663b      	str	r3, [r7, #96]	; 0x60
 8001540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001542:	2b01      	cmp	r3, #1
 8001544:	dde8      	ble.n	8001518 <KalmanMPU+0xd0>
		for(int i = 0; i<2;i++){
 8001546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001548:	3301      	adds	r3, #1
 800154a:	667b      	str	r3, [r7, #100]	; 0x64
 800154c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800154e:	2b01      	cmp	r3, #1
 8001550:	dddf      	ble.n	8001512 <KalmanMPU+0xca>
			}
		}
	}

	if(identifier == 2 && axis==2){
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d12c      	bne.n	80015b2 <KalmanMPU+0x16a>
 8001558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800155c:	2b02      	cmp	r3, #2
 800155e:	d128      	bne.n	80015b2 <KalmanMPU+0x16a>
		for(int i = 0; i<2;i++){
 8001560:	2300      	movs	r3, #0
 8001562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001564:	e022      	b.n	80015ac <KalmanMPU+0x164>
			for(int j=0;j<2;j++){
 8001566:	2300      	movs	r3, #0
 8001568:	65bb      	str	r3, [r7, #88]	; 0x58
 800156a:	e019      	b.n	80015a0 <KalmanMPU+0x158>
 800156c:	200000e8 	.word	0x200000e8
 8001570:	200001bc 	.word	0x200001bc
 8001574:	200002f4 	.word	0x200002f4
				P[i][j]=P4[i][j];
 8001578:	4987      	ldr	r1, [pc, #540]	; (8001798 <KalmanMPU+0x350>)
 800157a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157c:	005a      	lsls	r2, r3, #1
 800157e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001580:	4413      	add	r3, r2
 8001582:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001588:	0059      	lsls	r1, r3, #1
 800158a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800158c:	440b      	add	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001594:	440b      	add	r3, r1
 8001596:	f843 2c60 	str.w	r2, [r3, #-96]
			for(int j=0;j<2;j++){
 800159a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159c:	3301      	adds	r3, #1
 800159e:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	dde8      	ble.n	8001578 <KalmanMPU+0x130>
		for(int i = 0; i<2;i++){
 80015a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a8:	3301      	adds	r3, #1
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	ddd9      	ble.n	8001566 <KalmanMPU+0x11e>
		}
	}


	//1
	rate = newRate - bias;
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <KalmanMPU+0x354>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f7ff fab1 	bl	8000b20 <__aeabi_fsub>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <KalmanMPU+0x358>)
 80015c4:	601a      	str	r2, [r3, #0]
    angle += dt * rate;
 80015c6:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <KalmanMPU+0x358>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbb1 	bl	8000d34 <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <KalmanMPU+0x35c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7ff faa1 	bl	8000b24 <__addsf3>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <KalmanMPU+0x35c>)
 80015e8:	601a      	str	r2, [r3, #0]
	//2
    	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 80015ea:	69bc      	ldr	r4, [r7, #24]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fb9f 	bl	8000d34 <__aeabi_fmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fa8e 	bl	8000b20 <__aeabi_fsub>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f7ff fa87 	bl	8000b20 <__aeabi_fsub>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <KalmanMPU+0x360>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fa81 	bl	8000b24 <__addsf3>
 8001622:	4603      	mov	r3, r0
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fb84 	bl	8000d34 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fa77 	bl	8000b24 <__addsf3>
 8001636:	4603      	mov	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]
    	P[0][1] -= dt * P[1][1];
 800163a:	69fc      	ldr	r4, [r7, #28]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb77 	bl	8000d34 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	4619      	mov	r1, r3
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fa68 	bl	8000b20 <__aeabi_fsub>
 8001650:	4603      	mov	r3, r0
 8001652:	61fb      	str	r3, [r7, #28]
    	P[1][0] -= dt * P[1][1];
 8001654:	6a3c      	ldr	r4, [r7, #32]
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb6a 	bl	8000d34 <__aeabi_fmul>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fa5b 	bl	8000b20 <__aeabi_fsub>
 800166a:	4603      	mov	r3, r0
 800166c:	623b      	str	r3, [r7, #32]
    	P[1][1] += Q_bias * dt;
 800166e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001670:	4b4e      	ldr	r3, [pc, #312]	; (80017ac <KalmanMPU+0x364>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb5c 	bl	8000d34 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fa4f 	bl	8000b24 <__addsf3>
 8001686:	4603      	mov	r3, r0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
	 //3
    	float S = P[0][0] + R_measure; // Estimate error
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <KalmanMPU+0x368>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f7ff fa46 	bl	8000b24 <__addsf3>
 8001698:	4603      	mov	r3, r0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
    	float K[2]; // Kalman gain - This is a 2x1 vector
    	K[0] = P[0][0] / S;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fbfb 	bl	8000e9c <__aeabi_fdiv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]
    	K[1] = P[1][0] / S;
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fbf4 	bl	8000e9c <__aeabi_fdiv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	617b      	str	r3, [r7, #20]
     //4
    	float y = newAngle - angle;
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <KalmanMPU+0x35c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff fa2e 	bl	8000b20 <__aeabi_fsub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
        angle += K[0] * y;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb31 	bl	8000d34 <__aeabi_fmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <KalmanMPU+0x35c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff fa21 	bl	8000b24 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <KalmanMPU+0x35c>)
 80016e8:	601a      	str	r2, [r3, #0]
        bias += K[1] * y;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb20 	bl	8000d34 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <KalmanMPU+0x354>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff fa10 	bl	8000b24 <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <KalmanMPU+0x354>)
 800170a:	601a      	str	r2, [r3, #0]
     //5
         float P00_temp = P[0][0];
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
         float P01_temp = P[0][1];
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28

         P[0][0] -= K[0] * P00_temp;
 8001714:	69bc      	ldr	r4, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fb0a 	bl	8000d34 <__aeabi_fmul>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff f9fb 	bl	8000b20 <__aeabi_fsub>
 800172a:	4603      	mov	r3, r0
 800172c:	61bb      	str	r3, [r7, #24]
         P[0][1] -= K[0] * P01_temp;
 800172e:	69fc      	ldr	r4, [r7, #28]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fafd 	bl	8000d34 <__aeabi_fmul>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff f9ee 	bl	8000b20 <__aeabi_fsub>
 8001744:	4603      	mov	r3, r0
 8001746:	61fb      	str	r3, [r7, #28]
         P[1][0] -= K[1] * P00_temp;
 8001748:	6a3c      	ldr	r4, [r7, #32]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff faf0 	bl	8000d34 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff f9e1 	bl	8000b20 <__aeabi_fsub>
 800175e:	4603      	mov	r3, r0
 8001760:	623b      	str	r3, [r7, #32]
         P[1][1] -= K[1] * P01_temp;
 8001762:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fae3 	bl	8000d34 <__aeabi_fmul>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff f9d4 	bl	8000b20 <__aeabi_fsub>
 8001778:	4603      	mov	r3, r0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24


     	if(identifier == 1 && axis ==1){
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d135      	bne.n	80017ee <KalmanMPU+0x3a6>
 8001782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001786:	2b01      	cmp	r3, #1
 8001788:	d131      	bne.n	80017ee <KalmanMPU+0x3a6>
     		for(int i = 0; i<2;i++){
 800178a:	2300      	movs	r3, #0
 800178c:	657b      	str	r3, [r7, #84]	; 0x54
 800178e:	e02b      	b.n	80017e8 <KalmanMPU+0x3a0>
     			for(int j=0;j<2;j++){
 8001790:	2300      	movs	r3, #0
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
 8001794:	e022      	b.n	80017dc <KalmanMPU+0x394>
 8001796:	bf00      	nop
 8001798:	200002cc 	.word	0x200002cc
 800179c:	200000a4 	.word	0x200000a4
 80017a0:	200000ac 	.word	0x200000ac
 80017a4:	200000a8 	.word	0x200000a8
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	20000010 	.word	0x20000010
     				P1[i][j]=P[i][j];
 80017b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b6:	005a      	lsls	r2, r3, #1
 80017b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80017c2:	4413      	add	r3, r2
 80017c4:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80017c8:	484b      	ldr	r0, [pc, #300]	; (80018f8 <KalmanMPU+0x4b0>)
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	0059      	lsls	r1, r3, #1
 80017ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d0:	440b      	add	r3, r1
 80017d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80017d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d8:	3301      	adds	r3, #1
 80017da:	653b      	str	r3, [r7, #80]	; 0x50
 80017dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017de:	2b01      	cmp	r3, #1
 80017e0:	dde8      	ble.n	80017b4 <KalmanMPU+0x36c>
     		for(int i = 0; i<2;i++){
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	3301      	adds	r3, #1
 80017e6:	657b      	str	r3, [r7, #84]	; 0x54
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	ddd0      	ble.n	8001790 <KalmanMPU+0x348>
     			}
     		}
     	}

     	if(identifier == 2  && axis ==1){
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d126      	bne.n	8001842 <KalmanMPU+0x3fa>
 80017f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d122      	bne.n	8001842 <KalmanMPU+0x3fa>
     		for(int i = 0; i<2;i++){
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001800:	e01c      	b.n	800183c <KalmanMPU+0x3f4>
     			for(int j=0;j<2;j++){
 8001802:	2300      	movs	r3, #0
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
 8001806:	e013      	b.n	8001830 <KalmanMPU+0x3e8>
     				P2[i][j]=P[i][j];
 8001808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180a:	005a      	lsls	r2, r3, #1
 800180c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001816:	4413      	add	r3, r2
 8001818:	f853 2c60 	ldr.w	r2, [r3, #-96]
 800181c:	4837      	ldr	r0, [pc, #220]	; (80018fc <KalmanMPU+0x4b4>)
 800181e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001820:	0059      	lsls	r1, r3, #1
 8001822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001824:	440b      	add	r3, r1
 8001826:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 800182a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800182c:	3301      	adds	r3, #1
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001832:	2b01      	cmp	r3, #1
 8001834:	dde8      	ble.n	8001808 <KalmanMPU+0x3c0>
     		for(int i = 0; i<2;i++){
 8001836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001838:	3301      	adds	r3, #1
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800183e:	2b01      	cmp	r3, #1
 8001840:	dddf      	ble.n	8001802 <KalmanMPU+0x3ba>
     			}
     		}
     	}
     	if(identifier == 1  && axis ==2){
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d126      	bne.n	8001896 <KalmanMPU+0x44e>
 8001848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800184c:	2b02      	cmp	r3, #2
 800184e:	d122      	bne.n	8001896 <KalmanMPU+0x44e>
     		for(int i = 0; i<2;i++){
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	e01c      	b.n	8001890 <KalmanMPU+0x448>
     			for(int j=0;j<2;j++){
 8001856:	2300      	movs	r3, #0
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
 800185a:	e013      	b.n	8001884 <KalmanMPU+0x43c>
     				P3[i][j]=P[i][j];
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	005a      	lsls	r2, r3, #1
 8001860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800186a:	4413      	add	r3, r2
 800186c:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8001870:	4823      	ldr	r0, [pc, #140]	; (8001900 <KalmanMPU+0x4b8>)
 8001872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001874:	0059      	lsls	r1, r3, #1
 8001876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001878:	440b      	add	r3, r1
 800187a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 800187e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001880:	3301      	adds	r3, #1
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
 8001884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001886:	2b01      	cmp	r3, #1
 8001888:	dde8      	ble.n	800185c <KalmanMPU+0x414>
     		for(int i = 0; i<2;i++){
 800188a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188c:	3301      	adds	r3, #1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001892:	2b01      	cmp	r3, #1
 8001894:	dddf      	ble.n	8001856 <KalmanMPU+0x40e>
     			}
     		}
     	}
     	if(identifier == 2  && axis ==2){
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d126      	bne.n	80018ea <KalmanMPU+0x4a2>
 800189c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d122      	bne.n	80018ea <KalmanMPU+0x4a2>
     		for(int i = 0; i<2;i++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a8:	e01c      	b.n	80018e4 <KalmanMPU+0x49c>
     			for(int j=0;j<2;j++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ae:	e013      	b.n	80018d8 <KalmanMPU+0x490>
     				P4[i][j]=P[i][j];
 80018b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b2:	005a      	lsls	r2, r3, #1
 80018b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80018be:	4413      	add	r3, r2
 80018c0:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <KalmanMPU+0x4bc>)
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	0059      	lsls	r1, r3, #1
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	440b      	add	r3, r1
 80018ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     			for(int j=0;j<2;j++){
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d4:	3301      	adds	r3, #1
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018da:	2b01      	cmp	r3, #1
 80018dc:	dde8      	ble.n	80018b0 <KalmanMPU+0x468>
     		for(int i = 0; i<2;i++){
 80018de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e0:	3301      	adds	r3, #1
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	dddf      	ble.n	80018aa <KalmanMPU+0x462>
     		}
     	}



return angle;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <KalmanMPU+0x4c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]

}
 80018ee:	4618      	mov	r0, r3
 80018f0:	377c      	adds	r7, #124	; 0x7c
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000e8 	.word	0x200000e8
 80018fc:	200001bc 	.word	0x200001bc
 8001900:	200002f4 	.word	0x200002f4
 8001904:	200002cc 	.word	0x200002cc
 8001908:	200000a8 	.word	0x200000a8
 800190c:	00000000 	.word	0x00000000

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	b0b9      	sub	sp, #228	; 0xe4
 8001916:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f001 fa34 	bl	8002d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 ff2c 	bl	8002778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001920:	f001 f83e 	bl	80029a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001924:	f000 ff78 	bl	8002818 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001928:	f000 ffb4 	bl	8002894 <MX_I2C1_Init>
  MX_I2C2_Init();
 800192c:	f000 ffe0 	bl	80028f0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001930:	f001 f80c 	bl	800294c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu1.hi2c= 1;
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <main+0xc8>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]
  mpu2.hi2c= 2;
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <main+0xcc>)
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]

  mpu1.offsetY =  3;
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <main+0xc8>)
 8001942:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <main+0xd0>)
 8001944:	621a      	str	r2, [r3, #32]
  mpu1.offsetx =  1.25;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <main+0xc8>)
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <main+0xd4>)
 800194a:	61da      	str	r2, [r3, #28]

  mpu2.offsetY =  -3; //2,48  -3
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <main+0xcc>)
 800194e:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <main+0xd8>)
 8001950:	621a      	str	r2, [r3, #32]
  mpu2.offsetx = -0.57;  //0.57    0
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <main+0xcc>)
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <main+0xdc>)
 8001956:	61da      	str	r2, [r3, #28]
KalmanAngle5=0;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <main+0xe0>)
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
trans_time = 0;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <main+0xe4>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]


//ampliacion de struct
mpu1.Q_angle = 0.001;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <main+0xc8>)
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <main+0xe8>)
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
mpu1.Q_bias = 0.003;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <main+0xc8>)
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <main+0xec>)
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
mpu1.R_Measure = 0.03;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <main+0xc8>)
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <main+0xf0>)
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c

  //valores stadisticos
  	float desv_tipica = 2.0231;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <main+0xf4>)
 800197a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  	float desv_estado = 2.0231;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <main+0xf4>)
 8001980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  	float var = desv_tipica*desv_tipica;
 8001984:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001988:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800198c:	f7ff f9d2 	bl	8000d34 <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	float var_estado = desv_estado*desv_estado;
 8001996:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800199a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800199e:	f7ff f9c9 	bl	8000d34 <__aeabi_fmul>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  	float P = var_estado;
 80019a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  	float P_previa;


  	char info_real[32], info_kalman[32];
  		char ln[] = "\n\r";
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <main+0xf8>)
 80019b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	4611      	mov	r1, r2
 80019ba:	8019      	strh	r1, [r3, #0]
 80019bc:	3302      	adds	r3, #2
 80019be:	0c12      	lsrs	r2, r2, #16
 80019c0:	701a      	strb	r2, [r3, #0]
  		char comma[] = ",";
 80019c2:	232c      	movs	r3, #44	; 0x2c
 80019c4:	863b      	strh	r3, [r7, #48]	; 0x30
int start = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  		HAL_Delay(2000);
 80019cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019d0:	f001 fa3a 	bl	8002e48 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
while (start != 1){
 80019d4:	e03a      	b.n	8001a4c <main+0x13c>
 80019d6:	bf00      	nop
 80019d8:	200003c0 	.word	0x200003c0
 80019dc:	200001d0 	.word	0x200001d0
 80019e0:	40400000 	.word	0x40400000
 80019e4:	3fa00000 	.word	0x3fa00000
 80019e8:	c0400000 	.word	0xc0400000
 80019ec:	bf11eb85 	.word	0xbf11eb85
 80019f0:	200002a0 	.word	0x200002a0
 80019f4:	200000f8 	.word	0x200000f8
 80019f8:	3a83126f 	.word	0x3a83126f
 80019fc:	3b449ba6 	.word	0x3b449ba6
 8001a00:	3cf5c28f 	.word	0x3cf5c28f
 8001a04:	40017a78 	.word	0x40017a78
 8001a08:	080094b8 	.word	0x080094b8
start =	  MPU6050_Init(hi2c1);
 8001a0c:	4cd0      	ldr	r4, [pc, #832]	; (8001d50 <main+0x440>)
 8001a0e:	4668      	mov	r0, sp
 8001a10:	f104 0310 	add.w	r3, r4, #16
 8001a14:	2244      	movs	r2, #68	; 0x44
 8001a16:	4619      	mov	r1, r3
 8001a18:	f004 f83a 	bl	8005a90 <memcpy>
 8001a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a20:	f7ff fb74 	bl	800110c <MPU6050_Init>
 8001a24:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
start =	 	 MPU6050_Init(hi2c2);
 8001a28:	4cca      	ldr	r4, [pc, #808]	; (8001d54 <main+0x444>)
 8001a2a:	4668      	mov	r0, sp
 8001a2c:	f104 0310 	add.w	r3, r4, #16
 8001a30:	2244      	movs	r2, #68	; 0x44
 8001a32:	4619      	mov	r1, r3
 8001a34:	f004 f82c 	bl	8005a90 <memcpy>
 8001a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a3c:	f7ff fb66 	bl	800110c <MPU6050_Init>
 8001a40:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

HAL_Delay(500);
 8001a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a48:	f001 f9fe 	bl	8002e48 <HAL_Delay>
while (start != 1){
 8001a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d1db      	bne.n	8001a0c <main+0xfc>
}
	 	  // read the Accelerometer and Gyro values and tranform into angles


	 	// 	  MPU6050_Read_Accel(hi2c2,Ax1,Ay1,Az1); // error AL asignar? proque no coge las void
	 	 mpu2.MPUaccel = MPU6050_Read_Accel(mpu2.hi2c);
 8001a54:	4bc0      	ldr	r3, [pc, #768]	; (8001d58 <main+0x448>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4cbf      	ldr	r4, [pc, #764]	; (8001d58 <main+0x448>)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fbb9 	bl	80011d8 <MPU6050_Read_Accel>
 8001a66:	f104 0310 	add.w	r3, r4, #16
 8001a6a:	f107 0210 	add.w	r2, r7, #16
 8001a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUaccel =  MPU6050_Read_Accel(mpu1.hi2c);
 8001a74:	4bb9      	ldr	r3, [pc, #740]	; (8001d5c <main+0x44c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4cb8      	ldr	r4, [pc, #736]	; (8001d5c <main+0x44c>)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fba9 	bl	80011d8 <MPU6050_Read_Accel>
 8001a86:	f104 0310 	add.w	r3, r4, #16
 8001a8a:	f107 0210 	add.w	r2, r7, #16
 8001a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu2.MPUgyro =   MPU6050_Read_Gyro(mpu2.hi2c);
 8001a94:	4bb0      	ldr	r3, [pc, #704]	; (8001d58 <main+0x448>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4caf      	ldr	r4, [pc, #700]	; (8001d58 <main+0x448>)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc35 	bl	8001310 <MPU6050_Read_Gyro>
 8001aa6:	1d23      	adds	r3, r4, #4
 8001aa8:	f107 0210 	add.w	r2, r7, #16
 8001aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	 	 mpu1.MPUgyro = MPU6050_Read_Gyro(mpu1.hi2c);
 8001ab2:	4baa      	ldr	r3, [pc, #680]	; (8001d5c <main+0x44c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4ca9      	ldr	r4, [pc, #676]	; (8001d5c <main+0x44c>)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc26 	bl	8001310 <MPU6050_Read_Gyro>
 8001ac4:	1d23      	adds	r3, r4, #4
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	 accel_x1= atan(mpu1.MPUaccel.Ay/sqrt(pow(mpu1.MPUaccel.Ax,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001ad0:	4ba2      	ldr	r3, [pc, #648]	; (8001d5c <main+0x44c>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc9f 	bl	8000418 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	4b9f      	ldr	r3, [pc, #636]	; (8001d5c <main+0x44c>)
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc98 	bl	8000418 <__aeabi_f2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af0:	f005 fd28 	bl	8007544 <pow>
 8001af4:	4680      	mov	r8, r0
 8001af6:	4689      	mov	r9, r1
 8001af8:	4b98      	ldr	r3, [pc, #608]	; (8001d5c <main+0x44c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc8b 	bl	8000418 <__aeabi_f2d>
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0a:	f005 fd1b 	bl	8007544 <pow>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4640      	mov	r0, r8
 8001b14:	4649      	mov	r1, r9
 8001b16:	f7fe fb21 	bl	800015c <__adddf3>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f005 fe6b 	bl	80077fc <sqrt>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fdf5 	bl	800071c <__aeabi_ddiv>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f005 fb05 	bl	8007148 <atan>
 8001b3e:	a382      	add	r3, pc, #520	; (adr r3, 8001d48 <main+0x438>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fcc0 	bl	80004c8 <__aeabi_dmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4621      	mov	r1, r4
 8001b50:	f7fe ff92 	bl	8000a78 <__aeabi_d2f>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <main+0x450>)
 8001b58:	601a      	str	r2, [r3, #0]
	 accel_y1=atan(-mpu1.MPUaccel.Ax/sqrt(pow(mpu1.MPUaccel.Ay,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001b5a:	4b80      	ldr	r3, [pc, #512]	; (8001d5c <main+0x44c>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc58 	bl	8000418 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <main+0x44c>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc51 	bl	8000418 <__aeabi_f2d>
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b7e:	f005 fce1 	bl	8007544 <pow>
 8001b82:	4680      	mov	r8, r0
 8001b84:	4689      	mov	r9, r1
 8001b86:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <main+0x44c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc44 	bl	8000418 <__aeabi_f2d>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	f005 fcd4 	bl	8007544 <pow>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fada 	bl	800015c <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f005 fe24 	bl	80077fc <sqrt>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fdae 	bl	800071c <__aeabi_ddiv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	f005 fabe 	bl	8007148 <atan>
 8001bcc:	a35e      	add	r3, pc, #376	; (adr r3, 8001d48 <main+0x438>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fc79 	bl	80004c8 <__aeabi_dmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7fe ff4b 	bl	8000a78 <__aeabi_d2f>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <main+0x454>)
 8001be6:	601a      	str	r2, [r3, #0]

	 accel_x2= atan(mpu2.MPUaccel.Ay/sqrt(pow(mpu2.MPUaccel.Ax,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001be8:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <main+0x448>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc13 	bl	8000418 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <main+0x448>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc0c 	bl	8000418 <__aeabi_f2d>
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c08:	f005 fc9c 	bl	8007544 <pow>
 8001c0c:	4680      	mov	r8, r0
 8001c0e:	4689      	mov	r9, r1
 8001c10:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <main+0x448>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbff 	bl	8000418 <__aeabi_f2d>
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c22:	f005 fc8f 	bl	8007544 <pow>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	f7fe fa95 	bl	800015c <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f005 fddf 	bl	80077fc <sqrt>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fd69 	bl	800071c <__aeabi_ddiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f005 fa79 	bl	8007148 <atan>
 8001c56:	a33c      	add	r3, pc, #240	; (adr r3, 8001d48 <main+0x438>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fc34 	bl	80004c8 <__aeabi_dmul>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4618      	mov	r0, r3
 8001c66:	4621      	mov	r1, r4
 8001c68:	f7fe ff06 	bl	8000a78 <__aeabi_d2f>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <main+0x458>)
 8001c70:	601a      	str	r2, [r3, #0]
	 accel_y2=atan(-mpu2.MPUaccel.Ax/sqrt(pow(mpu2.MPUaccel.Ay,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <main+0x448>)
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fbcc 	bl	8000418 <__aeabi_f2d>
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <main+0x448>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fbc5 	bl	8000418 <__aeabi_f2d>
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c96:	f005 fc55 	bl	8007544 <pow>
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	4689      	mov	r9, r1
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <main+0x448>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbb8 	bl	8000418 <__aeabi_f2d>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb0:	f005 fc48 	bl	8007544 <pow>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4640      	mov	r0, r8
 8001cba:	4649      	mov	r1, r9
 8001cbc:	f7fe fa4e 	bl	800015c <__adddf3>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f005 fd98 	bl	80077fc <sqrt>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f7fe fd22 	bl	800071c <__aeabi_ddiv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f005 fa32 	bl	8007148 <atan>
 8001ce4:	a318      	add	r3, pc, #96	; (adr r3, 8001d48 <main+0x438>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fbed 	bl	80004c8 <__aeabi_dmul>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	f7fe febf 	bl	8000a78 <__aeabi_d2f>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <main+0x45c>)
 8001cfe:	601a      	str	r2, [r3, #0]

	 	  dt =  HAL_GetTick()-time;
 8001d00:	f001 f898 	bl	8002e34 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <main+0x460>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <main+0x464>)
 8001d0e:	6013      	str	r3, [r2, #0]
	 	  time = HAL_GetTick();
 8001d10:	f001 f890 	bl	8002e34 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <main+0x460>)
 8001d18:	601a      	str	r2, [r3, #0]

	 	 	gyro_y1 += dt*(mpu1.MPUgyro.Gy-mpu1.offsetY)/1000;  //2.579
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <main+0x464>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe ffb0 	bl	8000c84 <__aeabi_ui2f>
 8001d24:	4604      	mov	r4, r0
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <main+0x44c>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <main+0x44c>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4610      	mov	r0, r2
 8001d32:	f7fe fef5 	bl	8000b20 <__aeabi_fsub>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7fe fffa 	bl	8000d34 <__aeabi_fmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	e019      	b.n	8001d78 <main+0x468>
 8001d44:	f3af 8000 	nop.w
 8001d48:	61d59ae7 	.word	0x61d59ae7
 8001d4c:	404ca994 	.word	0x404ca994
 8001d50:	200000fc 	.word	0x200000fc
 8001d54:	20000154 	.word	0x20000154
 8001d58:	200001d0 	.word	0x200001d0
 8001d5c:	200003c0 	.word	0x200003c0
 8001d60:	200002e8 	.word	0x200002e8
 8001d64:	20000308 	.word	0x20000308
 8001d68:	200000bc 	.word	0x200000bc
 8001d6c:	200000c0 	.word	0x200000c0
 8001d70:	200002f0 	.word	0x200002f0
 8001d74:	2000035c 	.word	0x2000035c
 8001d78:	499b      	ldr	r1, [pc, #620]	; (8001fe8 <main+0x6d8>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f88e 	bl	8000e9c <__aeabi_fdiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b99      	ldr	r3, [pc, #612]	; (8001fec <main+0x6dc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7fe feca 	bl	8000b24 <__addsf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b95      	ldr	r3, [pc, #596]	; (8001fec <main+0x6dc>)
 8001d96:	601a      	str	r2, [r3, #0]
	 	 	gyro_x1 += dt*(mpu1.MPUgyro.Gx-mpu1.offsetx)/1000;    //0.3
 8001d98:	4b95      	ldr	r3, [pc, #596]	; (8001ff0 <main+0x6e0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ff71 	bl	8000c84 <__aeabi_ui2f>
 8001da2:	4604      	mov	r4, r0
 8001da4:	4b93      	ldr	r3, [pc, #588]	; (8001ff4 <main+0x6e4>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <main+0x6e4>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7fe feb6 	bl	8000b20 <__aeabi_fsub>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7fe ffbb 	bl	8000d34 <__aeabi_fmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4989      	ldr	r1, [pc, #548]	; (8001fe8 <main+0x6d8>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f86a 	bl	8000e9c <__aeabi_fdiv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <main+0x6e8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7fe fea6 	bl	8000b24 <__addsf3>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <main+0x6e8>)
 8001dde:	601a      	str	r2, [r3, #0]
	 	 	gyro_z1 += dt*(mpu1.MPUgyro.Gz)/1000;
 8001de0:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <main+0x6e0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe ff4d 	bl	8000c84 <__aeabi_ui2f>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <main+0x6e4>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f7fe ff9e 	bl	8000d34 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	497b      	ldr	r1, [pc, #492]	; (8001fe8 <main+0x6d8>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f84d 	bl	8000e9c <__aeabi_fdiv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <main+0x6ec>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe fe89 	bl	8000b24 <__addsf3>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <main+0x6ec>)
 8001e18:	601a      	str	r2, [r3, #0]

	 	 	gyro_y2 += dt*(mpu2.MPUgyro.Gy-mpu2.offsetY)/1000;
 8001e1a:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <main+0x6e0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ff30 	bl	8000c84 <__aeabi_ui2f>
 8001e24:	4604      	mov	r4, r0
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <main+0x6f0>)
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b75      	ldr	r3, [pc, #468]	; (8002000 <main+0x6f0>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7fe fe75 	bl	8000b20 <__aeabi_fsub>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7fe ff7a 	bl	8000d34 <__aeabi_fmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4969      	ldr	r1, [pc, #420]	; (8001fe8 <main+0x6d8>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f829 	bl	8000e9c <__aeabi_fdiv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <main+0x6f4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7fe fe65 	bl	8000b24 <__addsf3>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b69      	ldr	r3, [pc, #420]	; (8002004 <main+0x6f4>)
 8001e60:	601a      	str	r2, [r3, #0]
	 	 	gyro_x2 += dt*(mpu2.MPUgyro.Gx-mpu2.offsetx)/1000;
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <main+0x6e0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff0c 	bl	8000c84 <__aeabi_ui2f>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <main+0x6f0>)
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <main+0x6f0>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7fe fe51 	bl	8000b20 <__aeabi_fsub>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7fe ff56 	bl	8000d34 <__aeabi_fmul>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4957      	ldr	r1, [pc, #348]	; (8001fe8 <main+0x6d8>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f805 	bl	8000e9c <__aeabi_fdiv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <main+0x6f8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f7fe fe41 	bl	8000b24 <__addsf3>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b58      	ldr	r3, [pc, #352]	; (8002008 <main+0x6f8>)
 8001ea8:	601a      	str	r2, [r3, #0]
	 	 	gyro_z2 += dt*(mpu2.MPUgyro.Gz)/1000;
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <main+0x6e0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fee8 	bl	8000c84 <__aeabi_ui2f>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <main+0x6f0>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7fe ff39 	bl	8000d34 <__aeabi_fmul>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4948      	ldr	r1, [pc, #288]	; (8001fe8 <main+0x6d8>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ffe8 	bl	8000e9c <__aeabi_fdiv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <main+0x6fc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7fe fe24 	bl	8000b24 <__addsf3>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <main+0x6fc>)
 8001ee2:	601a      	str	r2, [r3, #0]



	// angulo_y = 0.01*(accel_y1) + 0.9*gyro_y1;
	 angulo_x = 0.01*(accel_x1) + 0.9*gyro_x1;
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <main+0x700>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fa95 	bl	8000418 <__aeabi_f2d>
 8001eee:	a33a      	add	r3, pc, #232	; (adr r3, 8001fd8 <main+0x6c8>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fae8 	bl	80004c8 <__aeabi_dmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4625      	mov	r5, r4
 8001efe:	461c      	mov	r4, r3
 8001f00:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <main+0x6e8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fa87 	bl	8000418 <__aeabi_f2d>
 8001f0a:	a335      	add	r3, pc, #212	; (adr r3, 8001fe0 <main+0x6d0>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fada 	bl	80004c8 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe f91e 	bl	800015c <__adddf3>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	4618      	mov	r0, r3
 8001f26:	4621      	mov	r1, r4
 8001f28:	f7fe fda6 	bl	8000a78 <__aeabi_d2f>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <main+0x704>)
 8001f30:	601a      	str	r2, [r3, #0]



	KalmanAngle1 = KalmanMPU(accel_x1, mpu1.MPUgyro.Gx, dt,mpu1.hi2c,1); //1 x, 2y , 3z
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <main+0x700>)
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <main+0x6e4>)
 8001f38:	685d      	ldr	r5, [r3, #4]
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <main+0x6e0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fea0 	bl	8000c84 <__aeabi_ui2f>
 8001f44:	4601      	mov	r1, r0
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <main+0x6e4>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	460a      	mov	r2, r1
 8001f52:	4629      	mov	r1, r5
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff fa77 	bl	8001448 <KalmanMPU>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <main+0x708>)
 8001f5e:	601a      	str	r2, [r3, #0]
	 KalmanAngle2 = KalmanMPU(accel_x2, mpu2.MPUgyro.Gx, dt,mpu2.hi2c,1);
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <main+0x70c>)
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <main+0x6f0>)
 8001f66:	685d      	ldr	r5, [r3, #4]
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <main+0x6e0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fe89 	bl	8000c84 <__aeabi_ui2f>
 8001f72:	4601      	mov	r1, r0
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <main+0x6f0>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	460a      	mov	r2, r1
 8001f80:	4629      	mov	r1, r5
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fa60 	bl	8001448 <KalmanMPU>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <main+0x710>)
 8001f8c:	601a      	str	r2, [r3, #0]
	 KalmanAngle3 = KalmanMPU(accel_y1, mpu1.MPUgyro.Gy, dt,mpu1.hi2c,2);
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <main+0x714>)
 8001f90:	681c      	ldr	r4, [r3, #0]
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <main+0x6e4>)
 8001f94:	689d      	ldr	r5, [r3, #8]
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <main+0x6e0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fe72 	bl	8000c84 <__aeabi_ui2f>
 8001fa0:	4601      	mov	r1, r0
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <main+0x6e4>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	460a      	mov	r2, r1
 8001fae:	4629      	mov	r1, r5
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fa49 	bl	8001448 <KalmanMPU>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <main+0x718>)
 8001fba:	601a      	str	r2, [r3, #0]
	 KalmanAngle4 = KalmanMPU(accel_y2, mpu2.MPUgyro.Gy, dt,mpu2.hi2c,2);
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <main+0x71c>)
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <main+0x6f0>)
 8001fc2:	689d      	ldr	r5, [r3, #8]
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <main+0x6e0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fe5b 	bl	8000c84 <__aeabi_ui2f>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <main+0x6f0>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e02b      	b.n	8002030 <main+0x720>
 8001fd8:	47ae147b 	.word	0x47ae147b
 8001fdc:	3f847ae1 	.word	0x3f847ae1
 8001fe0:	cccccccd 	.word	0xcccccccd
 8001fe4:	3feccccc 	.word	0x3feccccc
 8001fe8:	447a0000 	.word	0x447a0000
 8001fec:	200002a4 	.word	0x200002a4
 8001ff0:	2000035c 	.word	0x2000035c
 8001ff4:	200003c0 	.word	0x200003c0
 8001ff8:	20000254 	.word	0x20000254
 8001ffc:	2000029c 	.word	0x2000029c
 8002000:	200001d0 	.word	0x200001d0
 8002004:	200003a8 	.word	0x200003a8
 8002008:	20000150 	.word	0x20000150
 800200c:	20000334 	.word	0x20000334
 8002010:	200002e8 	.word	0x200002e8
 8002014:	200002e4 	.word	0x200002e4
 8002018:	20000220 	.word	0x20000220
 800201c:	200000bc 	.word	0x200000bc
 8002020:	20000330 	.word	0x20000330
 8002024:	20000308 	.word	0x20000308
 8002028:	200001b8 	.word	0x200001b8
 800202c:	200000c0 	.word	0x200000c0
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	460a      	mov	r2, r1
 8002036:	4629      	mov	r1, r5
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff fa05 	bl	8001448 <KalmanMPU>
 800203e:	4602      	mov	r2, r0
 8002040:	4bb3      	ldr	r3, [pc, #716]	; (8002310 <main+0xa00>)
 8002042:	601a      	str	r2, [r3, #0]
	 //KalmanAngle6 =  KalmanFUN(accel_x1, mpu1.MPUgyro.Gx,KalmanAngle6,bias6, dt, P6 );

//NUEVAS FUNCIONES


	 angulo_y2 = 0.01*(accel_y2) + 0.9*gyro_y2;
 8002044:	4bb3      	ldr	r3, [pc, #716]	; (8002314 <main+0xa04>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9e5 	bl	8000418 <__aeabi_f2d>
 800204e:	a3aa      	add	r3, pc, #680	; (adr r3, 80022f8 <main+0x9e8>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa38 	bl	80004c8 <__aeabi_dmul>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	4625      	mov	r5, r4
 800205e:	461c      	mov	r4, r3
 8002060:	4bad      	ldr	r3, [pc, #692]	; (8002318 <main+0xa08>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f9d7 	bl	8000418 <__aeabi_f2d>
 800206a:	a3a5      	add	r3, pc, #660	; (adr r3, 8002300 <main+0x9f0>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fa2a 	bl	80004c8 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe f86e 	bl	800015c <__adddf3>
 8002080:	4603      	mov	r3, r0
 8002082:	460c      	mov	r4, r1
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	f7fe fcf6 	bl	8000a78 <__aeabi_d2f>
 800208c:	4602      	mov	r2, r0
 800208e:	4ba3      	ldr	r3, [pc, #652]	; (800231c <main+0xa0c>)
 8002090:	601a      	str	r2, [r3, #0]
	 angulo_x2 = 0.01*(accel_x2) + 0.9*gyro_x2;
 8002092:	4ba3      	ldr	r3, [pc, #652]	; (8002320 <main+0xa10>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9be 	bl	8000418 <__aeabi_f2d>
 800209c:	a396      	add	r3, pc, #600	; (adr r3, 80022f8 <main+0x9e8>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fa11 	bl	80004c8 <__aeabi_dmul>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	4625      	mov	r5, r4
 80020ac:	461c      	mov	r4, r3
 80020ae:	4b9d      	ldr	r3, [pc, #628]	; (8002324 <main+0xa14>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f9b0 	bl	8000418 <__aeabi_f2d>
 80020b8:	a391      	add	r3, pc, #580	; (adr r3, 8002300 <main+0x9f0>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fa03 	bl	80004c8 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe f847 	bl	800015c <__adddf3>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	4618      	mov	r0, r3
 80020d4:	4621      	mov	r1, r4
 80020d6:	f7fe fccf 	bl	8000a78 <__aeabi_d2f>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <main+0xa18>)
 80020de:	601a      	str	r2, [r3, #0]

Z_correcto = mpu1.MPUgyro.Gz -2.3;
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <main+0xa1c>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f997 	bl	8000418 <__aeabi_f2d>
 80020ea:	a387      	add	r3, pc, #540	; (adr r3, 8002308 <main+0x9f8>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe f832 	bl	8000158 <__aeabi_dsub>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	4618      	mov	r0, r3
 80020fa:	4621      	mov	r1, r4
 80020fc:	f7fe fcbc 	bl	8000a78 <__aeabi_d2f>
 8002100:	4602      	mov	r2, r0
 8002102:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <main+0xa20>)
 8002104:	601a      	str	r2, [r3, #0]
if( abs(Z_correcto) < 2) Z_correcto = 0;
 8002106:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <main+0xa20>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe ffd8 	bl	80010c0 <__aeabi_f2iz>
 8002110:	4603      	mov	r3, r0
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	db0b      	blt.n	8002130 <main+0x820>
 8002118:	4b85      	ldr	r3, [pc, #532]	; (8002330 <main+0xa20>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe ffcf 	bl	80010c0 <__aeabi_f2iz>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	dc03      	bgt.n	8002130 <main+0x820>
 8002128:	4b81      	ldr	r3, [pc, #516]	; (8002330 <main+0xa20>)
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
KalmanAngle5 += dt*Z_correcto/1000;
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <main+0xa24>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fda5 	bl	8000c84 <__aeabi_ui2f>
 800213a:	4602      	mov	r2, r0
 800213c:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <main+0xa20>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7fe fdf6 	bl	8000d34 <__aeabi_fmul>
 8002148:	4603      	mov	r3, r0
 800214a:	497b      	ldr	r1, [pc, #492]	; (8002338 <main+0xa28>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fea5 	bl	8000e9c <__aeabi_fdiv>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	4b79      	ldr	r3, [pc, #484]	; (800233c <main+0xa2c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7fe fce1 	bl	8000b24 <__addsf3>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	4b75      	ldr	r3, [pc, #468]	; (800233c <main+0xa2c>)
 8002168:	601a      	str	r2, [r3, #0]

if(KalmanAngle5 > 90) KalmanAngle5 = 90;
 800216a:	4b74      	ldr	r3, [pc, #464]	; (800233c <main+0xa2c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4974      	ldr	r1, [pc, #464]	; (8002340 <main+0xa30>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe ff9b 	bl	80010ac <__aeabi_fcmpgt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <main+0x872>
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <main+0xa2c>)
 800217e:	4a70      	ldr	r2, [pc, #448]	; (8002340 <main+0xa30>)
 8002180:	601a      	str	r2, [r3, #0]
if(KalmanAngle5 < -90) KalmanAngle5 = -90;
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <main+0xa2c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	496f      	ldr	r1, [pc, #444]	; (8002344 <main+0xa34>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ff71 	bl	8001070 <__aeabi_fcmplt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <main+0x88a>
 8002194:	4b69      	ldr	r3, [pc, #420]	; (800233c <main+0xa2c>)
 8002196:	4a6b      	ldr	r2, [pc, #428]	; (8002344 <main+0xa34>)
 8002198:	601a      	str	r2, [r3, #0]
	 //ADC read

	 P_previa =  P;
 800219a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800219e:	67fb      	str	r3, [r7, #124]	; 0x7c

	 	Kalman = P/(P+var);
 80021a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80021a8:	f7fe fcbc 	bl	8000b24 <__addsf3>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4619      	mov	r1, r3
 80021b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80021b4:	f7fe fe72 	bl	8000e9c <__aeabi_fdiv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	67bb      	str	r3, [r7, #120]	; 0x78

	 HAL_ADC_Start(&hadc1);
 80021bc:	4862      	ldr	r0, [pc, #392]	; (8002348 <main+0xa38>)
 80021be:	f000 ff3d 	bl	800303c <HAL_ADC_Start>
	 	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 80021c2:	f04f 31ff 	mov.w	r1, #4294967295
 80021c6:	4860      	ldr	r0, [pc, #384]	; (8002348 <main+0xa38>)
 80021c8:	f000 ffe6 	bl	8003198 <HAL_ADC_PollForConversion>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <main+0x8d6>
	 		 ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 80021d2:	485d      	ldr	r0, [pc, #372]	; (8002348 <main+0xa38>)
 80021d4:	f001 f8da 	bl	800338c <HAL_ADC_GetValue>
 80021d8:	4603      	mov	r3, r0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd52 	bl	8000c84 <__aeabi_ui2f>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b5a      	ldr	r3, [pc, #360]	; (800234c <main+0xa3c>)
 80021e4:	601a      	str	r2, [r3, #0]
	 	   }

	 	 X_estimate = X + Kalman*(ADC_val-X);
 80021e6:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <main+0xa40>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fd4e 	bl	8000c8c <__aeabi_i2f>
 80021f0:	4605      	mov	r5, r0
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <main+0xa3c>)
 80021f4:	681c      	ldr	r4, [r3, #0]
 80021f6:	4b56      	ldr	r3, [pc, #344]	; (8002350 <main+0xa40>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fd46 	bl	8000c8c <__aeabi_i2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4620      	mov	r0, r4
 8002206:	f7fe fc8b 	bl	8000b20 <__aeabi_fsub>
 800220a:	4603      	mov	r3, r0
 800220c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd90 	bl	8000d34 <__aeabi_fmul>
 8002214:	4603      	mov	r3, r0
 8002216:	4619      	mov	r1, r3
 8002218:	4628      	mov	r0, r5
 800221a:	f7fe fc83 	bl	8000b24 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe ff4d 	bl	80010c0 <__aeabi_f2iz>
 8002226:	4602      	mov	r2, r0
 8002228:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <main+0xa44>)
 800222a:	601a      	str	r2, [r3, #0]
	 		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 800222c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800222e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002232:	f7fe fc75 	bl	8000b20 <__aeabi_fsub>
 8002236:	4603      	mov	r3, r0
 8002238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd7a 	bl	8000d34 <__aeabi_fmul>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f8e8 	bl	8000418 <__aeabi_f2d>
 8002248:	4605      	mov	r5, r0
 800224a:	460e      	mov	r6, r1
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <main+0xa40>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b40      	ldr	r3, [pc, #256]	; (8002354 <main+0xa44>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f8cc 	bl	80003f4 <__aeabi_i2d>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	a323      	add	r3, pc, #140	; (adr r3, 80022f8 <main+0x9e8>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002272:	f7fe f929 	bl	80004c8 <__aeabi_dmul>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	461a      	mov	r2, r3
 800227c:	4623      	mov	r3, r4
 800227e:	4628      	mov	r0, r5
 8002280:	4631      	mov	r1, r6
 8002282:	f7fd ff6b 	bl	800015c <__adddf3>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	4618      	mov	r0, r3
 800228c:	4621      	mov	r1, r4
 800228e:	f7fe fbf3 	bl	8000a78 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 		 	  X = X_estimate;
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <main+0xa44>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <main+0xa40>)
 800229e:	6013      	str	r3, [r2, #0]
	 		 	  X_estimate =(X_estimate)/10 -20;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <main+0xa44>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <main+0xa48>)
 80022a6:	fb82 1203 	smull	r1, r2, r2, r3
 80022aa:	1092      	asrs	r2, r2, #2
 80022ac:	17db      	asrs	r3, r3, #31
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	3b14      	subs	r3, #20
 80022b2:	4a28      	ldr	r2, [pc, #160]	; (8002354 <main+0xa44>)
 80022b4:	6013      	str	r3, [r2, #0]


	 //UART
	 		 	char  ese[] = "s";
 80022b6:	2373      	movs	r3, #115	; 0x73
 80022b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 		 	char  eMe[] = "M";
 80022ba:	234d      	movs	r3, #77	; 0x4d
 80022bc:	853b      	strh	r3, [r7, #40]	; 0x28
	 		 	char  eme[] = "m";
 80022be:	236d      	movs	r3, #109	; 0x6d
 80022c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	 		 	char  eSe[] = "S";
 80022c2:	2353      	movs	r3, #83	; 0x53
 80022c4:	843b      	strh	r3, [r7, #32]
// 		   KalmanAngle5 =  (KalmanAngle5 +300 )/2;//servo
//	 		 	 KalmanAngle4 =  KalmanAngle4*(-2) + 150;//base
//	 		 	 KalmanAngle1=  KalmanAngle1*(-4) + 300;//codo


	 		 	 gcvt(angulo_x,10,palabra);
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <main+0xa4c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f8a4 	bl	8000418 <__aeabi_f2d>
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <main+0xa50>)
 80022d2:	220a      	movs	r2, #10
 80022d4:	f003 fb74 	bl	80059c0 <gcvt>
	 		 	 gcvt(KalmanAngle1,10,palabra2);
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <main+0xa54>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f89b 	bl	8000418 <__aeabi_f2d>
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <main+0xa58>)
 80022e4:	220a      	movs	r2, #10
 80022e6:	f003 fb6b 	bl	80059c0 <gcvt>
	 		 	 gcvt(KalmanAngle2,10,palabra3);
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <main+0xa5c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	e03e      	b.n	8002370 <main+0xa60>
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	47ae147b 	.word	0x47ae147b
 80022fc:	3f847ae1 	.word	0x3f847ae1
 8002300:	cccccccd 	.word	0xcccccccd
 8002304:	3feccccc 	.word	0x3feccccc
 8002308:	66666666 	.word	0x66666666
 800230c:	40026666 	.word	0x40026666
 8002310:	200002dc 	.word	0x200002dc
 8002314:	200000c0 	.word	0x200000c0
 8002318:	200003a8 	.word	0x200003a8
 800231c:	200003bc 	.word	0x200003bc
 8002320:	200000bc 	.word	0x200000bc
 8002324:	20000150 	.word	0x20000150
 8002328:	20000338 	.word	0x20000338
 800232c:	200003c0 	.word	0x200003c0
 8002330:	20000304 	.word	0x20000304
 8002334:	2000035c 	.word	0x2000035c
 8002338:	447a0000 	.word	0x447a0000
 800233c:	200002a0 	.word	0x200002a0
 8002340:	42b40000 	.word	0x42b40000
 8002344:	c2b40000 	.word	0xc2b40000
 8002348:	20000224 	.word	0x20000224
 800234c:	200002ec 	.word	0x200002ec
 8002350:	2000040c 	.word	0x2000040c
 8002354:	200002e0 	.word	0x200002e0
 8002358:	66666667 	.word	0x66666667
 800235c:	200002e4 	.word	0x200002e4
 8002360:	2000033c 	.word	0x2000033c
 8002364:	20000220 	.word	0x20000220
 8002368:	200000c4 	.word	0x200000c4
 800236c:	20000330 	.word	0x20000330
 8002370:	f7fe f852 	bl	8000418 <__aeabi_f2d>
 8002374:	4bce      	ldr	r3, [pc, #824]	; (80026b0 <main+0xda0>)
 8002376:	220a      	movs	r2, #10
 8002378:	f003 fb22 	bl	80059c0 <gcvt>
	 		 	 gcvt(KalmanAngle3,10,palabra4);
 800237c:	4bcd      	ldr	r3, [pc, #820]	; (80026b4 <main+0xda4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f849 	bl	8000418 <__aeabi_f2d>
 8002386:	4bcc      	ldr	r3, [pc, #816]	; (80026b8 <main+0xda8>)
 8002388:	220a      	movs	r2, #10
 800238a:	f003 fb19 	bl	80059c0 <gcvt>
	 		 	 gcvt(KalmanAngle4,10,palabra5);
 800238e:	4bcb      	ldr	r3, [pc, #812]	; (80026bc <main+0xdac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f840 	bl	8000418 <__aeabi_f2d>
 8002398:	4bc9      	ldr	r3, [pc, #804]	; (80026c0 <main+0xdb0>)
 800239a:	220a      	movs	r2, #10
 800239c:	f003 fb10 	bl	80059c0 <gcvt>
	 		 	 gcvt(KalmanAngle5,10,palabra6);
 80023a0:	4bc8      	ldr	r3, [pc, #800]	; (80026c4 <main+0xdb4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f837 	bl	8000418 <__aeabi_f2d>
 80023aa:	4bc7      	ldr	r3, [pc, #796]	; (80026c8 <main+0xdb8>)
 80023ac:	220a      	movs	r2, #10
 80023ae:	f003 fb07 	bl	80059c0 <gcvt>
	 		 	  itoa(X_estimate,info_kalman,10);
 80023b2:	4bc6      	ldr	r3, [pc, #792]	; (80026cc <main+0xdbc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023ba:	220a      	movs	r2, #10
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fb65 	bl	8005a8c <itoa>
	 		 	  itoa(ADC_val,info_real,10);
 80023c2:	4bc3      	ldr	r3, [pc, #780]	; (80026d0 <main+0xdc0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fe7a 	bl	80010c0 <__aeabi_f2iz>
 80023cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d0:	220a      	movs	r2, #10
 80023d2:	4619      	mov	r1, r3
 80023d4:	f003 fb5a 	bl	8005a8c <itoa>



	 		 	  //MODELO CINEMATICO

	 		 	   X_c = cos(KalmanAngle5*(3.14/180)) * (L1*cos(KalmanAngle4*(3.14/180)) + L2*cos(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180))   );
 80023d8:	4bba      	ldr	r3, [pc, #744]	; (80026c4 <main+0xdb4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f81b 	bl	8000418 <__aeabi_f2d>
 80023e2:	a3b1      	add	r3, pc, #708	; (adr r3, 80026a8 <main+0xd98>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fe f86e 	bl	80004c8 <__aeabi_dmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	4618      	mov	r0, r3
 80023f2:	4621      	mov	r1, r4
 80023f4:	f005 f832 	bl	800745c <cos>
 80023f8:	4680      	mov	r8, r0
 80023fa:	4689      	mov	r9, r1
 80023fc:	4bb5      	ldr	r3, [pc, #724]	; (80026d4 <main+0xdc4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd fff7 	bl	80003f4 <__aeabi_i2d>
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
 800240a:	4bac      	ldr	r3, [pc, #688]	; (80026bc <main+0xdac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f802 	bl	8000418 <__aeabi_f2d>
 8002414:	a3a4      	add	r3, pc, #656	; (adr r3, 80026a8 <main+0xd98>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fe f855 	bl	80004c8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f005 f819 	bl	800745c <cos>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fe f849 	bl	80004c8 <__aeabi_dmul>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	469a      	mov	sl, r3
 800243c:	46a3      	mov	fp, r4
 800243e:	4ba6      	ldr	r3, [pc, #664]	; (80026d8 <main+0xdc8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd ffd6 	bl	80003f4 <__aeabi_i2d>
 8002448:	e9c7 0100 	strd	r0, r1, [r7]
 800244c:	4b9b      	ldr	r3, [pc, #620]	; (80026bc <main+0xdac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd ffe1 	bl	8000418 <__aeabi_f2d>
 8002456:	a394      	add	r3, pc, #592	; (adr r3, 80026a8 <main+0xd98>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f834 	bl	80004c8 <__aeabi_dmul>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	461d      	mov	r5, r3
 8002466:	4626      	mov	r6, r4
 8002468:	4b9c      	ldr	r3, [pc, #624]	; (80026dc <main+0xdcc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffd3 	bl	8000418 <__aeabi_f2d>
 8002472:	a38d      	add	r3, pc, #564	; (adr r3, 80026a8 <main+0xd98>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f826 	bl	80004c8 <__aeabi_dmul>
 800247c:	4603      	mov	r3, r0
 800247e:	460c      	mov	r4, r1
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	4628      	mov	r0, r5
 8002486:	4631      	mov	r1, r6
 8002488:	f7fd fe68 	bl	800015c <__adddf3>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	4618      	mov	r0, r3
 8002492:	4621      	mov	r1, r4
 8002494:	f004 ffe2 	bl	800745c <cos>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a4:	f7fe f810 	bl	80004c8 <__aeabi_dmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	4650      	mov	r0, sl
 80024b2:	4659      	mov	r1, fp
 80024b4:	f7fd fe52 	bl	800015c <__adddf3>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	4640      	mov	r0, r8
 80024c2:	4649      	mov	r1, r9
 80024c4:	f7fe f800 	bl	80004c8 <__aeabi_dmul>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	4618      	mov	r0, r3
 80024ce:	4621      	mov	r1, r4
 80024d0:	f7fe fad2 	bl	8000a78 <__aeabi_d2f>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <main+0xdd0>)
 80024d8:	601a      	str	r2, [r3, #0]
	 		 	   Y_c = sin(KalmanAngle5*(3.14/180)) * (L1*cos(KalmanAngle4*(3.14/180)) + L2*cos(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180))   );
 80024da:	4b7a      	ldr	r3, [pc, #488]	; (80026c4 <main+0xdb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd ff9a 	bl	8000418 <__aeabi_f2d>
 80024e4:	a370      	add	r3, pc, #448	; (adr r3, 80026a8 <main+0xd98>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f7fd ffed 	bl	80004c8 <__aeabi_dmul>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	4618      	mov	r0, r3
 80024f4:	4621      	mov	r1, r4
 80024f6:	f004 ffeb 	bl	80074d0 <sin>
 80024fa:	4680      	mov	r8, r0
 80024fc:	4689      	mov	r9, r1
 80024fe:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <main+0xdc4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ff76 	bl	80003f4 <__aeabi_i2d>
 8002508:	4604      	mov	r4, r0
 800250a:	460d      	mov	r5, r1
 800250c:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <main+0xdac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ff81 	bl	8000418 <__aeabi_f2d>
 8002516:	a364      	add	r3, pc, #400	; (adr r3, 80026a8 <main+0xd98>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fd ffd4 	bl	80004c8 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f004 ff98 	bl	800745c <cos>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fd ffc8 	bl	80004c8 <__aeabi_dmul>
 8002538:	4603      	mov	r3, r0
 800253a:	460c      	mov	r4, r1
 800253c:	469a      	mov	sl, r3
 800253e:	46a3      	mov	fp, r4
 8002540:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <main+0xdc8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ff55 	bl	80003f4 <__aeabi_i2d>
 800254a:	e9c7 0100 	strd	r0, r1, [r7]
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <main+0xdac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ff60 	bl	8000418 <__aeabi_f2d>
 8002558:	a353      	add	r3, pc, #332	; (adr r3, 80026a8 <main+0xd98>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fd ffb3 	bl	80004c8 <__aeabi_dmul>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	461d      	mov	r5, r3
 8002568:	4626      	mov	r6, r4
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <main+0xdcc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ff52 	bl	8000418 <__aeabi_f2d>
 8002574:	a34c      	add	r3, pc, #304	; (adr r3, 80026a8 <main+0xd98>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fd ffa5 	bl	80004c8 <__aeabi_dmul>
 800257e:	4603      	mov	r3, r0
 8002580:	460c      	mov	r4, r1
 8002582:	461a      	mov	r2, r3
 8002584:	4623      	mov	r3, r4
 8002586:	4628      	mov	r0, r5
 8002588:	4631      	mov	r1, r6
 800258a:	f7fd fde7 	bl	800015c <__adddf3>
 800258e:	4603      	mov	r3, r0
 8002590:	460c      	mov	r4, r1
 8002592:	4618      	mov	r0, r3
 8002594:	4621      	mov	r1, r4
 8002596:	f004 ff61 	bl	800745c <cos>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025a6:	f7fd ff8f 	bl	80004c8 <__aeabi_dmul>
 80025aa:	4603      	mov	r3, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	4650      	mov	r0, sl
 80025b4:	4659      	mov	r1, fp
 80025b6:	f7fd fdd1 	bl	800015c <__adddf3>
 80025ba:	4603      	mov	r3, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	461a      	mov	r2, r3
 80025c0:	4623      	mov	r3, r4
 80025c2:	4640      	mov	r0, r8
 80025c4:	4649      	mov	r1, r9
 80025c6:	f7fd ff7f 	bl	80004c8 <__aeabi_dmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	4618      	mov	r0, r3
 80025d0:	4621      	mov	r1, r4
 80025d2:	f7fe fa51 	bl	8000a78 <__aeabi_d2f>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <main+0xdd4>)
 80025da:	601a      	str	r2, [r3, #0]
	 		 	   Z_c = (L1*sin(KalmanAngle4*(3.14/180))) + (L2*sin(KalmanAngle4*(3.14/180)+ KalmanAngle1*(3.14/180)));
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <main+0xdc4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff07 	bl	80003f4 <__aeabi_i2d>
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <main+0xdac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff12 	bl	8000418 <__aeabi_f2d>
 80025f4:	a32c      	add	r3, pc, #176	; (adr r3, 80026a8 <main+0xd98>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fd ff65 	bl	80004c8 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f004 ff63 	bl	80074d0 <sin>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd ff59 	bl	80004c8 <__aeabi_dmul>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	4625      	mov	r5, r4
 800261c:	461c      	mov	r4, r3
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <main+0xdc8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fee6 	bl	80003f4 <__aeabi_i2d>
 8002628:	4680      	mov	r8, r0
 800262a:	4689      	mov	r9, r1
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <main+0xdac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd fef1 	bl	8000418 <__aeabi_f2d>
 8002636:	a31c      	add	r3, pc, #112	; (adr r3, 80026a8 <main+0xd98>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd ff44 	bl	80004c8 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4692      	mov	sl, r2
 8002646:	469b      	mov	fp, r3
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <main+0xdcc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fee3 	bl	8000418 <__aeabi_f2d>
 8002652:	a315      	add	r3, pc, #84	; (adr r3, 80026a8 <main+0xd98>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fd ff36 	bl	80004c8 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4650      	mov	r0, sl
 8002662:	4659      	mov	r1, fp
 8002664:	f7fd fd7a 	bl	800015c <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f004 ff2e 	bl	80074d0 <sin>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fd ff24 	bl	80004c8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fd68 	bl	800015c <__adddf3>
 800268c:	4603      	mov	r3, r0
 800268e:	460c      	mov	r4, r1
 8002690:	4618      	mov	r0, r3
 8002692:	4621      	mov	r1, r4
 8002694:	f7fe f9f0 	bl	8000a78 <__aeabi_d2f>
 8002698:	4602      	mov	r2, r0
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <main+0xdd8>)
 800269c:	601a      	str	r2, [r3, #0]

	 		 	if( HAL_GetTick() -trans_time > 50){
 800269e:	f000 fbc9 	bl	8002e34 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	e022      	b.n	80026ec <main+0xddc>
 80026a6:	bf00      	nop
 80026a8:	d98b0955 	.word	0xd98b0955
 80026ac:	3f91dcf4 	.word	0x3f91dcf4
 80026b0:	20000310 	.word	0x20000310
 80026b4:	200001b8 	.word	0x200001b8
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	200002dc 	.word	0x200002dc
 80026c0:	20000388 	.word	0x20000388
 80026c4:	200002a0 	.word	0x200002a0
 80026c8:	20000364 	.word	0x20000364
 80026cc:	200002e0 	.word	0x200002e0
 80026d0:	200002ec 	.word	0x200002ec
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004
 80026dc:	20000220 	.word	0x20000220
 80026e0:	20000258 	.word	0x20000258
 80026e4:	200002c8 	.word	0x200002c8
 80026e8:	2000030c 	.word	0x2000030c
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <main+0xe54>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b32      	cmp	r3, #50	; 0x32
 80026f4:	f67f a96e 	bls.w	80019d4 <main+0xc4>

	    HAL_UART_Transmit(&huart1, (uint8_t*)eMe, sizeof(char), 100);
 80026f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80026fc:	2364      	movs	r3, #100	; 0x64
 80026fe:	2201      	movs	r2, #1
 8002700:	4819      	ldr	r0, [pc, #100]	; (8002768 <main+0xe58>)
 8002702:	f002 fff2 	bl	80056ea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra5,sizeof(float ), 100);//palabra
 8002706:	2364      	movs	r3, #100	; 0x64
 8002708:	2204      	movs	r2, #4
 800270a:	4918      	ldr	r1, [pc, #96]	; (800276c <main+0xe5c>)
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <main+0xe58>)
 800270e:	f002 ffec 	bl	80056ea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)ese, sizeof(char), 100);
 8002712:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002716:	2364      	movs	r3, #100	; 0x64
 8002718:	2201      	movs	r2, #1
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <main+0xe58>)
 800271c:	f002 ffe5 	bl	80056ea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra6,sizeof(float ), 100);
 8002720:	2364      	movs	r3, #100	; 0x64
 8002722:	2204      	movs	r2, #4
 8002724:	4912      	ldr	r1, [pc, #72]	; (8002770 <main+0xe60>)
 8002726:	4810      	ldr	r0, [pc, #64]	; (8002768 <main+0xe58>)
 8002728:	f002 ffdf 	bl	80056ea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)eme, sizeof(char), 100);
 800272c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002730:	2364      	movs	r3, #100	; 0x64
 8002732:	2201      	movs	r2, #1
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <main+0xe58>)
 8002736:	f002 ffd8 	bl	80056ea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)palabra2,sizeof(float ), 100);
 800273a:	2364      	movs	r3, #100	; 0x64
 800273c:	2204      	movs	r2, #4
 800273e:	490d      	ldr	r1, [pc, #52]	; (8002774 <main+0xe64>)
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <main+0xe58>)
 8002742:	f002 ffd2 	bl	80056ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)ln, sizeof(comma), 100);
 8002746:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800274a:	2364      	movs	r3, #100	; 0x64
 800274c:	2202      	movs	r2, #2
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <main+0xe58>)
 8002750:	f002 ffcb 	bl	80056ea <HAL_UART_Transmit>

				trans_time = HAL_GetTick();
 8002754:	f000 fb6e 	bl	8002e34 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	4b02      	ldr	r3, [pc, #8]	; (8002764 <main+0xe54>)
 800275c:	601a      	str	r2, [r3, #0]
  {
 800275e:	f7ff b939 	b.w	80019d4 <main+0xc4>
 8002762:	bf00      	nop
 8002764:	200000f8 	.word	0x200000f8
 8002768:	2000025c 	.word	0x2000025c
 800276c:	20000388 	.word	0x20000388
 8002770:	20000364 	.word	0x20000364
 8002774:	200000c4 	.word	0x200000c4

08002778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b094      	sub	sp, #80	; 0x50
 800277c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002782:	2228      	movs	r2, #40	; 0x28
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f003 f98d 	bl	8005aa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a8:	2302      	movs	r3, #2
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ac:	2301      	movs	r3, #1
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b0:	2310      	movs	r3, #16
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 f9b9 	bl	8004b34 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80027c8:	f000 f928 	bl	8002a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fc24 	bl	8005034 <HAL_RCC_ClockConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80027f2:	f000 f913 	bl	8002a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027f6:	2302      	movs	r3, #2
 80027f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fdb3 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800280c:	f000 f906 	bl	8002a1c <Error_Handler>
  }
}
 8002810:	bf00      	nop
 8002812:	3750      	adds	r7, #80	; 0x50
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_ADC1_Init+0x74>)
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <MX_ADC1_Init+0x78>)
 800282c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_ADC1_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_ADC1_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_ADC1_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_ADC1_Init+0x74>)
 8002842:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_ADC1_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_ADC1_Init+0x74>)
 8002850:	2201      	movs	r2, #1
 8002852:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <MX_ADC1_Init+0x74>)
 8002856:	f000 fb19 	bl	8002e8c <HAL_ADC_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002860:	f000 f8dc 	bl	8002a1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002868:	2301      	movs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_ADC1_Init+0x74>)
 8002876:	f000 fd95 	bl	80033a4 <HAL_ADC_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002880:	f000 f8cc 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000224 	.word	0x20000224
 8002890:	40012400 	.word	0x40012400

08002894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <MX_I2C1_Init+0x50>)
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <MX_I2C1_Init+0x54>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <MX_I2C1_Init+0x58>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028d2:	f001 f941 	bl	8003b58 <HAL_I2C_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028dc:	f000 f89e 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200000fc 	.word	0x200000fc
 80028e8:	40005400 	.word	0x40005400
 80028ec:	000186a0 	.word	0x000186a0

080028f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <MX_I2C2_Init+0x50>)
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <MX_I2C2_Init+0x54>)
 80028f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_I2C2_Init+0x50>)
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <MX_I2C2_Init+0x58>)
 80028fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <MX_I2C2_Init+0x50>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_I2C2_Init+0x50>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_I2C2_Init+0x50>)
 800290e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002912:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <MX_I2C2_Init+0x50>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_I2C2_Init+0x50>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <MX_I2C2_Init+0x50>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_I2C2_Init+0x50>)
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <MX_I2C2_Init+0x50>)
 800292e:	f001 f913 	bl	8003b58 <HAL_I2C_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002938:	f000 f870 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000154 	.word	0x20000154
 8002944:	40005800 	.word	0x40005800
 8002948:	000186a0 	.word	0x000186a0

0800294c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <MX_USART1_UART_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800295c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002984:	f002 fe64 	bl	8005650 <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800298e:	f000 f845 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000025c 	.word	0x2000025c
 800299c:	40013800 	.word	0x40013800

080029a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_GPIO_Init+0x74>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2120      	movs	r1, #32
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <MX_GPIO_Init+0x78>)
 80029ea:	f001 f89d 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029ee:	2320      	movs	r3, #32
 80029f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2302      	movs	r3, #2
 80029fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4619      	mov	r1, r3
 8002a04:	4804      	ldr	r0, [pc, #16]	; (8002a18 <MX_GPIO_Init+0x78>)
 8002a06:	f000 ff35 	bl	8003874 <HAL_GPIO_Init>

}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800

08002a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <Error_Handler+0x6>

08002a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6193      	str	r3, [r2, #24]
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_MspInit+0x5c>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_MspInit+0x60>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_MspInit+0x60>)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010000 	.word	0x40010000

08002a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_ADC_MspInit+0x6c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d121      	bne.n	8002aec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_ADC_MspInit+0x70>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002adc:	2303      	movs	r3, #3
 8002ade:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_ADC_MspInit+0x74>)
 8002ae8:	f000 fec4 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012400 	.word	0x40012400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800

08002b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0318 	add.w	r3, r7, #24
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_I2C_MspInit+0xc8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d124      	bne.n	8002b6a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b38:	23c0      	movs	r3, #192	; 0xc0
 8002b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3c:	2312      	movs	r3, #18
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4821      	ldr	r0, [pc, #132]	; (8002bd0 <HAL_I2C_MspInit+0xd0>)
 8002b4c:	f000 fe92 	bl	8003874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b68:	e029      	b.n	8002bbe <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_I2C_MspInit+0xd4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d124      	bne.n	8002bbe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b92:	2312      	movs	r3, #18
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9a:	f107 0318 	add.w	r3, r7, #24
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <HAL_I2C_MspInit+0xd0>)
 8002ba2:	f000 fe67 	bl	8003874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_I2C_MspInit+0xcc>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010c00 	.word	0x40010c00
 8002bd4:	40005800 	.word	0x40005800

08002bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_UART_MspInit+0x8c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d131      	bne.n	8002c5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6193      	str	r3, [r2, #24]
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_UART_MspInit+0x90>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <HAL_UART_MspInit+0x94>)
 8002c3e:	f000 fe19 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <HAL_UART_MspInit+0x94>)
 8002c58:	f000 fe0c 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010800 	.word	0x40010800

08002c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <NMI_Handler+0x4>

08002c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <HardFault_Handler+0x4>

08002c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <MemManage_Handler+0x4>

08002c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <BusFault_Handler+0x4>

08002c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <UsageFault_Handler+0x4>

08002c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb6:	f000 f8ab 	bl	8002e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f002 fe8a 	bl	8005a08 <__errno>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20005000 	.word	0x20005000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	200000b0 	.word	0x200000b0
 8002d28:	20000418 	.word	0x20000418

08002d2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d3a:	e003      	b.n	8002d44 <LoopCopyDataInit>

08002d3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d42:	3104      	adds	r1, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d44:	480a      	ldr	r0, [pc, #40]	; (8002d70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d4c:	d3f6      	bcc.n	8002d3c <CopyDataInit>
  ldr r2, =_sbss
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d50:	e002      	b.n	8002d58 <LoopFillZerobss>

08002d52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d54:	f842 3b04 	str.w	r3, [r2], #4

08002d58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d5c:	d3f9      	bcc.n	8002d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d5e:	f7ff ffe5 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d62:	f002 fe57 	bl	8005a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d66:	f7fe fdd3 	bl	8001910 <main>
  bx lr
 8002d6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d6c:	080098a8 	.word	0x080098a8
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d74:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002d78:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002d7c:	20000418 	.word	0x20000418

08002d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d80:	e7fe      	b.n	8002d80 <ADC1_2_IRQHandler>
	...

08002d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_Init+0x28>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_Init+0x28>)
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d94:	2003      	movs	r0, #3
 8002d96:	f000 fd39 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f000 f808 	bl	8002db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fe40 	bl	8002a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000

08002db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x54>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x58>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd43 	bl	800385a <HAL_SYSTICK_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00e      	b.n	8002dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d80a      	bhi.n	8002dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f000 fd19 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df0:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <HAL_InitTick+0x5c>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000014 	.word	0x20000014
 8002e08:	2000001c 	.word	0x2000001c
 8002e0c:	20000018 	.word	0x20000018

08002e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_IncTick+0x1c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_IncTick+0x20>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_IncTick+0x20>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	2000001c 	.word	0x2000001c
 8002e30:	20000410 	.word	0x20000410

08002e34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_GetTick+0x10>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	20000410 	.word	0x20000410

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_Delay+0x40>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffe0 	bl	8002e34 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2000001c 	.word	0x2000001c

08002e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0be      	b.n	800302c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fddc 	bl	8002a88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fbb1 	bl	8003638 <ADC_ConversionStop_Disable>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8099 	bne.w	800301a <HAL_ADC_Init+0x18e>
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 8095 	bne.w	800301a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef8:	f023 0302 	bic.w	r3, r3, #2
 8002efc:	f043 0202 	orr.w	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7b1b      	ldrb	r3, [r3, #12]
 8002f12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f24:	d003      	beq.n	8002f2e <HAL_ADC_Init+0xa2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d102      	bne.n	8002f34 <HAL_ADC_Init+0xa8>
 8002f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f32:	e000      	b.n	8002f36 <HAL_ADC_Init+0xaa>
 8002f34:	2300      	movs	r3, #0
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7d1b      	ldrb	r3, [r3, #20]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d119      	bne.n	8002f78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7b1b      	ldrb	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	035a      	lsls	r2, r3, #13
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e00b      	b.n	8002f78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_ADC_Init+0x1a8>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d003      	beq.n	8002fb2 <HAL_ADC_Init+0x126>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d104      	bne.n	8002fbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	051b      	lsls	r3, r3, #20
 8002fba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_ADC_Init+0x1ac>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10b      	bne.n	8002ff8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff6:	e018      	b.n	800302a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f023 0312 	bic.w	r3, r3, #18
 8003000:	f043 0210 	orr.w	r2, r3, #16
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003018:	e007      	b.n	800302a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	ffe1f7fd 	.word	0xffe1f7fd
 8003038:	ff1f0efe 	.word	0xff1f0efe

0800303c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start+0x1a>
 8003052:	2302      	movs	r3, #2
 8003054:	e098      	b.n	8003188 <HAL_ADC_Start+0x14c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa98 	bl	8003594 <ADC_Enable>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 8087 	bne.w	800317e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_ADC_Start+0x154>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d105      	bne.n	800309a <HAL_ADC_Start+0x5e>
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_ADC_Start+0x158>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d026      	beq.n	8003102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030c4:	e01d      	b.n	8003102 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2f      	ldr	r2, [pc, #188]	; (8003194 <HAL_ADC_Start+0x158>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_Start+0xaa>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_ADC_Start+0x154>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10d      	bne.n	8003102 <HAL_ADC_Start+0xc6>
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_ADC_Start+0x158>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f023 0206 	bic.w	r2, r3, #6
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
 800311a:	e002      	b.n	8003122 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0202 	mvn.w	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800313e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003142:	d113      	bne.n	800316c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <HAL_ADC_Start+0x154>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d105      	bne.n	800315a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_ADC_Start+0x158>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e00c      	b.n	8003186 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e003      	b.n	8003186 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40012800 	.word	0x40012800
 8003194:	40012400 	.word	0x40012400

08003198 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80031ae:	f7ff fe41 	bl	8002e34 <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0c8      	b.n	800336c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d12a      	bne.n	800323e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d123      	bne.n	800323e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80031f6:	e01a      	b.n	800322e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d016      	beq.n	800322e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_ADC_PollForConversion+0x7e>
 8003206:	f7ff fe15 	bl	8002e34 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d20b      	bcs.n	800322e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e09e      	b.n	800336c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0dd      	beq.n	80031f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800323c:	e06c      	b.n	8003318 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800323e:	4b4d      	ldr	r3, [pc, #308]	; (8003374 <HAL_ADC_PollForConversion+0x1dc>)
 8003240:	681c      	ldr	r4, [r3, #0]
 8003242:	2002      	movs	r0, #2
 8003244:	f002 f948 	bl	80054d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003248:	4603      	mov	r3, r0
 800324a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6919      	ldr	r1, [r3, #16]
 8003254:	4b48      	ldr	r3, [pc, #288]	; (8003378 <HAL_ADC_PollForConversion+0x1e0>)
 8003256:	400b      	ands	r3, r1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d118      	bne.n	800328e <HAL_ADC_PollForConversion+0xf6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_ADC_PollForConversion+0x1e4>)
 8003264:	400b      	ands	r3, r1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d111      	bne.n	800328e <HAL_ADC_PollForConversion+0xf6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_ADC_PollForConversion+0x1e8>)
 8003272:	400b      	ands	r3, r1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_ADC_PollForConversion+0xf2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_ADC_PollForConversion+0x1ec>)
 8003280:	400b      	ands	r3, r1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_PollForConversion+0xf2>
 8003286:	2314      	movs	r3, #20
 8003288:	e020      	b.n	80032cc <HAL_ADC_PollForConversion+0x134>
 800328a:	2329      	movs	r3, #41	; 0x29
 800328c:	e01e      	b.n	80032cc <HAL_ADC_PollForConversion+0x134>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_ADC_PollForConversion+0x1e8>)
 8003296:	400b      	ands	r3, r1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <HAL_ADC_PollForConversion+0x112>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_ADC_PollForConversion+0x1ec>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <HAL_ADC_PollForConversion+0x12e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_ADC_PollForConversion+0x1f0>)
 80032b2:	400b      	ands	r3, r1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <HAL_ADC_PollForConversion+0x132>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68d9      	ldr	r1, [r3, #12]
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_ADC_PollForConversion+0x1f0>)
 80032c0:	400b      	ands	r3, r1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_PollForConversion+0x132>
 80032c6:	2354      	movs	r3, #84	; 0x54
 80032c8:	e000      	b.n	80032cc <HAL_ADC_PollForConversion+0x134>
 80032ca:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032d2:	e01d      	b.n	8003310 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d016      	beq.n	800330a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x15a>
 80032e2:	f7ff fda7 	bl	8002e34 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d20b      	bcs.n	800330a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f043 0204 	orr.w	r2, r3, #4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e030      	b.n	800336c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3301      	adds	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8dd      	bhi.n	80032d4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0212 	mvn.w	r2, #18
 8003320:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003338:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800333c:	d115      	bne.n	800336a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003342:	2b00      	cmp	r3, #0
 8003344:	d111      	bne.n	800336a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	20000014 	.word	0x20000014
 8003378:	24924924 	.word	0x24924924
 800337c:	00924924 	.word	0x00924924
 8003380:	12492492 	.word	0x12492492
 8003384:	00492492 	.word	0x00492492
 8003388:	00249249 	.word	0x00249249

0800338c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x20>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0dc      	b.n	800357e <HAL_ADC_ConfigChannel+0x1da>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d81c      	bhi.n	800340e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3b05      	subs	r3, #5
 80033e6:	221f      	movs	r2, #31
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4019      	ands	r1, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b05      	subs	r3, #5
 8003400:	fa00 f203 	lsl.w	r2, r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	635a      	str	r2, [r3, #52]	; 0x34
 800340c:	e03c      	b.n	8003488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d81c      	bhi.n	8003450 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b23      	subs	r3, #35	; 0x23
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	4019      	ands	r1, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b23      	subs	r3, #35	; 0x23
 8003442:	fa00 f203 	lsl.w	r2, r0, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e01b      	b.n	8003488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b41      	subs	r3, #65	; 0x41
 8003462:	221f      	movs	r2, #31
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	4019      	ands	r1, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	3b41      	subs	r3, #65	; 0x41
 800347c:	fa00 f203 	lsl.w	r2, r0, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b09      	cmp	r3, #9
 800348e:	d91c      	bls.n	80034ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68d9      	ldr	r1, [r3, #12]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	3b1e      	subs	r3, #30
 80034a2:	2207      	movs	r2, #7
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4019      	ands	r1, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6898      	ldr	r0, [r3, #8]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	3b1e      	subs	r3, #30
 80034bc:	fa00 f203 	lsl.w	r2, r0, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	e019      	b.n	80034fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6919      	ldr	r1, [r3, #16]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	2207      	movs	r2, #7
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	4019      	ands	r1, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6898      	ldr	r0, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	fa00 f203 	lsl.w	r2, r0, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d003      	beq.n	800350e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800350a:	2b11      	cmp	r3, #17
 800350c:	d132      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_ADC_ConfigChannel+0x1e4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d126      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003534:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d11a      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_ADC_ConfigChannel+0x1e8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <HAL_ADC_ConfigChannel+0x1ec>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9a      	lsrs	r2, r3, #18
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003554:	e002      	b.n	800355c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f9      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x1b2>
 8003562:	e007      	b.n	8003574 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	40012400 	.word	0x40012400
 800358c:	20000014 	.word	0x20000014
 8003590:	431bde83 	.word	0x431bde83

08003594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d039      	beq.n	8003626 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <ADC_Enable+0x9c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <ADC_Enable+0xa0>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	0c9b      	lsrs	r3, r3, #18
 80035ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035d0:	e002      	b.n	80035d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035de:	f7ff fc29 	bl	8002e34 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035e4:	e018      	b.n	8003618 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035e6:	f7ff fc25 	bl	8002e34 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d911      	bls.n	8003618 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	f043 0210 	orr.w	r2, r3, #16
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d1df      	bne.n	80035e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000014 	.word	0x20000014
 8003634:	431bde83 	.word	0x431bde83

08003638 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d127      	bne.n	80036a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003662:	f7ff fbe7 	bl	8002e34 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003668:	e014      	b.n	8003694 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800366a:	f7ff fbe3 	bl	8002e34 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d90d      	bls.n	8003694 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d0e3      	beq.n	800366a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
         );
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff90 	bl	8003710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff49 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff5e 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff90 	bl	8003764 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5f 	bl	8003710 <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffb0 	bl	80037c8 <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e127      	b.n	8003ad8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003888:	2201      	movs	r2, #1
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8116 	bne.w	8003ad2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b12      	cmp	r3, #18
 80038ac:	d034      	beq.n	8003918 <HAL_GPIO_Init+0xa4>
 80038ae:	2b12      	cmp	r3, #18
 80038b0:	d80d      	bhi.n	80038ce <HAL_GPIO_Init+0x5a>
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d02b      	beq.n	800390e <HAL_GPIO_Init+0x9a>
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d804      	bhi.n	80038c4 <HAL_GPIO_Init+0x50>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d031      	beq.n	8003922 <HAL_GPIO_Init+0xae>
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d01c      	beq.n	80038fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038c2:	e048      	b.n	8003956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d043      	beq.n	8003950 <HAL_GPIO_Init+0xdc>
 80038c8:	2b11      	cmp	r3, #17
 80038ca:	d01b      	beq.n	8003904 <HAL_GPIO_Init+0x90>
          break;
 80038cc:	e043      	b.n	8003956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038ce:	4a89      	ldr	r2, [pc, #548]	; (8003af4 <HAL_GPIO_Init+0x280>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d026      	beq.n	8003922 <HAL_GPIO_Init+0xae>
 80038d4:	4a87      	ldr	r2, [pc, #540]	; (8003af4 <HAL_GPIO_Init+0x280>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d806      	bhi.n	80038e8 <HAL_GPIO_Init+0x74>
 80038da:	4a87      	ldr	r2, [pc, #540]	; (8003af8 <HAL_GPIO_Init+0x284>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d020      	beq.n	8003922 <HAL_GPIO_Init+0xae>
 80038e0:	4a86      	ldr	r2, [pc, #536]	; (8003afc <HAL_GPIO_Init+0x288>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_GPIO_Init+0xae>
          break;
 80038e6:	e036      	b.n	8003956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038e8:	4a85      	ldr	r2, [pc, #532]	; (8003b00 <HAL_GPIO_Init+0x28c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_Init+0xae>
 80038ee:	4a85      	ldr	r2, [pc, #532]	; (8003b04 <HAL_GPIO_Init+0x290>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d016      	beq.n	8003922 <HAL_GPIO_Init+0xae>
 80038f4:	4a84      	ldr	r2, [pc, #528]	; (8003b08 <HAL_GPIO_Init+0x294>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0xae>
          break;
 80038fa:	e02c      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	623b      	str	r3, [r7, #32]
          break;
 8003902:	e028      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	623b      	str	r3, [r7, #32]
          break;
 800390c:	e023      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	3308      	adds	r3, #8
 8003914:	623b      	str	r3, [r7, #32]
          break;
 8003916:	e01e      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	330c      	adds	r3, #12
 800391e:	623b      	str	r3, [r7, #32]
          break;
 8003920:	e019      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800392a:	2304      	movs	r3, #4
 800392c:	623b      	str	r3, [r7, #32]
          break;
 800392e:	e012      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003938:	2308      	movs	r3, #8
 800393a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	611a      	str	r2, [r3, #16]
          break;
 8003942:	e008      	b.n	8003956 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003944:	2308      	movs	r3, #8
 8003946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	615a      	str	r2, [r3, #20]
          break;
 800394e:	e002      	b.n	8003956 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003950:	2300      	movs	r3, #0
 8003952:	623b      	str	r3, [r7, #32]
          break;
 8003954:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2bff      	cmp	r3, #255	; 0xff
 800395a:	d801      	bhi.n	8003960 <HAL_GPIO_Init+0xec>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e001      	b.n	8003964 <HAL_GPIO_Init+0xf0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2bff      	cmp	r3, #255	; 0xff
 800396a:	d802      	bhi.n	8003972 <HAL_GPIO_Init+0xfe>
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	e002      	b.n	8003978 <HAL_GPIO_Init+0x104>
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	3b08      	subs	r3, #8
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	210f      	movs	r1, #15
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	6a39      	ldr	r1, [r7, #32]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	431a      	orrs	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8096 	beq.w	8003ad2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039a6:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6193      	str	r3, [r2, #24]
 80039b2:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039be:	4a54      	ldr	r2, [pc, #336]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_GPIO_Init+0x2a0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x19e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_GPIO_Init+0x2a4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x19a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x196>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_GPIO_Init+0x2ac>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x192>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e006      	b.n	8003a14 <HAL_GPIO_Init+0x1a0>
 8003a06:	2304      	movs	r3, #4
 8003a08:	e004      	b.n	8003a14 <HAL_GPIO_Init+0x1a0>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_Init+0x1a0>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x1a0>
 8003a12:	2300      	movs	r3, #0
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	4093      	lsls	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a24:	493a      	ldr	r1, [pc, #232]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4938      	ldr	r1, [pc, #224]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
 8003a4a:	e006      	b.n	8003a5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4933      	ldr	r1, [pc, #204]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	492e      	ldr	r1, [pc, #184]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e006      	b.n	8003a82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	4929      	ldr	r1, [pc, #164]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a8e:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	4924      	ldr	r1, [pc, #144]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
 8003a9a:	e006      	b.n	8003aaa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	491f      	ldr	r1, [pc, #124]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	491a      	ldr	r1, [pc, #104]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60cb      	str	r3, [r1, #12]
 8003ac2:	e006      	b.n	8003ad2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	4915      	ldr	r1, [pc, #84]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f47f aed0 	bne.w	8003888 <HAL_GPIO_Init+0x14>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	372c      	adds	r7, #44	; 0x2c
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	10210000 	.word	0x10210000
 8003af8:	10110000 	.word	0x10110000
 8003afc:	10120000 	.word	0x10120000
 8003b00:	10310000 	.word	0x10310000
 8003b04:	10320000 	.word	0x10320000
 8003b08:	10220000 	.word	0x10220000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010800 	.word	0x40010800
 8003b18:	40010c00 	.word	0x40010c00
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40011400 	.word	0x40011400
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e11f      	b.n	8003daa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe ffbe 	bl	8002b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f001 fb90 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a7b      	ldr	r2, [pc, #492]	; (8003db4 <HAL_I2C_Init+0x25c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d807      	bhi.n	8003bdc <HAL_I2C_Init+0x84>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_I2C_Init+0x260>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e006      	b.n	8003bea <HAL_I2C_Init+0x92>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a77      	ldr	r2, [pc, #476]	; (8003dbc <HAL_I2C_Init+0x264>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0db      	b.n	8003daa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a72      	ldr	r2, [pc, #456]	; (8003dc0 <HAL_I2C_Init+0x268>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a64      	ldr	r2, [pc, #400]	; (8003db4 <HAL_I2C_Init+0x25c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d802      	bhi.n	8003c2c <HAL_I2C_Init+0xd4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	e009      	b.n	8003c40 <HAL_I2C_Init+0xe8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <HAL_I2C_Init+0x26c>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	3301      	adds	r3, #1
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4956      	ldr	r1, [pc, #344]	; (8003db4 <HAL_I2C_Init+0x25c>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d80d      	bhi.n	8003c7c <HAL_I2C_Init+0x124>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e59      	subs	r1, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	bf38      	it	cc
 8003c78:	2304      	movcc	r3, #4
 8003c7a:	e04f      	b.n	8003d1c <HAL_I2C_Init+0x1c4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_I2C_Init+0x150>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e012      	b.n	8003cce <HAL_I2C_Init+0x176>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x17e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_I2C_Init+0x1c4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_I2C_Init+0x1a4>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e58      	subs	r0, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	440b      	add	r3, r1
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Init+0x1c4>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6911      	ldr	r1, [r2, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	000186a0 	.word	0x000186a0
 8003db8:	001e847f 	.word	0x001e847f
 8003dbc:	003d08ff 	.word	0x003d08ff
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	817b      	strh	r3, [r7, #10]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	813b      	strh	r3, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de2:	f7ff f827 	bl	8002e34 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	f040 80d9 	bne.w	8003fa8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2319      	movs	r3, #25
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	496d      	ldr	r1, [pc, #436]	; (8003fb4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fcbb 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e0cc      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Mem_Write+0x56>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0c5      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d007      	beq.n	8003e44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2221      	movs	r2, #33	; 0x21
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2240      	movs	r2, #64	; 0x40
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a4d      	ldr	r2, [pc, #308]	; (8003fb8 <HAL_I2C_Mem_Write+0x1f0>)
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e86:	88f8      	ldrh	r0, [r7, #6]
 8003e88:	893a      	ldrh	r2, [r7, #8]
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 faf2 	bl	8004480 <I2C_RequestMemoryWrite>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d052      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e081      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fd3c 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06b      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d11b      	bne.n	8003f48 <HAL_I2C_Mem_Write+0x180>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d017      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1aa      	bne.n	8003ea6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fd28 	bl	80049aa <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d107      	bne.n	8003f78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e016      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	00100002 	.word	0x00100002
 8003fb8:	ffff0000 	.word	0xffff0000

08003fbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	813b      	strh	r3, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fda:	f7fe ff2b 	bl	8002e34 <HAL_GetTick>
 8003fde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	f040 823d 	bne.w	8004468 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2319      	movs	r3, #25
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4981      	ldr	r1, [pc, #516]	; (80041fc <HAL_I2C_Mem_Read+0x240>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fbbf 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
 8004006:	e230      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Mem_Read+0x5a>
 8004012:	2302      	movs	r3, #2
 8004014:	e229      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d007      	beq.n	800403c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2222      	movs	r2, #34	; 0x22
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_I2C_Mem_Read+0x244>)
 800407c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407e:	88f8      	ldrh	r0, [r7, #6]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fa8c 	bl	80045ac <I2C_RequestMemoryRead>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1e5      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d113      	bne.n	80040ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e1b9      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d11d      	bne.n	8004112 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040e6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800410e:	b662      	cpsie	i
 8004110:	e197      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	2b02      	cmp	r3, #2
 8004118:	d11d      	bne.n	8004156 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800412a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004152:	b662      	cpsie	i
 8004154:	e175      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800417c:	e161      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	2b03      	cmp	r3, #3
 8004184:	f200 811a 	bhi.w	80043bc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b01      	cmp	r3, #1
 800418e:	d123      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fc49 	bl	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e162      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d6:	e134      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d150      	bne.n	8004282 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2200      	movs	r2, #0
 80041e8:	4906      	ldr	r1, [pc, #24]	; (8004204 <HAL_I2C_Mem_Read+0x248>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fac6 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e137      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
 80041fa:	bf00      	nop
 80041fc:	00100002 	.word	0x00100002
 8004200:	ffff0000 	.word	0xffff0000
 8004204:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004208:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004218:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800424c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004280:	e0df      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2200      	movs	r2, #0
 800428a:	497a      	ldr	r1, [pc, #488]	; (8004474 <HAL_I2C_Mem_Read+0x4b8>)
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fa75 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0e6      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042e0:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_I2C_Mem_Read+0x4bc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	08db      	lsrs	r3, r3, #3
 80042e6:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_I2C_Mem_Read+0x4c0>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	0a1a      	lsrs	r2, r3, #8
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	00da      	lsls	r2, r3, #3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d117      	bne.n	8004336 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004328:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e099      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d1da      	bne.n	80042fa <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004386:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ba:	e042      	b.n	8004442 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fb33 	bl	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e04c      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d118      	bne.n	8004442 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	f47f ae99 	bne.w	800417e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	00010004 	.word	0x00010004
 8004478:	20000014 	.word	0x20000014
 800447c:	14f8b589 	.word	0x14f8b589

08004480 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	461a      	mov	r2, r3
 800448e:	4603      	mov	r3, r0
 8004490:	817b      	strh	r3, [r7, #10]
 8004492:	460b      	mov	r3, r1
 8004494:	813b      	strh	r3, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f960 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d0:	d103      	bne.n	80044da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e05f      	b.n	800459e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044de:	897b      	ldrh	r3, [r7, #10]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	492d      	ldr	r1, [pc, #180]	; (80045a8 <I2C_RequestMemoryWrite+0x128>)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f998 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e04c      	b.n	800459e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fa02 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e02b      	b.n	800459e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]
 8004556:	e021      	b.n	800459c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	b29b      	uxth	r3, r3
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	6a39      	ldr	r1, [r7, #32]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f9dc 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b04      	cmp	r3, #4
 800457c:	d107      	bne.n	800458e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e005      	b.n	800459e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	00010002 	.word	0x00010002

080045ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8c2 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460c:	d103      	bne.n	8004616 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0aa      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	4952      	ldr	r1, [pc, #328]	; (8004778 <I2C_RequestMemoryRead+0x1cc>)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f8fa 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e097      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f964 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b04      	cmp	r3, #4
 800466c:	d107      	bne.n	800467e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e076      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004688:	893b      	ldrh	r3, [r7, #8]
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	611a      	str	r2, [r3, #16]
 8004692:	e021      	b.n	80046d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	b29b      	uxth	r3, r3
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f93e 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d107      	bne.n	80046ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e050      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ce:	893b      	ldrh	r3, [r7, #8]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	6a39      	ldr	r1, [r7, #32]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f923 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d107      	bne.n	8004700 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e035      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004712:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2200      	movs	r2, #0
 800471c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f82b 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	d103      	bne.n	8004744 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e013      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004748:	897b      	ldrh	r3, [r7, #10]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	4906      	ldr	r1, [pc, #24]	; (8004778 <I2C_RequestMemoryRead+0x1cc>)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f863 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	00010002 	.word	0x00010002

0800477c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478c:	e025      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d021      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fe fb4d 	bl	8002e34 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d116      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e023      	b.n	8004822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10d      	bne.n	8004800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	e00c      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	429a      	cmp	r2, r3
 800481e:	d0b6      	beq.n	800478e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004838:	e051      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004848:	d123      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0204 	orr.w	r2, r3, #4
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e046      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d021      	beq.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fe facb 	bl	8002e34 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e020      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	43da      	mvns	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d18d      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004934:	e02d      	b.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f8ce 	bl	8004ad8 <I2C_IsAcknowledgeFailed>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e02d      	b.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d021      	beq.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe fa71 	bl	8002e34 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e007      	b.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d1ca      	bne.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049b6:	e02d      	b.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f88d 	bl	8004ad8 <I2C_IsAcknowledgeFailed>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e02d      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d021      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fe fa30 	bl	8002e34 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e007      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d1ca      	bne.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a38:	e042      	b.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d119      	bne.n	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0210 	mvn.w	r2, #16
 8004a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e029      	b.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fe f9da 	bl	8002e34 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d116      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e007      	b.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d1b5      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d11b      	bne.n	8004b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e26c      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b54:	4b92      	ldr	r3, [pc, #584]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d10b      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7a:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x12c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d168      	bne.n	8004c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e246      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x76>
 8004b9c:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e02e      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x98>
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7a      	ldr	r2, [pc, #488]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b78      	ldr	r3, [pc, #480]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a77      	ldr	r2, [pc, #476]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0xbc>
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a71      	ldr	r2, [pc, #452]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bf0:	4b6b      	ldr	r3, [pc, #428]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6a      	ldr	r2, [pc, #424]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a67      	ldr	r2, [pc, #412]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fe f910 	bl	8002e34 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fe f90c 	bl	8002e34 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1fa      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe4>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fe f8fc 	bl	8002e34 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fe f8f8 	bl	8002e34 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1e6      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x10c>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	4b4c      	ldr	r3, [pc, #304]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c7a:	4b49      	ldr	r3, [pc, #292]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
 8004c86:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1ba      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4939      	ldr	r1, [pc, #228]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e03a      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fe f8b1 	bl	8002e34 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fe f8ad 	bl	8002e34 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e19b      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4927      	ldr	r1, [pc, #156]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe f890 	bl	8002e34 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fe f88c 	bl	8002e34 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e17a      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d03a      	beq.n	8004db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7fe f870 	bl	8002e34 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fe f86c 	bl	8002e34 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e15a      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f000 fada 	bl	8005330 <RCC_Delay>
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d84:	f7fe f856 	bl	8002e34 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8a:	e00f      	b.n	8004dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fe f852 	bl	8002e34 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d908      	bls.n	8004dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e140      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	42420000 	.word	0x42420000
 8004da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e9      	bne.n	8004d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a6 	beq.w	8004f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b97      	ldr	r3, [pc, #604]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	4b94      	ldr	r3, [pc, #592]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4a93      	ldr	r2, [pc, #588]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	61d3      	str	r3, [r2, #28]
 8004de2:	4b91      	ldr	r3, [pc, #580]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b8e      	ldr	r3, [pc, #568]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a8a      	ldr	r2, [pc, #552]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fe f813 	bl	8002e34 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fe f80f 	bl	8002e34 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0fd      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b81      	ldr	r3, [pc, #516]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x312>
 8004e38:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4a7a      	ldr	r2, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x334>
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a72      	ldr	r2, [pc, #456]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x356>
 8004e70:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a6c      	ldr	r2, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a69      	ldr	r2, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e8a:	4b67      	ldr	r3, [pc, #412]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4a66      	ldr	r2, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6213      	str	r3, [r2, #32]
 8004e96:	4b64      	ldr	r3, [pc, #400]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4a63      	ldr	r2, [pc, #396]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fd ffc3 	bl	8002e34 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd ffbf 	bl	8002e34 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0ab      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x37e>
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd ffad 	bl	8002e34 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fd ffa9 	bl	8002e34 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e095      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ee      	bne.n	8004ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8081 	beq.w	800501e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d061      	beq.n	8004fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d146      	bne.n	8004fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fd ff7d 	bl	8002e34 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fd ff79 	bl	8002e34 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e067      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f50:	4b35      	ldr	r3, [pc, #212]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f66:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	492d      	ldr	r1, [pc, #180]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a19      	ldr	r1, [r3, #32]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	4927      	ldr	r1, [pc, #156]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fd ff4d 	bl	8002e34 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fd ff49 	bl	8002e34 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e037      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x46a>
 8004fbc:	e02f      	b.n	800501e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd ff36 	bl	8002e34 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd ff32 	bl	8002e34 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e020      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x498>
 8004fea:	e018      	b.n	800501e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e013      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
 8005030:	42420060 	.word	0x42420060

08005034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d0      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d910      	bls.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 0207 	bic.w	r2, r3, #7
 800505e:	4965      	ldr	r1, [pc, #404]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b63      	ldr	r3, [pc, #396]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0b8      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800509a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a8:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b4:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	494d      	ldr	r1, [pc, #308]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d040      	beq.n	8005154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d115      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e07f      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e073      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e06b      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4936      	ldr	r1, [pc, #216]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005124:	f7fd fe86 	bl	8002e34 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fd fe82 	bl	8002e34 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e053      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d210      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0207 	bic.w	r2, r3, #7
 800516a:	4922      	ldr	r1, [pc, #136]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e032      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4916      	ldr	r1, [pc, #88]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	490e      	ldr	r1, [pc, #56]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051c2:	f000 f821 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 80051c6:	4601      	mov	r1, r0
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	5cd3      	ldrb	r3, [r2, r3]
 80051d6:	fa21 f303 	lsr.w	r3, r1, r3
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <HAL_RCC_ClockConfig+0x1cc>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1d0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd fde4 	bl	8002db0 <HAL_InitTick>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	080094e4 	.word	0x080094e4
 8005200:	20000014 	.word	0x20000014
 8005204:	20000018 	.word	0x20000018

08005208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005208:	b490      	push	{r4, r7}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005210:	1d3c      	adds	r4, r7, #4
 8005212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005218:	4b28      	ldr	r3, [pc, #160]	; (80052bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d002      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x40>
 8005242:	2b08      	cmp	r3, #8
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x46>
 8005246:	e02d      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005248:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800524a:	623b      	str	r3, [r7, #32]
      break;
 800524c:	e02d      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800525a:	4413      	add	r3, r2
 800525c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d013      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c5b      	lsrs	r3, r3, #17
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800527a:	4413      	add	r3, r2
 800527c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005286:	fb02 f203 	mul.w	r2, r2, r3
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e004      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	623b      	str	r3, [r7, #32]
      break;
 80052a2:	e002      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a6:	623b      	str	r3, [r7, #32]
      break;
 80052a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc90      	pop	{r4, r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	080094bc 	.word	0x080094bc
 80052bc:	080094cc 	.word	0x080094cc
 80052c0:	40021000 	.word	0x40021000
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	003d0900 	.word	0x003d0900

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <HAL_RCC_GetHCLKFreq+0x10>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	20000014 	.word	0x20000014

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff2 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052e8:	4601      	mov	r1, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4a03      	ldr	r2, [pc, #12]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5cd3      	ldrb	r3, [r2, r3]
 80052f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	080094f4 	.word	0x080094f4

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffde 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005310:	4601      	mov	r1, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	0adb      	lsrs	r3, r3, #11
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	080094f4 	.word	0x080094f4

08005330 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <RCC_Delay+0x34>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <RCC_Delay+0x38>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	0a5b      	lsrs	r3, r3, #9
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800534c:	bf00      	nop
  }
  while (Delay --);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1e5a      	subs	r2, r3, #1
 8005352:	60fa      	str	r2, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f9      	bne.n	800534c <RCC_Delay+0x1c>
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000014 	.word	0x20000014
 8005368:	10624dd3 	.word	0x10624dd3

0800536c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d07d      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005388:	2300      	movs	r3, #0
 800538a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538c:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005398:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4a4b      	ldr	r2, [pc, #300]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a2:	61d3      	str	r3, [r2, #28]
 80053a4:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d118      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c0:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a42      	ldr	r2, [pc, #264]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053cc:	f7fd fd32 	bl	8002e34 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	e008      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d4:	f7fd fd2e 	bl	8002e34 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e06d      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e6:	4b3a      	ldr	r3, [pc, #232]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053f2:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02e      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d027      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005410:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800541a:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005426:	4a29      	ldr	r2, [pc, #164]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fd fcfd 	bl	8002e34 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543c:	e00a      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fd fcf9 	bl	8002e34 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e036      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ee      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4917      	ldr	r1, [pc, #92]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	4313      	orrs	r3, r2
 8005470:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d105      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005478:	4b14      	ldr	r3, [pc, #80]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4a13      	ldr	r2, [pc, #76]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005482:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005490:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	490b      	ldr	r1, [pc, #44]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4904      	ldr	r1, [pc, #16]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
 80054d4:	42420440 	.word	0x42420440

080054d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b08d      	sub	sp, #52	; 0x34
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80054e0:	4b55      	ldr	r3, [pc, #340]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80054e2:	f107 040c 	add.w	r4, r7, #12
 80054e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054ec:	4b53      	ldr	r3, [pc, #332]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	2300      	movs	r3, #0
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fa:	2300      	movs	r3, #0
 80054fc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	2300      	movs	r3, #0
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d07f      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800550c:	2b10      	cmp	r3, #16
 800550e:	d002      	beq.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d048      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005514:	e08b      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005516:	4b4a      	ldr	r3, [pc, #296]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800551c:	4b48      	ldr	r3, [pc, #288]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d07f      	beq.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	0c9b      	lsrs	r3, r3, #18
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005534:	4413      	add	r3, r2
 8005536:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800553a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005546:	4b3e      	ldr	r3, [pc, #248]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	0c5b      	lsrs	r3, r3, #17
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005554:	4413      	add	r3, r2
 8005556:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	fbb2 f2f3 	udiv	r2, r2, r3
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	4a33      	ldr	r2, [pc, #204]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005582:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558e:	d102      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005594:	e048      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055a4:	e040      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b6:	d108      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	e01f      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d109      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80055d6:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80055e2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e8:	e00f      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d11a      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d014      	beq.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8005602:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005608:	e010      	b.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800560a:	e00f      	b.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800560c:	f7ff fe7c 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0b9b      	lsrs	r3, r3, #14
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	3301      	adds	r3, #1
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005626:	e002      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800562c:	bf00      	nop
    }
  }
  return (frequency);
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005630:	4618      	mov	r0, r3
 8005632:	3734      	adds	r7, #52	; 0x34
 8005634:	46bd      	mov	sp, r7
 8005636:	bd90      	pop	{r4, r7, pc}
 8005638:	080094d0 	.word	0x080094d0
 800563c:	080094e0 	.word	0x080094e0
 8005640:	40021000 	.word	0x40021000
 8005644:	007a1200 	.word	0x007a1200
 8005648:	003d0900 	.word	0x003d0900
 800564c:	aaaaaaab 	.word	0xaaaaaaab

08005650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e03f      	b.n	80056e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fd faae 	bl	8002bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	; 0x24
 8005680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f905 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08a      	sub	sp, #40	; 0x28
 80056ee:	af02      	add	r7, sp, #8
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b20      	cmp	r3, #32
 8005708:	d17c      	bne.n	8005804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Transmit+0x2c>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e075      	b.n	8005806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit+0x3e>
 8005724:	2302      	movs	r3, #2
 8005726:	e06e      	b.n	8005806 <HAL_UART_Transmit+0x11c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2221      	movs	r2, #33	; 0x21
 800573a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800573e:	f7fd fb79 	bl	8002e34 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005758:	d108      	bne.n	800576c <HAL_UART_Transmit+0x82>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e003      	b.n	8005774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800577c:	e02a      	b.n	80057d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f840 	bl	800580e <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e036      	b.n	8005806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e007      	b.n	80057c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1cf      	bne.n	800577e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2140      	movs	r1, #64	; 0x40
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f810 	bl	800580e <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e006      	b.n	8005806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581e:	e02c      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d028      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0x30>
 800582e:	f7fd fb01 	bl	8002e34 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	429a      	cmp	r2, r3
 800583c:	d21d      	bcs.n	800587a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800584c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e00f      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4013      	ands	r3, r2
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	429a      	cmp	r2, r3
 8005896:	d0c3      	beq.n	8005820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058de:	f023 030c 	bic.w	r3, r3, #12
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <UART_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7ff fcfc 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	e002      	b.n	800591a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7ff fce4 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8005918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009a      	lsls	r2, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	4a22      	ldr	r2, [pc, #136]	; (80059bc <UART_SetConfig+0x118>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	0119      	lsls	r1, r3, #4
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009a      	lsls	r2, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <UART_SetConfig+0x118>)
 8005952:	fba3 0302 	umull	r0, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2064      	movs	r0, #100	; 0x64
 800595a:	fb00 f303 	mul.w	r3, r0, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	3332      	adds	r3, #50	; 0x32
 8005964:	4a15      	ldr	r2, [pc, #84]	; (80059bc <UART_SetConfig+0x118>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005970:	4419      	add	r1, r3
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fbb2 f2f3 	udiv	r2, r2, r3
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <UART_SetConfig+0x118>)
 800598a:	fba3 0302 	umull	r0, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2064      	movs	r0, #100	; 0x64
 8005992:	fb00 f303 	mul.w	r3, r0, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	3332      	adds	r3, #50	; 0x32
 800599c:	4a07      	ldr	r2, [pc, #28]	; (80059bc <UART_SetConfig+0x118>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	440a      	add	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40013800 	.word	0x40013800
 80059bc:	51eb851f 	.word	0x51eb851f

080059c0 <gcvt>:
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	461c      	mov	r4, r3
 80059c4:	b085      	sub	sp, #20
 80059c6:	2300      	movs	r3, #0
 80059c8:	4615      	mov	r5, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	4606      	mov	r6, r0
 80059ce:	460f      	mov	r7, r1
 80059d0:	f7fa ffec 	bl	80009ac <__aeabi_dcmplt>
 80059d4:	4623      	mov	r3, r4
 80059d6:	b118      	cbz	r0, 80059e0 <gcvt+0x20>
 80059d8:	222d      	movs	r2, #45	; 0x2d
 80059da:	3d01      	subs	r5, #1
 80059dc:	f803 2b01 	strb.w	r2, [r3], #1
 80059e0:	2267      	movs	r2, #103	; 0x67
 80059e2:	2100      	movs	r1, #0
 80059e4:	e9cd 5300 	strd	r5, r3, [sp]
 80059e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80059ec:	4905      	ldr	r1, [pc, #20]	; (8005a04 <gcvt+0x44>)
 80059ee:	4632      	mov	r2, r6
 80059f0:	463b      	mov	r3, r7
 80059f2:	6808      	ldr	r0, [r1, #0]
 80059f4:	f000 f914 	bl	8005c20 <_gcvt>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	bf14      	ite	ne
 80059fc:	4620      	movne	r0, r4
 80059fe:	2000      	moveq	r0, #0
 8005a00:	b005      	add	sp, #20
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	20000020 	.word	0x20000020

08005a08 <__errno>:
 8005a08:	4b01      	ldr	r3, [pc, #4]	; (8005a10 <__errno+0x8>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	20000020 	.word	0x20000020

08005a14 <__libc_init_array>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	2500      	movs	r5, #0
 8005a18:	4e0c      	ldr	r6, [pc, #48]	; (8005a4c <__libc_init_array+0x38>)
 8005a1a:	4c0d      	ldr	r4, [pc, #52]	; (8005a50 <__libc_init_array+0x3c>)
 8005a1c:	1ba4      	subs	r4, r4, r6
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	42a5      	cmp	r5, r4
 8005a22:	d109      	bne.n	8005a38 <__libc_init_array+0x24>
 8005a24:	f003 fd3c 	bl	80094a0 <_init>
 8005a28:	2500      	movs	r5, #0
 8005a2a:	4e0a      	ldr	r6, [pc, #40]	; (8005a54 <__libc_init_array+0x40>)
 8005a2c:	4c0a      	ldr	r4, [pc, #40]	; (8005a58 <__libc_init_array+0x44>)
 8005a2e:	1ba4      	subs	r4, r4, r6
 8005a30:	10a4      	asrs	r4, r4, #2
 8005a32:	42a5      	cmp	r5, r4
 8005a34:	d105      	bne.n	8005a42 <__libc_init_array+0x2e>
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a3c:	4798      	blx	r3
 8005a3e:	3501      	adds	r5, #1
 8005a40:	e7ee      	b.n	8005a20 <__libc_init_array+0xc>
 8005a42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a46:	4798      	blx	r3
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7f2      	b.n	8005a32 <__libc_init_array+0x1e>
 8005a4c:	080098a0 	.word	0x080098a0
 8005a50:	080098a0 	.word	0x080098a0
 8005a54:	080098a0 	.word	0x080098a0
 8005a58:	080098a4 	.word	0x080098a4

08005a5c <__itoa>:
 8005a5c:	1e93      	subs	r3, r2, #2
 8005a5e:	2b22      	cmp	r3, #34	; 0x22
 8005a60:	b510      	push	{r4, lr}
 8005a62:	460c      	mov	r4, r1
 8005a64:	d904      	bls.n	8005a70 <__itoa+0x14>
 8005a66:	2300      	movs	r3, #0
 8005a68:	461c      	mov	r4, r3
 8005a6a:	700b      	strb	r3, [r1, #0]
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	bd10      	pop	{r4, pc}
 8005a70:	2a0a      	cmp	r2, #10
 8005a72:	d109      	bne.n	8005a88 <__itoa+0x2c>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	da07      	bge.n	8005a88 <__itoa+0x2c>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	700b      	strb	r3, [r1, #0]
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4240      	negs	r0, r0
 8005a80:	4421      	add	r1, r4
 8005a82:	f000 f819 	bl	8005ab8 <__utoa>
 8005a86:	e7f1      	b.n	8005a6c <__itoa+0x10>
 8005a88:	2100      	movs	r1, #0
 8005a8a:	e7f9      	b.n	8005a80 <__itoa+0x24>

08005a8c <itoa>:
 8005a8c:	f7ff bfe6 	b.w	8005a5c <__itoa>

08005a90 <memcpy>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	1e43      	subs	r3, r0, #1
 8005a94:	440a      	add	r2, r1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	d100      	bne.n	8005a9c <memcpy+0xc>
 8005a9a:	bd10      	pop	{r4, pc}
 8005a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa4:	e7f7      	b.n	8005a96 <memcpy+0x6>

08005aa6 <memset>:
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d100      	bne.n	8005ab0 <memset+0xa>
 8005aae:	4770      	bx	lr
 8005ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab4:	e7f9      	b.n	8005aaa <memset+0x4>
	...

08005ab8 <__utoa>:
 8005ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aba:	b08b      	sub	sp, #44	; 0x2c
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	466e      	mov	r6, sp
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <__utoa+0x78>)
 8005ac4:	f103 0c20 	add.w	ip, r3, #32
 8005ac8:	4637      	mov	r7, r6
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	c703      	stmia	r7!, {r0, r1}
 8005ad2:	4563      	cmp	r3, ip
 8005ad4:	463e      	mov	r6, r7
 8005ad6:	d1f7      	bne.n	8005ac8 <__utoa+0x10>
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	6038      	str	r0, [r7, #0]
 8005ade:	713b      	strb	r3, [r7, #4]
 8005ae0:	1e93      	subs	r3, r2, #2
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	d904      	bls.n	8005af4 <__utoa+0x3c>
 8005aea:	7023      	strb	r3, [r4, #0]
 8005aec:	461c      	mov	r4, r3
 8005aee:	4620      	mov	r0, r4
 8005af0:	b00b      	add	sp, #44	; 0x2c
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af4:	1e66      	subs	r6, r4, #1
 8005af6:	fbb5 f0f2 	udiv	r0, r5, r2
 8005afa:	fb02 5510 	mls	r5, r2, r0, r5
 8005afe:	af0a      	add	r7, sp, #40	; 0x28
 8005b00:	443d      	add	r5, r7
 8005b02:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	b968      	cbnz	r0, 8005b2c <__utoa+0x74>
 8005b10:	4622      	mov	r2, r4
 8005b12:	5460      	strb	r0, [r4, r1]
 8005b14:	4423      	add	r3, r4
 8005b16:	1b19      	subs	r1, r3, r4
 8005b18:	1b10      	subs	r0, r2, r4
 8005b1a:	4281      	cmp	r1, r0
 8005b1c:	dde7      	ble.n	8005aee <__utoa+0x36>
 8005b1e:	7811      	ldrb	r1, [r2, #0]
 8005b20:	7818      	ldrb	r0, [r3, #0]
 8005b22:	f802 0b01 	strb.w	r0, [r2], #1
 8005b26:	f803 1901 	strb.w	r1, [r3], #-1
 8005b2a:	e7f4      	b.n	8005b16 <__utoa+0x5e>
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	e7e2      	b.n	8005af6 <__utoa+0x3e>
 8005b30:	080094fc 	.word	0x080094fc

08005b34 <print_e>:
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	b08b      	sub	sp, #44	; 0x2c
 8005b38:	460f      	mov	r7, r1
 8005b3a:	a908      	add	r1, sp, #32
 8005b3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005b3e:	9104      	str	r1, [sp, #16]
 8005b40:	a907      	add	r1, sp, #28
 8005b42:	9103      	str	r1, [sp, #12]
 8005b44:	a909      	add	r1, sp, #36	; 0x24
 8005b46:	9102      	str	r1, [sp, #8]
 8005b48:	1c61      	adds	r1, r4, #1
 8005b4a:	9101      	str	r1, [sp, #4]
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	9100      	str	r1, [sp, #0]
 8005b50:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8005b54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005b56:	f000 fd37 	bl	80065c8 <_dtoa_r>
 8005b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b5e:	4601      	mov	r1, r0
 8005b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b62:	4298      	cmp	r0, r3
 8005b64:	d104      	bne.n	8005b70 <print_e+0x3c>
 8005b66:	4638      	mov	r0, r7
 8005b68:	f000 fc98 	bl	800649c <strcpy>
 8005b6c:	b00b      	add	sp, #44	; 0x2c
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b70:	780b      	ldrb	r3, [r1, #0]
 8005b72:	703b      	strb	r3, [r7, #0]
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	d142      	bne.n	8005bfe <print_e+0xca>
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	d140      	bne.n	8005bfe <print_e+0xca>
 8005b7c:	1c7b      	adds	r3, r7, #1
 8005b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005b82:	b10a      	cbz	r2, 8005b88 <print_e+0x54>
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	dc3e      	bgt.n	8005c06 <print_e+0xd2>
 8005b88:	2e67      	cmp	r6, #103	; 0x67
 8005b8a:	d043      	beq.n	8005c14 <print_e+0xe0>
 8005b8c:	2e47      	cmp	r6, #71	; 0x47
 8005b8e:	d043      	beq.n	8005c18 <print_e+0xe4>
 8005b90:	461a      	mov	r2, r3
 8005b92:	2730      	movs	r7, #48	; 0x30
 8005b94:	191d      	adds	r5, r3, r4
 8005b96:	1aa9      	subs	r1, r5, r2
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	dc38      	bgt.n	8005c0e <print_e+0xda>
 8005b9c:	2c00      	cmp	r4, #0
 8005b9e:	bfa8      	it	ge
 8005ba0:	191b      	addge	r3, r3, r4
 8005ba2:	1e41      	subs	r1, r0, #1
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	9109      	str	r1, [sp, #36]	; 0x24
 8005ba8:	461a      	mov	r2, r3
 8005baa:	bfb7      	itett	lt
 8005bac:	212d      	movlt	r1, #45	; 0x2d
 8005bae:	212b      	movge	r1, #43	; 0x2b
 8005bb0:	f1c0 0001 	rsblt	r0, r0, #1
 8005bb4:	9009      	strlt	r0, [sp, #36]	; 0x24
 8005bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb8:	f802 6b02 	strb.w	r6, [r2], #2
 8005bbc:	bfb4      	ite	lt
 8005bbe:	7059      	strblt	r1, [r3, #1]
 8005bc0:	7059      	strbge	r1, [r3, #1]
 8005bc2:	2863      	cmp	r0, #99	; 0x63
 8005bc4:	dd0b      	ble.n	8005bde <print_e+0xaa>
 8005bc6:	2164      	movs	r1, #100	; 0x64
 8005bc8:	fb90 f1f1 	sdiv	r1, r0, r1
 8005bcc:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005bd0:	1cda      	adds	r2, r3, #3
 8005bd2:	709c      	strb	r4, [r3, #2]
 8005bd4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005bd8:	fb03 0101 	mla	r1, r3, r1, r0
 8005bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8005bde:	230a      	movs	r3, #10
 8005be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be2:	fb91 f3f3 	sdiv	r3, r1, r3
 8005be6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005bea:	7010      	strb	r0, [r2, #0]
 8005bec:	f06f 0009 	mvn.w	r0, #9
 8005bf0:	fb00 1303 	mla	r3, r0, r3, r1
 8005bf4:	3330      	adds	r3, #48	; 0x30
 8005bf6:	7053      	strb	r3, [r2, #1]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	7093      	strb	r3, [r2, #2]
 8005bfc:	e7b6      	b.n	8005b6c <print_e+0x38>
 8005bfe:	222e      	movs	r2, #46	; 0x2e
 8005c00:	1cbb      	adds	r3, r7, #2
 8005c02:	707a      	strb	r2, [r7, #1]
 8005c04:	e7bb      	b.n	8005b7e <print_e+0x4a>
 8005c06:	f803 2b01 	strb.w	r2, [r3], #1
 8005c0a:	3c01      	subs	r4, #1
 8005c0c:	e7b7      	b.n	8005b7e <print_e+0x4a>
 8005c0e:	f802 7b01 	strb.w	r7, [r2], #1
 8005c12:	e7c0      	b.n	8005b96 <print_e+0x62>
 8005c14:	2665      	movs	r6, #101	; 0x65
 8005c16:	e7c4      	b.n	8005ba2 <print_e+0x6e>
 8005c18:	2645      	movs	r6, #69	; 0x45
 8005c1a:	e7c2      	b.n	8005ba2 <print_e+0x6e>
 8005c1c:	0000      	movs	r0, r0
	...

08005c20 <_gcvt>:
 8005c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4617      	mov	r7, r2
 8005c26:	461d      	mov	r5, r3
 8005c28:	b08b      	sub	sp, #44	; 0x2c
 8005c2a:	4681      	mov	r9, r0
 8005c2c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	4638      	mov	r0, r7
 8005c36:	4629      	mov	r1, r5
 8005c38:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8005c3c:	f7fa feb6 	bl	80009ac <__aeabi_dcmplt>
 8005c40:	b108      	cbz	r0, 8005c46 <_gcvt+0x26>
 8005c42:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fea3 	bl	8000998 <__aeabi_dcmpeq>
 8005c52:	b138      	cbz	r0, 8005c64 <_gcvt+0x44>
 8005c54:	2330      	movs	r3, #48	; 0x30
 8005c56:	7023      	strb	r3, [r4, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	7063      	strb	r3, [r4, #1]
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	b00b      	add	sp, #44	; 0x2c
 8005c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c64:	a352      	add	r3, pc, #328	; (adr r3, 8005db0 <_gcvt+0x190>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa fea7 	bl	80009c0 <__aeabi_dcmple>
 8005c72:	b168      	cbz	r0, 8005c90 <_gcvt+0x70>
 8005c74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005c78:	3e01      	subs	r6, #1
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c80:	9600      	str	r6, [sp, #0]
 8005c82:	463a      	mov	r2, r7
 8005c84:	462b      	mov	r3, r5
 8005c86:	4621      	mov	r1, r4
 8005c88:	4648      	mov	r0, r9
 8005c8a:	f7ff ff53 	bl	8005b34 <print_e>
 8005c8e:	e7e5      	b.n	8005c5c <_gcvt+0x3c>
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 fb6f 	bl	8006374 <_mprec_log10>
 8005c96:	463a      	mov	r2, r7
 8005c98:	462b      	mov	r3, r5
 8005c9a:	f7fa fe91 	bl	80009c0 <__aeabi_dcmple>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1e8      	bne.n	8005c74 <_gcvt+0x54>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <_gcvt+0x198>)
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7fa fe7f 	bl	80009ac <__aeabi_dcmplt>
 8005cae:	a909      	add	r1, sp, #36	; 0x24
 8005cb0:	aa08      	add	r2, sp, #32
 8005cb2:	ab07      	add	r3, sp, #28
 8005cb4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8005cb8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005cbc:	b388      	cbz	r0, 8005d22 <_gcvt+0x102>
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	4648      	mov	r0, r9
 8005cc8:	f000 fc7e 	bl	80065c8 <_dtoa_r>
 8005ccc:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cd0:	9a07      	ldr	r2, [sp, #28]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d027      	beq.n	8005d26 <_gcvt+0x106>
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	4426      	add	r6, r4
 8005cda:	4607      	mov	r7, r0
 8005cdc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005ce0:	1af2      	subs	r2, r6, r3
 8005ce2:	9d07      	ldr	r5, [sp, #28]
 8005ce4:	b349      	cbz	r1, 8005d3a <_gcvt+0x11a>
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	dc22      	bgt.n	8005d30 <_gcvt+0x110>
 8005cea:	f1b8 0f00 	cmp.w	r8, #0
 8005cee:	d102      	bne.n	8005cf6 <_gcvt+0xd6>
 8005cf0:	7839      	ldrb	r1, [r7, #0]
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d049      	beq.n	8005d8a <_gcvt+0x16a>
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	bf04      	itt	eq
 8005cfa:	2130      	moveq	r1, #48	; 0x30
 8005cfc:	7021      	strbeq	r1, [r4, #0]
 8005cfe:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f04f 0630 	mov.w	r6, #48	; 0x30
 8005d0a:	bf08      	it	eq
 8005d0c:	1c63      	addeq	r3, r4, #1
 8005d0e:	7019      	strb	r1, [r3, #0]
 8005d10:	9907      	ldr	r1, [sp, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	2900      	cmp	r1, #0
 8005d16:	460d      	mov	r5, r1
 8005d18:	db24      	blt.n	8005d64 <_gcvt+0x144>
 8005d1a:	b100      	cbz	r0, 8005d1e <_gcvt+0xfe>
 8005d1c:	9107      	str	r1, [sp, #28]
 8005d1e:	1e79      	subs	r1, r7, #1
 8005d20:	e02b      	b.n	8005d7a <_gcvt+0x15a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e7cc      	b.n	8005cc0 <_gcvt+0xa0>
 8005d26:	4601      	mov	r1, r0
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fbb7 	bl	800649c <strcpy>
 8005d2e:	e795      	b.n	8005c5c <_gcvt+0x3c>
 8005d30:	3d01      	subs	r5, #1
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	9507      	str	r5, [sp, #28]
 8005d38:	e7cf      	b.n	8005cda <_gcvt+0xba>
 8005d3a:	1aad      	subs	r5, r5, r2
 8005d3c:	2630      	movs	r6, #48	; 0x30
 8005d3e:	e005      	b.n	8005d4c <_gcvt+0x12c>
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	dd06      	ble.n	8005d52 <_gcvt+0x132>
 8005d44:	2101      	movs	r1, #1
 8005d46:	f803 6b01 	strb.w	r6, [r3], #1
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	18a8      	adds	r0, r5, r2
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	dcf6      	bgt.n	8005d40 <_gcvt+0x120>
 8005d52:	2900      	cmp	r1, #0
 8005d54:	d0c9      	beq.n	8005cea <_gcvt+0xca>
 8005d56:	9007      	str	r0, [sp, #28]
 8005d58:	e7c7      	b.n	8005cea <_gcvt+0xca>
 8005d5a:	f803 6b01 	strb.w	r6, [r3], #1
 8005d5e:	3a01      	subs	r2, #1
 8005d60:	2001      	movs	r0, #1
 8005d62:	e7d7      	b.n	8005d14 <_gcvt+0xf4>
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	f101 0101 	add.w	r1, r1, #1
 8005d6a:	dcf6      	bgt.n	8005d5a <_gcvt+0x13a>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d0d6      	beq.n	8005d1e <_gcvt+0xfe>
 8005d70:	9507      	str	r5, [sp, #28]
 8005d72:	e7d4      	b.n	8005d1e <_gcvt+0xfe>
 8005d74:	f803 0b01 	strb.w	r0, [r3], #1
 8005d78:	3a01      	subs	r2, #1
 8005d7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d7e:	b108      	cbz	r0, 8005d84 <_gcvt+0x164>
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	dcf7      	bgt.n	8005d74 <_gcvt+0x154>
 8005d84:	f1b8 0f00 	cmp.w	r8, #0
 8005d88:	d10b      	bne.n	8005da2 <_gcvt+0x182>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e765      	b.n	8005c5c <_gcvt+0x3c>
 8005d90:	f801 6b01 	strb.w	r6, [r1], #1
 8005d94:	1a68      	subs	r0, r5, r1
 8005d96:	2800      	cmp	r0, #0
 8005d98:	dcfa      	bgt.n	8005d90 <_gcvt+0x170>
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	bfa8      	it	ge
 8005d9e:	189b      	addge	r3, r3, r2
 8005da0:	e7f3      	b.n	8005d8a <_gcvt+0x16a>
 8005da2:	4619      	mov	r1, r3
 8005da4:	189d      	adds	r5, r3, r2
 8005da6:	2630      	movs	r6, #48	; 0x30
 8005da8:	e7f4      	b.n	8005d94 <_gcvt+0x174>
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	eb1c432d 	.word	0xeb1c432d
 8005db4:	3f1a36e2 	.word	0x3f1a36e2
 8005db8:	3ff00000 	.word	0x3ff00000

08005dbc <_Balloc>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	b93d      	cbnz	r5, 8005dd6 <_Balloc+0x1a>
 8005dc6:	2010      	movs	r0, #16
 8005dc8:	f001 f9b2 	bl	8007130 <malloc>
 8005dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8005dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dd2:	6005      	str	r5, [r0, #0]
 8005dd4:	60c5      	str	r5, [r0, #12]
 8005dd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dd8:	68eb      	ldr	r3, [r5, #12]
 8005dda:	b183      	cbz	r3, 8005dfe <_Balloc+0x42>
 8005ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005de4:	b9b8      	cbnz	r0, 8005e16 <_Balloc+0x5a>
 8005de6:	2101      	movs	r1, #1
 8005de8:	fa01 f506 	lsl.w	r5, r1, r6
 8005dec:	1d6a      	adds	r2, r5, #5
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fadb 	bl	80063ac <_calloc_r>
 8005df6:	b160      	cbz	r0, 8005e12 <_Balloc+0x56>
 8005df8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005dfc:	e00e      	b.n	8005e1c <_Balloc+0x60>
 8005dfe:	2221      	movs	r2, #33	; 0x21
 8005e00:	2104      	movs	r1, #4
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fad2 	bl	80063ac <_calloc_r>
 8005e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0a:	60e8      	str	r0, [r5, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e4      	bne.n	8005ddc <_Balloc+0x20>
 8005e12:	2000      	movs	r0, #0
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	6802      	ldr	r2, [r0, #0]
 8005e18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e22:	e7f7      	b.n	8005e14 <_Balloc+0x58>

08005e24 <_Bfree>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e28:	4606      	mov	r6, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	b93c      	cbnz	r4, 8005e3e <_Bfree+0x1a>
 8005e2e:	2010      	movs	r0, #16
 8005e30:	f001 f97e 	bl	8007130 <malloc>
 8005e34:	6270      	str	r0, [r6, #36]	; 0x24
 8005e36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e3a:	6004      	str	r4, [r0, #0]
 8005e3c:	60c4      	str	r4, [r0, #12]
 8005e3e:	b13d      	cbz	r5, 8005e50 <_Bfree+0x2c>
 8005e40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e42:	686a      	ldr	r2, [r5, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e50:	bd70      	pop	{r4, r5, r6, pc}

08005e52 <__multadd>:
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	461f      	mov	r7, r3
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	690d      	ldr	r5, [r1, #16]
 8005e60:	f101 0c14 	add.w	ip, r1, #20
 8005e64:	f8dc 0000 	ldr.w	r0, [ip]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	b281      	uxth	r1, r0
 8005e6c:	fb02 7101 	mla	r1, r2, r1, r7
 8005e70:	0c00      	lsrs	r0, r0, #16
 8005e72:	0c0f      	lsrs	r7, r1, #16
 8005e74:	fb02 7000 	mla	r0, r2, r0, r7
 8005e78:	b289      	uxth	r1, r1
 8005e7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e7e:	429d      	cmp	r5, r3
 8005e80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e84:	f84c 1b04 	str.w	r1, [ip], #4
 8005e88:	dcec      	bgt.n	8005e64 <__multadd+0x12>
 8005e8a:	b1d7      	cbz	r7, 8005ec2 <__multadd+0x70>
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	42ab      	cmp	r3, r5
 8005e90:	dc12      	bgt.n	8005eb8 <__multadd+0x66>
 8005e92:	6861      	ldr	r1, [r4, #4]
 8005e94:	4630      	mov	r0, r6
 8005e96:	3101      	adds	r1, #1
 8005e98:	f7ff ff90 	bl	8005dbc <_Balloc>
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	f104 010c 	add.w	r1, r4, #12
 8005ea4:	3202      	adds	r2, #2
 8005ea6:	0092      	lsls	r2, r2, #2
 8005ea8:	300c      	adds	r0, #12
 8005eaa:	f7ff fdf1 	bl	8005a90 <memcpy>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff ffb7 	bl	8005e24 <_Bfree>
 8005eb6:	4644      	mov	r4, r8
 8005eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	615f      	str	r7, [r3, #20]
 8005ec0:	6125      	str	r5, [r4, #16]
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ec8 <__hi0bits>:
 8005ec8:	0c02      	lsrs	r2, r0, #16
 8005eca:	0412      	lsls	r2, r2, #16
 8005ecc:	4603      	mov	r3, r0
 8005ece:	b9b2      	cbnz	r2, 8005efe <__hi0bits+0x36>
 8005ed0:	0403      	lsls	r3, r0, #16
 8005ed2:	2010      	movs	r0, #16
 8005ed4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ed8:	bf04      	itt	eq
 8005eda:	021b      	lsleq	r3, r3, #8
 8005edc:	3008      	addeq	r0, #8
 8005ede:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ee2:	bf04      	itt	eq
 8005ee4:	011b      	lsleq	r3, r3, #4
 8005ee6:	3004      	addeq	r0, #4
 8005ee8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005eec:	bf04      	itt	eq
 8005eee:	009b      	lsleq	r3, r3, #2
 8005ef0:	3002      	addeq	r0, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db06      	blt.n	8005f04 <__hi0bits+0x3c>
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	d503      	bpl.n	8005f02 <__hi0bits+0x3a>
 8005efa:	3001      	adds	r0, #1
 8005efc:	4770      	bx	lr
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7e8      	b.n	8005ed4 <__hi0bits+0xc>
 8005f02:	2020      	movs	r0, #32
 8005f04:	4770      	bx	lr

08005f06 <__lo0bits>:
 8005f06:	6803      	ldr	r3, [r0, #0]
 8005f08:	4601      	mov	r1, r0
 8005f0a:	f013 0207 	ands.w	r2, r3, #7
 8005f0e:	d00b      	beq.n	8005f28 <__lo0bits+0x22>
 8005f10:	07da      	lsls	r2, r3, #31
 8005f12:	d423      	bmi.n	8005f5c <__lo0bits+0x56>
 8005f14:	0798      	lsls	r0, r3, #30
 8005f16:	bf49      	itett	mi
 8005f18:	085b      	lsrmi	r3, r3, #1
 8005f1a:	089b      	lsrpl	r3, r3, #2
 8005f1c:	2001      	movmi	r0, #1
 8005f1e:	600b      	strmi	r3, [r1, #0]
 8005f20:	bf5c      	itt	pl
 8005f22:	600b      	strpl	r3, [r1, #0]
 8005f24:	2002      	movpl	r0, #2
 8005f26:	4770      	bx	lr
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	b9a8      	cbnz	r0, 8005f58 <__lo0bits+0x52>
 8005f2c:	2010      	movs	r0, #16
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f34:	bf04      	itt	eq
 8005f36:	0a1b      	lsreq	r3, r3, #8
 8005f38:	3008      	addeq	r0, #8
 8005f3a:	071a      	lsls	r2, r3, #28
 8005f3c:	bf04      	itt	eq
 8005f3e:	091b      	lsreq	r3, r3, #4
 8005f40:	3004      	addeq	r0, #4
 8005f42:	079a      	lsls	r2, r3, #30
 8005f44:	bf04      	itt	eq
 8005f46:	089b      	lsreq	r3, r3, #2
 8005f48:	3002      	addeq	r0, #2
 8005f4a:	07da      	lsls	r2, r3, #31
 8005f4c:	d402      	bmi.n	8005f54 <__lo0bits+0x4e>
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	d006      	beq.n	8005f60 <__lo0bits+0x5a>
 8005f52:	3001      	adds	r0, #1
 8005f54:	600b      	str	r3, [r1, #0]
 8005f56:	4770      	bx	lr
 8005f58:	4610      	mov	r0, r2
 8005f5a:	e7e9      	b.n	8005f30 <__lo0bits+0x2a>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4770      	bx	lr
 8005f60:	2020      	movs	r0, #32
 8005f62:	4770      	bx	lr

08005f64 <__i2b>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	2101      	movs	r1, #1
 8005f6a:	f7ff ff27 	bl	8005dbc <_Balloc>
 8005f6e:	2201      	movs	r2, #1
 8005f70:	6144      	str	r4, [r0, #20]
 8005f72:	6102      	str	r2, [r0, #16]
 8005f74:	bd10      	pop	{r4, pc}

08005f76 <__multiply>:
 8005f76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	690a      	ldr	r2, [r1, #16]
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	4688      	mov	r8, r1
 8005f82:	429a      	cmp	r2, r3
 8005f84:	bfbe      	ittt	lt
 8005f86:	460b      	movlt	r3, r1
 8005f88:	46a0      	movlt	r8, r4
 8005f8a:	461c      	movlt	r4, r3
 8005f8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f9c:	eb07 0609 	add.w	r6, r7, r9
 8005fa0:	42b3      	cmp	r3, r6
 8005fa2:	bfb8      	it	lt
 8005fa4:	3101      	addlt	r1, #1
 8005fa6:	f7ff ff09 	bl	8005dbc <_Balloc>
 8005faa:	f100 0514 	add.w	r5, r0, #20
 8005fae:	462b      	mov	r3, r5
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fb6:	4573      	cmp	r3, lr
 8005fb8:	d316      	bcc.n	8005fe8 <__multiply+0x72>
 8005fba:	f104 0214 	add.w	r2, r4, #20
 8005fbe:	f108 0114 	add.w	r1, r8, #20
 8005fc2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fc6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	9201      	str	r2, [sp, #4]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d80c      	bhi.n	8005fee <__multiply+0x78>
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	dd03      	ble.n	8005fe0 <__multiply+0x6a>
 8005fd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05d      	beq.n	800609c <__multiply+0x126>
 8005fe0:	6106      	str	r6, [r0, #16]
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	f843 2b04 	str.w	r2, [r3], #4
 8005fec:	e7e3      	b.n	8005fb6 <__multiply+0x40>
 8005fee:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ff2:	f1bb 0f00 	cmp.w	fp, #0
 8005ff6:	d023      	beq.n	8006040 <__multiply+0xca>
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	46ac      	mov	ip, r5
 8005ffc:	f04f 0800 	mov.w	r8, #0
 8006000:	f859 4b04 	ldr.w	r4, [r9], #4
 8006004:	f8dc a000 	ldr.w	sl, [ip]
 8006008:	b2a3      	uxth	r3, r4
 800600a:	fa1f fa8a 	uxth.w	sl, sl
 800600e:	fb0b a303 	mla	r3, fp, r3, sl
 8006012:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006016:	f8dc 4000 	ldr.w	r4, [ip]
 800601a:	4443      	add	r3, r8
 800601c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006020:	fb0b 840a 	mla	r4, fp, sl, r8
 8006024:	46e2      	mov	sl, ip
 8006026:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800602a:	b29b      	uxth	r3, r3
 800602c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006030:	454f      	cmp	r7, r9
 8006032:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006036:	f84a 3b04 	str.w	r3, [sl], #4
 800603a:	d82b      	bhi.n	8006094 <__multiply+0x11e>
 800603c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	3204      	adds	r2, #4
 8006044:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006048:	f1ba 0f00 	cmp.w	sl, #0
 800604c:	d020      	beq.n	8006090 <__multiply+0x11a>
 800604e:	4689      	mov	r9, r1
 8006050:	46a8      	mov	r8, r5
 8006052:	f04f 0b00 	mov.w	fp, #0
 8006056:	682b      	ldr	r3, [r5, #0]
 8006058:	f8b9 c000 	ldrh.w	ip, [r9]
 800605c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006060:	b29b      	uxth	r3, r3
 8006062:	fb0a 440c 	mla	r4, sl, ip, r4
 8006066:	46c4      	mov	ip, r8
 8006068:	445c      	add	r4, fp
 800606a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800606e:	f84c 3b04 	str.w	r3, [ip], #4
 8006072:	f859 3b04 	ldr.w	r3, [r9], #4
 8006076:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	fb0a b303 	mla	r3, sl, r3, fp
 8006080:	454f      	cmp	r7, r9
 8006082:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006086:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800608a:	d805      	bhi.n	8006098 <__multiply+0x122>
 800608c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006090:	3504      	adds	r5, #4
 8006092:	e79b      	b.n	8005fcc <__multiply+0x56>
 8006094:	46d4      	mov	ip, sl
 8006096:	e7b3      	b.n	8006000 <__multiply+0x8a>
 8006098:	46e0      	mov	r8, ip
 800609a:	e7dd      	b.n	8006058 <__multiply+0xe2>
 800609c:	3e01      	subs	r6, #1
 800609e:	e799      	b.n	8005fd4 <__multiply+0x5e>

080060a0 <__pow5mult>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4615      	mov	r5, r2
 80060a6:	f012 0203 	ands.w	r2, r2, #3
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	d007      	beq.n	80060c0 <__pow5mult+0x20>
 80060b0:	4c21      	ldr	r4, [pc, #132]	; (8006138 <__pow5mult+0x98>)
 80060b2:	3a01      	subs	r2, #1
 80060b4:	2300      	movs	r3, #0
 80060b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ba:	f7ff feca 	bl	8005e52 <__multadd>
 80060be:	4607      	mov	r7, r0
 80060c0:	10ad      	asrs	r5, r5, #2
 80060c2:	d035      	beq.n	8006130 <__pow5mult+0x90>
 80060c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060c6:	b93c      	cbnz	r4, 80060d8 <__pow5mult+0x38>
 80060c8:	2010      	movs	r0, #16
 80060ca:	f001 f831 	bl	8007130 <malloc>
 80060ce:	6270      	str	r0, [r6, #36]	; 0x24
 80060d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d4:	6004      	str	r4, [r0, #0]
 80060d6:	60c4      	str	r4, [r0, #12]
 80060d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060e0:	b94c      	cbnz	r4, 80060f6 <__pow5mult+0x56>
 80060e2:	f240 2171 	movw	r1, #625	; 0x271
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff ff3c 	bl	8005f64 <__i2b>
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	07eb      	lsls	r3, r5, #31
 80060fc:	d50a      	bpl.n	8006114 <__pow5mult+0x74>
 80060fe:	4639      	mov	r1, r7
 8006100:	4622      	mov	r2, r4
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ff37 	bl	8005f76 <__multiply>
 8006108:	4681      	mov	r9, r0
 800610a:	4639      	mov	r1, r7
 800610c:	4630      	mov	r0, r6
 800610e:	f7ff fe89 	bl	8005e24 <_Bfree>
 8006112:	464f      	mov	r7, r9
 8006114:	106d      	asrs	r5, r5, #1
 8006116:	d00b      	beq.n	8006130 <__pow5mult+0x90>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	b938      	cbnz	r0, 800612c <__pow5mult+0x8c>
 800611c:	4622      	mov	r2, r4
 800611e:	4621      	mov	r1, r4
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff ff28 	bl	8005f76 <__multiply>
 8006126:	6020      	str	r0, [r4, #0]
 8006128:	f8c0 8000 	str.w	r8, [r0]
 800612c:	4604      	mov	r4, r0
 800612e:	e7e4      	b.n	80060fa <__pow5mult+0x5a>
 8006130:	4638      	mov	r0, r7
 8006132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006136:	bf00      	nop
 8006138:	08009618 	.word	0x08009618

0800613c <__lshift>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	460c      	mov	r4, r1
 8006142:	4607      	mov	r7, r0
 8006144:	4616      	mov	r6, r2
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800614c:	eb0a 0903 	add.w	r9, sl, r3
 8006150:	6849      	ldr	r1, [r1, #4]
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	f109 0501 	add.w	r5, r9, #1
 8006158:	42ab      	cmp	r3, r5
 800615a:	db32      	blt.n	80061c2 <__lshift+0x86>
 800615c:	4638      	mov	r0, r7
 800615e:	f7ff fe2d 	bl	8005dbc <_Balloc>
 8006162:	2300      	movs	r3, #0
 8006164:	4680      	mov	r8, r0
 8006166:	461a      	mov	r2, r3
 8006168:	f100 0114 	add.w	r1, r0, #20
 800616c:	4553      	cmp	r3, sl
 800616e:	db2b      	blt.n	80061c8 <__lshift+0x8c>
 8006170:	6920      	ldr	r0, [r4, #16]
 8006172:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006176:	f104 0314 	add.w	r3, r4, #20
 800617a:	f016 021f 	ands.w	r2, r6, #31
 800617e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006182:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006186:	d025      	beq.n	80061d4 <__lshift+0x98>
 8006188:	2000      	movs	r0, #0
 800618a:	f1c2 0e20 	rsb	lr, r2, #32
 800618e:	468a      	mov	sl, r1
 8006190:	681e      	ldr	r6, [r3, #0]
 8006192:	4096      	lsls	r6, r2
 8006194:	4330      	orrs	r0, r6
 8006196:	f84a 0b04 	str.w	r0, [sl], #4
 800619a:	f853 0b04 	ldr.w	r0, [r3], #4
 800619e:	459c      	cmp	ip, r3
 80061a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80061a4:	d814      	bhi.n	80061d0 <__lshift+0x94>
 80061a6:	6048      	str	r0, [r1, #4]
 80061a8:	b108      	cbz	r0, 80061ae <__lshift+0x72>
 80061aa:	f109 0502 	add.w	r5, r9, #2
 80061ae:	3d01      	subs	r5, #1
 80061b0:	4638      	mov	r0, r7
 80061b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80061b6:	4621      	mov	r1, r4
 80061b8:	f7ff fe34 	bl	8005e24 <_Bfree>
 80061bc:	4640      	mov	r0, r8
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c2:	3101      	adds	r1, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	e7c7      	b.n	8006158 <__lshift+0x1c>
 80061c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061cc:	3301      	adds	r3, #1
 80061ce:	e7cd      	b.n	800616c <__lshift+0x30>
 80061d0:	4651      	mov	r1, sl
 80061d2:	e7dc      	b.n	800618e <__lshift+0x52>
 80061d4:	3904      	subs	r1, #4
 80061d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061da:	459c      	cmp	ip, r3
 80061dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80061e0:	d8f9      	bhi.n	80061d6 <__lshift+0x9a>
 80061e2:	e7e4      	b.n	80061ae <__lshift+0x72>

080061e4 <__mcmp>:
 80061e4:	6903      	ldr	r3, [r0, #16]
 80061e6:	690a      	ldr	r2, [r1, #16]
 80061e8:	b530      	push	{r4, r5, lr}
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	d10c      	bne.n	8006208 <__mcmp+0x24>
 80061ee:	0092      	lsls	r2, r2, #2
 80061f0:	3014      	adds	r0, #20
 80061f2:	3114      	adds	r1, #20
 80061f4:	1884      	adds	r4, r0, r2
 80061f6:	4411      	add	r1, r2
 80061f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006200:	4295      	cmp	r5, r2
 8006202:	d003      	beq.n	800620c <__mcmp+0x28>
 8006204:	d305      	bcc.n	8006212 <__mcmp+0x2e>
 8006206:	2301      	movs	r3, #1
 8006208:	4618      	mov	r0, r3
 800620a:	bd30      	pop	{r4, r5, pc}
 800620c:	42a0      	cmp	r0, r4
 800620e:	d3f3      	bcc.n	80061f8 <__mcmp+0x14>
 8006210:	e7fa      	b.n	8006208 <__mcmp+0x24>
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	e7f7      	b.n	8006208 <__mcmp+0x24>

08006218 <__mdiff>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	460d      	mov	r5, r1
 800621e:	4607      	mov	r7, r0
 8006220:	4611      	mov	r1, r2
 8006222:	4628      	mov	r0, r5
 8006224:	4614      	mov	r4, r2
 8006226:	f7ff ffdd 	bl	80061e4 <__mcmp>
 800622a:	1e06      	subs	r6, r0, #0
 800622c:	d108      	bne.n	8006240 <__mdiff+0x28>
 800622e:	4631      	mov	r1, r6
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff fdc3 	bl	8005dbc <_Balloc>
 8006236:	2301      	movs	r3, #1
 8006238:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	bfa4      	itt	ge
 8006242:	4623      	movge	r3, r4
 8006244:	462c      	movge	r4, r5
 8006246:	4638      	mov	r0, r7
 8006248:	6861      	ldr	r1, [r4, #4]
 800624a:	bfa6      	itte	ge
 800624c:	461d      	movge	r5, r3
 800624e:	2600      	movge	r6, #0
 8006250:	2601      	movlt	r6, #1
 8006252:	f7ff fdb3 	bl	8005dbc <_Balloc>
 8006256:	f04f 0e00 	mov.w	lr, #0
 800625a:	60c6      	str	r6, [r0, #12]
 800625c:	692b      	ldr	r3, [r5, #16]
 800625e:	6926      	ldr	r6, [r4, #16]
 8006260:	f104 0214 	add.w	r2, r4, #20
 8006264:	f105 0914 	add.w	r9, r5, #20
 8006268:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800626c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006270:	f100 0114 	add.w	r1, r0, #20
 8006274:	f852 ab04 	ldr.w	sl, [r2], #4
 8006278:	f859 5b04 	ldr.w	r5, [r9], #4
 800627c:	fa1f f38a 	uxth.w	r3, sl
 8006280:	4473      	add	r3, lr
 8006282:	b2ac      	uxth	r4, r5
 8006284:	1b1b      	subs	r3, r3, r4
 8006286:	0c2c      	lsrs	r4, r5, #16
 8006288:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800628c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006290:	b29b      	uxth	r3, r3
 8006292:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006296:	45c8      	cmp	r8, r9
 8006298:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800629c:	4694      	mov	ip, r2
 800629e:	f841 4b04 	str.w	r4, [r1], #4
 80062a2:	d8e7      	bhi.n	8006274 <__mdiff+0x5c>
 80062a4:	45bc      	cmp	ip, r7
 80062a6:	d304      	bcc.n	80062b2 <__mdiff+0x9a>
 80062a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062ac:	b183      	cbz	r3, 80062d0 <__mdiff+0xb8>
 80062ae:	6106      	str	r6, [r0, #16]
 80062b0:	e7c4      	b.n	800623c <__mdiff+0x24>
 80062b2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80062b6:	b2a2      	uxth	r2, r4
 80062b8:	4472      	add	r2, lr
 80062ba:	1413      	asrs	r3, r2, #16
 80062bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062c0:	b292      	uxth	r2, r2
 80062c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062c6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80062ca:	f841 2b04 	str.w	r2, [r1], #4
 80062ce:	e7e9      	b.n	80062a4 <__mdiff+0x8c>
 80062d0:	3e01      	subs	r6, #1
 80062d2:	e7e9      	b.n	80062a8 <__mdiff+0x90>

080062d4 <__d2b>:
 80062d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062d8:	461c      	mov	r4, r3
 80062da:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062de:	2101      	movs	r1, #1
 80062e0:	4690      	mov	r8, r2
 80062e2:	f7ff fd6b 	bl	8005dbc <_Balloc>
 80062e6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80062ea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80062ee:	4607      	mov	r7, r0
 80062f0:	bb34      	cbnz	r4, 8006340 <__d2b+0x6c>
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	f1b8 0200 	subs.w	r2, r8, #0
 80062f8:	d027      	beq.n	800634a <__d2b+0x76>
 80062fa:	a802      	add	r0, sp, #8
 80062fc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006300:	f7ff fe01 	bl	8005f06 <__lo0bits>
 8006304:	9900      	ldr	r1, [sp, #0]
 8006306:	b1f0      	cbz	r0, 8006346 <__d2b+0x72>
 8006308:	9a01      	ldr	r2, [sp, #4]
 800630a:	f1c0 0320 	rsb	r3, r0, #32
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	430b      	orrs	r3, r1
 8006314:	40c2      	lsrs	r2, r0
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	9201      	str	r2, [sp, #4]
 800631a:	9b01      	ldr	r3, [sp, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf14      	ite	ne
 8006320:	2102      	movne	r1, #2
 8006322:	2101      	moveq	r1, #1
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	6139      	str	r1, [r7, #16]
 8006328:	b1c4      	cbz	r4, 800635c <__d2b+0x88>
 800632a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800632e:	4404      	add	r4, r0
 8006330:	6034      	str	r4, [r6, #0]
 8006332:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006336:	6028      	str	r0, [r5, #0]
 8006338:	4638      	mov	r0, r7
 800633a:	b002      	add	sp, #8
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006340:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006344:	e7d5      	b.n	80062f2 <__d2b+0x1e>
 8006346:	6179      	str	r1, [r7, #20]
 8006348:	e7e7      	b.n	800631a <__d2b+0x46>
 800634a:	a801      	add	r0, sp, #4
 800634c:	f7ff fddb 	bl	8005f06 <__lo0bits>
 8006350:	2101      	movs	r1, #1
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	6139      	str	r1, [r7, #16]
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	3020      	adds	r0, #32
 800635a:	e7e5      	b.n	8006328 <__d2b+0x54>
 800635c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006360:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006364:	6030      	str	r0, [r6, #0]
 8006366:	6918      	ldr	r0, [r3, #16]
 8006368:	f7ff fdae 	bl	8005ec8 <__hi0bits>
 800636c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006370:	e7e1      	b.n	8006336 <__d2b+0x62>
	...

08006374 <_mprec_log10>:
 8006374:	2817      	cmp	r0, #23
 8006376:	b5d0      	push	{r4, r6, r7, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	dc05      	bgt.n	8006388 <_mprec_log10+0x14>
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <_mprec_log10+0x2c>)
 800637e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8006382:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006386:	bdd0      	pop	{r4, r6, r7, pc}
 8006388:	2000      	movs	r0, #0
 800638a:	2600      	movs	r6, #0
 800638c:	4905      	ldr	r1, [pc, #20]	; (80063a4 <_mprec_log10+0x30>)
 800638e:	4f06      	ldr	r7, [pc, #24]	; (80063a8 <_mprec_log10+0x34>)
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	f7fa f898 	bl	80004c8 <__aeabi_dmul>
 8006398:	3c01      	subs	r4, #1
 800639a:	d1f9      	bne.n	8006390 <_mprec_log10+0x1c>
 800639c:	e7f3      	b.n	8006386 <_mprec_log10+0x12>
 800639e:	bf00      	nop
 80063a0:	08009550 	.word	0x08009550
 80063a4:	3ff00000 	.word	0x3ff00000
 80063a8:	40240000 	.word	0x40240000

080063ac <_calloc_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	fb02 f401 	mul.w	r4, r2, r1
 80063b2:	4621      	mov	r1, r4
 80063b4:	f000 f808 	bl	80063c8 <_malloc_r>
 80063b8:	4605      	mov	r5, r0
 80063ba:	b118      	cbz	r0, 80063c4 <_calloc_r+0x18>
 80063bc:	4622      	mov	r2, r4
 80063be:	2100      	movs	r1, #0
 80063c0:	f7ff fb71 	bl	8005aa6 <memset>
 80063c4:	4628      	mov	r0, r5
 80063c6:	bd38      	pop	{r3, r4, r5, pc}

080063c8 <_malloc_r>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	1ccd      	adds	r5, r1, #3
 80063cc:	f025 0503 	bic.w	r5, r5, #3
 80063d0:	3508      	adds	r5, #8
 80063d2:	2d0c      	cmp	r5, #12
 80063d4:	bf38      	it	cc
 80063d6:	250c      	movcc	r5, #12
 80063d8:	2d00      	cmp	r5, #0
 80063da:	4606      	mov	r6, r0
 80063dc:	db01      	blt.n	80063e2 <_malloc_r+0x1a>
 80063de:	42a9      	cmp	r1, r5
 80063e0:	d903      	bls.n	80063ea <_malloc_r+0x22>
 80063e2:	230c      	movs	r3, #12
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	2000      	movs	r0, #0
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	f000 fea9 	bl	8007140 <__malloc_lock>
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <_malloc_r+0xac>)
 80063f0:	6814      	ldr	r4, [r2, #0]
 80063f2:	4621      	mov	r1, r4
 80063f4:	b991      	cbnz	r1, 800641c <_malloc_r+0x54>
 80063f6:	4c20      	ldr	r4, [pc, #128]	; (8006478 <_malloc_r+0xb0>)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	b91b      	cbnz	r3, 8006404 <_malloc_r+0x3c>
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 f83d 	bl	800647c <_sbrk_r>
 8006402:	6020      	str	r0, [r4, #0]
 8006404:	4629      	mov	r1, r5
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f838 	bl	800647c <_sbrk_r>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d124      	bne.n	800645a <_malloc_r+0x92>
 8006410:	230c      	movs	r3, #12
 8006412:	4630      	mov	r0, r6
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	f000 fe94 	bl	8007142 <__malloc_unlock>
 800641a:	e7e4      	b.n	80063e6 <_malloc_r+0x1e>
 800641c:	680b      	ldr	r3, [r1, #0]
 800641e:	1b5b      	subs	r3, r3, r5
 8006420:	d418      	bmi.n	8006454 <_malloc_r+0x8c>
 8006422:	2b0b      	cmp	r3, #11
 8006424:	d90f      	bls.n	8006446 <_malloc_r+0x7e>
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	18cc      	adds	r4, r1, r3
 800642a:	50cd      	str	r5, [r1, r3]
 800642c:	4630      	mov	r0, r6
 800642e:	f000 fe88 	bl	8007142 <__malloc_unlock>
 8006432:	f104 000b 	add.w	r0, r4, #11
 8006436:	1d23      	adds	r3, r4, #4
 8006438:	f020 0007 	bic.w	r0, r0, #7
 800643c:	1ac3      	subs	r3, r0, r3
 800643e:	d0d3      	beq.n	80063e8 <_malloc_r+0x20>
 8006440:	425a      	negs	r2, r3
 8006442:	50e2      	str	r2, [r4, r3]
 8006444:	e7d0      	b.n	80063e8 <_malloc_r+0x20>
 8006446:	684b      	ldr	r3, [r1, #4]
 8006448:	428c      	cmp	r4, r1
 800644a:	bf16      	itet	ne
 800644c:	6063      	strne	r3, [r4, #4]
 800644e:	6013      	streq	r3, [r2, #0]
 8006450:	460c      	movne	r4, r1
 8006452:	e7eb      	b.n	800642c <_malloc_r+0x64>
 8006454:	460c      	mov	r4, r1
 8006456:	6849      	ldr	r1, [r1, #4]
 8006458:	e7cc      	b.n	80063f4 <_malloc_r+0x2c>
 800645a:	1cc4      	adds	r4, r0, #3
 800645c:	f024 0403 	bic.w	r4, r4, #3
 8006460:	42a0      	cmp	r0, r4
 8006462:	d005      	beq.n	8006470 <_malloc_r+0xa8>
 8006464:	1a21      	subs	r1, r4, r0
 8006466:	4630      	mov	r0, r6
 8006468:	f000 f808 	bl	800647c <_sbrk_r>
 800646c:	3001      	adds	r0, #1
 800646e:	d0cf      	beq.n	8006410 <_malloc_r+0x48>
 8006470:	6025      	str	r5, [r4, #0]
 8006472:	e7db      	b.n	800642c <_malloc_r+0x64>
 8006474:	200000b4 	.word	0x200000b4
 8006478:	200000b8 	.word	0x200000b8

0800647c <_sbrk_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	2300      	movs	r3, #0
 8006480:	4c05      	ldr	r4, [pc, #20]	; (8006498 <_sbrk_r+0x1c>)
 8006482:	4605      	mov	r5, r0
 8006484:	4608      	mov	r0, r1
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	f7fc fc1a 	bl	8002cc0 <_sbrk>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_sbrk_r+0x1a>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	b103      	cbz	r3, 8006496 <_sbrk_r+0x1a>
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000414 	.word	0x20000414

0800649c <strcpy>:
 800649c:	4603      	mov	r3, r0
 800649e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064a2:	f803 2b01 	strb.w	r2, [r3], #1
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	d1f9      	bne.n	800649e <strcpy+0x2>
 80064aa:	4770      	bx	lr

080064ac <quorem>:
 80064ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	6903      	ldr	r3, [r0, #16]
 80064b2:	690c      	ldr	r4, [r1, #16]
 80064b4:	4680      	mov	r8, r0
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	f2c0 8084 	blt.w	80065c4 <quorem+0x118>
 80064bc:	3c01      	subs	r4, #1
 80064be:	f101 0714 	add.w	r7, r1, #20
 80064c2:	f100 0614 	add.w	r6, r0, #20
 80064c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80064ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80064ce:	3501      	adds	r5, #1
 80064d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80064d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80064d8:	eb06 030c 	add.w	r3, r6, ip
 80064dc:	eb07 090c 	add.w	r9, r7, ip
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	b39d      	cbz	r5, 800654c <quorem+0xa0>
 80064e4:	f04f 0a00 	mov.w	sl, #0
 80064e8:	4638      	mov	r0, r7
 80064ea:	46b6      	mov	lr, r6
 80064ec:	46d3      	mov	fp, sl
 80064ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80064f2:	b293      	uxth	r3, r2
 80064f4:	fb05 a303 	mla	r3, r5, r3, sl
 80064f8:	0c12      	lsrs	r2, r2, #16
 80064fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064fe:	fb05 a202 	mla	r2, r5, r2, sl
 8006502:	b29b      	uxth	r3, r3
 8006504:	ebab 0303 	sub.w	r3, fp, r3
 8006508:	f8de b000 	ldr.w	fp, [lr]
 800650c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006510:	fa1f fb8b 	uxth.w	fp, fp
 8006514:	445b      	add	r3, fp
 8006516:	fa1f fb82 	uxth.w	fp, r2
 800651a:	f8de 2000 	ldr.w	r2, [lr]
 800651e:	4581      	cmp	r9, r0
 8006520:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006532:	f84e 3b04 	str.w	r3, [lr], #4
 8006536:	d2da      	bcs.n	80064ee <quorem+0x42>
 8006538:	f856 300c 	ldr.w	r3, [r6, ip]
 800653c:	b933      	cbnz	r3, 800654c <quorem+0xa0>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	3b04      	subs	r3, #4
 8006542:	429e      	cmp	r6, r3
 8006544:	461a      	mov	r2, r3
 8006546:	d331      	bcc.n	80065ac <quorem+0x100>
 8006548:	f8c8 4010 	str.w	r4, [r8, #16]
 800654c:	4640      	mov	r0, r8
 800654e:	f7ff fe49 	bl	80061e4 <__mcmp>
 8006552:	2800      	cmp	r0, #0
 8006554:	db26      	blt.n	80065a4 <quorem+0xf8>
 8006556:	4630      	mov	r0, r6
 8006558:	f04f 0c00 	mov.w	ip, #0
 800655c:	3501      	adds	r5, #1
 800655e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006562:	f8d0 e000 	ldr.w	lr, [r0]
 8006566:	b28b      	uxth	r3, r1
 8006568:	ebac 0303 	sub.w	r3, ip, r3
 800656c:	fa1f f28e 	uxth.w	r2, lr
 8006570:	4413      	add	r3, r2
 8006572:	0c0a      	lsrs	r2, r1, #16
 8006574:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006582:	45b9      	cmp	r9, r7
 8006584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006588:	f840 3b04 	str.w	r3, [r0], #4
 800658c:	d2e7      	bcs.n	800655e <quorem+0xb2>
 800658e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006592:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006596:	b92a      	cbnz	r2, 80065a4 <quorem+0xf8>
 8006598:	3b04      	subs	r3, #4
 800659a:	429e      	cmp	r6, r3
 800659c:	461a      	mov	r2, r3
 800659e:	d30b      	bcc.n	80065b8 <quorem+0x10c>
 80065a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80065a4:	4628      	mov	r0, r5
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	3b04      	subs	r3, #4
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d1c9      	bne.n	8006548 <quorem+0x9c>
 80065b4:	3c01      	subs	r4, #1
 80065b6:	e7c4      	b.n	8006542 <quorem+0x96>
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	3b04      	subs	r3, #4
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d1ef      	bne.n	80065a0 <quorem+0xf4>
 80065c0:	3c01      	subs	r4, #1
 80065c2:	e7ea      	b.n	800659a <quorem+0xee>
 80065c4:	2000      	movs	r0, #0
 80065c6:	e7ee      	b.n	80065a6 <quorem+0xfa>

080065c8 <_dtoa_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4616      	mov	r6, r2
 80065ce:	461f      	mov	r7, r3
 80065d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065d2:	b095      	sub	sp, #84	; 0x54
 80065d4:	4604      	mov	r4, r0
 80065d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80065da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065de:	b93d      	cbnz	r5, 80065f0 <_dtoa_r+0x28>
 80065e0:	2010      	movs	r0, #16
 80065e2:	f000 fda5 	bl	8007130 <malloc>
 80065e6:	6260      	str	r0, [r4, #36]	; 0x24
 80065e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ec:	6005      	str	r5, [r0, #0]
 80065ee:	60c5      	str	r5, [r0, #12]
 80065f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	b151      	cbz	r1, 800660c <_dtoa_r+0x44>
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	2301      	movs	r3, #1
 80065fa:	4093      	lsls	r3, r2
 80065fc:	604a      	str	r2, [r1, #4]
 80065fe:	608b      	str	r3, [r1, #8]
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fc0f 	bl	8005e24 <_Bfree>
 8006606:	2200      	movs	r2, #0
 8006608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	1e3b      	subs	r3, r7, #0
 800660e:	bfaf      	iteee	ge
 8006610:	2300      	movge	r3, #0
 8006612:	2201      	movlt	r2, #1
 8006614:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006618:	9303      	strlt	r3, [sp, #12]
 800661a:	bfac      	ite	ge
 800661c:	f8c8 3000 	strge.w	r3, [r8]
 8006620:	f8c8 2000 	strlt.w	r2, [r8]
 8006624:	4bae      	ldr	r3, [pc, #696]	; (80068e0 <_dtoa_r+0x318>)
 8006626:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800662a:	ea33 0308 	bics.w	r3, r3, r8
 800662e:	d11b      	bne.n	8006668 <_dtoa_r+0xa0>
 8006630:	f242 730f 	movw	r3, #9999	; 0x270f
 8006634:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	b923      	cbnz	r3, 8006646 <_dtoa_r+0x7e>
 800663c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006640:	2800      	cmp	r0, #0
 8006642:	f000 8545 	beq.w	80070d0 <_dtoa_r+0xb08>
 8006646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006648:	b953      	cbnz	r3, 8006660 <_dtoa_r+0x98>
 800664a:	4ba6      	ldr	r3, [pc, #664]	; (80068e4 <_dtoa_r+0x31c>)
 800664c:	e021      	b.n	8006692 <_dtoa_r+0xca>
 800664e:	4ba6      	ldr	r3, [pc, #664]	; (80068e8 <_dtoa_r+0x320>)
 8006650:	9306      	str	r3, [sp, #24]
 8006652:	3308      	adds	r3, #8
 8006654:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	9806      	ldr	r0, [sp, #24]
 800665a:	b015      	add	sp, #84	; 0x54
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	4ba0      	ldr	r3, [pc, #640]	; (80068e4 <_dtoa_r+0x31c>)
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	3303      	adds	r3, #3
 8006666:	e7f5      	b.n	8006654 <_dtoa_r+0x8c>
 8006668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa f990 	bl	8000998 <__aeabi_dcmpeq>
 8006678:	4682      	mov	sl, r0
 800667a:	b160      	cbz	r0, 8006696 <_dtoa_r+0xce>
 800667c:	2301      	movs	r3, #1
 800667e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8520 	beq.w	80070ca <_dtoa_r+0xb02>
 800668a:	4b98      	ldr	r3, [pc, #608]	; (80068ec <_dtoa_r+0x324>)
 800668c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	3b01      	subs	r3, #1
 8006692:	9306      	str	r3, [sp, #24]
 8006694:	e7e0      	b.n	8006658 <_dtoa_r+0x90>
 8006696:	ab12      	add	r3, sp, #72	; 0x48
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	ab13      	add	r3, sp, #76	; 0x4c
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4632      	mov	r2, r6
 80066a0:	463b      	mov	r3, r7
 80066a2:	4620      	mov	r0, r4
 80066a4:	f7ff fe16 	bl	80062d4 <__d2b>
 80066a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066ac:	4683      	mov	fp, r0
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	d07d      	beq.n	80067ae <_dtoa_r+0x1e6>
 80066b2:	46b0      	mov	r8, r6
 80066b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80066bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80066c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80066c8:	2200      	movs	r2, #0
 80066ca:	4b89      	ldr	r3, [pc, #548]	; (80068f0 <_dtoa_r+0x328>)
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7f9 fd42 	bl	8000158 <__aeabi_dsub>
 80066d4:	a37c      	add	r3, pc, #496	; (adr r3, 80068c8 <_dtoa_r+0x300>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fef5 	bl	80004c8 <__aeabi_dmul>
 80066de:	a37c      	add	r3, pc, #496	; (adr r3, 80068d0 <_dtoa_r+0x308>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 fd3a 	bl	800015c <__adddf3>
 80066e8:	4606      	mov	r6, r0
 80066ea:	4628      	mov	r0, r5
 80066ec:	460f      	mov	r7, r1
 80066ee:	f7f9 fe81 	bl	80003f4 <__aeabi_i2d>
 80066f2:	a379      	add	r3, pc, #484	; (adr r3, 80068d8 <_dtoa_r+0x310>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 fee6 	bl	80004c8 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7f9 fd2a 	bl	800015c <__adddf3>
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	f7fa f98c 	bl	8000a28 <__aeabi_d2iz>
 8006710:	2200      	movs	r2, #0
 8006712:	4682      	mov	sl, r0
 8006714:	2300      	movs	r3, #0
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7fa f947 	bl	80009ac <__aeabi_dcmplt>
 800671e:	b148      	cbz	r0, 8006734 <_dtoa_r+0x16c>
 8006720:	4650      	mov	r0, sl
 8006722:	f7f9 fe67 	bl	80003f4 <__aeabi_i2d>
 8006726:	4632      	mov	r2, r6
 8006728:	463b      	mov	r3, r7
 800672a:	f7fa f935 	bl	8000998 <__aeabi_dcmpeq>
 800672e:	b908      	cbnz	r0, 8006734 <_dtoa_r+0x16c>
 8006730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006734:	f1ba 0f16 	cmp.w	sl, #22
 8006738:	d85a      	bhi.n	80067f0 <_dtoa_r+0x228>
 800673a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800673e:	496d      	ldr	r1, [pc, #436]	; (80068f4 <_dtoa_r+0x32c>)
 8006740:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006748:	f7fa f94e 	bl	80009e8 <__aeabi_dcmpgt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d051      	beq.n	80067f4 <_dtoa_r+0x22c>
 8006750:	2300      	movs	r3, #0
 8006752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006756:	930d      	str	r3, [sp, #52]	; 0x34
 8006758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800675a:	1b5d      	subs	r5, r3, r5
 800675c:	1e6b      	subs	r3, r5, #1
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	bf43      	ittte	mi
 8006762:	2300      	movmi	r3, #0
 8006764:	f1c5 0901 	rsbmi	r9, r5, #1
 8006768:	9307      	strmi	r3, [sp, #28]
 800676a:	f04f 0900 	movpl.w	r9, #0
 800676e:	f1ba 0f00 	cmp.w	sl, #0
 8006772:	db41      	blt.n	80067f8 <_dtoa_r+0x230>
 8006774:	9b07      	ldr	r3, [sp, #28]
 8006776:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800677a:	4453      	add	r3, sl
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	2300      	movs	r3, #0
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006784:	2b09      	cmp	r3, #9
 8006786:	f200 808f 	bhi.w	80068a8 <_dtoa_r+0x2e0>
 800678a:	2b05      	cmp	r3, #5
 800678c:	bfc4      	itt	gt
 800678e:	3b04      	subgt	r3, #4
 8006790:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006794:	bfc8      	it	gt
 8006796:	2500      	movgt	r5, #0
 8006798:	f1a3 0302 	sub.w	r3, r3, #2
 800679c:	bfd8      	it	le
 800679e:	2501      	movle	r5, #1
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	f200 808d 	bhi.w	80068c0 <_dtoa_r+0x2f8>
 80067a6:	e8df f003 	tbb	[pc, r3]
 80067aa:	7d7b      	.short	0x7d7b
 80067ac:	6f2f      	.short	0x6f2f
 80067ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067b2:	441d      	add	r5, r3
 80067b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80067b8:	2820      	cmp	r0, #32
 80067ba:	dd13      	ble.n	80067e4 <_dtoa_r+0x21c>
 80067bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80067c0:	9b02      	ldr	r3, [sp, #8]
 80067c2:	fa08 f800 	lsl.w	r8, r8, r0
 80067c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80067ca:	fa23 f000 	lsr.w	r0, r3, r0
 80067ce:	ea48 0000 	orr.w	r0, r8, r0
 80067d2:	f7f9 fdff 	bl	80003d4 <__aeabi_ui2d>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4680      	mov	r8, r0
 80067da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80067de:	3d01      	subs	r5, #1
 80067e0:	9310      	str	r3, [sp, #64]	; 0x40
 80067e2:	e771      	b.n	80066c8 <_dtoa_r+0x100>
 80067e4:	9b02      	ldr	r3, [sp, #8]
 80067e6:	f1c0 0020 	rsb	r0, r0, #32
 80067ea:	fa03 f000 	lsl.w	r0, r3, r0
 80067ee:	e7f0      	b.n	80067d2 <_dtoa_r+0x20a>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e7b0      	b.n	8006756 <_dtoa_r+0x18e>
 80067f4:	900d      	str	r0, [sp, #52]	; 0x34
 80067f6:	e7af      	b.n	8006758 <_dtoa_r+0x190>
 80067f8:	f1ca 0300 	rsb	r3, sl, #0
 80067fc:	9308      	str	r3, [sp, #32]
 80067fe:	2300      	movs	r3, #0
 8006800:	eba9 090a 	sub.w	r9, r9, sl
 8006804:	930c      	str	r3, [sp, #48]	; 0x30
 8006806:	e7bc      	b.n	8006782 <_dtoa_r+0x1ba>
 8006808:	2301      	movs	r3, #1
 800680a:	9309      	str	r3, [sp, #36]	; 0x24
 800680c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd74      	ble.n	80068fc <_dtoa_r+0x334>
 8006812:	4698      	mov	r8, r3
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	2200      	movs	r2, #0
 8006818:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800681a:	6072      	str	r2, [r6, #4]
 800681c:	2204      	movs	r2, #4
 800681e:	f102 0014 	add.w	r0, r2, #20
 8006822:	4298      	cmp	r0, r3
 8006824:	6871      	ldr	r1, [r6, #4]
 8006826:	d96e      	bls.n	8006906 <_dtoa_r+0x33e>
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fac7 	bl	8005dbc <_Balloc>
 800682e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b8 0f0e 	cmp.w	r8, #14
 8006838:	9306      	str	r3, [sp, #24]
 800683a:	f200 80ed 	bhi.w	8006a18 <_dtoa_r+0x450>
 800683e:	2d00      	cmp	r5, #0
 8006840:	f000 80ea 	beq.w	8006a18 <_dtoa_r+0x450>
 8006844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006848:	f1ba 0f00 	cmp.w	sl, #0
 800684c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006850:	dd77      	ble.n	8006942 <_dtoa_r+0x37a>
 8006852:	4a28      	ldr	r2, [pc, #160]	; (80068f4 <_dtoa_r+0x32c>)
 8006854:	f00a 030f 	and.w	r3, sl, #15
 8006858:	ea4f 162a 	mov.w	r6, sl, asr #4
 800685c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006860:	06f0      	lsls	r0, r6, #27
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800686a:	d568      	bpl.n	800693e <_dtoa_r+0x376>
 800686c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006870:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <_dtoa_r+0x330>)
 8006872:	2503      	movs	r5, #3
 8006874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006878:	f7f9 ff50 	bl	800071c <__aeabi_ddiv>
 800687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006880:	f006 060f 	and.w	r6, r6, #15
 8006884:	4f1c      	ldr	r7, [pc, #112]	; (80068f8 <_dtoa_r+0x330>)
 8006886:	e04f      	b.n	8006928 <_dtoa_r+0x360>
 8006888:	2301      	movs	r3, #1
 800688a:	9309      	str	r3, [sp, #36]	; 0x24
 800688c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800688e:	4453      	add	r3, sl
 8006890:	f103 0801 	add.w	r8, r3, #1
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	4643      	mov	r3, r8
 8006898:	2b01      	cmp	r3, #1
 800689a:	bfb8      	it	lt
 800689c:	2301      	movlt	r3, #1
 800689e:	e7ba      	b.n	8006816 <_dtoa_r+0x24e>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e7b2      	b.n	800680a <_dtoa_r+0x242>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7f0      	b.n	800688a <_dtoa_r+0x2c2>
 80068a8:	2501      	movs	r5, #1
 80068aa:	2300      	movs	r3, #0
 80068ac:	9509      	str	r5, [sp, #36]	; 0x24
 80068ae:	931e      	str	r3, [sp, #120]	; 0x78
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	2200      	movs	r2, #0
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	4698      	mov	r8, r3
 80068ba:	2312      	movs	r3, #18
 80068bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80068be:	e7aa      	b.n	8006816 <_dtoa_r+0x24e>
 80068c0:	2301      	movs	r3, #1
 80068c2:	9309      	str	r3, [sp, #36]	; 0x24
 80068c4:	e7f4      	b.n	80068b0 <_dtoa_r+0x2e8>
 80068c6:	bf00      	nop
 80068c8:	636f4361 	.word	0x636f4361
 80068cc:	3fd287a7 	.word	0x3fd287a7
 80068d0:	8b60c8b3 	.word	0x8b60c8b3
 80068d4:	3fc68a28 	.word	0x3fc68a28
 80068d8:	509f79fb 	.word	0x509f79fb
 80068dc:	3fd34413 	.word	0x3fd34413
 80068e0:	7ff00000 	.word	0x7ff00000
 80068e4:	0800962d 	.word	0x0800962d
 80068e8:	08009624 	.word	0x08009624
 80068ec:	08009632 	.word	0x08009632
 80068f0:	3ff80000 	.word	0x3ff80000
 80068f4:	08009550 	.word	0x08009550
 80068f8:	08009528 	.word	0x08009528
 80068fc:	2301      	movs	r3, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	4698      	mov	r8, r3
 8006902:	461a      	mov	r2, r3
 8006904:	e7da      	b.n	80068bc <_dtoa_r+0x2f4>
 8006906:	3101      	adds	r1, #1
 8006908:	6071      	str	r1, [r6, #4]
 800690a:	0052      	lsls	r2, r2, #1
 800690c:	e787      	b.n	800681e <_dtoa_r+0x256>
 800690e:	07f1      	lsls	r1, r6, #31
 8006910:	d508      	bpl.n	8006924 <_dtoa_r+0x35c>
 8006912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f7f9 fdd5 	bl	80004c8 <__aeabi_dmul>
 800691e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006922:	3501      	adds	r5, #1
 8006924:	1076      	asrs	r6, r6, #1
 8006926:	3708      	adds	r7, #8
 8006928:	2e00      	cmp	r6, #0
 800692a:	d1f0      	bne.n	800690e <_dtoa_r+0x346>
 800692c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006934:	f7f9 fef2 	bl	800071c <__aeabi_ddiv>
 8006938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693c:	e01b      	b.n	8006976 <_dtoa_r+0x3ae>
 800693e:	2502      	movs	r5, #2
 8006940:	e7a0      	b.n	8006884 <_dtoa_r+0x2bc>
 8006942:	f000 80a4 	beq.w	8006a8e <_dtoa_r+0x4c6>
 8006946:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800694a:	f1ca 0600 	rsb	r6, sl, #0
 800694e:	4ba0      	ldr	r3, [pc, #640]	; (8006bd0 <_dtoa_r+0x608>)
 8006950:	f006 020f 	and.w	r2, r6, #15
 8006954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fdb4 	bl	80004c8 <__aeabi_dmul>
 8006960:	2502      	movs	r5, #2
 8006962:	2300      	movs	r3, #0
 8006964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006968:	4f9a      	ldr	r7, [pc, #616]	; (8006bd4 <_dtoa_r+0x60c>)
 800696a:	1136      	asrs	r6, r6, #4
 800696c:	2e00      	cmp	r6, #0
 800696e:	f040 8083 	bne.w	8006a78 <_dtoa_r+0x4b0>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e0      	bne.n	8006938 <_dtoa_r+0x370>
 8006976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 808a 	beq.w	8006a92 <_dtoa_r+0x4ca>
 800697e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006982:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006986:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800698a:	2200      	movs	r2, #0
 800698c:	4b92      	ldr	r3, [pc, #584]	; (8006bd8 <_dtoa_r+0x610>)
 800698e:	f7fa f80d 	bl	80009ac <__aeabi_dcmplt>
 8006992:	2800      	cmp	r0, #0
 8006994:	d07d      	beq.n	8006a92 <_dtoa_r+0x4ca>
 8006996:	f1b8 0f00 	cmp.w	r8, #0
 800699a:	d07a      	beq.n	8006a92 <_dtoa_r+0x4ca>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dd36      	ble.n	8006a10 <_dtoa_r+0x448>
 80069a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069a6:	2200      	movs	r2, #0
 80069a8:	4b8c      	ldr	r3, [pc, #560]	; (8006bdc <_dtoa_r+0x614>)
 80069aa:	f7f9 fd8d 	bl	80004c8 <__aeabi_dmul>
 80069ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b2:	9e04      	ldr	r6, [sp, #16]
 80069b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80069b8:	3501      	adds	r5, #1
 80069ba:	4628      	mov	r0, r5
 80069bc:	f7f9 fd1a 	bl	80003f4 <__aeabi_i2d>
 80069c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c4:	f7f9 fd80 	bl	80004c8 <__aeabi_dmul>
 80069c8:	2200      	movs	r2, #0
 80069ca:	4b85      	ldr	r3, [pc, #532]	; (8006be0 <_dtoa_r+0x618>)
 80069cc:	f7f9 fbc6 	bl	800015c <__adddf3>
 80069d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80069d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d15c      	bne.n	8006a98 <_dtoa_r+0x4d0>
 80069de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b7f      	ldr	r3, [pc, #508]	; (8006be4 <_dtoa_r+0x61c>)
 80069e6:	f7f9 fbb7 	bl	8000158 <__aeabi_dsub>
 80069ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ec:	462b      	mov	r3, r5
 80069ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f2:	f7f9 fff9 	bl	80009e8 <__aeabi_dcmpgt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f040 8281 	bne.w	8006efe <_dtoa_r+0x936>
 80069fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a06:	f7f9 ffd1 	bl	80009ac <__aeabi_dcmplt>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	f040 8275 	bne.w	8006efa <_dtoa_r+0x932>
 8006a10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f2c0 814b 	blt.w	8006cb6 <_dtoa_r+0x6ee>
 8006a20:	f1ba 0f0e 	cmp.w	sl, #14
 8006a24:	f300 8147 	bgt.w	8006cb6 <_dtoa_r+0x6ee>
 8006a28:	4b69      	ldr	r3, [pc, #420]	; (8006bd0 <_dtoa_r+0x608>)
 8006a2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f280 80d7 	bge.w	8006bec <_dtoa_r+0x624>
 8006a3e:	f1b8 0f00 	cmp.w	r8, #0
 8006a42:	f300 80d3 	bgt.w	8006bec <_dtoa_r+0x624>
 8006a46:	f040 8257 	bne.w	8006ef8 <_dtoa_r+0x930>
 8006a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4b64      	ldr	r3, [pc, #400]	; (8006be4 <_dtoa_r+0x61c>)
 8006a52:	f7f9 fd39 	bl	80004c8 <__aeabi_dmul>
 8006a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5a:	f7f9 ffbb 	bl	80009d4 <__aeabi_dcmpge>
 8006a5e:	4646      	mov	r6, r8
 8006a60:	4647      	mov	r7, r8
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f040 822d 	bne.w	8006ec2 <_dtoa_r+0x8fa>
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	9a06      	ldr	r2, [sp, #24]
 8006a6c:	1c5d      	adds	r5, r3, #1
 8006a6e:	2331      	movs	r3, #49	; 0x31
 8006a70:	f10a 0a01 	add.w	sl, sl, #1
 8006a74:	7013      	strb	r3, [r2, #0]
 8006a76:	e228      	b.n	8006eca <_dtoa_r+0x902>
 8006a78:	07f2      	lsls	r2, r6, #31
 8006a7a:	d505      	bpl.n	8006a88 <_dtoa_r+0x4c0>
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	f7f9 fd22 	bl	80004c8 <__aeabi_dmul>
 8006a84:	2301      	movs	r3, #1
 8006a86:	3501      	adds	r5, #1
 8006a88:	1076      	asrs	r6, r6, #1
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	e76e      	b.n	800696c <_dtoa_r+0x3a4>
 8006a8e:	2502      	movs	r5, #2
 8006a90:	e771      	b.n	8006976 <_dtoa_r+0x3ae>
 8006a92:	4657      	mov	r7, sl
 8006a94:	4646      	mov	r6, r8
 8006a96:	e790      	b.n	80069ba <_dtoa_r+0x3f2>
 8006a98:	4b4d      	ldr	r3, [pc, #308]	; (8006bd0 <_dtoa_r+0x608>)
 8006a9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d048      	beq.n	8006b3a <_dtoa_r+0x572>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	2000      	movs	r0, #0
 8006aae:	494e      	ldr	r1, [pc, #312]	; (8006be8 <_dtoa_r+0x620>)
 8006ab0:	f7f9 fe34 	bl	800071c <__aeabi_ddiv>
 8006ab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ab8:	f7f9 fb4e 	bl	8000158 <__aeabi_dsub>
 8006abc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ac0:	9d06      	ldr	r5, [sp, #24]
 8006ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac6:	f7f9 ffaf 	bl	8000a28 <__aeabi_d2iz>
 8006aca:	9011      	str	r0, [sp, #68]	; 0x44
 8006acc:	f7f9 fc92 	bl	80003f4 <__aeabi_i2d>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad8:	f7f9 fb3e 	bl	8000158 <__aeabi_dsub>
 8006adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae2:	3330      	adds	r3, #48	; 0x30
 8006ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ae8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aec:	f7f9 ff5e 	bl	80009ac <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d163      	bne.n	8006bbc <_dtoa_r+0x5f4>
 8006af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af8:	2000      	movs	r0, #0
 8006afa:	4937      	ldr	r1, [pc, #220]	; (8006bd8 <_dtoa_r+0x610>)
 8006afc:	f7f9 fb2c 	bl	8000158 <__aeabi_dsub>
 8006b00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b04:	f7f9 ff52 	bl	80009ac <__aeabi_dcmplt>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f040 80b5 	bne.w	8006c78 <_dtoa_r+0x6b0>
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	1aeb      	subs	r3, r5, r3
 8006b12:	429e      	cmp	r6, r3
 8006b14:	f77f af7c 	ble.w	8006a10 <_dtoa_r+0x448>
 8006b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <_dtoa_r+0x614>)
 8006b20:	f7f9 fcd2 	bl	80004c8 <__aeabi_dmul>
 8006b24:	2200      	movs	r2, #0
 8006b26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2e:	4b2b      	ldr	r3, [pc, #172]	; (8006bdc <_dtoa_r+0x614>)
 8006b30:	f7f9 fcca 	bl	80004c8 <__aeabi_dmul>
 8006b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b38:	e7c3      	b.n	8006ac2 <_dtoa_r+0x4fa>
 8006b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b3e:	f7f9 fcc3 	bl	80004c8 <__aeabi_dmul>
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b48:	199d      	adds	r5, r3, r6
 8006b4a:	461e      	mov	r6, r3
 8006b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b50:	f7f9 ff6a 	bl	8000a28 <__aeabi_d2iz>
 8006b54:	9011      	str	r0, [sp, #68]	; 0x44
 8006b56:	f7f9 fc4d 	bl	80003f4 <__aeabi_i2d>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b62:	f7f9 faf9 	bl	8000158 <__aeabi_dsub>
 8006b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	f806 3b01 	strb.w	r3, [r6], #1
 8006b72:	42ae      	cmp	r6, r5
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	d124      	bne.n	8006bc4 <_dtoa_r+0x5fc>
 8006b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <_dtoa_r+0x620>)
 8006b80:	f7f9 faec 	bl	800015c <__adddf3>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b8c:	f7f9 ff2c 	bl	80009e8 <__aeabi_dcmpgt>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d171      	bne.n	8006c78 <_dtoa_r+0x6b0>
 8006b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b98:	2000      	movs	r0, #0
 8006b9a:	4913      	ldr	r1, [pc, #76]	; (8006be8 <_dtoa_r+0x620>)
 8006b9c:	f7f9 fadc 	bl	8000158 <__aeabi_dsub>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba8:	f7f9 ff00 	bl	80009ac <__aeabi_dcmplt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f43f af2f 	beq.w	8006a10 <_dtoa_r+0x448>
 8006bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb6:	1e6a      	subs	r2, r5, #1
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d001      	beq.n	8006bc0 <_dtoa_r+0x5f8>
 8006bbc:	46ba      	mov	sl, r7
 8006bbe:	e04a      	b.n	8006c56 <_dtoa_r+0x68e>
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	e7f6      	b.n	8006bb2 <_dtoa_r+0x5ea>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_dtoa_r+0x614>)
 8006bc6:	f7f9 fc7f 	bl	80004c8 <__aeabi_dmul>
 8006bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bce:	e7bd      	b.n	8006b4c <_dtoa_r+0x584>
 8006bd0:	08009550 	.word	0x08009550
 8006bd4:	08009528 	.word	0x08009528
 8006bd8:	3ff00000 	.word	0x3ff00000
 8006bdc:	40240000 	.word	0x40240000
 8006be0:	401c0000 	.word	0x401c0000
 8006be4:	40140000 	.word	0x40140000
 8006be8:	3fe00000 	.word	0x3fe00000
 8006bec:	9d06      	ldr	r5, [sp, #24]
 8006bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	f7f9 fd8f 	bl	800071c <__aeabi_ddiv>
 8006bfe:	f7f9 ff13 	bl	8000a28 <__aeabi_d2iz>
 8006c02:	4681      	mov	r9, r0
 8006c04:	f7f9 fbf6 	bl	80003f4 <__aeabi_i2d>
 8006c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c0c:	f7f9 fc5c 	bl	80004c8 <__aeabi_dmul>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 fa9e 	bl	8000158 <__aeabi_dsub>
 8006c1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006c20:	f805 6b01 	strb.w	r6, [r5], #1
 8006c24:	9e06      	ldr	r6, [sp, #24]
 8006c26:	4602      	mov	r2, r0
 8006c28:	1bae      	subs	r6, r5, r6
 8006c2a:	45b0      	cmp	r8, r6
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	d135      	bne.n	8006c9c <_dtoa_r+0x6d4>
 8006c30:	f7f9 fa94 	bl	800015c <__adddf3>
 8006c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	f7f9 fed4 	bl	80009e8 <__aeabi_dcmpgt>
 8006c40:	b9c8      	cbnz	r0, 8006c76 <_dtoa_r+0x6ae>
 8006c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c46:	4630      	mov	r0, r6
 8006c48:	4639      	mov	r1, r7
 8006c4a:	f7f9 fea5 	bl	8000998 <__aeabi_dcmpeq>
 8006c4e:	b110      	cbz	r0, 8006c56 <_dtoa_r+0x68e>
 8006c50:	f019 0f01 	tst.w	r9, #1
 8006c54:	d10f      	bne.n	8006c76 <_dtoa_r+0x6ae>
 8006c56:	4659      	mov	r1, fp
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff f8e3 	bl	8005e24 <_Bfree>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c62:	702b      	strb	r3, [r5, #0]
 8006c64:	f10a 0301 	add.w	r3, sl, #1
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f43f acf3 	beq.w	8006658 <_dtoa_r+0x90>
 8006c72:	601d      	str	r5, [r3, #0]
 8006c74:	e4f0      	b.n	8006658 <_dtoa_r+0x90>
 8006c76:	4657      	mov	r7, sl
 8006c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c7c:	1e6b      	subs	r3, r5, #1
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d106      	bne.n	8006c90 <_dtoa_r+0x6c8>
 8006c82:	9a06      	ldr	r2, [sp, #24]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d107      	bne.n	8006c98 <_dtoa_r+0x6d0>
 8006c88:	2330      	movs	r3, #48	; 0x30
 8006c8a:	7013      	strb	r3, [r2, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	3701      	adds	r7, #1
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e791      	b.n	8006bbc <_dtoa_r+0x5f4>
 8006c98:	461d      	mov	r5, r3
 8006c9a:	e7ed      	b.n	8006c78 <_dtoa_r+0x6b0>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4b99      	ldr	r3, [pc, #612]	; (8006f04 <_dtoa_r+0x93c>)
 8006ca0:	f7f9 fc12 	bl	80004c8 <__aeabi_dmul>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460f      	mov	r7, r1
 8006cac:	f7f9 fe74 	bl	8000998 <__aeabi_dcmpeq>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d09e      	beq.n	8006bf2 <_dtoa_r+0x62a>
 8006cb4:	e7cf      	b.n	8006c56 <_dtoa_r+0x68e>
 8006cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb8:	2a00      	cmp	r2, #0
 8006cba:	f000 8088 	beq.w	8006dce <_dtoa_r+0x806>
 8006cbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006cc0:	2a01      	cmp	r2, #1
 8006cc2:	dc6d      	bgt.n	8006da0 <_dtoa_r+0x7d8>
 8006cc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d066      	beq.n	8006d98 <_dtoa_r+0x7d0>
 8006cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cce:	464d      	mov	r5, r9
 8006cd0:	9e08      	ldr	r6, [sp, #32]
 8006cd2:	9a07      	ldr	r2, [sp, #28]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	441a      	add	r2, r3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4499      	add	r9, r3
 8006cdc:	9207      	str	r2, [sp, #28]
 8006cde:	f7ff f941 	bl	8005f64 <__i2b>
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	dd0b      	ble.n	8006d00 <_dtoa_r+0x738>
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dd08      	ble.n	8006d00 <_dtoa_r+0x738>
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	bfa8      	it	ge
 8006cf2:	462b      	movge	r3, r5
 8006cf4:	9a07      	ldr	r2, [sp, #28]
 8006cf6:	eba9 0903 	sub.w	r9, r9, r3
 8006cfa:	1aed      	subs	r5, r5, r3
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	9307      	str	r3, [sp, #28]
 8006d00:	9b08      	ldr	r3, [sp, #32]
 8006d02:	b1eb      	cbz	r3, 8006d40 <_dtoa_r+0x778>
 8006d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d065      	beq.n	8006dd6 <_dtoa_r+0x80e>
 8006d0a:	b18e      	cbz	r6, 8006d30 <_dtoa_r+0x768>
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4632      	mov	r2, r6
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff f9c5 	bl	80060a0 <__pow5mult>
 8006d16:	465a      	mov	r2, fp
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7ff f92a 	bl	8005f76 <__multiply>
 8006d22:	4659      	mov	r1, fp
 8006d24:	900a      	str	r0, [sp, #40]	; 0x28
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff f87c 	bl	8005e24 <_Bfree>
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	469b      	mov	fp, r3
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	1b9a      	subs	r2, r3, r6
 8006d34:	d004      	beq.n	8006d40 <_dtoa_r+0x778>
 8006d36:	4659      	mov	r1, fp
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff f9b1 	bl	80060a0 <__pow5mult>
 8006d3e:	4683      	mov	fp, r0
 8006d40:	2101      	movs	r1, #1
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff f90e 	bl	8005f64 <__i2b>
 8006d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 81c6 	beq.w	80070de <_dtoa_r+0xb16>
 8006d52:	461a      	mov	r2, r3
 8006d54:	4601      	mov	r1, r0
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff f9a2 	bl	80060a0 <__pow5mult>
 8006d5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d5e:	4606      	mov	r6, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	dc3e      	bgt.n	8006de2 <_dtoa_r+0x81a>
 8006d64:	9b02      	ldr	r3, [sp, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d137      	bne.n	8006dda <_dtoa_r+0x812>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d134      	bne.n	8006dde <_dtoa_r+0x816>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	0d1b      	lsrs	r3, r3, #20
 8006d7c:	051b      	lsls	r3, r3, #20
 8006d7e:	b12b      	cbz	r3, 8006d8c <_dtoa_r+0x7c4>
 8006d80:	9b07      	ldr	r3, [sp, #28]
 8006d82:	f109 0901 	add.w	r9, r9, #1
 8006d86:	3301      	adds	r3, #1
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d128      	bne.n	8006de6 <_dtoa_r+0x81e>
 8006d94:	2001      	movs	r0, #1
 8006d96:	e02e      	b.n	8006df6 <_dtoa_r+0x82e>
 8006d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d9e:	e796      	b.n	8006cce <_dtoa_r+0x706>
 8006da0:	9b08      	ldr	r3, [sp, #32]
 8006da2:	f108 36ff 	add.w	r6, r8, #4294967295
 8006da6:	42b3      	cmp	r3, r6
 8006da8:	bfb7      	itett	lt
 8006daa:	9b08      	ldrlt	r3, [sp, #32]
 8006dac:	1b9e      	subge	r6, r3, r6
 8006dae:	1af2      	sublt	r2, r6, r3
 8006db0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006db2:	bfbf      	itttt	lt
 8006db4:	9608      	strlt	r6, [sp, #32]
 8006db6:	189b      	addlt	r3, r3, r2
 8006db8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006dba:	2600      	movlt	r6, #0
 8006dbc:	f1b8 0f00 	cmp.w	r8, #0
 8006dc0:	bfb9      	ittee	lt
 8006dc2:	eba9 0508 	sublt.w	r5, r9, r8
 8006dc6:	2300      	movlt	r3, #0
 8006dc8:	464d      	movge	r5, r9
 8006dca:	4643      	movge	r3, r8
 8006dcc:	e781      	b.n	8006cd2 <_dtoa_r+0x70a>
 8006dce:	9e08      	ldr	r6, [sp, #32]
 8006dd0:	464d      	mov	r5, r9
 8006dd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dd4:	e786      	b.n	8006ce4 <_dtoa_r+0x71c>
 8006dd6:	9a08      	ldr	r2, [sp, #32]
 8006dd8:	e7ad      	b.n	8006d36 <_dtoa_r+0x76e>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e7d6      	b.n	8006d8c <_dtoa_r+0x7c4>
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	e7d4      	b.n	8006d8c <_dtoa_r+0x7c4>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9308      	str	r3, [sp, #32]
 8006de6:	6933      	ldr	r3, [r6, #16]
 8006de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	f7ff f86b 	bl	8005ec8 <__hi0bits>
 8006df2:	f1c0 0020 	rsb	r0, r0, #32
 8006df6:	9b07      	ldr	r3, [sp, #28]
 8006df8:	4418      	add	r0, r3
 8006dfa:	f010 001f 	ands.w	r0, r0, #31
 8006dfe:	d047      	beq.n	8006e90 <_dtoa_r+0x8c8>
 8006e00:	f1c0 0320 	rsb	r3, r0, #32
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	dd3b      	ble.n	8006e80 <_dtoa_r+0x8b8>
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	f1c0 001c 	rsb	r0, r0, #28
 8006e0e:	4481      	add	r9, r0
 8006e10:	4405      	add	r5, r0
 8006e12:	4403      	add	r3, r0
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	f1b9 0f00 	cmp.w	r9, #0
 8006e1a:	dd05      	ble.n	8006e28 <_dtoa_r+0x860>
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	464a      	mov	r2, r9
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7ff f98b 	bl	800613c <__lshift>
 8006e26:	4683      	mov	fp, r0
 8006e28:	9b07      	ldr	r3, [sp, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dd05      	ble.n	8006e3a <_dtoa_r+0x872>
 8006e2e:	4631      	mov	r1, r6
 8006e30:	461a      	mov	r2, r3
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff f982 	bl	800613c <__lshift>
 8006e38:	4606      	mov	r6, r0
 8006e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e3c:	b353      	cbz	r3, 8006e94 <_dtoa_r+0x8cc>
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4658      	mov	r0, fp
 8006e42:	f7ff f9cf 	bl	80061e4 <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	da24      	bge.n	8006e94 <_dtoa_r+0x8cc>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	220a      	movs	r2, #10
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7fe fffe 	bl	8005e52 <__multadd>
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8144 	beq.w	80070ec <_dtoa_r+0xb24>
 8006e64:	2300      	movs	r3, #0
 8006e66:	4639      	mov	r1, r7
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7fe fff1 	bl	8005e52 <__multadd>
 8006e70:	9b04      	ldr	r3, [sp, #16]
 8006e72:	4607      	mov	r7, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc4d      	bgt.n	8006f14 <_dtoa_r+0x94c>
 8006e78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dd4a      	ble.n	8006f14 <_dtoa_r+0x94c>
 8006e7e:	e011      	b.n	8006ea4 <_dtoa_r+0x8dc>
 8006e80:	d0c9      	beq.n	8006e16 <_dtoa_r+0x84e>
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	331c      	adds	r3, #28
 8006e86:	441a      	add	r2, r3
 8006e88:	4499      	add	r9, r3
 8006e8a:	441d      	add	r5, r3
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	e7c1      	b.n	8006e14 <_dtoa_r+0x84c>
 8006e90:	4603      	mov	r3, r0
 8006e92:	e7f6      	b.n	8006e82 <_dtoa_r+0x8ba>
 8006e94:	f1b8 0f00 	cmp.w	r8, #0
 8006e98:	dc36      	bgt.n	8006f08 <_dtoa_r+0x940>
 8006e9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	dd33      	ble.n	8006f08 <_dtoa_r+0x940>
 8006ea0:	f8cd 8010 	str.w	r8, [sp, #16]
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	b963      	cbnz	r3, 8006ec2 <_dtoa_r+0x8fa>
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	2205      	movs	r2, #5
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7fe ffd0 	bl	8005e52 <__multadd>
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f7ff f994 	bl	80061e4 <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f73f add3 	bgt.w	8006a68 <_dtoa_r+0x4a0>
 8006ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ec4:	9d06      	ldr	r5, [sp, #24]
 8006ec6:	ea6f 0a03 	mvn.w	sl, r3
 8006eca:	f04f 0900 	mov.w	r9, #0
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f7fe ffa7 	bl	8005e24 <_Bfree>
 8006ed6:	2f00      	cmp	r7, #0
 8006ed8:	f43f aebd 	beq.w	8006c56 <_dtoa_r+0x68e>
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	d005      	beq.n	8006eee <_dtoa_r+0x926>
 8006ee2:	45b9      	cmp	r9, r7
 8006ee4:	d003      	beq.n	8006eee <_dtoa_r+0x926>
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7fe ff9b 	bl	8005e24 <_Bfree>
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7fe ff97 	bl	8005e24 <_Bfree>
 8006ef6:	e6ae      	b.n	8006c56 <_dtoa_r+0x68e>
 8006ef8:	2600      	movs	r6, #0
 8006efa:	4637      	mov	r7, r6
 8006efc:	e7e1      	b.n	8006ec2 <_dtoa_r+0x8fa>
 8006efe:	46ba      	mov	sl, r7
 8006f00:	4637      	mov	r7, r6
 8006f02:	e5b1      	b.n	8006a68 <_dtoa_r+0x4a0>
 8006f04:	40240000 	.word	0x40240000
 8006f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80f3 	beq.w	80070fa <_dtoa_r+0xb32>
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	dd05      	ble.n	8006f24 <_dtoa_r+0x95c>
 8006f18:	4639      	mov	r1, r7
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff f90d 	bl	800613c <__lshift>
 8006f22:	4607      	mov	r7, r0
 8006f24:	9b08      	ldr	r3, [sp, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04c      	beq.n	8006fc4 <_dtoa_r+0x9fc>
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7fe ff45 	bl	8005dbc <_Balloc>
 8006f32:	4605      	mov	r5, r0
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	f107 010c 	add.w	r1, r7, #12
 8006f3a:	3202      	adds	r2, #2
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	300c      	adds	r0, #12
 8006f40:	f7fe fda6 	bl	8005a90 <memcpy>
 8006f44:	2201      	movs	r2, #1
 8006f46:	4629      	mov	r1, r5
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7ff f8f7 	bl	800613c <__lshift>
 8006f4e:	46b9      	mov	r9, r7
 8006f50:	4607      	mov	r7, r0
 8006f52:	9b06      	ldr	r3, [sp, #24]
 8006f54:	9307      	str	r3, [sp, #28]
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	9308      	str	r3, [sp, #32]
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4658      	mov	r0, fp
 8006f62:	f7ff faa3 	bl	80064ac <quorem>
 8006f66:	4649      	mov	r1, r9
 8006f68:	4605      	mov	r5, r0
 8006f6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f6e:	4658      	mov	r0, fp
 8006f70:	f7ff f938 	bl	80061e4 <__mcmp>
 8006f74:	463a      	mov	r2, r7
 8006f76:	9002      	str	r0, [sp, #8]
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7ff f94c 	bl	8006218 <__mdiff>
 8006f80:	68c3      	ldr	r3, [r0, #12]
 8006f82:	4602      	mov	r2, r0
 8006f84:	bb03      	cbnz	r3, 8006fc8 <_dtoa_r+0xa00>
 8006f86:	4601      	mov	r1, r0
 8006f88:	9009      	str	r0, [sp, #36]	; 0x24
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f7ff f92a 	bl	80061e4 <__mcmp>
 8006f90:	4603      	mov	r3, r0
 8006f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f94:	4611      	mov	r1, r2
 8006f96:	4620      	mov	r0, r4
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	f7fe ff43 	bl	8005e24 <_Bfree>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	b9a3      	cbnz	r3, 8006fcc <_dtoa_r+0xa04>
 8006fa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fa4:	b992      	cbnz	r2, 8006fcc <_dtoa_r+0xa04>
 8006fa6:	9a08      	ldr	r2, [sp, #32]
 8006fa8:	b982      	cbnz	r2, 8006fcc <_dtoa_r+0xa04>
 8006faa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006fae:	d029      	beq.n	8007004 <_dtoa_r+0xa3c>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd01      	ble.n	8006fba <_dtoa_r+0x9f2>
 8006fb6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006fba:	9b07      	ldr	r3, [sp, #28]
 8006fbc:	1c5d      	adds	r5, r3, #1
 8006fbe:	f883 8000 	strb.w	r8, [r3]
 8006fc2:	e784      	b.n	8006ece <_dtoa_r+0x906>
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	e7c2      	b.n	8006f4e <_dtoa_r+0x986>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e7e3      	b.n	8006f94 <_dtoa_r+0x9cc>
 8006fcc:	9a02      	ldr	r2, [sp, #8]
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	db04      	blt.n	8006fdc <_dtoa_r+0xa14>
 8006fd2:	d123      	bne.n	800701c <_dtoa_r+0xa54>
 8006fd4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fd6:	bb0a      	cbnz	r2, 800701c <_dtoa_r+0xa54>
 8006fd8:	9a08      	ldr	r2, [sp, #32]
 8006fda:	b9fa      	cbnz	r2, 800701c <_dtoa_r+0xa54>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	ddec      	ble.n	8006fba <_dtoa_r+0x9f2>
 8006fe0:	4659      	mov	r1, fp
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7ff f8a9 	bl	800613c <__lshift>
 8006fea:	4631      	mov	r1, r6
 8006fec:	4683      	mov	fp, r0
 8006fee:	f7ff f8f9 	bl	80061e4 <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	dc03      	bgt.n	8006ffe <_dtoa_r+0xa36>
 8006ff6:	d1e0      	bne.n	8006fba <_dtoa_r+0x9f2>
 8006ff8:	f018 0f01 	tst.w	r8, #1
 8006ffc:	d0dd      	beq.n	8006fba <_dtoa_r+0x9f2>
 8006ffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007002:	d1d8      	bne.n	8006fb6 <_dtoa_r+0x9ee>
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	9a07      	ldr	r2, [sp, #28]
 8007008:	1c5d      	adds	r5, r3, #1
 800700a:	2339      	movs	r3, #57	; 0x39
 800700c:	7013      	strb	r3, [r2, #0]
 800700e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007012:	1e6a      	subs	r2, r5, #1
 8007014:	2b39      	cmp	r3, #57	; 0x39
 8007016:	d04d      	beq.n	80070b4 <_dtoa_r+0xaec>
 8007018:	3301      	adds	r3, #1
 800701a:	e052      	b.n	80070c2 <_dtoa_r+0xafa>
 800701c:	9a07      	ldr	r2, [sp, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f102 0501 	add.w	r5, r2, #1
 8007024:	dd06      	ble.n	8007034 <_dtoa_r+0xa6c>
 8007026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800702a:	d0eb      	beq.n	8007004 <_dtoa_r+0xa3c>
 800702c:	f108 0801 	add.w	r8, r8, #1
 8007030:	9b07      	ldr	r3, [sp, #28]
 8007032:	e7c4      	b.n	8006fbe <_dtoa_r+0x9f6>
 8007034:	9b06      	ldr	r3, [sp, #24]
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	1aeb      	subs	r3, r5, r3
 800703a:	4293      	cmp	r3, r2
 800703c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007040:	d021      	beq.n	8007086 <_dtoa_r+0xabe>
 8007042:	4659      	mov	r1, fp
 8007044:	2300      	movs	r3, #0
 8007046:	220a      	movs	r2, #10
 8007048:	4620      	mov	r0, r4
 800704a:	f7fe ff02 	bl	8005e52 <__multadd>
 800704e:	45b9      	cmp	r9, r7
 8007050:	4683      	mov	fp, r0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	f04f 020a 	mov.w	r2, #10
 800705a:	4649      	mov	r1, r9
 800705c:	4620      	mov	r0, r4
 800705e:	d105      	bne.n	800706c <_dtoa_r+0xaa4>
 8007060:	f7fe fef7 	bl	8005e52 <__multadd>
 8007064:	4681      	mov	r9, r0
 8007066:	4607      	mov	r7, r0
 8007068:	9507      	str	r5, [sp, #28]
 800706a:	e778      	b.n	8006f5e <_dtoa_r+0x996>
 800706c:	f7fe fef1 	bl	8005e52 <__multadd>
 8007070:	4639      	mov	r1, r7
 8007072:	4681      	mov	r9, r0
 8007074:	2300      	movs	r3, #0
 8007076:	220a      	movs	r2, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f7fe feea 	bl	8005e52 <__multadd>
 800707e:	4607      	mov	r7, r0
 8007080:	e7f2      	b.n	8007068 <_dtoa_r+0xaa0>
 8007082:	f04f 0900 	mov.w	r9, #0
 8007086:	4659      	mov	r1, fp
 8007088:	2201      	movs	r2, #1
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff f856 	bl	800613c <__lshift>
 8007090:	4631      	mov	r1, r6
 8007092:	4683      	mov	fp, r0
 8007094:	f7ff f8a6 	bl	80061e4 <__mcmp>
 8007098:	2800      	cmp	r0, #0
 800709a:	dcb8      	bgt.n	800700e <_dtoa_r+0xa46>
 800709c:	d102      	bne.n	80070a4 <_dtoa_r+0xadc>
 800709e:	f018 0f01 	tst.w	r8, #1
 80070a2:	d1b4      	bne.n	800700e <_dtoa_r+0xa46>
 80070a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070a8:	1e6a      	subs	r2, r5, #1
 80070aa:	2b30      	cmp	r3, #48	; 0x30
 80070ac:	f47f af0f 	bne.w	8006ece <_dtoa_r+0x906>
 80070b0:	4615      	mov	r5, r2
 80070b2:	e7f7      	b.n	80070a4 <_dtoa_r+0xadc>
 80070b4:	9b06      	ldr	r3, [sp, #24]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d105      	bne.n	80070c6 <_dtoa_r+0xafe>
 80070ba:	2331      	movs	r3, #49	; 0x31
 80070bc:	9a06      	ldr	r2, [sp, #24]
 80070be:	f10a 0a01 	add.w	sl, sl, #1
 80070c2:	7013      	strb	r3, [r2, #0]
 80070c4:	e703      	b.n	8006ece <_dtoa_r+0x906>
 80070c6:	4615      	mov	r5, r2
 80070c8:	e7a1      	b.n	800700e <_dtoa_r+0xa46>
 80070ca:	4b17      	ldr	r3, [pc, #92]	; (8007128 <_dtoa_r+0xb60>)
 80070cc:	f7ff bae1 	b.w	8006692 <_dtoa_r+0xca>
 80070d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f aabb 	bne.w	800664e <_dtoa_r+0x86>
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <_dtoa_r+0xb64>)
 80070da:	f7ff bada 	b.w	8006692 <_dtoa_r+0xca>
 80070de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f77f ae3f 	ble.w	8006d64 <_dtoa_r+0x79c>
 80070e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e8:	9308      	str	r3, [sp, #32]
 80070ea:	e653      	b.n	8006d94 <_dtoa_r+0x7cc>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dc03      	bgt.n	80070fa <_dtoa_r+0xb32>
 80070f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f73f aed5 	bgt.w	8006ea4 <_dtoa_r+0x8dc>
 80070fa:	9d06      	ldr	r5, [sp, #24]
 80070fc:	4631      	mov	r1, r6
 80070fe:	4658      	mov	r0, fp
 8007100:	f7ff f9d4 	bl	80064ac <quorem>
 8007104:	9b06      	ldr	r3, [sp, #24]
 8007106:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800710a:	f805 8b01 	strb.w	r8, [r5], #1
 800710e:	9a04      	ldr	r2, [sp, #16]
 8007110:	1aeb      	subs	r3, r5, r3
 8007112:	429a      	cmp	r2, r3
 8007114:	ddb5      	ble.n	8007082 <_dtoa_r+0xaba>
 8007116:	4659      	mov	r1, fp
 8007118:	2300      	movs	r3, #0
 800711a:	220a      	movs	r2, #10
 800711c:	4620      	mov	r0, r4
 800711e:	f7fe fe98 	bl	8005e52 <__multadd>
 8007122:	4683      	mov	fp, r0
 8007124:	e7ea      	b.n	80070fc <_dtoa_r+0xb34>
 8007126:	bf00      	nop
 8007128:	08009631 	.word	0x08009631
 800712c:	08009624 	.word	0x08009624

08007130 <malloc>:
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <malloc+0xc>)
 8007132:	4601      	mov	r1, r0
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	f7ff b947 	b.w	80063c8 <_malloc_r>
 800713a:	bf00      	nop
 800713c:	20000020 	.word	0x20000020

08007140 <__malloc_lock>:
 8007140:	4770      	bx	lr

08007142 <__malloc_unlock>:
 8007142:	4770      	bx	lr
 8007144:	0000      	movs	r0, r0
	...

08007148 <atan>:
 8007148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4bb6      	ldr	r3, [pc, #728]	; (8007428 <atan+0x2e0>)
 800714e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007152:	429e      	cmp	r6, r3
 8007154:	4604      	mov	r4, r0
 8007156:	460d      	mov	r5, r1
 8007158:	468b      	mov	fp, r1
 800715a:	dd17      	ble.n	800718c <atan+0x44>
 800715c:	4bb3      	ldr	r3, [pc, #716]	; (800742c <atan+0x2e4>)
 800715e:	429e      	cmp	r6, r3
 8007160:	dc01      	bgt.n	8007166 <atan+0x1e>
 8007162:	d109      	bne.n	8007178 <atan+0x30>
 8007164:	b140      	cbz	r0, 8007178 <atan+0x30>
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f8 fff5 	bl	800015c <__adddf3>
 8007172:	4604      	mov	r4, r0
 8007174:	460d      	mov	r5, r1
 8007176:	e005      	b.n	8007184 <atan+0x3c>
 8007178:	f1bb 0f00 	cmp.w	fp, #0
 800717c:	4cac      	ldr	r4, [pc, #688]	; (8007430 <atan+0x2e8>)
 800717e:	f340 8121 	ble.w	80073c4 <atan+0x27c>
 8007182:	4dac      	ldr	r5, [pc, #688]	; (8007434 <atan+0x2ec>)
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	4baa      	ldr	r3, [pc, #680]	; (8007438 <atan+0x2f0>)
 800718e:	429e      	cmp	r6, r3
 8007190:	dc11      	bgt.n	80071b6 <atan+0x6e>
 8007192:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007196:	429e      	cmp	r6, r3
 8007198:	dc0a      	bgt.n	80071b0 <atan+0x68>
 800719a:	a38b      	add	r3, pc, #556	; (adr r3, 80073c8 <atan+0x280>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f8 ffdc 	bl	800015c <__adddf3>
 80071a4:	2200      	movs	r2, #0
 80071a6:	4ba5      	ldr	r3, [pc, #660]	; (800743c <atan+0x2f4>)
 80071a8:	f7f9 fc1e 	bl	80009e8 <__aeabi_dcmpgt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1e9      	bne.n	8007184 <atan+0x3c>
 80071b0:	f04f 3aff 	mov.w	sl, #4294967295
 80071b4:	e027      	b.n	8007206 <atan+0xbe>
 80071b6:	f000 f987 	bl	80074c8 <fabs>
 80071ba:	4ba1      	ldr	r3, [pc, #644]	; (8007440 <atan+0x2f8>)
 80071bc:	4604      	mov	r4, r0
 80071be:	429e      	cmp	r6, r3
 80071c0:	460d      	mov	r5, r1
 80071c2:	f300 80b8 	bgt.w	8007336 <atan+0x1ee>
 80071c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80071ca:	429e      	cmp	r6, r3
 80071cc:	f300 809c 	bgt.w	8007308 <atan+0x1c0>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	f7f8 ffc2 	bl	800015c <__adddf3>
 80071d8:	2200      	movs	r2, #0
 80071da:	4b98      	ldr	r3, [pc, #608]	; (800743c <atan+0x2f4>)
 80071dc:	f7f8 ffbc 	bl	8000158 <__aeabi_dsub>
 80071e0:	2200      	movs	r2, #0
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f8 ffb5 	bl	800015c <__adddf3>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	f7f9 fa8f 	bl	800071c <__aeabi_ddiv>
 80071fe:	f04f 0a00 	mov.w	sl, #0
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	f7f9 f95b 	bl	80004c8 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4680      	mov	r8, r0
 8007218:	4689      	mov	r9, r1
 800721a:	f7f9 f955 	bl	80004c8 <__aeabi_dmul>
 800721e:	a36c      	add	r3, pc, #432	; (adr r3, 80073d0 <atan+0x288>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	4606      	mov	r6, r0
 8007226:	460f      	mov	r7, r1
 8007228:	f7f9 f94e 	bl	80004c8 <__aeabi_dmul>
 800722c:	a36a      	add	r3, pc, #424	; (adr r3, 80073d8 <atan+0x290>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f8 ff93 	bl	800015c <__adddf3>
 8007236:	4632      	mov	r2, r6
 8007238:	463b      	mov	r3, r7
 800723a:	f7f9 f945 	bl	80004c8 <__aeabi_dmul>
 800723e:	a368      	add	r3, pc, #416	; (adr r3, 80073e0 <atan+0x298>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f8 ff8a 	bl	800015c <__adddf3>
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	f7f9 f93c 	bl	80004c8 <__aeabi_dmul>
 8007250:	a365      	add	r3, pc, #404	; (adr r3, 80073e8 <atan+0x2a0>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f8 ff81 	bl	800015c <__adddf3>
 800725a:	4632      	mov	r2, r6
 800725c:	463b      	mov	r3, r7
 800725e:	f7f9 f933 	bl	80004c8 <__aeabi_dmul>
 8007262:	a363      	add	r3, pc, #396	; (adr r3, 80073f0 <atan+0x2a8>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f8 ff78 	bl	800015c <__adddf3>
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	f7f9 f92a 	bl	80004c8 <__aeabi_dmul>
 8007274:	a360      	add	r3, pc, #384	; (adr r3, 80073f8 <atan+0x2b0>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f8 ff6f 	bl	800015c <__adddf3>
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	f7f9 f921 	bl	80004c8 <__aeabi_dmul>
 8007286:	a35e      	add	r3, pc, #376	; (adr r3, 8007400 <atan+0x2b8>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 f918 	bl	80004c8 <__aeabi_dmul>
 8007298:	a35b      	add	r3, pc, #364	; (adr r3, 8007408 <atan+0x2c0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f8 ff5b 	bl	8000158 <__aeabi_dsub>
 80072a2:	4632      	mov	r2, r6
 80072a4:	463b      	mov	r3, r7
 80072a6:	f7f9 f90f 	bl	80004c8 <__aeabi_dmul>
 80072aa:	a359      	add	r3, pc, #356	; (adr r3, 8007410 <atan+0x2c8>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f8 ff52 	bl	8000158 <__aeabi_dsub>
 80072b4:	4632      	mov	r2, r6
 80072b6:	463b      	mov	r3, r7
 80072b8:	f7f9 f906 	bl	80004c8 <__aeabi_dmul>
 80072bc:	a356      	add	r3, pc, #344	; (adr r3, 8007418 <atan+0x2d0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f8 ff49 	bl	8000158 <__aeabi_dsub>
 80072c6:	4632      	mov	r2, r6
 80072c8:	463b      	mov	r3, r7
 80072ca:	f7f9 f8fd 	bl	80004c8 <__aeabi_dmul>
 80072ce:	a354      	add	r3, pc, #336	; (adr r3, 8007420 <atan+0x2d8>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f8 ff40 	bl	8000158 <__aeabi_dsub>
 80072d8:	4632      	mov	r2, r6
 80072da:	463b      	mov	r3, r7
 80072dc:	f7f9 f8f4 	bl	80004c8 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4640      	mov	r0, r8
 80072e6:	4649      	mov	r1, r9
 80072e8:	f7f8 ff38 	bl	800015c <__adddf3>
 80072ec:	4622      	mov	r2, r4
 80072ee:	462b      	mov	r3, r5
 80072f0:	f7f9 f8ea 	bl	80004c8 <__aeabi_dmul>
 80072f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	d144      	bne.n	8007388 <atan+0x240>
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	f7f8 ff29 	bl	8000158 <__aeabi_dsub>
 8007306:	e734      	b.n	8007172 <atan+0x2a>
 8007308:	2200      	movs	r2, #0
 800730a:	4b4c      	ldr	r3, [pc, #304]	; (800743c <atan+0x2f4>)
 800730c:	f7f8 ff24 	bl	8000158 <__aeabi_dsub>
 8007310:	2200      	movs	r2, #0
 8007312:	4606      	mov	r6, r0
 8007314:	460f      	mov	r7, r1
 8007316:	4b49      	ldr	r3, [pc, #292]	; (800743c <atan+0x2f4>)
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ff1e 	bl	800015c <__adddf3>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4630      	mov	r0, r6
 8007326:	4639      	mov	r1, r7
 8007328:	f7f9 f9f8 	bl	800071c <__aeabi_ddiv>
 800732c:	f04f 0a01 	mov.w	sl, #1
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	e767      	b.n	8007206 <atan+0xbe>
 8007336:	4b43      	ldr	r3, [pc, #268]	; (8007444 <atan+0x2fc>)
 8007338:	429e      	cmp	r6, r3
 800733a:	dc1a      	bgt.n	8007372 <atan+0x22a>
 800733c:	2200      	movs	r2, #0
 800733e:	4b42      	ldr	r3, [pc, #264]	; (8007448 <atan+0x300>)
 8007340:	f7f8 ff0a 	bl	8000158 <__aeabi_dsub>
 8007344:	2200      	movs	r2, #0
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	4b3f      	ldr	r3, [pc, #252]	; (8007448 <atan+0x300>)
 800734c:	4620      	mov	r0, r4
 800734e:	4629      	mov	r1, r5
 8007350:	f7f9 f8ba 	bl	80004c8 <__aeabi_dmul>
 8007354:	2200      	movs	r2, #0
 8007356:	4b39      	ldr	r3, [pc, #228]	; (800743c <atan+0x2f4>)
 8007358:	f7f8 ff00 	bl	800015c <__adddf3>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 f9da 	bl	800071c <__aeabi_ddiv>
 8007368:	f04f 0a02 	mov.w	sl, #2
 800736c:	4604      	mov	r4, r0
 800736e:	460d      	mov	r5, r1
 8007370:	e749      	b.n	8007206 <atan+0xbe>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	2000      	movs	r0, #0
 8007378:	4934      	ldr	r1, [pc, #208]	; (800744c <atan+0x304>)
 800737a:	f7f9 f9cf 	bl	800071c <__aeabi_ddiv>
 800737e:	f04f 0a03 	mov.w	sl, #3
 8007382:	4604      	mov	r4, r0
 8007384:	460d      	mov	r5, r1
 8007386:	e73e      	b.n	8007206 <atan+0xbe>
 8007388:	4b31      	ldr	r3, [pc, #196]	; (8007450 <atan+0x308>)
 800738a:	4e32      	ldr	r6, [pc, #200]	; (8007454 <atan+0x30c>)
 800738c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007390:	4456      	add	r6, sl
 8007392:	449a      	add	sl, r3
 8007394:	e9da 2300 	ldrd	r2, r3, [sl]
 8007398:	f7f8 fede 	bl	8000158 <__aeabi_dsub>
 800739c:	4622      	mov	r2, r4
 800739e:	462b      	mov	r3, r5
 80073a0:	f7f8 feda 	bl	8000158 <__aeabi_dsub>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80073ac:	f7f8 fed4 	bl	8000158 <__aeabi_dsub>
 80073b0:	f1bb 0f00 	cmp.w	fp, #0
 80073b4:	4604      	mov	r4, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	f6bf aee4 	bge.w	8007184 <atan+0x3c>
 80073bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073c0:	461d      	mov	r5, r3
 80073c2:	e6df      	b.n	8007184 <atan+0x3c>
 80073c4:	4d24      	ldr	r5, [pc, #144]	; (8007458 <atan+0x310>)
 80073c6:	e6dd      	b.n	8007184 <atan+0x3c>
 80073c8:	8800759c 	.word	0x8800759c
 80073cc:	7e37e43c 	.word	0x7e37e43c
 80073d0:	e322da11 	.word	0xe322da11
 80073d4:	3f90ad3a 	.word	0x3f90ad3a
 80073d8:	24760deb 	.word	0x24760deb
 80073dc:	3fa97b4b 	.word	0x3fa97b4b
 80073e0:	a0d03d51 	.word	0xa0d03d51
 80073e4:	3fb10d66 	.word	0x3fb10d66
 80073e8:	c54c206e 	.word	0xc54c206e
 80073ec:	3fb745cd 	.word	0x3fb745cd
 80073f0:	920083ff 	.word	0x920083ff
 80073f4:	3fc24924 	.word	0x3fc24924
 80073f8:	5555550d 	.word	0x5555550d
 80073fc:	3fd55555 	.word	0x3fd55555
 8007400:	2c6a6c2f 	.word	0x2c6a6c2f
 8007404:	bfa2b444 	.word	0xbfa2b444
 8007408:	52defd9a 	.word	0x52defd9a
 800740c:	3fadde2d 	.word	0x3fadde2d
 8007410:	af749a6d 	.word	0xaf749a6d
 8007414:	3fb3b0f2 	.word	0x3fb3b0f2
 8007418:	fe231671 	.word	0xfe231671
 800741c:	3fbc71c6 	.word	0x3fbc71c6
 8007420:	9998ebc4 	.word	0x9998ebc4
 8007424:	3fc99999 	.word	0x3fc99999
 8007428:	440fffff 	.word	0x440fffff
 800742c:	7ff00000 	.word	0x7ff00000
 8007430:	54442d18 	.word	0x54442d18
 8007434:	3ff921fb 	.word	0x3ff921fb
 8007438:	3fdbffff 	.word	0x3fdbffff
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	3ff2ffff 	.word	0x3ff2ffff
 8007444:	40037fff 	.word	0x40037fff
 8007448:	3ff80000 	.word	0x3ff80000
 800744c:	bff00000 	.word	0xbff00000
 8007450:	08009658 	.word	0x08009658
 8007454:	08009638 	.word	0x08009638
 8007458:	bff921fb 	.word	0xbff921fb

0800745c <cos>:
 800745c:	b530      	push	{r4, r5, lr}
 800745e:	4a18      	ldr	r2, [pc, #96]	; (80074c0 <cos+0x64>)
 8007460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007464:	4293      	cmp	r3, r2
 8007466:	b087      	sub	sp, #28
 8007468:	dc04      	bgt.n	8007474 <cos+0x18>
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	f001 f9c3 	bl	80087f8 <__kernel_cos>
 8007472:	e006      	b.n	8007482 <cos+0x26>
 8007474:	4a13      	ldr	r2, [pc, #76]	; (80074c4 <cos+0x68>)
 8007476:	4293      	cmp	r3, r2
 8007478:	dd05      	ble.n	8007486 <cos+0x2a>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	f7f8 fe6b 	bl	8000158 <__aeabi_dsub>
 8007482:	b007      	add	sp, #28
 8007484:	bd30      	pop	{r4, r5, pc}
 8007486:	aa02      	add	r2, sp, #8
 8007488:	f000 ff1a 	bl	80082c0 <__ieee754_rem_pio2>
 800748c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007490:	f000 0403 	and.w	r4, r0, #3
 8007494:	2c01      	cmp	r4, #1
 8007496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749a:	d008      	beq.n	80074ae <cos+0x52>
 800749c:	2c02      	cmp	r4, #2
 800749e:	d00c      	beq.n	80074ba <cos+0x5e>
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	d0e4      	beq.n	800746e <cos+0x12>
 80074a4:	2401      	movs	r4, #1
 80074a6:	9400      	str	r4, [sp, #0]
 80074a8:	f001 fdae 	bl	8009008 <__kernel_sin>
 80074ac:	e7e9      	b.n	8007482 <cos+0x26>
 80074ae:	9400      	str	r4, [sp, #0]
 80074b0:	f001 fdaa 	bl	8009008 <__kernel_sin>
 80074b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80074b8:	e7e3      	b.n	8007482 <cos+0x26>
 80074ba:	f001 f99d 	bl	80087f8 <__kernel_cos>
 80074be:	e7f9      	b.n	80074b4 <cos+0x58>
 80074c0:	3fe921fb 	.word	0x3fe921fb
 80074c4:	7fefffff 	.word	0x7fefffff

080074c8 <fabs>:
 80074c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074cc:	4619      	mov	r1, r3
 80074ce:	4770      	bx	lr

080074d0 <sin>:
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	4a1a      	ldr	r2, [pc, #104]	; (800753c <sin+0x6c>)
 80074d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074d8:	4293      	cmp	r3, r2
 80074da:	b087      	sub	sp, #28
 80074dc:	dc06      	bgt.n	80074ec <sin+0x1c>
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	f001 fd8f 	bl	8009008 <__kernel_sin>
 80074ea:	e006      	b.n	80074fa <sin+0x2a>
 80074ec:	4a14      	ldr	r2, [pc, #80]	; (8007540 <sin+0x70>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	dd05      	ble.n	80074fe <sin+0x2e>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	f7f8 fe2f 	bl	8000158 <__aeabi_dsub>
 80074fa:	b007      	add	sp, #28
 80074fc:	bd30      	pop	{r4, r5, pc}
 80074fe:	aa02      	add	r2, sp, #8
 8007500:	f000 fede 	bl	80082c0 <__ieee754_rem_pio2>
 8007504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007508:	f000 0403 	and.w	r4, r0, #3
 800750c:	2c01      	cmp	r4, #1
 800750e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007512:	d005      	beq.n	8007520 <sin+0x50>
 8007514:	2c02      	cmp	r4, #2
 8007516:	d006      	beq.n	8007526 <sin+0x56>
 8007518:	b964      	cbnz	r4, 8007534 <sin+0x64>
 800751a:	2401      	movs	r4, #1
 800751c:	9400      	str	r4, [sp, #0]
 800751e:	e7e2      	b.n	80074e6 <sin+0x16>
 8007520:	f001 f96a 	bl	80087f8 <__kernel_cos>
 8007524:	e7e9      	b.n	80074fa <sin+0x2a>
 8007526:	2401      	movs	r4, #1
 8007528:	9400      	str	r4, [sp, #0]
 800752a:	f001 fd6d 	bl	8009008 <__kernel_sin>
 800752e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007532:	e7e2      	b.n	80074fa <sin+0x2a>
 8007534:	f001 f960 	bl	80087f8 <__kernel_cos>
 8007538:	e7f9      	b.n	800752e <sin+0x5e>
 800753a:	bf00      	nop
 800753c:	3fe921fb 	.word	0x3fe921fb
 8007540:	7fefffff 	.word	0x7fefffff

08007544 <pow>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	b08f      	sub	sp, #60	; 0x3c
 800754a:	461d      	mov	r5, r3
 800754c:	4680      	mov	r8, r0
 800754e:	4689      	mov	r9, r1
 8007550:	4614      	mov	r4, r2
 8007552:	f000 f9a9 	bl	80078a8 <__ieee754_pow>
 8007556:	4fa1      	ldr	r7, [pc, #644]	; (80077dc <pow+0x298>)
 8007558:	e9cd 0100 	strd	r0, r1, [sp]
 800755c:	f997 3000 	ldrsb.w	r3, [r7]
 8007560:	463e      	mov	r6, r7
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	3301      	adds	r3, #1
 8007566:	d05f      	beq.n	8007628 <pow+0xe4>
 8007568:	4622      	mov	r2, r4
 800756a:	462b      	mov	r3, r5
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f9 fa44 	bl	80009fc <__aeabi_dcmpun>
 8007574:	4682      	mov	sl, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d156      	bne.n	8007628 <pow+0xe4>
 800757a:	4642      	mov	r2, r8
 800757c:	464b      	mov	r3, r9
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f9 fa3b 	bl	80009fc <__aeabi_dcmpun>
 8007586:	9003      	str	r0, [sp, #12]
 8007588:	b1e8      	cbz	r0, 80075c6 <pow+0x82>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 fa01 	bl	8000998 <__aeabi_dcmpeq>
 8007596:	2800      	cmp	r0, #0
 8007598:	d046      	beq.n	8007628 <pow+0xe4>
 800759a:	2301      	movs	r3, #1
 800759c:	2200      	movs	r2, #0
 800759e:	9304      	str	r3, [sp, #16]
 80075a0:	4b8f      	ldr	r3, [pc, #572]	; (80077e0 <pow+0x29c>)
 80075a2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	4b8e      	ldr	r3, [pc, #568]	; (80077e4 <pow+0x2a0>)
 80075aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80075ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80075b2:	9b02      	ldr	r3, [sp, #8]
 80075b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d031      	beq.n	8007620 <pow+0xdc>
 80075bc:	a804      	add	r0, sp, #16
 80075be:	f001 fe63 	bl	8009288 <matherr>
 80075c2:	bb38      	cbnz	r0, 8007614 <pow+0xd0>
 80075c4:	e058      	b.n	8007678 <pow+0x134>
 80075c6:	f04f 0a00 	mov.w	sl, #0
 80075ca:	f04f 0b00 	mov.w	fp, #0
 80075ce:	4652      	mov	r2, sl
 80075d0:	465b      	mov	r3, fp
 80075d2:	4640      	mov	r0, r8
 80075d4:	4649      	mov	r1, r9
 80075d6:	f7f9 f9df 	bl	8000998 <__aeabi_dcmpeq>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d051      	beq.n	8007682 <pow+0x13e>
 80075de:	4652      	mov	r2, sl
 80075e0:	465b      	mov	r3, fp
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7f9 f9d7 	bl	8000998 <__aeabi_dcmpeq>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b308      	cbz	r0, 8007632 <pow+0xee>
 80075ee:	2301      	movs	r3, #1
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <pow+0x29c>)
 80075f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007600:	930c      	str	r3, [sp, #48]	; 0x30
 8007602:	9b02      	ldr	r3, [sp, #8]
 8007604:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0d7      	beq.n	80075bc <pow+0x78>
 800760c:	2200      	movs	r2, #0
 800760e:	4b75      	ldr	r3, [pc, #468]	; (80077e4 <pow+0x2a0>)
 8007610:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007616:	b11b      	cbz	r3, 8007620 <pow+0xdc>
 8007618:	f7fe f9f6 	bl	8005a08 <__errno>
 800761c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800761e:	6003      	str	r3, [r0, #0]
 8007620:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8007624:	e9cd 3400 	strd	r3, r4, [sp]
 8007628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800762c:	b00f      	add	sp, #60	; 0x3c
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f001 fd9d 	bl	8009174 <finite>
 800763a:	2800      	cmp	r0, #0
 800763c:	d0f4      	beq.n	8007628 <pow+0xe4>
 800763e:	4652      	mov	r2, sl
 8007640:	465b      	mov	r3, fp
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f9 f9b1 	bl	80009ac <__aeabi_dcmplt>
 800764a:	2800      	cmp	r0, #0
 800764c:	d0ec      	beq.n	8007628 <pow+0xe4>
 800764e:	2301      	movs	r3, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	4b63      	ldr	r3, [pc, #396]	; (80077e0 <pow+0x29c>)
 8007654:	960c      	str	r6, [sp, #48]	; 0x30
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	f997 3000 	ldrsb.w	r3, [r7]
 800765c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007660:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007664:	b913      	cbnz	r3, 800766c <pow+0x128>
 8007666:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800766a:	e7a7      	b.n	80075bc <pow+0x78>
 800766c:	2000      	movs	r0, #0
 800766e:	495e      	ldr	r1, [pc, #376]	; (80077e8 <pow+0x2a4>)
 8007670:	2b02      	cmp	r3, #2
 8007672:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007676:	d1a1      	bne.n	80075bc <pow+0x78>
 8007678:	f7fe f9c6 	bl	8005a08 <__errno>
 800767c:	2321      	movs	r3, #33	; 0x21
 800767e:	6003      	str	r3, [r0, #0]
 8007680:	e7c8      	b.n	8007614 <pow+0xd0>
 8007682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007686:	f001 fd75 	bl	8009174 <finite>
 800768a:	9002      	str	r0, [sp, #8]
 800768c:	2800      	cmp	r0, #0
 800768e:	d177      	bne.n	8007780 <pow+0x23c>
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f001 fd6e 	bl	8009174 <finite>
 8007698:	2800      	cmp	r0, #0
 800769a:	d071      	beq.n	8007780 <pow+0x23c>
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f001 fd68 	bl	8009174 <finite>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d06b      	beq.n	8007780 <pow+0x23c>
 80076a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7f9 f9a4 	bl	80009fc <__aeabi_dcmpun>
 80076b4:	f997 7000 	ldrsb.w	r7, [r7]
 80076b8:	4b49      	ldr	r3, [pc, #292]	; (80077e0 <pow+0x29c>)
 80076ba:	b1a0      	cbz	r0, 80076e6 <pow+0x1a2>
 80076bc:	2201      	movs	r2, #1
 80076be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80076c8:	930c      	str	r3, [sp, #48]	; 0x30
 80076ca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	d0c9      	beq.n	8007666 <pow+0x122>
 80076d2:	4652      	mov	r2, sl
 80076d4:	465b      	mov	r3, fp
 80076d6:	4650      	mov	r0, sl
 80076d8:	4659      	mov	r1, fp
 80076da:	f7f9 f81f 	bl	800071c <__aeabi_ddiv>
 80076de:	2f02      	cmp	r7, #2
 80076e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076e4:	e7c7      	b.n	8007676 <pow+0x132>
 80076e6:	2203      	movs	r2, #3
 80076e8:	900c      	str	r0, [sp, #48]	; 0x30
 80076ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	2200      	movs	r2, #0
 80076f4:	4b3d      	ldr	r3, [pc, #244]	; (80077ec <pow+0x2a8>)
 80076f6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80076fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80076fe:	f7f8 fee3 	bl	80004c8 <__aeabi_dmul>
 8007702:	4604      	mov	r4, r0
 8007704:	460d      	mov	r5, r1
 8007706:	bb17      	cbnz	r7, 800774e <pow+0x20a>
 8007708:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800770c:	4b38      	ldr	r3, [pc, #224]	; (80077f0 <pow+0x2ac>)
 800770e:	4640      	mov	r0, r8
 8007710:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007714:	4649      	mov	r1, r9
 8007716:	4652      	mov	r2, sl
 8007718:	465b      	mov	r3, fp
 800771a:	f7f9 f947 	bl	80009ac <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d054      	beq.n	80077cc <pow+0x288>
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f001 fdb7 	bl	8009298 <rint>
 800772a:	4622      	mov	r2, r4
 800772c:	462b      	mov	r3, r5
 800772e:	f7f9 f933 	bl	8000998 <__aeabi_dcmpeq>
 8007732:	b920      	cbnz	r0, 800773e <pow+0x1fa>
 8007734:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007738:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <pow+0x2b0>)
 800773a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800773e:	f996 3000 	ldrsb.w	r3, [r6]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d142      	bne.n	80077cc <pow+0x288>
 8007746:	f7fe f95f 	bl	8005a08 <__errno>
 800774a:	2322      	movs	r3, #34	; 0x22
 800774c:	e797      	b.n	800767e <pow+0x13a>
 800774e:	2200      	movs	r2, #0
 8007750:	4b29      	ldr	r3, [pc, #164]	; (80077f8 <pow+0x2b4>)
 8007752:	4640      	mov	r0, r8
 8007754:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007758:	4649      	mov	r1, r9
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	f7f9 f925 	bl	80009ac <__aeabi_dcmplt>
 8007762:	2800      	cmp	r0, #0
 8007764:	d0eb      	beq.n	800773e <pow+0x1fa>
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f001 fd95 	bl	8009298 <rint>
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	f7f9 f911 	bl	8000998 <__aeabi_dcmpeq>
 8007776:	2800      	cmp	r0, #0
 8007778:	d1e1      	bne.n	800773e <pow+0x1fa>
 800777a:	2200      	movs	r2, #0
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <pow+0x2a4>)
 800777e:	e7dc      	b.n	800773a <pow+0x1f6>
 8007780:	2200      	movs	r2, #0
 8007782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007786:	2300      	movs	r3, #0
 8007788:	f7f9 f906 	bl	8000998 <__aeabi_dcmpeq>
 800778c:	2800      	cmp	r0, #0
 800778e:	f43f af4b 	beq.w	8007628 <pow+0xe4>
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f001 fced 	bl	8009174 <finite>
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f af44 	beq.w	8007628 <pow+0xe4>
 80077a0:	4620      	mov	r0, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	f001 fce6 	bl	8009174 <finite>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f43f af3d 	beq.w	8007628 <pow+0xe4>
 80077ae:	2304      	movs	r3, #4
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <pow+0x29c>)
 80077b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	2400      	movs	r4, #0
 80077be:	930c      	str	r3, [sp, #48]	; 0x30
 80077c0:	2300      	movs	r3, #0
 80077c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077c6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80077ca:	e7b8      	b.n	800773e <pow+0x1fa>
 80077cc:	a804      	add	r0, sp, #16
 80077ce:	f001 fd5b 	bl	8009288 <matherr>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f47f af1e 	bne.w	8007614 <pow+0xd0>
 80077d8:	e7b5      	b.n	8007746 <pow+0x202>
 80077da:	bf00      	nop
 80077dc:	20000084 	.word	0x20000084
 80077e0:	08009678 	.word	0x08009678
 80077e4:	3ff00000 	.word	0x3ff00000
 80077e8:	fff00000 	.word	0xfff00000
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	47efffff 	.word	0x47efffff
 80077f4:	c7efffff 	.word	0xc7efffff
 80077f8:	7ff00000 	.word	0x7ff00000

080077fc <sqrt>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	b08b      	sub	sp, #44	; 0x2c
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	f000 ff4b 	bl	80086a0 <__ieee754_sqrt>
 800780a:	4b24      	ldr	r3, [pc, #144]	; (800789c <sqrt+0xa0>)
 800780c:	4680      	mov	r8, r0
 800780e:	f993 a000 	ldrsb.w	sl, [r3]
 8007812:	4689      	mov	r9, r1
 8007814:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007818:	d02b      	beq.n	8007872 <sqrt+0x76>
 800781a:	4622      	mov	r2, r4
 800781c:	462b      	mov	r3, r5
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f8eb 	bl	80009fc <__aeabi_dcmpun>
 8007826:	4683      	mov	fp, r0
 8007828:	bb18      	cbnz	r0, 8007872 <sqrt+0x76>
 800782a:	2600      	movs	r6, #0
 800782c:	2700      	movs	r7, #0
 800782e:	4632      	mov	r2, r6
 8007830:	463b      	mov	r3, r7
 8007832:	4620      	mov	r0, r4
 8007834:	4629      	mov	r1, r5
 8007836:	f7f9 f8b9 	bl	80009ac <__aeabi_dcmplt>
 800783a:	b1d0      	cbz	r0, 8007872 <sqrt+0x76>
 800783c:	2301      	movs	r3, #1
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <sqrt+0xa4>)
 8007842:	f8cd b020 	str.w	fp, [sp, #32]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800784c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	d112      	bne.n	800787c <sqrt+0x80>
 8007856:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800785a:	4668      	mov	r0, sp
 800785c:	f001 fd14 	bl	8009288 <matherr>
 8007860:	b1b8      	cbz	r0, 8007892 <sqrt+0x96>
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	b11b      	cbz	r3, 800786e <sqrt+0x72>
 8007866:	f7fe f8cf 	bl	8005a08 <__errno>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	b00b      	add	sp, #44	; 0x2c
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f8 ff4a 	bl	800071c <__aeabi_ddiv>
 8007888:	f1ba 0f02 	cmp.w	sl, #2
 800788c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007890:	d1e3      	bne.n	800785a <sqrt+0x5e>
 8007892:	f7fe f8b9 	bl	8005a08 <__errno>
 8007896:	2321      	movs	r3, #33	; 0x21
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	e7e2      	b.n	8007862 <sqrt+0x66>
 800789c:	20000084 	.word	0x20000084
 80078a0:	0800967c 	.word	0x0800967c
 80078a4:	00000000 	.word	0x00000000

080078a8 <__ieee754_pow>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	b091      	sub	sp, #68	; 0x44
 80078ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078b2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80078b6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80078ba:	ea55 0302 	orrs.w	r3, r5, r2
 80078be:	4607      	mov	r7, r0
 80078c0:	4688      	mov	r8, r1
 80078c2:	f000 84b7 	beq.w	8008234 <__ieee754_pow+0x98c>
 80078c6:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <__ieee754_pow+0x220>)
 80078c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80078cc:	429c      	cmp	r4, r3
 80078ce:	4689      	mov	r9, r1
 80078d0:	4682      	mov	sl, r0
 80078d2:	dc09      	bgt.n	80078e8 <__ieee754_pow+0x40>
 80078d4:	d103      	bne.n	80078de <__ieee754_pow+0x36>
 80078d6:	b938      	cbnz	r0, 80078e8 <__ieee754_pow+0x40>
 80078d8:	42a5      	cmp	r5, r4
 80078da:	dc0d      	bgt.n	80078f8 <__ieee754_pow+0x50>
 80078dc:	e001      	b.n	80078e2 <__ieee754_pow+0x3a>
 80078de:	429d      	cmp	r5, r3
 80078e0:	dc02      	bgt.n	80078e8 <__ieee754_pow+0x40>
 80078e2:	429d      	cmp	r5, r3
 80078e4:	d10e      	bne.n	8007904 <__ieee754_pow+0x5c>
 80078e6:	b16a      	cbz	r2, 8007904 <__ieee754_pow+0x5c>
 80078e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80078ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80078f0:	ea54 030a 	orrs.w	r3, r4, sl
 80078f4:	f000 849e 	beq.w	8008234 <__ieee754_pow+0x98c>
 80078f8:	4874      	ldr	r0, [pc, #464]	; (8007acc <__ieee754_pow+0x224>)
 80078fa:	b011      	add	sp, #68	; 0x44
 80078fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	f001 bcc4 	b.w	800928c <nan>
 8007904:	f1b9 0f00 	cmp.w	r9, #0
 8007908:	da53      	bge.n	80079b2 <__ieee754_pow+0x10a>
 800790a:	4b71      	ldr	r3, [pc, #452]	; (8007ad0 <__ieee754_pow+0x228>)
 800790c:	429d      	cmp	r5, r3
 800790e:	dc4e      	bgt.n	80079ae <__ieee754_pow+0x106>
 8007910:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007914:	429d      	cmp	r5, r3
 8007916:	dd4c      	ble.n	80079b2 <__ieee754_pow+0x10a>
 8007918:	152b      	asrs	r3, r5, #20
 800791a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800791e:	2b14      	cmp	r3, #20
 8007920:	dd28      	ble.n	8007974 <__ieee754_pow+0xcc>
 8007922:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007926:	fa22 f103 	lsr.w	r1, r2, r3
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	4293      	cmp	r3, r2
 8007930:	d13f      	bne.n	80079b2 <__ieee754_pow+0x10a>
 8007932:	f001 0101 	and.w	r1, r1, #1
 8007936:	f1c1 0302 	rsb	r3, r1, #2
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d15c      	bne.n	80079fa <__ieee754_pow+0x152>
 8007940:	4b61      	ldr	r3, [pc, #388]	; (8007ac8 <__ieee754_pow+0x220>)
 8007942:	429d      	cmp	r5, r3
 8007944:	d126      	bne.n	8007994 <__ieee754_pow+0xec>
 8007946:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800794a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800794e:	ea53 030a 	orrs.w	r3, r3, sl
 8007952:	f000 846f 	beq.w	8008234 <__ieee754_pow+0x98c>
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <__ieee754_pow+0x22c>)
 8007958:	429c      	cmp	r4, r3
 800795a:	dd2c      	ble.n	80079b6 <__ieee754_pow+0x10e>
 800795c:	2e00      	cmp	r6, #0
 800795e:	f280 846f 	bge.w	8008240 <__ieee754_pow+0x998>
 8007962:	f04f 0b00 	mov.w	fp, #0
 8007966:	f04f 0c00 	mov.w	ip, #0
 800796a:	4658      	mov	r0, fp
 800796c:	4661      	mov	r1, ip
 800796e:	b011      	add	sp, #68	; 0x44
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	2a00      	cmp	r2, #0
 8007976:	d13e      	bne.n	80079f6 <__ieee754_pow+0x14e>
 8007978:	f1c3 0314 	rsb	r3, r3, #20
 800797c:	fa45 f103 	asr.w	r1, r5, r3
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	42ab      	cmp	r3, r5
 8007986:	f040 8463 	bne.w	8008250 <__ieee754_pow+0x9a8>
 800798a:	f001 0101 	and.w	r1, r1, #1
 800798e:	f1c1 0302 	rsb	r3, r1, #2
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4b50      	ldr	r3, [pc, #320]	; (8007ad8 <__ieee754_pow+0x230>)
 8007996:	429d      	cmp	r5, r3
 8007998:	d114      	bne.n	80079c4 <__ieee754_pow+0x11c>
 800799a:	2e00      	cmp	r6, #0
 800799c:	f280 8454 	bge.w	8008248 <__ieee754_pow+0x9a0>
 80079a0:	463a      	mov	r2, r7
 80079a2:	4643      	mov	r3, r8
 80079a4:	2000      	movs	r0, #0
 80079a6:	494c      	ldr	r1, [pc, #304]	; (8007ad8 <__ieee754_pow+0x230>)
 80079a8:	f7f8 feb8 	bl	800071c <__aeabi_ddiv>
 80079ac:	e013      	b.n	80079d6 <__ieee754_pow+0x12e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e7c3      	b.n	800793a <__ieee754_pow+0x92>
 80079b2:	2300      	movs	r3, #0
 80079b4:	e7c1      	b.n	800793a <__ieee754_pow+0x92>
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	dad3      	bge.n	8007962 <__ieee754_pow+0xba>
 80079ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80079be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80079c2:	e7d2      	b.n	800796a <__ieee754_pow+0xc2>
 80079c4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80079c8:	d108      	bne.n	80079dc <__ieee754_pow+0x134>
 80079ca:	463a      	mov	r2, r7
 80079cc:	4643      	mov	r3, r8
 80079ce:	4638      	mov	r0, r7
 80079d0:	4641      	mov	r1, r8
 80079d2:	f7f8 fd79 	bl	80004c8 <__aeabi_dmul>
 80079d6:	4683      	mov	fp, r0
 80079d8:	468c      	mov	ip, r1
 80079da:	e7c6      	b.n	800796a <__ieee754_pow+0xc2>
 80079dc:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <__ieee754_pow+0x234>)
 80079de:	429e      	cmp	r6, r3
 80079e0:	d10b      	bne.n	80079fa <__ieee754_pow+0x152>
 80079e2:	f1b9 0f00 	cmp.w	r9, #0
 80079e6:	db08      	blt.n	80079fa <__ieee754_pow+0x152>
 80079e8:	4638      	mov	r0, r7
 80079ea:	4641      	mov	r1, r8
 80079ec:	b011      	add	sp, #68	; 0x44
 80079ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f2:	f000 be55 	b.w	80086a0 <__ieee754_sqrt>
 80079f6:	2300      	movs	r3, #0
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4638      	mov	r0, r7
 80079fc:	4641      	mov	r1, r8
 80079fe:	f7ff fd63 	bl	80074c8 <fabs>
 8007a02:	4683      	mov	fp, r0
 8007a04:	468c      	mov	ip, r1
 8007a06:	f1ba 0f00 	cmp.w	sl, #0
 8007a0a:	d12b      	bne.n	8007a64 <__ieee754_pow+0x1bc>
 8007a0c:	b124      	cbz	r4, 8007a18 <__ieee754_pow+0x170>
 8007a0e:	4b32      	ldr	r3, [pc, #200]	; (8007ad8 <__ieee754_pow+0x230>)
 8007a10:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d125      	bne.n	8007a64 <__ieee754_pow+0x1bc>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	da07      	bge.n	8007a2c <__ieee754_pow+0x184>
 8007a1c:	465a      	mov	r2, fp
 8007a1e:	4663      	mov	r3, ip
 8007a20:	2000      	movs	r0, #0
 8007a22:	492d      	ldr	r1, [pc, #180]	; (8007ad8 <__ieee754_pow+0x230>)
 8007a24:	f7f8 fe7a 	bl	800071c <__aeabi_ddiv>
 8007a28:	4683      	mov	fp, r0
 8007a2a:	468c      	mov	ip, r1
 8007a2c:	f1b9 0f00 	cmp.w	r9, #0
 8007a30:	da9b      	bge.n	800796a <__ieee754_pow+0xc2>
 8007a32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a3c:	4323      	orrs	r3, r4
 8007a3e:	d108      	bne.n	8007a52 <__ieee754_pow+0x1aa>
 8007a40:	465a      	mov	r2, fp
 8007a42:	4663      	mov	r3, ip
 8007a44:	4658      	mov	r0, fp
 8007a46:	4661      	mov	r1, ip
 8007a48:	f7f8 fb86 	bl	8000158 <__aeabi_dsub>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	e7aa      	b.n	80079a8 <__ieee754_pow+0x100>
 8007a52:	9b00      	ldr	r3, [sp, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d188      	bne.n	800796a <__ieee754_pow+0xc2>
 8007a58:	4658      	mov	r0, fp
 8007a5a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007a5e:	4683      	mov	fp, r0
 8007a60:	469c      	mov	ip, r3
 8007a62:	e782      	b.n	800796a <__ieee754_pow+0xc2>
 8007a64:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007a68:	f109 33ff 	add.w	r3, r9, #4294967295
 8007a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	d104      	bne.n	8007a80 <__ieee754_pow+0x1d8>
 8007a76:	463a      	mov	r2, r7
 8007a78:	4643      	mov	r3, r8
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	e7e3      	b.n	8007a48 <__ieee754_pow+0x1a0>
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <__ieee754_pow+0x238>)
 8007a82:	429d      	cmp	r5, r3
 8007a84:	f340 80fe 	ble.w	8007c84 <__ieee754_pow+0x3dc>
 8007a88:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	dd0b      	ble.n	8007aa8 <__ieee754_pow+0x200>
 8007a90:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <__ieee754_pow+0x22c>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	dc0e      	bgt.n	8007ab4 <__ieee754_pow+0x20c>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	f6bf af63 	bge.w	8007962 <__ieee754_pow+0xba>
 8007a9c:	a308      	add	r3, pc, #32	; (adr r3, 8007ac0 <__ieee754_pow+0x218>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	e794      	b.n	80079d2 <__ieee754_pow+0x12a>
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <__ieee754_pow+0x23c>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	ddf3      	ble.n	8007a96 <__ieee754_pow+0x1ee>
 8007aae:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <__ieee754_pow+0x230>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	dd19      	ble.n	8007ae8 <__ieee754_pow+0x240>
 8007ab4:	2e00      	cmp	r6, #0
 8007ab6:	dcf1      	bgt.n	8007a9c <__ieee754_pow+0x1f4>
 8007ab8:	e753      	b.n	8007962 <__ieee754_pow+0xba>
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	7e37e43c 	.word	0x7e37e43c
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	08009632 	.word	0x08009632
 8007ad0:	433fffff 	.word	0x433fffff
 8007ad4:	3fefffff 	.word	0x3fefffff
 8007ad8:	3ff00000 	.word	0x3ff00000
 8007adc:	3fe00000 	.word	0x3fe00000
 8007ae0:	41e00000 	.word	0x41e00000
 8007ae4:	3feffffe 	.word	0x3feffffe
 8007ae8:	4661      	mov	r1, ip
 8007aea:	2200      	movs	r2, #0
 8007aec:	4b60      	ldr	r3, [pc, #384]	; (8007c70 <__ieee754_pow+0x3c8>)
 8007aee:	4658      	mov	r0, fp
 8007af0:	f7f8 fb32 	bl	8000158 <__aeabi_dsub>
 8007af4:	a354      	add	r3, pc, #336	; (adr r3, 8007c48 <__ieee754_pow+0x3a0>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	4604      	mov	r4, r0
 8007afc:	460d      	mov	r5, r1
 8007afe:	f7f8 fce3 	bl	80004c8 <__aeabi_dmul>
 8007b02:	a353      	add	r3, pc, #332	; (adr r3, 8007c50 <__ieee754_pow+0x3a8>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fcda 	bl	80004c8 <__aeabi_dmul>
 8007b14:	2200      	movs	r2, #0
 8007b16:	4682      	mov	sl, r0
 8007b18:	468b      	mov	fp, r1
 8007b1a:	4b56      	ldr	r3, [pc, #344]	; (8007c74 <__ieee754_pow+0x3cc>)
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fcd2 	bl	80004c8 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	a14b      	add	r1, pc, #300	; (adr r1, 8007c58 <__ieee754_pow+0x3b0>)
 8007b2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b2e:	f7f8 fb13 	bl	8000158 <__aeabi_dsub>
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	f7f8 fcc7 	bl	80004c8 <__aeabi_dmul>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	2000      	movs	r0, #0
 8007b40:	494d      	ldr	r1, [pc, #308]	; (8007c78 <__ieee754_pow+0x3d0>)
 8007b42:	f7f8 fb09 	bl	8000158 <__aeabi_dsub>
 8007b46:	4622      	mov	r2, r4
 8007b48:	462b      	mov	r3, r5
 8007b4a:	4680      	mov	r8, r0
 8007b4c:	4689      	mov	r9, r1
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 fcb9 	bl	80004c8 <__aeabi_dmul>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 fcb3 	bl	80004c8 <__aeabi_dmul>
 8007b62:	a33f      	add	r3, pc, #252	; (adr r3, 8007c60 <__ieee754_pow+0x3b8>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fcae 	bl	80004c8 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f8 faf0 	bl	8000158 <__aeabi_dsub>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 faea 	bl	800015c <__adddf3>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	468b      	mov	fp, r1
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	4632      	mov	r2, r6
 8007b90:	463b      	mov	r3, r7
 8007b92:	f7f8 fae1 	bl	8000158 <__aeabi_dsub>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 fadb 	bl	8000158 <__aeabi_dsub>
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	bf0c      	ite	eq
 8007bb0:	4c32      	ldreq	r4, [pc, #200]	; (8007c7c <__ieee754_pow+0x3d4>)
 8007bb2:	4c2f      	ldrne	r4, [pc, #188]	; (8007c70 <__ieee754_pow+0x3c8>)
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	e9cd 3400 	strd	r3, r4, [sp]
 8007bba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bbe:	2400      	movs	r4, #0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	462b      	mov	r3, r5
 8007bca:	f7f8 fac5 	bl	8000158 <__aeabi_dsub>
 8007bce:	4652      	mov	r2, sl
 8007bd0:	465b      	mov	r3, fp
 8007bd2:	f7f8 fc79 	bl	80004c8 <__aeabi_dmul>
 8007bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 fc71 	bl	80004c8 <__aeabi_dmul>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 fab5 	bl	800015c <__adddf3>
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	f7f8 fc63 	bl	80004c8 <__aeabi_dmul>
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	460b      	mov	r3, r1
 8007c08:	4602      	mov	r2, r0
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c12:	f7f8 faa3 	bl	800015c <__adddf3>
 8007c16:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <__ieee754_pow+0x3d8>)
 8007c18:	4682      	mov	sl, r0
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	460f      	mov	r7, r1
 8007c1e:	460e      	mov	r6, r1
 8007c20:	f340 82e1 	ble.w	80081e6 <__ieee754_pow+0x93e>
 8007c24:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c28:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c2c:	4303      	orrs	r3, r0
 8007c2e:	f000 81db 	beq.w	8007fe8 <__ieee754_pow+0x740>
 8007c32:	a30d      	add	r3, pc, #52	; (adr r3, 8007c68 <__ieee754_pow+0x3c0>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3c:	f7f8 fc44 	bl	80004c8 <__aeabi_dmul>
 8007c40:	a309      	add	r3, pc, #36	; (adr r3, 8007c68 <__ieee754_pow+0x3c0>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	e6c4      	b.n	80079d2 <__ieee754_pow+0x12a>
 8007c48:	60000000 	.word	0x60000000
 8007c4c:	3ff71547 	.word	0x3ff71547
 8007c50:	f85ddf44 	.word	0xf85ddf44
 8007c54:	3e54ae0b 	.word	0x3e54ae0b
 8007c58:	55555555 	.word	0x55555555
 8007c5c:	3fd55555 	.word	0x3fd55555
 8007c60:	652b82fe 	.word	0x652b82fe
 8007c64:	3ff71547 	.word	0x3ff71547
 8007c68:	8800759c 	.word	0x8800759c
 8007c6c:	7e37e43c 	.word	0x7e37e43c
 8007c70:	3ff00000 	.word	0x3ff00000
 8007c74:	3fd00000 	.word	0x3fd00000
 8007c78:	3fe00000 	.word	0x3fe00000
 8007c7c:	bff00000 	.word	0xbff00000
 8007c80:	408fffff 	.word	0x408fffff
 8007c84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	da08      	bge.n	8007ca0 <__ieee754_pow+0x3f8>
 8007c8e:	4658      	mov	r0, fp
 8007c90:	4bcd      	ldr	r3, [pc, #820]	; (8007fc8 <__ieee754_pow+0x720>)
 8007c92:	4661      	mov	r1, ip
 8007c94:	f7f8 fc18 	bl	80004c8 <__aeabi_dmul>
 8007c98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c9c:	4683      	mov	fp, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	1523      	asrs	r3, r4, #20
 8007ca2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ca6:	4413      	add	r3, r2
 8007ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8007caa:	4bc8      	ldr	r3, [pc, #800]	; (8007fcc <__ieee754_pow+0x724>)
 8007cac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007cb0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cba:	dd08      	ble.n	8007cce <__ieee754_pow+0x426>
 8007cbc:	4bc4      	ldr	r3, [pc, #784]	; (8007fd0 <__ieee754_pow+0x728>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	f340 815b 	ble.w	8007f7a <__ieee754_pow+0x6d2>
 8007cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007cca:	3301      	adds	r3, #1
 8007ccc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4bbf      	ldr	r3, [pc, #764]	; (8007fd4 <__ieee754_pow+0x72c>)
 8007cd8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007cdc:	444b      	add	r3, r9
 8007cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ce2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4623      	mov	r3, r4
 8007cea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cee:	f7f8 fa33 	bl	8000158 <__aeabi_dsub>
 8007cf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cfe:	f7f8 fa2d 	bl	800015c <__adddf3>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	2000      	movs	r0, #0
 8007d08:	49b3      	ldr	r1, [pc, #716]	; (8007fd8 <__ieee754_pow+0x730>)
 8007d0a:	f7f8 fd07 	bl	800071c <__aeabi_ddiv>
 8007d0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	f7f8 fbd5 	bl	80004c8 <__aeabi_dmul>
 8007d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d22:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007d26:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	106d      	asrs	r5, r5, #1
 8007d30:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007d3e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	4614      	mov	r4, r2
 8007d48:	461d      	mov	r5, r3
 8007d4a:	f7f8 fbbd 	bl	80004c8 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4630      	mov	r0, r6
 8007d54:	4639      	mov	r1, r7
 8007d56:	f7f8 f9ff 	bl	8000158 <__aeabi_dsub>
 8007d5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 f9f7 	bl	8000158 <__aeabi_dsub>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d72:	f7f8 f9f1 	bl	8000158 <__aeabi_dsub>
 8007d76:	4652      	mov	r2, sl
 8007d78:	465b      	mov	r3, fp
 8007d7a:	f7f8 fba5 	bl	80004c8 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	f7f8 f9e7 	bl	8000158 <__aeabi_dsub>
 8007d8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007d8e:	f7f8 fb9b 	bl	80004c8 <__aeabi_dmul>
 8007d92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7f8 fb93 	bl	80004c8 <__aeabi_dmul>
 8007da2:	a377      	add	r3, pc, #476	; (adr r3, 8007f80 <__ieee754_pow+0x6d8>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	f7f8 fb8c 	bl	80004c8 <__aeabi_dmul>
 8007db0:	a375      	add	r3, pc, #468	; (adr r3, 8007f88 <__ieee754_pow+0x6e0>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 f9d1 	bl	800015c <__adddf3>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f7f8 fb83 	bl	80004c8 <__aeabi_dmul>
 8007dc2:	a373      	add	r3, pc, #460	; (adr r3, 8007f90 <__ieee754_pow+0x6e8>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 f9c8 	bl	800015c <__adddf3>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	462b      	mov	r3, r5
 8007dd0:	f7f8 fb7a 	bl	80004c8 <__aeabi_dmul>
 8007dd4:	a370      	add	r3, pc, #448	; (adr r3, 8007f98 <__ieee754_pow+0x6f0>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 f9bf 	bl	800015c <__adddf3>
 8007dde:	4622      	mov	r2, r4
 8007de0:	462b      	mov	r3, r5
 8007de2:	f7f8 fb71 	bl	80004c8 <__aeabi_dmul>
 8007de6:	a36e      	add	r3, pc, #440	; (adr r3, 8007fa0 <__ieee754_pow+0x6f8>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 f9b6 	bl	800015c <__adddf3>
 8007df0:	4622      	mov	r2, r4
 8007df2:	462b      	mov	r3, r5
 8007df4:	f7f8 fb68 	bl	80004c8 <__aeabi_dmul>
 8007df8:	a36b      	add	r3, pc, #428	; (adr r3, 8007fa8 <__ieee754_pow+0x700>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 f9ad 	bl	800015c <__adddf3>
 8007e02:	4622      	mov	r2, r4
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	462b      	mov	r3, r5
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7f8 fb5b 	bl	80004c8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fb55 	bl	80004c8 <__aeabi_dmul>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e26:	4652      	mov	r2, sl
 8007e28:	465b      	mov	r3, fp
 8007e2a:	f7f8 f997 	bl	800015c <__adddf3>
 8007e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e32:	f7f8 fb49 	bl	80004c8 <__aeabi_dmul>
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	f7f8 f98f 	bl	800015c <__adddf3>
 8007e3e:	4652      	mov	r2, sl
 8007e40:	4606      	mov	r6, r0
 8007e42:	460f      	mov	r7, r1
 8007e44:	465b      	mov	r3, fp
 8007e46:	4650      	mov	r0, sl
 8007e48:	4659      	mov	r1, fp
 8007e4a:	f7f8 fb3d 	bl	80004c8 <__aeabi_dmul>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4b62      	ldr	r3, [pc, #392]	; (8007fdc <__ieee754_pow+0x734>)
 8007e52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e56:	f7f8 f981 	bl	800015c <__adddf3>
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	f7f8 f97d 	bl	800015c <__adddf3>
 8007e62:	9804      	ldr	r0, [sp, #16]
 8007e64:	460d      	mov	r5, r1
 8007e66:	4604      	mov	r4, r0
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	4659      	mov	r1, fp
 8007e70:	f7f8 fb2a 	bl	80004c8 <__aeabi_dmul>
 8007e74:	2200      	movs	r2, #0
 8007e76:	4682      	mov	sl, r0
 8007e78:	468b      	mov	fp, r1
 8007e7a:	4b58      	ldr	r3, [pc, #352]	; (8007fdc <__ieee754_pow+0x734>)
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 f96a 	bl	8000158 <__aeabi_dsub>
 8007e84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e88:	f7f8 f966 	bl	8000158 <__aeabi_dsub>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 f960 	bl	8000158 <__aeabi_dsub>
 8007e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e9c:	f7f8 fb14 	bl	80004c8 <__aeabi_dmul>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007eaa:	462b      	mov	r3, r5
 8007eac:	f7f8 fb0c 	bl	80004c8 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f7f8 f950 	bl	800015c <__adddf3>
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	4659      	mov	r1, fp
 8007ec8:	f7f8 f948 	bl	800015c <__adddf3>
 8007ecc:	a338      	add	r3, pc, #224	; (adr r3, 8007fb0 <__ieee754_pow+0x708>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	9804      	ldr	r0, [sp, #16]
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	f7f8 faf6 	bl	80004c8 <__aeabi_dmul>
 8007edc:	4652      	mov	r2, sl
 8007ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 f936 	bl	8000158 <__aeabi_dsub>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 f930 	bl	8000158 <__aeabi_dsub>
 8007ef8:	a32f      	add	r3, pc, #188	; (adr r3, 8007fb8 <__ieee754_pow+0x710>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 fae3 	bl	80004c8 <__aeabi_dmul>
 8007f02:	a32f      	add	r3, pc, #188	; (adr r3, 8007fc0 <__ieee754_pow+0x718>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	4606      	mov	r6, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7f8 fada 	bl	80004c8 <__aeabi_dmul>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4630      	mov	r0, r6
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 f91e 	bl	800015c <__adddf3>
 8007f20:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <__ieee754_pow+0x738>)
 8007f22:	444b      	add	r3, r9
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 f918 	bl	800015c <__adddf3>
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f30:	460d      	mov	r5, r1
 8007f32:	f7f8 fa5f 	bl	80003f4 <__aeabi_i2d>
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	4b2a      	ldr	r3, [pc, #168]	; (8007fe4 <__ieee754_pow+0x73c>)
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	444b      	add	r3, r9
 8007f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f44:	462b      	mov	r3, r5
 8007f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f4a:	f7f8 f907 	bl	800015c <__adddf3>
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	f7f8 f903 	bl	800015c <__adddf3>
 8007f56:	4632      	mov	r2, r6
 8007f58:	463b      	mov	r3, r7
 8007f5a:	f7f8 f8ff 	bl	800015c <__adddf3>
 8007f5e:	9804      	ldr	r0, [sp, #16]
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4682      	mov	sl, r0
 8007f66:	468b      	mov	fp, r1
 8007f68:	f7f8 f8f6 	bl	8000158 <__aeabi_dsub>
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	f7f8 f8f2 	bl	8000158 <__aeabi_dsub>
 8007f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f78:	e60b      	b.n	8007b92 <__ieee754_pow+0x2ea>
 8007f7a:	f04f 0801 	mov.w	r8, #1
 8007f7e:	e6a8      	b.n	8007cd2 <__ieee754_pow+0x42a>
 8007f80:	4a454eef 	.word	0x4a454eef
 8007f84:	3fca7e28 	.word	0x3fca7e28
 8007f88:	93c9db65 	.word	0x93c9db65
 8007f8c:	3fcd864a 	.word	0x3fcd864a
 8007f90:	a91d4101 	.word	0xa91d4101
 8007f94:	3fd17460 	.word	0x3fd17460
 8007f98:	518f264d 	.word	0x518f264d
 8007f9c:	3fd55555 	.word	0x3fd55555
 8007fa0:	db6fabff 	.word	0xdb6fabff
 8007fa4:	3fdb6db6 	.word	0x3fdb6db6
 8007fa8:	33333303 	.word	0x33333303
 8007fac:	3fe33333 	.word	0x3fe33333
 8007fb0:	e0000000 	.word	0xe0000000
 8007fb4:	3feec709 	.word	0x3feec709
 8007fb8:	dc3a03fd 	.word	0xdc3a03fd
 8007fbc:	3feec709 	.word	0x3feec709
 8007fc0:	145b01f5 	.word	0x145b01f5
 8007fc4:	be3e2fe0 	.word	0xbe3e2fe0
 8007fc8:	43400000 	.word	0x43400000
 8007fcc:	0003988e 	.word	0x0003988e
 8007fd0:	000bb679 	.word	0x000bb679
 8007fd4:	08009688 	.word	0x08009688
 8007fd8:	3ff00000 	.word	0x3ff00000
 8007fdc:	40080000 	.word	0x40080000
 8007fe0:	080096a8 	.word	0x080096a8
 8007fe4:	08009698 	.word	0x08009698
 8007fe8:	a39b      	add	r3, pc, #620	; (adr r3, 8008258 <__ieee754_pow+0x9b0>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 f8b3 	bl	800015c <__adddf3>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	4650      	mov	r0, sl
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 f8a9 	bl	8000158 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800800e:	f7f8 fceb 	bl	80009e8 <__aeabi_dcmpgt>
 8008012:	2800      	cmp	r0, #0
 8008014:	f47f ae0d 	bne.w	8007c32 <__ieee754_pow+0x38a>
 8008018:	4aa3      	ldr	r2, [pc, #652]	; (80082a8 <__ieee754_pow+0xa00>)
 800801a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800801e:	4293      	cmp	r3, r2
 8008020:	f340 8103 	ble.w	800822a <__ieee754_pow+0x982>
 8008024:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008028:	2000      	movs	r0, #0
 800802a:	151b      	asrs	r3, r3, #20
 800802c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008030:	fa4a f303 	asr.w	r3, sl, r3
 8008034:	4433      	add	r3, r6
 8008036:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800803a:	4f9c      	ldr	r7, [pc, #624]	; (80082ac <__ieee754_pow+0xa04>)
 800803c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008040:	4117      	asrs	r7, r2
 8008042:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008046:	ea23 0107 	bic.w	r1, r3, r7
 800804a:	f1c2 0214 	rsb	r2, r2, #20
 800804e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008052:	fa4a fa02 	asr.w	sl, sl, r2
 8008056:	2e00      	cmp	r6, #0
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	bfb8      	it	lt
 8008062:	f1ca 0a00 	rsblt	sl, sl, #0
 8008066:	f7f8 f877 	bl	8000158 <__aeabi_dsub>
 800806a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	4642      	mov	r2, r8
 8008074:	464b      	mov	r3, r9
 8008076:	f7f8 f871 	bl	800015c <__adddf3>
 800807a:	a379      	add	r3, pc, #484	; (adr r3, 8008260 <__ieee754_pow+0x9b8>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	2000      	movs	r0, #0
 8008082:	460d      	mov	r5, r1
 8008084:	4604      	mov	r4, r0
 8008086:	f7f8 fa1f 	bl	80004c8 <__aeabi_dmul>
 800808a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 f85f 	bl	8000158 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 f859 	bl	8000158 <__aeabi_dsub>
 80080a6:	a370      	add	r3, pc, #448	; (adr r3, 8008268 <__ieee754_pow+0x9c0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fa0c 	bl	80004c8 <__aeabi_dmul>
 80080b0:	a36f      	add	r3, pc, #444	; (adr r3, 8008270 <__ieee754_pow+0x9c8>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fa03 	bl	80004c8 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 f847 	bl	800015c <__adddf3>
 80080ce:	4604      	mov	r4, r0
 80080d0:	460d      	mov	r5, r1
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f83f 	bl	800015c <__adddf3>
 80080de:	4632      	mov	r2, r6
 80080e0:	463b      	mov	r3, r7
 80080e2:	4680      	mov	r8, r0
 80080e4:	4689      	mov	r9, r1
 80080e6:	f7f8 f837 	bl	8000158 <__aeabi_dsub>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 f831 	bl	8000158 <__aeabi_dsub>
 80080f6:	4642      	mov	r2, r8
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	464b      	mov	r3, r9
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 f9e1 	bl	80004c8 <__aeabi_dmul>
 8008106:	a35c      	add	r3, pc, #368	; (adr r3, 8008278 <__ieee754_pow+0x9d0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	f7f8 f9da 	bl	80004c8 <__aeabi_dmul>
 8008114:	a35a      	add	r3, pc, #360	; (adr r3, 8008280 <__ieee754_pow+0x9d8>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f81d 	bl	8000158 <__aeabi_dsub>
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	f7f8 f9d1 	bl	80004c8 <__aeabi_dmul>
 8008126:	a358      	add	r3, pc, #352	; (adr r3, 8008288 <__ieee754_pow+0x9e0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f816 	bl	800015c <__adddf3>
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	f7f8 f9c8 	bl	80004c8 <__aeabi_dmul>
 8008138:	a355      	add	r3, pc, #340	; (adr r3, 8008290 <__ieee754_pow+0x9e8>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f80b 	bl	8000158 <__aeabi_dsub>
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	f7f8 f9bf 	bl	80004c8 <__aeabi_dmul>
 800814a:	a353      	add	r3, pc, #332	; (adr r3, 8008298 <__ieee754_pow+0x9f0>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f804 	bl	800015c <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 f9b6 	bl	80004c8 <__aeabi_dmul>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	f7f7 fff8 	bl	8000158 <__aeabi_dsub>
 8008168:	4604      	mov	r4, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4640      	mov	r0, r8
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 f9a8 	bl	80004c8 <__aeabi_dmul>
 8008178:	2200      	movs	r2, #0
 800817a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f7 ffe7 	bl	8000158 <__aeabi_dsub>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008192:	f7f8 fac3 	bl	800071c <__aeabi_ddiv>
 8008196:	4632      	mov	r2, r6
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	463b      	mov	r3, r7
 800819e:	4640      	mov	r0, r8
 80081a0:	4649      	mov	r1, r9
 80081a2:	f7f8 f991 	bl	80004c8 <__aeabi_dmul>
 80081a6:	4632      	mov	r2, r6
 80081a8:	463b      	mov	r3, r7
 80081aa:	f7f7 ffd7 	bl	800015c <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4620      	mov	r0, r4
 80081b4:	4629      	mov	r1, r5
 80081b6:	f7f7 ffcf 	bl	8000158 <__aeabi_dsub>
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	f7f7 ffcb 	bl	8000158 <__aeabi_dsub>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	2000      	movs	r0, #0
 80081c8:	4939      	ldr	r1, [pc, #228]	; (80082b0 <__ieee754_pow+0xa08>)
 80081ca:	f7f7 ffc5 	bl	8000158 <__aeabi_dsub>
 80081ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80081d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80081d6:	da2b      	bge.n	8008230 <__ieee754_pow+0x988>
 80081d8:	4652      	mov	r2, sl
 80081da:	f001 f8e9 	bl	80093b0 <scalbn>
 80081de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e2:	f7ff bbf6 	b.w	80079d2 <__ieee754_pow+0x12a>
 80081e6:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <__ieee754_pow+0xa0c>)
 80081e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80081ec:	429f      	cmp	r7, r3
 80081ee:	f77f af13 	ble.w	8008018 <__ieee754_pow+0x770>
 80081f2:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <__ieee754_pow+0xa10>)
 80081f4:	440b      	add	r3, r1
 80081f6:	4303      	orrs	r3, r0
 80081f8:	d00b      	beq.n	8008212 <__ieee754_pow+0x96a>
 80081fa:	a329      	add	r3, pc, #164	; (adr r3, 80082a0 <__ieee754_pow+0x9f8>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008204:	f7f8 f960 	bl	80004c8 <__aeabi_dmul>
 8008208:	a325      	add	r3, pc, #148	; (adr r3, 80082a0 <__ieee754_pow+0x9f8>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7ff bbe0 	b.w	80079d2 <__ieee754_pow+0x12a>
 8008212:	4622      	mov	r2, r4
 8008214:	462b      	mov	r3, r5
 8008216:	f7f7 ff9f 	bl	8000158 <__aeabi_dsub>
 800821a:	4642      	mov	r2, r8
 800821c:	464b      	mov	r3, r9
 800821e:	f7f8 fbd9 	bl	80009d4 <__aeabi_dcmpge>
 8008222:	2800      	cmp	r0, #0
 8008224:	f43f aef8 	beq.w	8008018 <__ieee754_pow+0x770>
 8008228:	e7e7      	b.n	80081fa <__ieee754_pow+0x952>
 800822a:	f04f 0a00 	mov.w	sl, #0
 800822e:	e71e      	b.n	800806e <__ieee754_pow+0x7c6>
 8008230:	4621      	mov	r1, r4
 8008232:	e7d4      	b.n	80081de <__ieee754_pow+0x936>
 8008234:	f04f 0b00 	mov.w	fp, #0
 8008238:	f8df c074 	ldr.w	ip, [pc, #116]	; 80082b0 <__ieee754_pow+0xa08>
 800823c:	f7ff bb95 	b.w	800796a <__ieee754_pow+0xc2>
 8008240:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008244:	f7ff bb91 	b.w	800796a <__ieee754_pow+0xc2>
 8008248:	4638      	mov	r0, r7
 800824a:	4641      	mov	r1, r8
 800824c:	f7ff bbc3 	b.w	80079d6 <__ieee754_pow+0x12e>
 8008250:	9200      	str	r2, [sp, #0]
 8008252:	f7ff bb9f 	b.w	8007994 <__ieee754_pow+0xec>
 8008256:	bf00      	nop
 8008258:	652b82fe 	.word	0x652b82fe
 800825c:	3c971547 	.word	0x3c971547
 8008260:	00000000 	.word	0x00000000
 8008264:	3fe62e43 	.word	0x3fe62e43
 8008268:	fefa39ef 	.word	0xfefa39ef
 800826c:	3fe62e42 	.word	0x3fe62e42
 8008270:	0ca86c39 	.word	0x0ca86c39
 8008274:	be205c61 	.word	0xbe205c61
 8008278:	72bea4d0 	.word	0x72bea4d0
 800827c:	3e663769 	.word	0x3e663769
 8008280:	c5d26bf1 	.word	0xc5d26bf1
 8008284:	3ebbbd41 	.word	0x3ebbbd41
 8008288:	af25de2c 	.word	0xaf25de2c
 800828c:	3f11566a 	.word	0x3f11566a
 8008290:	16bebd93 	.word	0x16bebd93
 8008294:	3f66c16c 	.word	0x3f66c16c
 8008298:	5555553e 	.word	0x5555553e
 800829c:	3fc55555 	.word	0x3fc55555
 80082a0:	c2f8f359 	.word	0xc2f8f359
 80082a4:	01a56e1f 	.word	0x01a56e1f
 80082a8:	3fe00000 	.word	0x3fe00000
 80082ac:	000fffff 	.word	0x000fffff
 80082b0:	3ff00000 	.word	0x3ff00000
 80082b4:	4090cbff 	.word	0x4090cbff
 80082b8:	3f6f3400 	.word	0x3f6f3400
 80082bc:	00000000 	.word	0x00000000

080082c0 <__ieee754_rem_pio2>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4614      	mov	r4, r2
 80082c6:	4ac2      	ldr	r2, [pc, #776]	; (80085d0 <__ieee754_rem_pio2+0x310>)
 80082c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80082cc:	4592      	cmp	sl, r2
 80082ce:	b08d      	sub	sp, #52	; 0x34
 80082d0:	468b      	mov	fp, r1
 80082d2:	dc07      	bgt.n	80082e4 <__ieee754_rem_pio2+0x24>
 80082d4:	2200      	movs	r2, #0
 80082d6:	2300      	movs	r3, #0
 80082d8:	e9c4 0100 	strd	r0, r1, [r4]
 80082dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80082e0:	2500      	movs	r5, #0
 80082e2:	e023      	b.n	800832c <__ieee754_rem_pio2+0x6c>
 80082e4:	4abb      	ldr	r2, [pc, #748]	; (80085d4 <__ieee754_rem_pio2+0x314>)
 80082e6:	4592      	cmp	sl, r2
 80082e8:	dc71      	bgt.n	80083ce <__ieee754_rem_pio2+0x10e>
 80082ea:	a3ab      	add	r3, pc, #684	; (adr r3, 8008598 <__ieee754_rem_pio2+0x2d8>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	2900      	cmp	r1, #0
 80082f2:	4db9      	ldr	r5, [pc, #740]	; (80085d8 <__ieee754_rem_pio2+0x318>)
 80082f4:	dd36      	ble.n	8008364 <__ieee754_rem_pio2+0xa4>
 80082f6:	f7f7 ff2f 	bl	8000158 <__aeabi_dsub>
 80082fa:	45aa      	cmp	sl, r5
 80082fc:	4606      	mov	r6, r0
 80082fe:	460f      	mov	r7, r1
 8008300:	d018      	beq.n	8008334 <__ieee754_rem_pio2+0x74>
 8008302:	a3a7      	add	r3, pc, #668	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x2e0>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ff26 	bl	8000158 <__aeabi_dsub>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	e9c4 2300 	strd	r2, r3, [r4]
 8008316:	4639      	mov	r1, r7
 8008318:	f7f7 ff1e 	bl	8000158 <__aeabi_dsub>
 800831c:	a3a0      	add	r3, pc, #640	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x2e0>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f7 ff19 	bl	8000158 <__aeabi_dsub>
 8008326:	2501      	movs	r5, #1
 8008328:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800832c:	4628      	mov	r0, r5
 800832e:	b00d      	add	sp, #52	; 0x34
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	a39c      	add	r3, pc, #624	; (adr r3, 80085a8 <__ieee754_rem_pio2+0x2e8>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ff0d 	bl	8000158 <__aeabi_dsub>
 800833e:	a39c      	add	r3, pc, #624	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x2f0>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f7 ff06 	bl	8000158 <__aeabi_dsub>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4630      	mov	r0, r6
 8008352:	e9c4 2300 	strd	r2, r3, [r4]
 8008356:	4639      	mov	r1, r7
 8008358:	f7f7 fefe 	bl	8000158 <__aeabi_dsub>
 800835c:	a394      	add	r3, pc, #592	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x2f0>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	e7de      	b.n	8008322 <__ieee754_rem_pio2+0x62>
 8008364:	f7f7 fefa 	bl	800015c <__adddf3>
 8008368:	45aa      	cmp	sl, r5
 800836a:	4606      	mov	r6, r0
 800836c:	460f      	mov	r7, r1
 800836e:	d016      	beq.n	800839e <__ieee754_rem_pio2+0xde>
 8008370:	a38b      	add	r3, pc, #556	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x2e0>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f7 fef1 	bl	800015c <__adddf3>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4630      	mov	r0, r6
 8008380:	e9c4 2300 	strd	r2, r3, [r4]
 8008384:	4639      	mov	r1, r7
 8008386:	f7f7 fee7 	bl	8000158 <__aeabi_dsub>
 800838a:	a385      	add	r3, pc, #532	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x2e0>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 fee4 	bl	800015c <__adddf3>
 8008394:	f04f 35ff 	mov.w	r5, #4294967295
 8008398:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800839c:	e7c6      	b.n	800832c <__ieee754_rem_pio2+0x6c>
 800839e:	a382      	add	r3, pc, #520	; (adr r3, 80085a8 <__ieee754_rem_pio2+0x2e8>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 feda 	bl	800015c <__adddf3>
 80083a8:	a381      	add	r3, pc, #516	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x2f0>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	f7f7 fed3 	bl	800015c <__adddf3>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4630      	mov	r0, r6
 80083bc:	e9c4 2300 	strd	r2, r3, [r4]
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f7 fec9 	bl	8000158 <__aeabi_dsub>
 80083c6:	a37a      	add	r3, pc, #488	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x2f0>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	e7e0      	b.n	8008390 <__ieee754_rem_pio2+0xd0>
 80083ce:	4a83      	ldr	r2, [pc, #524]	; (80085dc <__ieee754_rem_pio2+0x31c>)
 80083d0:	4592      	cmp	sl, r2
 80083d2:	f300 80d2 	bgt.w	800857a <__ieee754_rem_pio2+0x2ba>
 80083d6:	f7ff f877 	bl	80074c8 <fabs>
 80083da:	a377      	add	r3, pc, #476	; (adr r3, 80085b8 <__ieee754_rem_pio2+0x2f8>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	f7f8 f870 	bl	80004c8 <__aeabi_dmul>
 80083e8:	2200      	movs	r2, #0
 80083ea:	4b7d      	ldr	r3, [pc, #500]	; (80085e0 <__ieee754_rem_pio2+0x320>)
 80083ec:	f7f7 feb6 	bl	800015c <__adddf3>
 80083f0:	f7f8 fb1a 	bl	8000a28 <__aeabi_d2iz>
 80083f4:	4605      	mov	r5, r0
 80083f6:	f7f7 fffd 	bl	80003f4 <__aeabi_i2d>
 80083fa:	a367      	add	r3, pc, #412	; (adr r3, 8008598 <__ieee754_rem_pio2+0x2d8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008404:	f7f8 f860 	bl	80004c8 <__aeabi_dmul>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f7 fea2 	bl	8000158 <__aeabi_dsub>
 8008414:	a362      	add	r3, pc, #392	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x2e0>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 f851 	bl	80004c8 <__aeabi_dmul>
 8008426:	2d1f      	cmp	r5, #31
 8008428:	4680      	mov	r8, r0
 800842a:	4689      	mov	r9, r1
 800842c:	dc0e      	bgt.n	800844c <__ieee754_rem_pio2+0x18c>
 800842e:	4b6d      	ldr	r3, [pc, #436]	; (80085e4 <__ieee754_rem_pio2+0x324>)
 8008430:	1e6a      	subs	r2, r5, #1
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	4553      	cmp	r3, sl
 8008438:	d008      	beq.n	800844c <__ieee754_rem_pio2+0x18c>
 800843a:	4642      	mov	r2, r8
 800843c:	464b      	mov	r3, r9
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f7 fe89 	bl	8000158 <__aeabi_dsub>
 8008446:	e9c4 0100 	strd	r0, r1, [r4]
 800844a:	e011      	b.n	8008470 <__ieee754_rem_pio2+0x1b0>
 800844c:	464b      	mov	r3, r9
 800844e:	4642      	mov	r2, r8
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f7 fe80 	bl	8000158 <__aeabi_dsub>
 8008458:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800845c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008460:	ebaa 0303 	sub.w	r3, sl, r3
 8008464:	2b10      	cmp	r3, #16
 8008466:	dc1f      	bgt.n	80084a8 <__ieee754_rem_pio2+0x1e8>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9c4 2300 	strd	r2, r3, [r4]
 8008470:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008474:	4630      	mov	r0, r6
 8008476:	4653      	mov	r3, sl
 8008478:	4639      	mov	r1, r7
 800847a:	f7f7 fe6d 	bl	8000158 <__aeabi_dsub>
 800847e:	4642      	mov	r2, r8
 8008480:	464b      	mov	r3, r9
 8008482:	f7f7 fe69 	bl	8000158 <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	f1bb 0f00 	cmp.w	fp, #0
 800848e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008492:	f6bf af4b 	bge.w	800832c <__ieee754_rem_pio2+0x6c>
 8008496:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800849a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800849e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80084a2:	60e1      	str	r1, [r4, #12]
 80084a4:	426d      	negs	r5, r5
 80084a6:	e741      	b.n	800832c <__ieee754_rem_pio2+0x6c>
 80084a8:	a33f      	add	r3, pc, #252	; (adr r3, 80085a8 <__ieee754_rem_pio2+0x2e8>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b2:	f7f8 f809 	bl	80004c8 <__aeabi_dmul>
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f7 fe49 	bl	8000158 <__aeabi_dsub>
 80084c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fe41 	bl	8000158 <__aeabi_dsub>
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	f7f7 fe3d 	bl	8000158 <__aeabi_dsub>
 80084de:	a334      	add	r3, pc, #208	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x2f0>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ec:	f7f7 ffec 	bl	80004c8 <__aeabi_dmul>
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	f7f7 fe30 	bl	8000158 <__aeabi_dsub>
 80084f8:	460b      	mov	r3, r1
 80084fa:	4602      	mov	r2, r0
 80084fc:	4680      	mov	r8, r0
 80084fe:	4689      	mov	r9, r1
 8008500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008504:	f7f7 fe28 	bl	8000158 <__aeabi_dsub>
 8008508:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800850c:	ebaa 0a03 	sub.w	sl, sl, r3
 8008510:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8008514:	dc06      	bgt.n	8008524 <__ieee754_rem_pio2+0x264>
 8008516:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	e9c4 2300 	strd	r2, r3, [r4]
 8008522:	e7a5      	b.n	8008470 <__ieee754_rem_pio2+0x1b0>
 8008524:	a326      	add	r3, pc, #152	; (adr r3, 80085c0 <__ieee754_rem_pio2+0x300>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852e:	f7f7 ffcb 	bl	80004c8 <__aeabi_dmul>
 8008532:	4680      	mov	r8, r0
 8008534:	4689      	mov	r9, r1
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853e:	f7f7 fe0b 	bl	8000158 <__aeabi_dsub>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4606      	mov	r6, r0
 8008548:	460f      	mov	r7, r1
 800854a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800854e:	f7f7 fe03 	bl	8000158 <__aeabi_dsub>
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	f7f7 fdff 	bl	8000158 <__aeabi_dsub>
 800855a:	a31b      	add	r3, pc, #108	; (adr r3, 80085c8 <__ieee754_rem_pio2+0x308>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008568:	f7f7 ffae 	bl	80004c8 <__aeabi_dmul>
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	f7f7 fdf2 	bl	8000158 <__aeabi_dsub>
 8008574:	4680      	mov	r8, r0
 8008576:	4689      	mov	r9, r1
 8008578:	e75f      	b.n	800843a <__ieee754_rem_pio2+0x17a>
 800857a:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <__ieee754_rem_pio2+0x328>)
 800857c:	4592      	cmp	sl, r2
 800857e:	dd35      	ble.n	80085ec <__ieee754_rem_pio2+0x32c>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	f7f7 fde8 	bl	8000158 <__aeabi_dsub>
 8008588:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800858c:	e9c4 0100 	strd	r0, r1, [r4]
 8008590:	e6a6      	b.n	80082e0 <__ieee754_rem_pio2+0x20>
 8008592:	bf00      	nop
 8008594:	f3af 8000 	nop.w
 8008598:	54400000 	.word	0x54400000
 800859c:	3ff921fb 	.word	0x3ff921fb
 80085a0:	1a626331 	.word	0x1a626331
 80085a4:	3dd0b461 	.word	0x3dd0b461
 80085a8:	1a600000 	.word	0x1a600000
 80085ac:	3dd0b461 	.word	0x3dd0b461
 80085b0:	2e037073 	.word	0x2e037073
 80085b4:	3ba3198a 	.word	0x3ba3198a
 80085b8:	6dc9c883 	.word	0x6dc9c883
 80085bc:	3fe45f30 	.word	0x3fe45f30
 80085c0:	2e000000 	.word	0x2e000000
 80085c4:	3ba3198a 	.word	0x3ba3198a
 80085c8:	252049c1 	.word	0x252049c1
 80085cc:	397b839a 	.word	0x397b839a
 80085d0:	3fe921fb 	.word	0x3fe921fb
 80085d4:	4002d97b 	.word	0x4002d97b
 80085d8:	3ff921fb 	.word	0x3ff921fb
 80085dc:	413921fb 	.word	0x413921fb
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	080096b8 	.word	0x080096b8
 80085e8:	7fefffff 	.word	0x7fefffff
 80085ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 80085f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80085f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80085f8:	460f      	mov	r7, r1
 80085fa:	4606      	mov	r6, r0
 80085fc:	f7f8 fa14 	bl	8000a28 <__aeabi_d2iz>
 8008600:	f7f7 fef8 	bl	80003f4 <__aeabi_i2d>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008610:	f7f7 fda2 	bl	8000158 <__aeabi_dsub>
 8008614:	2200      	movs	r2, #0
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <__ieee754_rem_pio2+0x3d8>)
 8008618:	f7f7 ff56 	bl	80004c8 <__aeabi_dmul>
 800861c:	460f      	mov	r7, r1
 800861e:	4606      	mov	r6, r0
 8008620:	f7f8 fa02 	bl	8000a28 <__aeabi_d2iz>
 8008624:	f7f7 fee6 	bl	80003f4 <__aeabi_i2d>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008634:	f7f7 fd90 	bl	8000158 <__aeabi_dsub>
 8008638:	2200      	movs	r2, #0
 800863a:	4b17      	ldr	r3, [pc, #92]	; (8008698 <__ieee754_rem_pio2+0x3d8>)
 800863c:	f7f7 ff44 	bl	80004c8 <__aeabi_dmul>
 8008640:	f04f 0803 	mov.w	r8, #3
 8008644:	2600      	movs	r6, #0
 8008646:	2700      	movs	r7, #0
 8008648:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800864c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008650:	4632      	mov	r2, r6
 8008652:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008656:	463b      	mov	r3, r7
 8008658:	f108 3aff 	add.w	sl, r8, #4294967295
 800865c:	f7f8 f99c 	bl	8000998 <__aeabi_dcmpeq>
 8008660:	b9b8      	cbnz	r0, 8008692 <__ieee754_rem_pio2+0x3d2>
 8008662:	4b0e      	ldr	r3, [pc, #56]	; (800869c <__ieee754_rem_pio2+0x3dc>)
 8008664:	462a      	mov	r2, r5
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	2302      	movs	r3, #2
 800866a:	4621      	mov	r1, r4
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	a806      	add	r0, sp, #24
 8008670:	4643      	mov	r3, r8
 8008672:	f000 f97f 	bl	8008974 <__kernel_rem_pio2>
 8008676:	f1bb 0f00 	cmp.w	fp, #0
 800867a:	4605      	mov	r5, r0
 800867c:	f6bf ae56 	bge.w	800832c <__ieee754_rem_pio2+0x6c>
 8008680:	6863      	ldr	r3, [r4, #4]
 8008682:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008686:	6063      	str	r3, [r4, #4]
 8008688:	68e3      	ldr	r3, [r4, #12]
 800868a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800868e:	60e3      	str	r3, [r4, #12]
 8008690:	e708      	b.n	80084a4 <__ieee754_rem_pio2+0x1e4>
 8008692:	46d0      	mov	r8, sl
 8008694:	e7dc      	b.n	8008650 <__ieee754_rem_pio2+0x390>
 8008696:	bf00      	nop
 8008698:	41700000 	.word	0x41700000
 800869c:	08009738 	.word	0x08009738

080086a0 <__ieee754_sqrt>:
 80086a0:	4b54      	ldr	r3, [pc, #336]	; (80087f4 <__ieee754_sqrt+0x154>)
 80086a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a6:	438b      	bics	r3, r1
 80086a8:	4606      	mov	r6, r0
 80086aa:	460d      	mov	r5, r1
 80086ac:	460a      	mov	r2, r1
 80086ae:	460c      	mov	r4, r1
 80086b0:	d10f      	bne.n	80086d2 <__ieee754_sqrt+0x32>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	f7f7 ff07 	bl	80004c8 <__aeabi_dmul>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4630      	mov	r0, r6
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7f7 fd4b 	bl	800015c <__adddf3>
 80086c6:	4606      	mov	r6, r0
 80086c8:	460d      	mov	r5, r1
 80086ca:	4630      	mov	r0, r6
 80086cc:	4629      	mov	r1, r5
 80086ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d2:	2900      	cmp	r1, #0
 80086d4:	4607      	mov	r7, r0
 80086d6:	4603      	mov	r3, r0
 80086d8:	dc0e      	bgt.n	80086f8 <__ieee754_sqrt+0x58>
 80086da:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80086de:	ea5c 0707 	orrs.w	r7, ip, r7
 80086e2:	d0f2      	beq.n	80086ca <__ieee754_sqrt+0x2a>
 80086e4:	b141      	cbz	r1, 80086f8 <__ieee754_sqrt+0x58>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	f7f7 fd35 	bl	8000158 <__aeabi_dsub>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	f7f8 f813 	bl	800071c <__aeabi_ddiv>
 80086f6:	e7e6      	b.n	80086c6 <__ieee754_sqrt+0x26>
 80086f8:	1512      	asrs	r2, r2, #20
 80086fa:	d074      	beq.n	80087e6 <__ieee754_sqrt+0x146>
 80086fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008700:	07d5      	lsls	r5, r2, #31
 8008702:	f04f 0500 	mov.w	r5, #0
 8008706:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800870a:	bf48      	it	mi
 800870c:	0fd9      	lsrmi	r1, r3, #31
 800870e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008712:	bf44      	itt	mi
 8008714:	005b      	lslmi	r3, r3, #1
 8008716:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800871a:	1051      	asrs	r1, r2, #1
 800871c:	0fda      	lsrs	r2, r3, #31
 800871e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008722:	4628      	mov	r0, r5
 8008724:	2216      	movs	r2, #22
 8008726:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	1987      	adds	r7, r0, r6
 800872e:	42a7      	cmp	r7, r4
 8008730:	bfde      	ittt	le
 8008732:	19b8      	addle	r0, r7, r6
 8008734:	1be4      	suble	r4, r4, r7
 8008736:	19ad      	addle	r5, r5, r6
 8008738:	0fdf      	lsrs	r7, r3, #31
 800873a:	3a01      	subs	r2, #1
 800873c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008740:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008744:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008748:	d1f0      	bne.n	800872c <__ieee754_sqrt+0x8c>
 800874a:	f04f 0c20 	mov.w	ip, #32
 800874e:	4696      	mov	lr, r2
 8008750:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008754:	4284      	cmp	r4, r0
 8008756:	eb06 070e 	add.w	r7, r6, lr
 800875a:	dc02      	bgt.n	8008762 <__ieee754_sqrt+0xc2>
 800875c:	d112      	bne.n	8008784 <__ieee754_sqrt+0xe4>
 800875e:	429f      	cmp	r7, r3
 8008760:	d810      	bhi.n	8008784 <__ieee754_sqrt+0xe4>
 8008762:	2f00      	cmp	r7, #0
 8008764:	eb07 0e06 	add.w	lr, r7, r6
 8008768:	da42      	bge.n	80087f0 <__ieee754_sqrt+0x150>
 800876a:	f1be 0f00 	cmp.w	lr, #0
 800876e:	db3f      	blt.n	80087f0 <__ieee754_sqrt+0x150>
 8008770:	f100 0801 	add.w	r8, r0, #1
 8008774:	1a24      	subs	r4, r4, r0
 8008776:	4640      	mov	r0, r8
 8008778:	429f      	cmp	r7, r3
 800877a:	bf88      	it	hi
 800877c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008780:	1bdb      	subs	r3, r3, r7
 8008782:	4432      	add	r2, r6
 8008784:	0064      	lsls	r4, r4, #1
 8008786:	f1bc 0c01 	subs.w	ip, ip, #1
 800878a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800878e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008796:	d1dd      	bne.n	8008754 <__ieee754_sqrt+0xb4>
 8008798:	4323      	orrs	r3, r4
 800879a:	d006      	beq.n	80087aa <__ieee754_sqrt+0x10a>
 800879c:	1c54      	adds	r4, r2, #1
 800879e:	bf0b      	itete	eq
 80087a0:	4662      	moveq	r2, ip
 80087a2:	3201      	addne	r2, #1
 80087a4:	3501      	addeq	r5, #1
 80087a6:	f022 0201 	bicne.w	r2, r2, #1
 80087aa:	106b      	asrs	r3, r5, #1
 80087ac:	0852      	lsrs	r2, r2, #1
 80087ae:	07e8      	lsls	r0, r5, #31
 80087b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087b8:	bf48      	it	mi
 80087ba:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80087be:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80087c2:	4616      	mov	r6, r2
 80087c4:	e781      	b.n	80086ca <__ieee754_sqrt+0x2a>
 80087c6:	0adc      	lsrs	r4, r3, #11
 80087c8:	3915      	subs	r1, #21
 80087ca:	055b      	lsls	r3, r3, #21
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d0fa      	beq.n	80087c6 <__ieee754_sqrt+0x126>
 80087d0:	02e6      	lsls	r6, r4, #11
 80087d2:	d50a      	bpl.n	80087ea <__ieee754_sqrt+0x14a>
 80087d4:	f1c2 0020 	rsb	r0, r2, #32
 80087d8:	fa23 f000 	lsr.w	r0, r3, r0
 80087dc:	1e55      	subs	r5, r2, #1
 80087de:	4093      	lsls	r3, r2
 80087e0:	4304      	orrs	r4, r0
 80087e2:	1b4a      	subs	r2, r1, r5
 80087e4:	e78a      	b.n	80086fc <__ieee754_sqrt+0x5c>
 80087e6:	4611      	mov	r1, r2
 80087e8:	e7f0      	b.n	80087cc <__ieee754_sqrt+0x12c>
 80087ea:	0064      	lsls	r4, r4, #1
 80087ec:	3201      	adds	r2, #1
 80087ee:	e7ef      	b.n	80087d0 <__ieee754_sqrt+0x130>
 80087f0:	4680      	mov	r8, r0
 80087f2:	e7bf      	b.n	8008774 <__ieee754_sqrt+0xd4>
 80087f4:	7ff00000 	.word	0x7ff00000

080087f8 <__kernel_cos>:
 80087f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008800:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008804:	4680      	mov	r8, r0
 8008806:	460f      	mov	r7, r1
 8008808:	e9cd 2300 	strd	r2, r3, [sp]
 800880c:	da04      	bge.n	8008818 <__kernel_cos+0x20>
 800880e:	f7f8 f90b 	bl	8000a28 <__aeabi_d2iz>
 8008812:	2800      	cmp	r0, #0
 8008814:	f000 8086 	beq.w	8008924 <__kernel_cos+0x12c>
 8008818:	4642      	mov	r2, r8
 800881a:	463b      	mov	r3, r7
 800881c:	4640      	mov	r0, r8
 800881e:	4639      	mov	r1, r7
 8008820:	f7f7 fe52 	bl	80004c8 <__aeabi_dmul>
 8008824:	2200      	movs	r2, #0
 8008826:	4b4e      	ldr	r3, [pc, #312]	; (8008960 <__kernel_cos+0x168>)
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	f7f7 fe4c 	bl	80004c8 <__aeabi_dmul>
 8008830:	a33f      	add	r3, pc, #252	; (adr r3, 8008930 <__kernel_cos+0x138>)
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	4682      	mov	sl, r0
 8008838:	468b      	mov	fp, r1
 800883a:	4620      	mov	r0, r4
 800883c:	4629      	mov	r1, r5
 800883e:	f7f7 fe43 	bl	80004c8 <__aeabi_dmul>
 8008842:	a33d      	add	r3, pc, #244	; (adr r3, 8008938 <__kernel_cos+0x140>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f7f7 fc88 	bl	800015c <__adddf3>
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	f7f7 fe3a 	bl	80004c8 <__aeabi_dmul>
 8008854:	a33a      	add	r3, pc, #232	; (adr r3, 8008940 <__kernel_cos+0x148>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f7f7 fc7d 	bl	8000158 <__aeabi_dsub>
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	f7f7 fe31 	bl	80004c8 <__aeabi_dmul>
 8008866:	a338      	add	r3, pc, #224	; (adr r3, 8008948 <__kernel_cos+0x150>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fc76 	bl	800015c <__adddf3>
 8008870:	4622      	mov	r2, r4
 8008872:	462b      	mov	r3, r5
 8008874:	f7f7 fe28 	bl	80004c8 <__aeabi_dmul>
 8008878:	a335      	add	r3, pc, #212	; (adr r3, 8008950 <__kernel_cos+0x158>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fc6b 	bl	8000158 <__aeabi_dsub>
 8008882:	4622      	mov	r2, r4
 8008884:	462b      	mov	r3, r5
 8008886:	f7f7 fe1f 	bl	80004c8 <__aeabi_dmul>
 800888a:	a333      	add	r3, pc, #204	; (adr r3, 8008958 <__kernel_cos+0x160>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f7 fc64 	bl	800015c <__adddf3>
 8008894:	4622      	mov	r2, r4
 8008896:	462b      	mov	r3, r5
 8008898:	f7f7 fe16 	bl	80004c8 <__aeabi_dmul>
 800889c:	4622      	mov	r2, r4
 800889e:	462b      	mov	r3, r5
 80088a0:	f7f7 fe12 	bl	80004c8 <__aeabi_dmul>
 80088a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	4640      	mov	r0, r8
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f7 fe0a 	bl	80004c8 <__aeabi_dmul>
 80088b4:	460b      	mov	r3, r1
 80088b6:	4602      	mov	r2, r0
 80088b8:	4629      	mov	r1, r5
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7f7 fc4c 	bl	8000158 <__aeabi_dsub>
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <__kernel_cos+0x16c>)
 80088c2:	4680      	mov	r8, r0
 80088c4:	429e      	cmp	r6, r3
 80088c6:	4689      	mov	r9, r1
 80088c8:	dc0e      	bgt.n	80088e8 <__kernel_cos+0xf0>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4650      	mov	r0, sl
 80088d0:	4659      	mov	r1, fp
 80088d2:	f7f7 fc41 	bl	8000158 <__aeabi_dsub>
 80088d6:	4602      	mov	r2, r0
 80088d8:	2000      	movs	r0, #0
 80088da:	460b      	mov	r3, r1
 80088dc:	4922      	ldr	r1, [pc, #136]	; (8008968 <__kernel_cos+0x170>)
 80088de:	f7f7 fc3b 	bl	8000158 <__aeabi_dsub>
 80088e2:	b003      	add	sp, #12
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	2400      	movs	r4, #0
 80088ea:	4b20      	ldr	r3, [pc, #128]	; (800896c <__kernel_cos+0x174>)
 80088ec:	4622      	mov	r2, r4
 80088ee:	429e      	cmp	r6, r3
 80088f0:	bfcc      	ite	gt
 80088f2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008970 <__kernel_cos+0x178>)
 80088f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80088f8:	462b      	mov	r3, r5
 80088fa:	2000      	movs	r0, #0
 80088fc:	491a      	ldr	r1, [pc, #104]	; (8008968 <__kernel_cos+0x170>)
 80088fe:	f7f7 fc2b 	bl	8000158 <__aeabi_dsub>
 8008902:	4622      	mov	r2, r4
 8008904:	4606      	mov	r6, r0
 8008906:	460f      	mov	r7, r1
 8008908:	462b      	mov	r3, r5
 800890a:	4650      	mov	r0, sl
 800890c:	4659      	mov	r1, fp
 800890e:	f7f7 fc23 	bl	8000158 <__aeabi_dsub>
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	f7f7 fc1f 	bl	8000158 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	e7dc      	b.n	80088de <__kernel_cos+0xe6>
 8008924:	2000      	movs	r0, #0
 8008926:	4910      	ldr	r1, [pc, #64]	; (8008968 <__kernel_cos+0x170>)
 8008928:	e7db      	b.n	80088e2 <__kernel_cos+0xea>
 800892a:	bf00      	nop
 800892c:	f3af 8000 	nop.w
 8008930:	be8838d4 	.word	0xbe8838d4
 8008934:	bda8fae9 	.word	0xbda8fae9
 8008938:	bdb4b1c4 	.word	0xbdb4b1c4
 800893c:	3e21ee9e 	.word	0x3e21ee9e
 8008940:	809c52ad 	.word	0x809c52ad
 8008944:	3e927e4f 	.word	0x3e927e4f
 8008948:	19cb1590 	.word	0x19cb1590
 800894c:	3efa01a0 	.word	0x3efa01a0
 8008950:	16c15177 	.word	0x16c15177
 8008954:	3f56c16c 	.word	0x3f56c16c
 8008958:	5555554c 	.word	0x5555554c
 800895c:	3fa55555 	.word	0x3fa55555
 8008960:	3fe00000 	.word	0x3fe00000
 8008964:	3fd33332 	.word	0x3fd33332
 8008968:	3ff00000 	.word	0x3ff00000
 800896c:	3fe90000 	.word	0x3fe90000
 8008970:	3fd20000 	.word	0x3fd20000

08008974 <__kernel_rem_pio2>:
 8008974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	9104      	str	r1, [sp, #16]
 8008980:	4bbf      	ldr	r3, [pc, #764]	; (8008c80 <__kernel_rem_pio2+0x30c>)
 8008982:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008984:	1ed4      	subs	r4, r2, #3
 8008986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800898a:	2500      	movs	r5, #0
 800898c:	9302      	str	r3, [sp, #8]
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	9008      	str	r0, [sp, #32]
 8008992:	3b01      	subs	r3, #1
 8008994:	9306      	str	r3, [sp, #24]
 8008996:	2318      	movs	r3, #24
 8008998:	fb94 f4f3 	sdiv	r4, r4, r3
 800899c:	f06f 0317 	mvn.w	r3, #23
 80089a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80089a4:	fb04 3303 	mla	r3, r4, r3, r3
 80089a8:	eb03 0a02 	add.w	sl, r3, r2
 80089ac:	9a06      	ldr	r2, [sp, #24]
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	1aa7      	subs	r7, r4, r2
 80089b2:	eb03 0802 	add.w	r8, r3, r2
 80089b6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80089b8:	2200      	movs	r2, #0
 80089ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80089be:	2300      	movs	r3, #0
 80089c0:	ae1e      	add	r6, sp, #120	; 0x78
 80089c2:	4545      	cmp	r5, r8
 80089c4:	dd14      	ble.n	80089f0 <__kernel_rem_pio2+0x7c>
 80089c6:	2600      	movs	r6, #0
 80089c8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	429e      	cmp	r6, r3
 80089d0:	dc39      	bgt.n	8008a46 <__kernel_rem_pio2+0xd2>
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	f04f 0800 	mov.w	r8, #0
 80089d8:	3b08      	subs	r3, #8
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	f04f 0900 	mov.w	r9, #0
 80089e2:	199d      	adds	r5, r3, r6
 80089e4:	ab20      	add	r3, sp, #128	; 0x80
 80089e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089ea:	9305      	str	r3, [sp, #20]
 80089ec:	2700      	movs	r7, #0
 80089ee:	e023      	b.n	8008a38 <__kernel_rem_pio2+0xc4>
 80089f0:	42ef      	cmn	r7, r5
 80089f2:	d40b      	bmi.n	8008a0c <__kernel_rem_pio2+0x98>
 80089f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80089f8:	e9cd 2300 	strd	r2, r3, [sp]
 80089fc:	f7f7 fcfa 	bl	80003f4 <__aeabi_i2d>
 8008a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a04:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8008a08:	3501      	adds	r5, #1
 8008a0a:	e7da      	b.n	80089c2 <__kernel_rem_pio2+0x4e>
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	e7f8      	b.n	8008a04 <__kernel_rem_pio2+0x90>
 8008a12:	9905      	ldr	r1, [sp, #20]
 8008a14:	9d00      	ldr	r5, [sp, #0]
 8008a16:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008a1a:	9105      	str	r1, [sp, #20]
 8008a1c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008a20:	9500      	str	r5, [sp, #0]
 8008a22:	f7f7 fd51 	bl	80004c8 <__aeabi_dmul>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	f7f7 fb95 	bl	800015c <__adddf3>
 8008a32:	4680      	mov	r8, r0
 8008a34:	4689      	mov	r9, r1
 8008a36:	3701      	adds	r7, #1
 8008a38:	9b06      	ldr	r3, [sp, #24]
 8008a3a:	429f      	cmp	r7, r3
 8008a3c:	dde9      	ble.n	8008a12 <__kernel_rem_pio2+0x9e>
 8008a3e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7c2      	b.n	80089cc <__kernel_rem_pio2+0x58>
 8008a46:	9b02      	ldr	r3, [sp, #8]
 8008a48:	aa0c      	add	r2, sp, #48	; 0x30
 8008a4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a50:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008a52:	9f02      	ldr	r7, [sp, #8]
 8008a54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a58:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5a:	2600      	movs	r6, #0
 8008a5c:	ab98      	add	r3, sp, #608	; 0x260
 8008a5e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8008a62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a6a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008a6e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008a72:	ab98      	add	r3, sp, #608	; 0x260
 8008a74:	445b      	add	r3, fp
 8008a76:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8008a7a:	1bbb      	subs	r3, r7, r6
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc71      	bgt.n	8008b64 <__kernel_rem_pio2+0x1f0>
 8008a80:	4652      	mov	r2, sl
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f000 fc93 	bl	80093b0 <scalbn>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	f7f7 fd18 	bl	80004c8 <__aeabi_dmul>
 8008a98:	f000 fb72 	bl	8009180 <floor>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4b79      	ldr	r3, [pc, #484]	; (8008c84 <__kernel_rem_pio2+0x310>)
 8008aa0:	f7f7 fd12 	bl	80004c8 <__aeabi_dmul>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f7 fb54 	bl	8000158 <__aeabi_dsub>
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	f7f7 ffb8 	bl	8000a28 <__aeabi_d2iz>
 8008ab8:	9005      	str	r0, [sp, #20]
 8008aba:	f7f7 fc9b 	bl	80003f4 <__aeabi_i2d>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7f7 fb47 	bl	8000158 <__aeabi_dsub>
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	4680      	mov	r8, r0
 8008ad0:	4689      	mov	r9, r1
 8008ad2:	dd6c      	ble.n	8008bae <__kernel_rem_pio2+0x23a>
 8008ad4:	1e7a      	subs	r2, r7, #1
 8008ad6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ad8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008adc:	f1ca 0118 	rsb	r1, sl, #24
 8008ae0:	9c05      	ldr	r4, [sp, #20]
 8008ae2:	fa40 f301 	asr.w	r3, r0, r1
 8008ae6:	441c      	add	r4, r3
 8008ae8:	408b      	lsls	r3, r1
 8008aea:	1ac0      	subs	r0, r0, r3
 8008aec:	ab0c      	add	r3, sp, #48	; 0x30
 8008aee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008af2:	f1ca 0317 	rsb	r3, sl, #23
 8008af6:	9405      	str	r4, [sp, #20]
 8008af8:	fa40 f303 	asr.w	r3, r0, r3
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	9b00      	ldr	r3, [sp, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd62      	ble.n	8008bca <__kernel_rem_pio2+0x256>
 8008b04:	2200      	movs	r2, #0
 8008b06:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	9b05      	ldr	r3, [sp, #20]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	9305      	str	r3, [sp, #20]
 8008b12:	4297      	cmp	r7, r2
 8008b14:	f300 809f 	bgt.w	8008c56 <__kernel_rem_pio2+0x2e2>
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	dd07      	ble.n	8008b2e <__kernel_rem_pio2+0x1ba>
 8008b1e:	f1ba 0f01 	cmp.w	sl, #1
 8008b22:	f000 80bb 	beq.w	8008c9c <__kernel_rem_pio2+0x328>
 8008b26:	f1ba 0f02 	cmp.w	sl, #2
 8008b2a:	f000 80c1 	beq.w	8008cb0 <__kernel_rem_pio2+0x33c>
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d14a      	bne.n	8008bca <__kernel_rem_pio2+0x256>
 8008b34:	4642      	mov	r2, r8
 8008b36:	464b      	mov	r3, r9
 8008b38:	2000      	movs	r0, #0
 8008b3a:	4953      	ldr	r1, [pc, #332]	; (8008c88 <__kernel_rem_pio2+0x314>)
 8008b3c:	f7f7 fb0c 	bl	8000158 <__aeabi_dsub>
 8008b40:	4680      	mov	r8, r0
 8008b42:	4689      	mov	r9, r1
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	d040      	beq.n	8008bca <__kernel_rem_pio2+0x256>
 8008b48:	4652      	mov	r2, sl
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	494e      	ldr	r1, [pc, #312]	; (8008c88 <__kernel_rem_pio2+0x314>)
 8008b4e:	f000 fc2f 	bl	80093b0 <scalbn>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 fafd 	bl	8000158 <__aeabi_dsub>
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	e032      	b.n	8008bca <__kernel_rem_pio2+0x256>
 8008b64:	2200      	movs	r2, #0
 8008b66:	4b49      	ldr	r3, [pc, #292]	; (8008c8c <__kernel_rem_pio2+0x318>)
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fcac 	bl	80004c8 <__aeabi_dmul>
 8008b70:	f7f7 ff5a 	bl	8000a28 <__aeabi_d2iz>
 8008b74:	f7f7 fc3e 	bl	80003f4 <__aeabi_i2d>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4b45      	ldr	r3, [pc, #276]	; (8008c90 <__kernel_rem_pio2+0x31c>)
 8008b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b80:	f7f7 fca2 	bl	80004c8 <__aeabi_dmul>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 fae4 	bl	8000158 <__aeabi_dsub>
 8008b90:	f7f7 ff4a 	bl	8000a28 <__aeabi_d2iz>
 8008b94:	ab0c      	add	r3, sp, #48	; 0x30
 8008b96:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008b9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba2:	f7f7 fadb 	bl	800015c <__adddf3>
 8008ba6:	3601      	adds	r6, #1
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4689      	mov	r9, r1
 8008bac:	e765      	b.n	8008a7a <__kernel_rem_pio2+0x106>
 8008bae:	d105      	bne.n	8008bbc <__kernel_rem_pio2+0x248>
 8008bb0:	1e7b      	subs	r3, r7, #1
 8008bb2:	aa0c      	add	r2, sp, #48	; 0x30
 8008bb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008bb8:	15c3      	asrs	r3, r0, #23
 8008bba:	e79f      	b.n	8008afc <__kernel_rem_pio2+0x188>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4b35      	ldr	r3, [pc, #212]	; (8008c94 <__kernel_rem_pio2+0x320>)
 8008bc0:	f7f7 ff08 	bl	80009d4 <__aeabi_dcmpge>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d143      	bne.n	8008c50 <__kernel_rem_pio2+0x2dc>
 8008bc8:	9000      	str	r0, [sp, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fee1 	bl	8000998 <__aeabi_dcmpeq>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f000 80c3 	beq.w	8008d62 <__kernel_rem_pio2+0x3ee>
 8008bdc:	1e7c      	subs	r4, r7, #1
 8008bde:	4623      	mov	r3, r4
 8008be0:	2200      	movs	r2, #0
 8008be2:	9902      	ldr	r1, [sp, #8]
 8008be4:	428b      	cmp	r3, r1
 8008be6:	da6a      	bge.n	8008cbe <__kernel_rem_pio2+0x34a>
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	f000 8084 	beq.w	8008cf6 <__kernel_rem_pio2+0x382>
 8008bee:	ab0c      	add	r3, sp, #48	; 0x30
 8008bf0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008bf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80b0 	beq.w	8008d5e <__kernel_rem_pio2+0x3ea>
 8008bfe:	4652      	mov	r2, sl
 8008c00:	2000      	movs	r0, #0
 8008c02:	4921      	ldr	r1, [pc, #132]	; (8008c88 <__kernel_rem_pio2+0x314>)
 8008c04:	f000 fbd4 	bl	80093b0 <scalbn>
 8008c08:	4625      	mov	r5, r4
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	f04f 0a00 	mov.w	sl, #0
 8008c12:	00e3      	lsls	r3, r4, #3
 8008c14:	aa98      	add	r2, sp, #608	; 0x260
 8008c16:	eb02 0803 	add.w	r8, r2, r3
 8008c1a:	f8df b070 	ldr.w	fp, [pc, #112]	; 8008c8c <__kernel_rem_pio2+0x318>
 8008c1e:	9306      	str	r3, [sp, #24]
 8008c20:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	f280 80d2 	bge.w	8008dce <__kernel_rem_pio2+0x45a>
 8008c2a:	2500      	movs	r5, #0
 8008c2c:	9a06      	ldr	r2, [sp, #24]
 8008c2e:	ab98      	add	r3, sp, #608	; 0x260
 8008c30:	189e      	adds	r6, r3, r2
 8008c32:	3ea8      	subs	r6, #168	; 0xa8
 8008c34:	1b63      	subs	r3, r4, r5
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f2c0 80f9 	blt.w	8008e2e <__kernel_rem_pio2+0x4ba>
 8008c3c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008c98 <__kernel_rem_pio2+0x324>
 8008c40:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8008c44:	f04f 0a00 	mov.w	sl, #0
 8008c48:	f04f 0b00 	mov.w	fp, #0
 8008c4c:	2700      	movs	r7, #0
 8008c4e:	e0e2      	b.n	8008e16 <__kernel_rem_pio2+0x4a2>
 8008c50:	2302      	movs	r3, #2
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	e756      	b.n	8008b04 <__kernel_rem_pio2+0x190>
 8008c56:	ab0c      	add	r3, sp, #48	; 0x30
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	b94c      	cbnz	r4, 8008c72 <__kernel_rem_pio2+0x2fe>
 8008c5e:	b12b      	cbz	r3, 8008c6c <__kernel_rem_pio2+0x2f8>
 8008c60:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008c64:	a80c      	add	r0, sp, #48	; 0x30
 8008c66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	461c      	mov	r4, r3
 8008c70:	e74f      	b.n	8008b12 <__kernel_rem_pio2+0x19e>
 8008c72:	1acb      	subs	r3, r1, r3
 8008c74:	a80c      	add	r0, sp, #48	; 0x30
 8008c76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	e7f6      	b.n	8008c6c <__kernel_rem_pio2+0x2f8>
 8008c7e:	bf00      	nop
 8008c80:	08009880 	.word	0x08009880
 8008c84:	40200000 	.word	0x40200000
 8008c88:	3ff00000 	.word	0x3ff00000
 8008c8c:	3e700000 	.word	0x3e700000
 8008c90:	41700000 	.word	0x41700000
 8008c94:	3fe00000 	.word	0x3fe00000
 8008c98:	08009838 	.word	0x08009838
 8008c9c:	1e7a      	subs	r2, r7, #1
 8008c9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ca8:	a90c      	add	r1, sp, #48	; 0x30
 8008caa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008cae:	e73e      	b.n	8008b2e <__kernel_rem_pio2+0x1ba>
 8008cb0:	1e7a      	subs	r2, r7, #1
 8008cb2:	ab0c      	add	r3, sp, #48	; 0x30
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cbc:	e7f4      	b.n	8008ca8 <__kernel_rem_pio2+0x334>
 8008cbe:	a90c      	add	r1, sp, #48	; 0x30
 8008cc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	e78b      	b.n	8008be2 <__kernel_rem_pio2+0x26e>
 8008cca:	3401      	adds	r4, #1
 8008ccc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	d0fa      	beq.n	8008cca <__kernel_rem_pio2+0x356>
 8008cd4:	ab98      	add	r3, sp, #608	; 0x260
 8008cd6:	449b      	add	fp, r3
 8008cd8:	9b07      	ldr	r3, [sp, #28]
 8008cda:	1c7e      	adds	r6, r7, #1
 8008cdc:	19dd      	adds	r5, r3, r7
 8008cde:	ab98      	add	r3, sp, #608	; 0x260
 8008ce0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008ce4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8008ce8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8008cec:	443c      	add	r4, r7
 8008cee:	42b4      	cmp	r4, r6
 8008cf0:	da04      	bge.n	8008cfc <__kernel_rem_pio2+0x388>
 8008cf2:	4627      	mov	r7, r4
 8008cf4:	e6b1      	b.n	8008a5a <__kernel_rem_pio2+0xe6>
 8008cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf8:	2401      	movs	r4, #1
 8008cfa:	e7e7      	b.n	8008ccc <__kernel_rem_pio2+0x358>
 8008cfc:	f105 0308 	add.w	r3, r5, #8
 8008d00:	9309      	str	r3, [sp, #36]	; 0x24
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	2700      	movs	r7, #0
 8008d06:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d0a:	f7f7 fb73 	bl	80003f4 <__aeabi_i2d>
 8008d0e:	f04f 0800 	mov.w	r8, #0
 8008d12:	f04f 0900 	mov.w	r9, #0
 8008d16:	9b08      	ldr	r3, [sp, #32]
 8008d18:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008d1c:	3b08      	subs	r3, #8
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	f105 0310 	add.w	r3, r5, #16
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	429f      	cmp	r7, r3
 8008d2a:	dd04      	ble.n	8008d36 <__kernel_rem_pio2+0x3c2>
 8008d2c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008d30:	3601      	adds	r6, #1
 8008d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d34:	e7db      	b.n	8008cee <__kernel_rem_pio2+0x37a>
 8008d36:	9905      	ldr	r1, [sp, #20]
 8008d38:	9d00      	ldr	r5, [sp, #0]
 8008d3a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008d3e:	9105      	str	r1, [sp, #20]
 8008d40:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008d44:	9500      	str	r5, [sp, #0]
 8008d46:	f7f7 fbbf 	bl	80004c8 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7f7 fa03 	bl	800015c <__adddf3>
 8008d56:	3701      	adds	r7, #1
 8008d58:	4680      	mov	r8, r0
 8008d5a:	4689      	mov	r9, r1
 8008d5c:	e7e3      	b.n	8008d26 <__kernel_rem_pio2+0x3b2>
 8008d5e:	3c01      	subs	r4, #1
 8008d60:	e745      	b.n	8008bee <__kernel_rem_pio2+0x27a>
 8008d62:	f1ca 0200 	rsb	r2, sl, #0
 8008d66:	4640      	mov	r0, r8
 8008d68:	4649      	mov	r1, r9
 8008d6a:	f000 fb21 	bl	80093b0 <scalbn>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4ba3      	ldr	r3, [pc, #652]	; (8009000 <__kernel_rem_pio2+0x68c>)
 8008d72:	4604      	mov	r4, r0
 8008d74:	460d      	mov	r5, r1
 8008d76:	f7f7 fe2d 	bl	80009d4 <__aeabi_dcmpge>
 8008d7a:	b1f8      	cbz	r0, 8008dbc <__kernel_rem_pio2+0x448>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4ba1      	ldr	r3, [pc, #644]	; (8009004 <__kernel_rem_pio2+0x690>)
 8008d80:	4620      	mov	r0, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	f7f7 fba0 	bl	80004c8 <__aeabi_dmul>
 8008d88:	f7f7 fe4e 	bl	8000a28 <__aeabi_d2iz>
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	f7f7 fb31 	bl	80003f4 <__aeabi_i2d>
 8008d92:	2200      	movs	r2, #0
 8008d94:	4b9a      	ldr	r3, [pc, #616]	; (8009000 <__kernel_rem_pio2+0x68c>)
 8008d96:	f7f7 fb97 	bl	80004c8 <__aeabi_dmul>
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7f7 f9d9 	bl	8000158 <__aeabi_dsub>
 8008da6:	f7f7 fe3f 	bl	8000a28 <__aeabi_d2iz>
 8008daa:	1c7c      	adds	r4, r7, #1
 8008dac:	ab0c      	add	r3, sp, #48	; 0x30
 8008dae:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008db2:	f10a 0a18 	add.w	sl, sl, #24
 8008db6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008dba:	e720      	b.n	8008bfe <__kernel_rem_pio2+0x28a>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fe32 	bl	8000a28 <__aeabi_d2iz>
 8008dc4:	ab0c      	add	r3, sp, #48	; 0x30
 8008dc6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008dca:	463c      	mov	r4, r7
 8008dcc:	e717      	b.n	8008bfe <__kernel_rem_pio2+0x28a>
 8008dce:	ab0c      	add	r3, sp, #48	; 0x30
 8008dd0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dd4:	f7f7 fb0e 	bl	80003f4 <__aeabi_i2d>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	463b      	mov	r3, r7
 8008ddc:	f7f7 fb74 	bl	80004c8 <__aeabi_dmul>
 8008de0:	4652      	mov	r2, sl
 8008de2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008de6:	465b      	mov	r3, fp
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fb6c 	bl	80004c8 <__aeabi_dmul>
 8008df0:	3d01      	subs	r5, #1
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	e715      	b.n	8008c24 <__kernel_rem_pio2+0x2b0>
 8008df8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8008dfc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008e00:	f7f7 fb62 	bl	80004c8 <__aeabi_dmul>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f7f7 f9a6 	bl	800015c <__adddf3>
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	3701      	adds	r7, #1
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	429f      	cmp	r7, r3
 8008e1a:	dc01      	bgt.n	8008e20 <__kernel_rem_pio2+0x4ac>
 8008e1c:	42bd      	cmp	r5, r7
 8008e1e:	daeb      	bge.n	8008df8 <__kernel_rem_pio2+0x484>
 8008e20:	ab48      	add	r3, sp, #288	; 0x120
 8008e22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e26:	e9c3 ab00 	strd	sl, fp, [r3]
 8008e2a:	3501      	adds	r5, #1
 8008e2c:	e702      	b.n	8008c34 <__kernel_rem_pio2+0x2c0>
 8008e2e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d86c      	bhi.n	8008f0e <__kernel_rem_pio2+0x59a>
 8008e34:	e8df f003 	tbb	[pc, r3]
 8008e38:	022f2f59 	.word	0x022f2f59
 8008e3c:	9a06      	ldr	r2, [sp, #24]
 8008e3e:	ab48      	add	r3, sp, #288	; 0x120
 8008e40:	189d      	adds	r5, r3, r2
 8008e42:	46aa      	mov	sl, r5
 8008e44:	46a3      	mov	fp, r4
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	f300 8087 	bgt.w	8008f5c <__kernel_rem_pio2+0x5e8>
 8008e4e:	46a2      	mov	sl, r4
 8008e50:	f1ba 0f01 	cmp.w	sl, #1
 8008e54:	f300 809f 	bgt.w	8008f96 <__kernel_rem_pio2+0x622>
 8008e58:	2700      	movs	r7, #0
 8008e5a:	463e      	mov	r6, r7
 8008e5c:	9d06      	ldr	r5, [sp, #24]
 8008e5e:	ab48      	add	r3, sp, #288	; 0x120
 8008e60:	3508      	adds	r5, #8
 8008e62:	441d      	add	r5, r3
 8008e64:	2c01      	cmp	r4, #1
 8008e66:	f300 80b3 	bgt.w	8008fd0 <__kernel_rem_pio2+0x65c>
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8008e6e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8008e70:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8008e72:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 80b5 	bne.w	8008fe4 <__kernel_rem_pio2+0x670>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	9804      	ldr	r0, [sp, #16]
 8008e80:	e9c0 2300 	strd	r2, r3, [r0]
 8008e84:	4622      	mov	r2, r4
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	4633      	mov	r3, r6
 8008e90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008e94:	e03b      	b.n	8008f0e <__kernel_rem_pio2+0x59a>
 8008e96:	f04f 0c00 	mov.w	ip, #0
 8008e9a:	4626      	mov	r6, r4
 8008e9c:	4667      	mov	r7, ip
 8008e9e:	9d06      	ldr	r5, [sp, #24]
 8008ea0:	ab48      	add	r3, sp, #288	; 0x120
 8008ea2:	3508      	adds	r5, #8
 8008ea4:	441d      	add	r5, r3
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	da42      	bge.n	8008f30 <__kernel_rem_pio2+0x5bc>
 8008eaa:	9b00      	ldr	r3, [sp, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d049      	beq.n	8008f44 <__kernel_rem_pio2+0x5d0>
 8008eb0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8008eb4:	4662      	mov	r2, ip
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	9904      	ldr	r1, [sp, #16]
 8008eba:	2601      	movs	r6, #1
 8008ebc:	e9c1 2300 	strd	r2, r3, [r1]
 8008ec0:	a948      	add	r1, sp, #288	; 0x120
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec8:	f7f7 f946 	bl	8000158 <__aeabi_dsub>
 8008ecc:	4684      	mov	ip, r0
 8008ece:	460f      	mov	r7, r1
 8008ed0:	ad48      	add	r5, sp, #288	; 0x120
 8008ed2:	42b4      	cmp	r4, r6
 8008ed4:	da38      	bge.n	8008f48 <__kernel_rem_pio2+0x5d4>
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	b10b      	cbz	r3, 8008ede <__kernel_rem_pio2+0x56a>
 8008eda:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008ede:	4662      	mov	r2, ip
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	9904      	ldr	r1, [sp, #16]
 8008ee4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008ee8:	e011      	b.n	8008f0e <__kernel_rem_pio2+0x59a>
 8008eea:	2700      	movs	r7, #0
 8008eec:	463d      	mov	r5, r7
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	aa98      	add	r2, sp, #608	; 0x260
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	da0f      	bge.n	8008f1c <__kernel_rem_pio2+0x5a8>
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	b10b      	cbz	r3, 8008f04 <__kernel_rem_pio2+0x590>
 8008f00:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008f04:	463a      	mov	r2, r7
 8008f06:	462b      	mov	r3, r5
 8008f08:	9904      	ldr	r1, [sp, #16]
 8008f0a:	e9c1 2300 	strd	r2, r3, [r1]
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	f003 0007 	and.w	r0, r3, #7
 8008f14:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008f22:	4629      	mov	r1, r5
 8008f24:	f7f7 f91a 	bl	800015c <__adddf3>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	e7e3      	b.n	8008ef8 <__kernel_rem_pio2+0x584>
 8008f30:	4660      	mov	r0, ip
 8008f32:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 f910 	bl	800015c <__adddf3>
 8008f3c:	3e01      	subs	r6, #1
 8008f3e:	4684      	mov	ip, r0
 8008f40:	460f      	mov	r7, r1
 8008f42:	e7b0      	b.n	8008ea6 <__kernel_rem_pio2+0x532>
 8008f44:	4639      	mov	r1, r7
 8008f46:	e7b5      	b.n	8008eb4 <__kernel_rem_pio2+0x540>
 8008f48:	4660      	mov	r0, ip
 8008f4a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 f904 	bl	800015c <__adddf3>
 8008f54:	3601      	adds	r6, #1
 8008f56:	4684      	mov	ip, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	e7ba      	b.n	8008ed2 <__kernel_rem_pio2+0x55e>
 8008f5c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8008f60:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f6c:	f7f7 f8f6 	bl	800015c <__adddf3>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4606      	mov	r6, r0
 8008f76:	460f      	mov	r7, r1
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 f8ec 	bl	8000158 <__aeabi_dsub>
 8008f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f84:	f7f7 f8ea 	bl	800015c <__adddf3>
 8008f88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f90:	e9ca 6700 	strd	r6, r7, [sl]
 8008f94:	e757      	b.n	8008e46 <__kernel_rem_pio2+0x4d2>
 8008f96:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8008f9a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fa6:	f7f7 f8d9 	bl	800015c <__adddf3>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	f7f7 f8cf 	bl	8000158 <__aeabi_dsub>
 8008fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fbe:	f7f7 f8cd 	bl	800015c <__adddf3>
 8008fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fc6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008fca:	e9c5 8900 	strd	r8, r9, [r5]
 8008fce:	e73f      	b.n	8008e50 <__kernel_rem_pio2+0x4dc>
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	f7f7 f8c0 	bl	800015c <__adddf3>
 8008fdc:	3c01      	subs	r4, #1
 8008fde:	4607      	mov	r7, r0
 8008fe0:	460e      	mov	r6, r1
 8008fe2:	e73f      	b.n	8008e64 <__kernel_rem_pio2+0x4f0>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008fea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008fee:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008ff2:	601d      	str	r5, [r3, #0]
 8008ff4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008ff8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008ffc:	615e      	str	r6, [r3, #20]
 8008ffe:	e786      	b.n	8008f0e <__kernel_rem_pio2+0x59a>
 8009000:	41700000 	.word	0x41700000
 8009004:	3e700000 	.word	0x3e700000

08009008 <__kernel_sin>:
 8009008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	e9cd 2300 	strd	r2, r3, [sp]
 8009012:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009016:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800901a:	4682      	mov	sl, r0
 800901c:	460c      	mov	r4, r1
 800901e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009020:	da03      	bge.n	800902a <__kernel_sin+0x22>
 8009022:	f7f7 fd01 	bl	8000a28 <__aeabi_d2iz>
 8009026:	2800      	cmp	r0, #0
 8009028:	d050      	beq.n	80090cc <__kernel_sin+0xc4>
 800902a:	4652      	mov	r2, sl
 800902c:	4623      	mov	r3, r4
 800902e:	4650      	mov	r0, sl
 8009030:	4621      	mov	r1, r4
 8009032:	f7f7 fa49 	bl	80004c8 <__aeabi_dmul>
 8009036:	4606      	mov	r6, r0
 8009038:	460f      	mov	r7, r1
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4650      	mov	r0, sl
 8009040:	4621      	mov	r1, r4
 8009042:	f7f7 fa41 	bl	80004c8 <__aeabi_dmul>
 8009046:	a33e      	add	r3, pc, #248	; (adr r3, 8009140 <__kernel_sin+0x138>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	4680      	mov	r8, r0
 800904e:	4689      	mov	r9, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 fa38 	bl	80004c8 <__aeabi_dmul>
 8009058:	a33b      	add	r3, pc, #236	; (adr r3, 8009148 <__kernel_sin+0x140>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 f87b 	bl	8000158 <__aeabi_dsub>
 8009062:	4632      	mov	r2, r6
 8009064:	463b      	mov	r3, r7
 8009066:	f7f7 fa2f 	bl	80004c8 <__aeabi_dmul>
 800906a:	a339      	add	r3, pc, #228	; (adr r3, 8009150 <__kernel_sin+0x148>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 f874 	bl	800015c <__adddf3>
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	f7f7 fa26 	bl	80004c8 <__aeabi_dmul>
 800907c:	a336      	add	r3, pc, #216	; (adr r3, 8009158 <__kernel_sin+0x150>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f869 	bl	8000158 <__aeabi_dsub>
 8009086:	4632      	mov	r2, r6
 8009088:	463b      	mov	r3, r7
 800908a:	f7f7 fa1d 	bl	80004c8 <__aeabi_dmul>
 800908e:	a334      	add	r3, pc, #208	; (adr r3, 8009160 <__kernel_sin+0x158>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f862 	bl	800015c <__adddf3>
 8009098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800909c:	b9dd      	cbnz	r5, 80090d6 <__kernel_sin+0xce>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4630      	mov	r0, r6
 80090a4:	4639      	mov	r1, r7
 80090a6:	f7f7 fa0f 	bl	80004c8 <__aeabi_dmul>
 80090aa:	a32f      	add	r3, pc, #188	; (adr r3, 8009168 <__kernel_sin+0x160>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 f852 	bl	8000158 <__aeabi_dsub>
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	f7f7 fa06 	bl	80004c8 <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4650      	mov	r0, sl
 80090c2:	4621      	mov	r1, r4
 80090c4:	f7f7 f84a 	bl	800015c <__adddf3>
 80090c8:	4682      	mov	sl, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	4650      	mov	r0, sl
 80090ce:	4621      	mov	r1, r4
 80090d0:	b006      	add	sp, #24
 80090d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d6:	2200      	movs	r2, #0
 80090d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090dc:	4b24      	ldr	r3, [pc, #144]	; (8009170 <__kernel_sin+0x168>)
 80090de:	f7f7 f9f3 	bl	80004c8 <__aeabi_dmul>
 80090e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f7f7 f9eb 	bl	80004c8 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090fa:	f7f7 f82d 	bl	8000158 <__aeabi_dsub>
 80090fe:	4632      	mov	r2, r6
 8009100:	463b      	mov	r3, r7
 8009102:	f7f7 f9e1 	bl	80004c8 <__aeabi_dmul>
 8009106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910a:	f7f7 f825 	bl	8000158 <__aeabi_dsub>
 800910e:	a316      	add	r3, pc, #88	; (adr r3, 8009168 <__kernel_sin+0x160>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4606      	mov	r6, r0
 8009116:	460f      	mov	r7, r1
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 f9d4 	bl	80004c8 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 f818 	bl	800015c <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4650      	mov	r0, sl
 8009132:	4621      	mov	r1, r4
 8009134:	f7f7 f810 	bl	8000158 <__aeabi_dsub>
 8009138:	e7c6      	b.n	80090c8 <__kernel_sin+0xc0>
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	5acfd57c 	.word	0x5acfd57c
 8009144:	3de5d93a 	.word	0x3de5d93a
 8009148:	8a2b9ceb 	.word	0x8a2b9ceb
 800914c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009150:	57b1fe7d 	.word	0x57b1fe7d
 8009154:	3ec71de3 	.word	0x3ec71de3
 8009158:	19c161d5 	.word	0x19c161d5
 800915c:	3f2a01a0 	.word	0x3f2a01a0
 8009160:	1110f8a6 	.word	0x1110f8a6
 8009164:	3f811111 	.word	0x3f811111
 8009168:	55555549 	.word	0x55555549
 800916c:	3fc55555 	.word	0x3fc55555
 8009170:	3fe00000 	.word	0x3fe00000

08009174 <finite>:
 8009174:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009178:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800917c:	0fc0      	lsrs	r0, r0, #31
 800917e:	4770      	bx	lr

08009180 <floor>:
 8009180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009184:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009188:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800918c:	2e13      	cmp	r6, #19
 800918e:	4607      	mov	r7, r0
 8009190:	460b      	mov	r3, r1
 8009192:	460c      	mov	r4, r1
 8009194:	4605      	mov	r5, r0
 8009196:	dc35      	bgt.n	8009204 <floor+0x84>
 8009198:	2e00      	cmp	r6, #0
 800919a:	da16      	bge.n	80091ca <floor+0x4a>
 800919c:	a336      	add	r3, pc, #216	; (adr r3, 8009278 <floor+0xf8>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f6 ffdb 	bl	800015c <__adddf3>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	f7f7 fc1d 	bl	80009e8 <__aeabi_dcmpgt>
 80091ae:	b148      	cbz	r0, 80091c4 <floor+0x44>
 80091b0:	2c00      	cmp	r4, #0
 80091b2:	da5b      	bge.n	800926c <floor+0xec>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80091ba:	4a31      	ldr	r2, [pc, #196]	; (8009280 <floor+0x100>)
 80091bc:	433b      	orrs	r3, r7
 80091be:	42ab      	cmp	r3, r5
 80091c0:	bf18      	it	ne
 80091c2:	4614      	movne	r4, r2
 80091c4:	4623      	mov	r3, r4
 80091c6:	462f      	mov	r7, r5
 80091c8:	e026      	b.n	8009218 <floor+0x98>
 80091ca:	4a2e      	ldr	r2, [pc, #184]	; (8009284 <floor+0x104>)
 80091cc:	fa42 f806 	asr.w	r8, r2, r6
 80091d0:	ea01 0208 	and.w	r2, r1, r8
 80091d4:	4302      	orrs	r2, r0
 80091d6:	d01f      	beq.n	8009218 <floor+0x98>
 80091d8:	a327      	add	r3, pc, #156	; (adr r3, 8009278 <floor+0xf8>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f6 ffbd 	bl	800015c <__adddf3>
 80091e2:	2200      	movs	r2, #0
 80091e4:	2300      	movs	r3, #0
 80091e6:	f7f7 fbff 	bl	80009e8 <__aeabi_dcmpgt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0ea      	beq.n	80091c4 <floor+0x44>
 80091ee:	2c00      	cmp	r4, #0
 80091f0:	bfbe      	ittt	lt
 80091f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80091f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80091fa:	19a4      	addlt	r4, r4, r6
 80091fc:	ea24 0408 	bic.w	r4, r4, r8
 8009200:	2500      	movs	r5, #0
 8009202:	e7df      	b.n	80091c4 <floor+0x44>
 8009204:	2e33      	cmp	r6, #51	; 0x33
 8009206:	dd0b      	ble.n	8009220 <floor+0xa0>
 8009208:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800920c:	d104      	bne.n	8009218 <floor+0x98>
 800920e:	4602      	mov	r2, r0
 8009210:	f7f6 ffa4 	bl	800015c <__adddf3>
 8009214:	4607      	mov	r7, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4638      	mov	r0, r7
 800921a:	4619      	mov	r1, r3
 800921c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009228:	fa22 f808 	lsr.w	r8, r2, r8
 800922c:	ea18 0f00 	tst.w	r8, r0
 8009230:	d0f2      	beq.n	8009218 <floor+0x98>
 8009232:	a311      	add	r3, pc, #68	; (adr r3, 8009278 <floor+0xf8>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f6 ff90 	bl	800015c <__adddf3>
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f7f7 fbd2 	bl	80009e8 <__aeabi_dcmpgt>
 8009244:	2800      	cmp	r0, #0
 8009246:	d0bd      	beq.n	80091c4 <floor+0x44>
 8009248:	2c00      	cmp	r4, #0
 800924a:	da02      	bge.n	8009252 <floor+0xd2>
 800924c:	2e14      	cmp	r6, #20
 800924e:	d103      	bne.n	8009258 <floor+0xd8>
 8009250:	3401      	adds	r4, #1
 8009252:	ea25 0508 	bic.w	r5, r5, r8
 8009256:	e7b5      	b.n	80091c4 <floor+0x44>
 8009258:	2301      	movs	r3, #1
 800925a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800925e:	fa03 f606 	lsl.w	r6, r3, r6
 8009262:	4435      	add	r5, r6
 8009264:	42bd      	cmp	r5, r7
 8009266:	bf38      	it	cc
 8009268:	18e4      	addcc	r4, r4, r3
 800926a:	e7f2      	b.n	8009252 <floor+0xd2>
 800926c:	2500      	movs	r5, #0
 800926e:	462c      	mov	r4, r5
 8009270:	e7a8      	b.n	80091c4 <floor+0x44>
 8009272:	bf00      	nop
 8009274:	f3af 8000 	nop.w
 8009278:	8800759c 	.word	0x8800759c
 800927c:	7e37e43c 	.word	0x7e37e43c
 8009280:	bff00000 	.word	0xbff00000
 8009284:	000fffff 	.word	0x000fffff

08009288 <matherr>:
 8009288:	2000      	movs	r0, #0
 800928a:	4770      	bx	lr

0800928c <nan>:
 800928c:	2000      	movs	r0, #0
 800928e:	4901      	ldr	r1, [pc, #4]	; (8009294 <nan+0x8>)
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	7ff80000 	.word	0x7ff80000

08009298 <rint>:
 8009298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800929a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800929e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80092a2:	f1bc 0f13 	cmp.w	ip, #19
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	460b      	mov	r3, r1
 80092ac:	4606      	mov	r6, r0
 80092ae:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80092b2:	dc5a      	bgt.n	800936a <rint+0xd2>
 80092b4:	f1bc 0f00 	cmp.w	ip, #0
 80092b8:	da2b      	bge.n	8009312 <rint+0x7a>
 80092ba:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80092be:	4302      	orrs	r2, r0
 80092c0:	d023      	beq.n	800930a <rint+0x72>
 80092c2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80092c6:	4302      	orrs	r2, r0
 80092c8:	4256      	negs	r6, r2
 80092ca:	4316      	orrs	r6, r2
 80092cc:	0c4b      	lsrs	r3, r1, #17
 80092ce:	0b36      	lsrs	r6, r6, #12
 80092d0:	4934      	ldr	r1, [pc, #208]	; (80093a4 <rint+0x10c>)
 80092d2:	045b      	lsls	r3, r3, #17
 80092d4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80092d8:	ea46 0503 	orr.w	r5, r6, r3
 80092dc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80092e0:	4602      	mov	r2, r0
 80092e2:	462b      	mov	r3, r5
 80092e4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ff36 	bl	800015c <__adddf3>
 80092f0:	e9cd 0100 	strd	r0, r1, [sp]
 80092f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092f8:	462b      	mov	r3, r5
 80092fa:	4622      	mov	r2, r4
 80092fc:	f7f6 ff2c 	bl	8000158 <__aeabi_dsub>
 8009300:	4604      	mov	r4, r0
 8009302:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009306:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	b003      	add	sp, #12
 8009310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009312:	4a25      	ldr	r2, [pc, #148]	; (80093a8 <rint+0x110>)
 8009314:	fa42 f20c 	asr.w	r2, r2, ip
 8009318:	4011      	ands	r1, r2
 800931a:	4301      	orrs	r1, r0
 800931c:	d0f5      	beq.n	800930a <rint+0x72>
 800931e:	0852      	lsrs	r2, r2, #1
 8009320:	ea05 0102 	and.w	r1, r5, r2
 8009324:	ea50 0601 	orrs.w	r6, r0, r1
 8009328:	d00c      	beq.n	8009344 <rint+0xac>
 800932a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800932e:	f1bc 0f13 	cmp.w	ip, #19
 8009332:	bf0c      	ite	eq
 8009334:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009338:	2600      	movne	r6, #0
 800933a:	ea25 0202 	bic.w	r2, r5, r2
 800933e:	fa43 f30c 	asr.w	r3, r3, ip
 8009342:	4313      	orrs	r3, r2
 8009344:	4917      	ldr	r1, [pc, #92]	; (80093a4 <rint+0x10c>)
 8009346:	4632      	mov	r2, r6
 8009348:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800934c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7f6 ff02 	bl	800015c <__adddf3>
 8009358:	e9cd 0100 	strd	r0, r1, [sp]
 800935c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	f7f6 fef8 	bl	8000158 <__aeabi_dsub>
 8009368:	e008      	b.n	800937c <rint+0xe4>
 800936a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800936e:	dd08      	ble.n	8009382 <rint+0xea>
 8009370:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8009374:	d1c9      	bne.n	800930a <rint+0x72>
 8009376:	4602      	mov	r2, r0
 8009378:	f7f6 fef0 	bl	800015c <__adddf3>
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	e7c3      	b.n	800930a <rint+0x72>
 8009382:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	40ca      	lsrs	r2, r1
 800938c:	4210      	tst	r0, r2
 800938e:	d0bc      	beq.n	800930a <rint+0x72>
 8009390:	0852      	lsrs	r2, r2, #1
 8009392:	4210      	tst	r0, r2
 8009394:	bf1f      	itttt	ne
 8009396:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800939a:	ea20 0202 	bicne.w	r2, r0, r2
 800939e:	410e      	asrne	r6, r1
 80093a0:	4316      	orrne	r6, r2
 80093a2:	e7cf      	b.n	8009344 <rint+0xac>
 80093a4:	08009890 	.word	0x08009890
 80093a8:	000fffff 	.word	0x000fffff
 80093ac:	00000000 	.word	0x00000000

080093b0 <scalbn>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	4616      	mov	r6, r2
 80093b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093b8:	4604      	mov	r4, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	460b      	mov	r3, r1
 80093be:	b982      	cbnz	r2, 80093e2 <scalbn+0x32>
 80093c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093c4:	4303      	orrs	r3, r0
 80093c6:	d034      	beq.n	8009432 <scalbn+0x82>
 80093c8:	4b2d      	ldr	r3, [pc, #180]	; (8009480 <scalbn+0xd0>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f87c 	bl	80004c8 <__aeabi_dmul>
 80093d0:	4b2c      	ldr	r3, [pc, #176]	; (8009484 <scalbn+0xd4>)
 80093d2:	4604      	mov	r4, r0
 80093d4:	429e      	cmp	r6, r3
 80093d6:	460d      	mov	r5, r1
 80093d8:	da0d      	bge.n	80093f6 <scalbn+0x46>
 80093da:	a325      	add	r3, pc, #148	; (adr r3, 8009470 <scalbn+0xc0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	e01c      	b.n	800941c <scalbn+0x6c>
 80093e2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80093e6:	42ba      	cmp	r2, r7
 80093e8:	d109      	bne.n	80093fe <scalbn+0x4e>
 80093ea:	4602      	mov	r2, r0
 80093ec:	f7f6 feb6 	bl	800015c <__adddf3>
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	e01d      	b.n	8009432 <scalbn+0x82>
 80093f6:	460b      	mov	r3, r1
 80093f8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093fc:	3a36      	subs	r2, #54	; 0x36
 80093fe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009402:	4432      	add	r2, r6
 8009404:	428a      	cmp	r2, r1
 8009406:	dd0c      	ble.n	8009422 <scalbn+0x72>
 8009408:	4622      	mov	r2, r4
 800940a:	462b      	mov	r3, r5
 800940c:	a11a      	add	r1, pc, #104	; (adr r1, 8009478 <scalbn+0xc8>)
 800940e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009412:	f000 f83b 	bl	800948c <copysign>
 8009416:	a318      	add	r3, pc, #96	; (adr r3, 8009478 <scalbn+0xc8>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f7 f854 	bl	80004c8 <__aeabi_dmul>
 8009420:	e7e6      	b.n	80093f0 <scalbn+0x40>
 8009422:	2a00      	cmp	r2, #0
 8009424:	dd08      	ble.n	8009438 <scalbn+0x88>
 8009426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800942a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800942e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009438:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800943c:	da0b      	bge.n	8009456 <scalbn+0xa6>
 800943e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009442:	429e      	cmp	r6, r3
 8009444:	4622      	mov	r2, r4
 8009446:	462b      	mov	r3, r5
 8009448:	dce0      	bgt.n	800940c <scalbn+0x5c>
 800944a:	a109      	add	r1, pc, #36	; (adr r1, 8009470 <scalbn+0xc0>)
 800944c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009450:	f000 f81c 	bl	800948c <copysign>
 8009454:	e7c1      	b.n	80093da <scalbn+0x2a>
 8009456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800945a:	3236      	adds	r2, #54	; 0x36
 800945c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009460:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	2200      	movs	r2, #0
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <scalbn+0xd8>)
 800946c:	e7d6      	b.n	800941c <scalbn+0x6c>
 800946e:	bf00      	nop
 8009470:	c2f8f359 	.word	0xc2f8f359
 8009474:	01a56e1f 	.word	0x01a56e1f
 8009478:	8800759c 	.word	0x8800759c
 800947c:	7e37e43c 	.word	0x7e37e43c
 8009480:	43500000 	.word	0x43500000
 8009484:	ffff3cb0 	.word	0xffff3cb0
 8009488:	3c900000 	.word	0x3c900000

0800948c <copysign>:
 800948c:	b530      	push	{r4, r5, lr}
 800948e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009496:	ea42 0503 	orr.w	r5, r2, r3
 800949a:	4629      	mov	r1, r5
 800949c:	bd30      	pop	{r4, r5, pc}
	...

080094a0 <_init>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr

080094ac <_fini>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr
