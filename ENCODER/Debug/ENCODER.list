
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000661c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080067a8  080067a8  000167a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006850  08006850  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006858  08006858  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000090  080068ec  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080068ec  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6bd  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a9  00000000  00000000  0002b779  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020986  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087e9  00000000  00000000  0004f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9222  00000000  00000000  000579cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120bf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  00120c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800678c 	.word	0x0800678c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800678c 	.word	0x0800678c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <HAL_GPIO_EXTI_Callback>:
int salida2;




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e9e:	f001 ff01 	bl	8002ca4 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00b      	beq.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x30>
final_carrera = 1;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x70>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x74>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x74>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x36>
	}
	else{
		final_carrera = 0;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
	}


	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)){
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000eca:	f001 feeb 	bl	8002ca4 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <HAL_GPIO_EXTI_Callback+0x5c>
	final_carrera_2 = 1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
		final_carrera_2= 0;
}
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x62>
		final_carrera_2= 0;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x78>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020000 	.word	0x40020000
 8000f00:	2000029c 	.word	0x2000029c
 8000f04:	200000f4 	.word	0x200000f4
 8000f08:	20000238 	.word	0x20000238
 8000f0c:	2000019c 	.word	0x2000019c

08000f10 <HAL_UART_RxCpltCallback>:

int senalbase;
int senalcodo;
int senalservo;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]


if (receptor.selector == 'M'){
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f1a:	7a9b      	ldrb	r3, [r3, #10]
 8000f1c:	2b4d      	cmp	r3, #77	; 0x4d
 8000f1e:	d10d      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0x2c>
	 HAL_UART_Receive_IT(&huart5, (uint8_t*)motorbase.buffer,  4* sizeof(uint8_t ));
 8000f20:	2204      	movs	r2, #4
 8000f22:	4921      	ldr	r1, [pc, #132]	; (8000fa8 <HAL_UART_RxCpltCallback+0x98>)
 8000f24:	4821      	ldr	r0, [pc, #132]	; (8000fac <HAL_UART_RxCpltCallback+0x9c>)
 8000f26:	f003 f8f4 	bl	8004112 <HAL_UART_Receive_IT>
	 //enviar como ASCI para ganar resolucion y luego convertir
	 receptor.selector = 0;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	729a      	strb	r2, [r3, #10]
	 prueba =1;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
	 senalbase =1;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
}

if(receptor.selector == 's'){
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f3e:	7a9b      	ldrb	r3, [r3, #10]
 8000f40:	2b73      	cmp	r3, #115	; 0x73
 8000f42:	d10a      	bne.n	8000f5a <HAL_UART_RxCpltCallback+0x4a>
	HAL_UART_Receive_IT(&huart5,(uint8_t*) servomotor.buffer,   4*sizeof(char));
 8000f44:	2204      	movs	r2, #4
 8000f46:	491c      	ldr	r1, [pc, #112]	; (8000fb8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f48:	4818      	ldr	r0, [pc, #96]	; (8000fac <HAL_UART_RxCpltCallback+0x9c>)
 8000f4a:	f003 f8e2 	bl	8004112 <HAL_UART_Receive_IT>
	receptor.selector = 0;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	729a      	strb	r2, [r3, #10]
	senalservo = 1;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_RxCpltCallback+0xac>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
}

if(receptor.selector == 'm'){
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f5c:	7a9b      	ldrb	r3, [r3, #10]
 8000f5e:	2b6d      	cmp	r3, #109	; 0x6d
 8000f60:	d10a      	bne.n	8000f78 <HAL_UART_RxCpltCallback+0x68>

	HAL_UART_Receive_IT(&huart5,(uint8_t*) motorcodo.buffer,   4*sizeof(char));
 8000f62:	2204      	movs	r2, #4
 8000f64:	4916      	ldr	r1, [pc, #88]	; (8000fc0 <HAL_UART_RxCpltCallback+0xb0>)
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <HAL_UART_RxCpltCallback+0x9c>)
 8000f68:	f003 f8d3 	bl	8004112 <HAL_UART_Receive_IT>
	receptor.selector = 0;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	729a      	strb	r2, [r3, #10]
	senalcodo = 1;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
}
if(receptor.selector == 'S'){
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f7a:	7a9b      	ldrb	r3, [r3, #10]
 8000f7c:	2b53      	cmp	r3, #83	; 0x53
 8000f7e:	d108      	bne.n	8000f92 <HAL_UART_RxCpltCallback+0x82>

	HAL_UART_Receive_IT(&huart5,(uint8_t*) gripper.buffer,   4*sizeof(char));
 8000f80:	2204      	movs	r2, #4
 8000f82:	4911      	ldr	r1, [pc, #68]	; (8000fc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <HAL_UART_RxCpltCallback+0x9c>)
 8000f86:	f003 f8c4 	bl	8004112 <HAL_UART_Receive_IT>
	receptor.selector = 0;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_UART_RxCpltCallback+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	729a      	strb	r2, [r3, #10]

//	 receptor.pos++;
 // receptor.buff_pointer =  &receptor.buffer[(receptor.pos)  % TAMBUFFER];

//	HAL_UART_Receive_IT(&huart5, &buffe,  4* sizeof(char));
}
 8000f90:	e004      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x8c>
else HAL_UART_Receive_IT(&huart5, &receptor.selector,  sizeof(uint8_t ));
 8000f92:	2201      	movs	r2, #1
 8000f94:	490d      	ldr	r1, [pc, #52]	; (8000fcc <HAL_UART_RxCpltCallback+0xbc>)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_UART_RxCpltCallback+0x9c>)
 8000f98:	f003 f8bb 	bl	8004112 <HAL_UART_Receive_IT>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000d8 	.word	0x200000d8
 8000fa8:	200000cc 	.word	0x200000cc
 8000fac:	200001ec 	.word	0x200001ec
 8000fb0:	200000c8 	.word	0x200000c8
 8000fb4:	20000298 	.word	0x20000298
 8000fb8:	200002f4 	.word	0x200002f4
 8000fbc:	20000308 	.word	0x20000308
 8000fc0:	20000190 	.word	0x20000190
 8000fc4:	20000314 	.word	0x20000314
 8000fc8:	20000248 	.word	0x20000248
 8000fcc:	200000e2 	.word	0x200000e2

08000fd0 <resetBuffer>:

void resetBuffer(uint8_t* buffer){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i<sizeof(buffer) ; i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e007      	b.n	8000fee <resetBuffer+0x1e>
		  buffer[i] = '0';
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2230      	movs	r2, #48	; 0x30
 8000fe6:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<sizeof(buffer) ; i++){
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d9f4      	bls.n	8000fde <resetBuffer+0xe>
	  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <CaclValue>:

	//}

int CaclValue(Lector motor){
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int i,value;
	if(motor.buffer[0] == '-'){
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	2b2d      	cmp	r3, #45	; 0x2d
 8001010:	d122      	bne.n	8001058 <CaclValue+0x58>
		for( i= 0;i<4;i++){
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00a      	b.n	800102e <CaclValue+0x2e>
		if(motor.buffer[i] == '.')
 8001018:	1d3a      	adds	r2, r7, #4
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b2e      	cmp	r3, #46	; 0x2e
 8001022:	d101      	bne.n	8001028 <CaclValue+0x28>
			{
			motor.coma= i;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	60bb      	str	r3, [r7, #8]
		for( i= 0;i<4;i++){
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddf1      	ble.n	8001018 <CaclValue+0x18>
			}
		}

		if(motor.coma == 3)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d10a      	bne.n	8001050 <CaclValue+0x50>
			value= (-1)*((motor.buffer[1]-48)*10 + (motor.buffer[2]-48)) ;
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	3b30      	subs	r3, #48	; 0x30
 800103e:	f06f 0209 	mvn.w	r2, #9
 8001042:	fb02 f203 	mul.w	r2, r2, r3
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	3b30      	subs	r3, #48	; 0x30
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e003      	b.n	8001058 <CaclValue+0x58>

		else
			value = (-1)*( motor.buffer[1]-48) ;
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001056:	613b      	str	r3, [r7, #16]


	}

	if(motor.buffer[0] != '-'){
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	2b2d      	cmp	r3, #45	; 0x2d
 800105c:	d025      	beq.n	80010aa <CaclValue+0xaa>
		motor.coma = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
		for( i=0;i<4;i++){
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e00a      	b.n	800107e <CaclValue+0x7e>

			if(motor.buffer[i] == '.')
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b2e      	cmp	r3, #46	; 0x2e
 8001072:	d101      	bne.n	8001078 <CaclValue+0x78>
				{
				motor.coma= i;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	60bb      	str	r3, [r7, #8]
		for( i=0;i<4;i++){
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b03      	cmp	r3, #3
 8001082:	ddf1      	ble.n	8001068 <CaclValue+0x68>
				}
			}
		if(motor.coma == 2)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d10c      	bne.n	80010a4 <CaclValue+0xa4>
				value = ((motor.buffer[0]-48)*10 + (motor.buffer[1]-48)) ;
 800108a:	793b      	ldrb	r3, [r7, #4]
 800108c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	461a      	mov	r2, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	3b30      	subs	r3, #48	; 0x30
 800109e:	4413      	add	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e002      	b.n	80010aa <CaclValue+0xaa>
		//if(motor.buffer[3] == 0)
				//		value = ((motor.buffer[0]-48)*10 + (motor.buffer[1]-48)) ;

			else
				value= (motor.buffer[0]-48)  ;
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	3b30      	subs	r3, #48	; 0x30
 80010a8:	613b      	str	r3, [r7, #16]


	}
	return value;
 80010aa:	693b      	ldr	r3, [r7, #16]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <PID>:

 // buscar como reiniciar el buffer cuando termine de leer ; hacer por ej buff_pointer- buff[0] % BUFFSIZE
 // o hacr una struct que tenga un numero con la posicion y operar con ese num .
// lee mal al principio , hay que tmetelre un epacio y lo hce 2veces(inicilaizacion en non blocking?)
  // el segundo caracter no envia bien -> so  se muevee bien en memoria? se salta la pos 2 .
int PID (int consigna, int lectura){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	int salida;
   // float integrador;
	error = consigna-lectura;
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <PID+0x74>)
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	proporcional = a*error;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <PID+0x78>)
 80010d8:	ed93 7a00 	vldr	s14, [r3]
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <PID+0x74>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <PID+0x7c>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
    integrador = (b*error);
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <PID+0x80>)
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <PID+0x74>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <PID+0x84>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	salida = proporcional + integrador;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <PID+0x7c>)
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <PID+0x84>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 3a90 	vmov	r3, s15
 800111a:	60fb      	str	r3, [r7, #12]
return salida;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200002a0 	.word	0x200002a0
 8001130:	20000000 	.word	0x20000000
 8001134:	20000140 	.word	0x20000140
 8001138:	20000008 	.word	0x20000008
 800113c:	200000ac 	.word	0x200000ac

08001140 <PID2>:

int PID2 (int consigna, int lectura){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	int salida;
   // float integrador;
	error = consigna-lectura;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <PID2+0x7c>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
	proporcional = a2*error;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <PID2+0x80>)
 8001160:	ed93 7a00 	vldr	s14, [r3]
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <PID2+0x7c>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <PID2+0x84>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
    integrador2 += (b2*error);
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <PID2+0x88>)
 8001176:	ed93 7a00 	vldr	s14, [r3]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <PID2+0x7c>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <PID2+0x8c>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <PID2+0x8c>)
 8001190:	edc3 7a00 	vstr	s15, [r3]
	salida = proporcional + integrador;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <PID2+0x84>)
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <PID2+0x90>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a8:	ee17 3a90 	vmov	r3, s15
 80011ac:	60fb      	str	r3, [r7, #12]
return salida;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	200002a0 	.word	0x200002a0
 80011c0:	20000004 	.word	0x20000004
 80011c4:	20000140 	.word	0x20000140
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	200000b0 	.word	0x200000b0
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	00000000 	.word	0x00000000

080011d8 <inverseKinematic>:
  float y_c;
  float z_c;
  float L1 = 27,L2 = 17;
  double a_c;
double r;
 void inverseKinematic(float x,float y,float z){
 80011d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	ed87 0a03 	vstr	s0, [r7, #12]
 80011e4:	edc7 0a02 	vstr	s1, [r7, #8]
 80011e8:	ed87 1a01 	vstr	s2, [r7, #4]

	  float r = sqrt((x*x) + (y*y));
 80011ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80011fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f940 	bl	8000490 <__aeabi_f2d>
 8001210:	4603      	mov	r3, r0
 8001212:	460c      	mov	r4, r1
 8001214:	ec44 3b10 	vmov	d0, r3, r4
 8001218:	f004 f928 	bl	800546c <sqrt>
 800121c:	ec54 3b10 	vmov	r3, r4, d0
 8001220:	4618      	mov	r0, r3
 8001222:	4621      	mov	r1, r4
 8001224:	f7ff fc64 	bl	8000af0 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	617b      	str	r3, [r7, #20]
	  float a = sqrt((r*r) + (z*z));
 800122c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001230:	edd7 7a05 	vldr	s15, [r7, #20]
 8001234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001238:	edd7 6a01 	vldr	s13, [r7, #4]
 800123c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f920 	bl	8000490 <__aeabi_f2d>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	ec44 3b10 	vmov	d0, r3, r4
 8001258:	f004 f908 	bl	800546c <sqrt>
 800125c:	ec54 3b10 	vmov	r3, r4, d0
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	f7ff fc44 	bl	8000af0 <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	613b      	str	r3, [r7, #16]
	 x_c = atan(y/x);
 800126c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001278:	ee16 0a90 	vmov	r0, s13
 800127c:	f7ff f908 	bl	8000490 <__aeabi_f2d>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	ec44 3b10 	vmov	d0, r3, r4
 8001288:	f003 fd7e 	bl	8004d88 <atan>
 800128c:	ec54 3b10 	vmov	r3, r4, d0
 8001290:	4618      	mov	r0, r3
 8001292:	4621      	mov	r1, r4
 8001294:	f7ff fc2c 	bl	8000af0 <__aeabi_d2f>
 8001298:	4602      	mov	r2, r0
 800129a:	4b75      	ldr	r3, [pc, #468]	; (8001470 <inverseKinematic+0x298>)
 800129c:	601a      	str	r2, [r3, #0]
	y_c =  acos((  pow(a,2) -(pow(L1,2)) - (pow(L2,2))  ) / (2*L1*L2)  );
 800129e:	6938      	ldr	r0, [r7, #16]
 80012a0:	f7ff f8f6 	bl	8000490 <__aeabi_f2d>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8001468 <inverseKinematic+0x290>
 80012ac:	ec44 3b10 	vmov	d0, r3, r4
 80012b0:	f003 ff6c 	bl	800518c <pow>
 80012b4:	ec55 4b10 	vmov	r4, r5, d0
 80012b8:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <inverseKinematic+0x29c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8e7 	bl	8000490 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8001468 <inverseKinematic+0x290>
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f003 ff5d 	bl	800518c <pow>
 80012d2:	ec53 2b10 	vmov	r2, r3, d0
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7fe ff79 	bl	80001d0 <__aeabi_dsub>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	4625      	mov	r5, r4
 80012e4:	461c      	mov	r4, r3
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <inverseKinematic+0x2a0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f8d0 	bl	8000490 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001468 <inverseKinematic+0x290>
 80012f8:	ec43 2b10 	vmov	d0, r2, r3
 80012fc:	f003 ff46 	bl	800518c <pow>
 8001300:	ec53 2b10 	vmov	r2, r3, d0
 8001304:	4620      	mov	r0, r4
 8001306:	4629      	mov	r1, r5
 8001308:	f7fe ff62 	bl	80001d0 <__aeabi_dsub>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4625      	mov	r5, r4
 8001312:	461c      	mov	r4, r3
 8001314:	4b57      	ldr	r3, [pc, #348]	; (8001474 <inverseKinematic+0x29c>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <inverseKinematic+0x2a0>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f8b0 	bl	8000490 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff fa2c 	bl	8000794 <__aeabi_ddiv>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	ec44 3b17 	vmov	d7, r3, r4
 8001344:	eeb0 0a47 	vmov.f32	s0, s14
 8001348:	eef0 0a67 	vmov.f32	s1, s15
 800134c:	f003 fec6 	bl	80050dc <acos>
 8001350:	ec54 3b10 	vmov	r3, r4, d0
 8001354:	4618      	mov	r0, r3
 8001356:	4621      	mov	r1, r4
 8001358:	f7ff fbca 	bl	8000af0 <__aeabi_d2f>
 800135c:	4602      	mov	r2, r0
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <inverseKinematic+0x2a4>)
 8001360:	601a      	str	r2, [r3, #0]
	 z_c = atan(z/r) - acos( ((pow(a,2)) + (pow(L1,2)) - (pow(L2,2))     )   /(2*L1*a) );
 8001362:	ed97 7a01 	vldr	s14, [r7, #4]
 8001366:	edd7 7a05 	vldr	s15, [r7, #20]
 800136a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800136e:	ee16 0a90 	vmov	r0, s13
 8001372:	f7ff f88d 	bl	8000490 <__aeabi_f2d>
 8001376:	4603      	mov	r3, r0
 8001378:	460c      	mov	r4, r1
 800137a:	ec44 3b10 	vmov	d0, r3, r4
 800137e:	f003 fd03 	bl	8004d88 <atan>
 8001382:	ec59 8b10 	vmov	r8, r9, d0
 8001386:	6938      	ldr	r0, [r7, #16]
 8001388:	f7ff f882 	bl	8000490 <__aeabi_f2d>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001468 <inverseKinematic+0x290>
 8001394:	ec44 3b10 	vmov	d0, r3, r4
 8001398:	f003 fef8 	bl	800518c <pow>
 800139c:	ec55 4b10 	vmov	r4, r5, d0
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <inverseKinematic+0x29c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f873 	bl	8000490 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001468 <inverseKinematic+0x290>
 80013b2:	ec43 2b10 	vmov	d0, r2, r3
 80013b6:	f003 fee9 	bl	800518c <pow>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe ff07 	bl	80001d4 <__adddf3>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4625      	mov	r5, r4
 80013cc:	461c      	mov	r4, r3
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <inverseKinematic+0x2a0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f85c 	bl	8000490 <__aeabi_f2d>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001468 <inverseKinematic+0x290>
 80013e0:	ec43 2b10 	vmov	d0, r2, r3
 80013e4:	f003 fed2 	bl	800518c <pow>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7fe feee 	bl	80001d0 <__aeabi_dsub>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4625      	mov	r5, r4
 80013fa:	461c      	mov	r4, r3
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <inverseKinematic+0x29c>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001406:	edd7 7a04 	vldr	s15, [r7, #16]
 800140a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f83d 	bl	8000490 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7ff f9b9 	bl	8000794 <__aeabi_ddiv>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	ec44 3b17 	vmov	d7, r3, r4
 800142a:	eeb0 0a47 	vmov.f32	s0, s14
 800142e:	eef0 0a67 	vmov.f32	s1, s15
 8001432:	f003 fe53 	bl	80050dc <acos>
 8001436:	ec54 3b10 	vmov	r3, r4, d0
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	4640      	mov	r0, r8
 8001440:	4649      	mov	r1, r9
 8001442:	f7fe fec5 	bl	80001d0 <__aeabi_dsub>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	4618      	mov	r0, r3
 800144c:	4621      	mov	r1, r4
 800144e:	f7ff fb4f 	bl	8000af0 <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <inverseKinematic+0x2a8>)
 8001456:	601a      	str	r2, [r3, #0]


 }
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001462:	bf00      	nop
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	40000000 	.word	0x40000000
 8001470:	200000ec 	.word	0x200000ec
 8001474:	20000010 	.word	0x20000010
 8001478:	20000014 	.word	0x20000014
 800147c:	20000310 	.word	0x20000310
 8001480:	20000138 	.word	0x20000138
 8001484:	00000000 	.word	0x00000000

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b598      	push	{r3, r4, r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f001 f8a8 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 fae0 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 fda4 	bl	8001fe0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001498:	f000 fbee 	bl	8001c78 <MX_TIM2_Init>
  MX_TIM4_Init();
 800149c:	f000 fc94 	bl	8001dc8 <MX_TIM4_Init>
  MX_UART5_Init();
 80014a0:	f000 fd74 	bl	8001f8c <MX_UART5_Init>
  MX_TIM3_Init();
 80014a4:	f000 fc3c 	bl	8001d20 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014a8:	f000 fb3e 	bl	8001b28 <MX_TIM1_Init>
  MX_TIM5_Init();
 80014ac:	f000 fd08 	bl	8001ec0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014b0:	2100      	movs	r1, #0
 80014b2:	4895      	ldr	r0, [pc, #596]	; (8001708 <main+0x280>)
 80014b4:	f002 f8ce 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014b8:	2104      	movs	r1, #4
 80014ba:	4893      	ldr	r0, [pc, #588]	; (8001708 <main+0x280>)
 80014bc:	f002 f8ca 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014c0:	2108      	movs	r1, #8
 80014c2:	4891      	ldr	r0, [pc, #580]	; (8001708 <main+0x280>)
 80014c4:	f002 f8c6 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014c8:	210c      	movs	r1, #12
 80014ca:	488f      	ldr	r0, [pc, #572]	; (8001708 <main+0x280>)
 80014cc:	f002 f8c2 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014d0:	2100      	movs	r1, #0
 80014d2:	488e      	ldr	r0, [pc, #568]	; (800170c <main+0x284>)
 80014d4:	f002 f8be 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014d8:	2104      	movs	r1, #4
 80014da:	488c      	ldr	r0, [pc, #560]	; (800170c <main+0x284>)
 80014dc:	f002 f8ba 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014e0:	2108      	movs	r1, #8
 80014e2:	488a      	ldr	r0, [pc, #552]	; (800170c <main+0x284>)
 80014e4:	f002 f8b6 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014e8:	210c      	movs	r1, #12
 80014ea:	4888      	ldr	r0, [pc, #544]	; (800170c <main+0x284>)
 80014ec:	f002 f8b2 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80014f0:	2108      	movs	r1, #8
 80014f2:	4887      	ldr	r0, [pc, #540]	; (8001710 <main+0x288>)
 80014f4:	f002 f8ae 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80014f8:	210c      	movs	r1, #12
 80014fa:	4885      	ldr	r0, [pc, #532]	; (8001710 <main+0x288>)
 80014fc:	f002 f8aa 	bl	8003654 <HAL_TIM_PWM_Start>
__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,2000);
__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,2000);
*/

  //inicializar el buffer
receptor.pos = 0;
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <main+0x28c>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
resetBuffer(receptor.buffer);
 8001506:	4883      	ldr	r0, [pc, #524]	; (8001714 <main+0x28c>)
 8001508:	f7ff fd62 	bl	8000fd0 <resetBuffer>

  HAL_UART_Receive_IT(&huart5, &receptor.selector, sizeof(uint8_t ));
 800150c:	2201      	movs	r2, #1
 800150e:	4982      	ldr	r1, [pc, #520]	; (8001718 <main+0x290>)
 8001510:	4882      	ldr	r0, [pc, #520]	; (800171c <main+0x294>)
 8001512:	f002 fdfe 	bl	8004112 <HAL_UART_Receive_IT>
 //fer chupame los huevos
  receptor.pos = 0;
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <main+0x28c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
//reubicar el motro hasta el punto 0
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);


  //secuencia de arranque
integrador =0;
 800151c:	4b80      	ldr	r3, [pc, #512]	; (8001720 <main+0x298>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
step = 100;
 8001524:	4b7f      	ldr	r3, [pc, #508]	; (8001724 <main+0x29c>)
 8001526:	2264      	movs	r2, #100	; 0x64
 8001528:	601a      	str	r2, [r3, #0]
inverseKinematic(40.62,-13.91,9.60);
 800152a:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8001728 <main+0x2a0>
 800152e:	eddf 0a7f 	vldr	s1, [pc, #508]	; 800172c <main+0x2a4>
 8001532:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8001730 <main+0x2a8>
 8001536:	f7ff fe4f 	bl	80011d8 <inverseKinematic>

 HAL_Delay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f001 f8c2 	bl	80026c4 <HAL_Delay>

  final_carrera = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001540:	2110      	movs	r1, #16
 8001542:	487c      	ldr	r0, [pc, #496]	; (8001734 <main+0x2ac>)
 8001544:	f001 fbae 	bl	8002ca4 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <main+0x2b0>)
 800154e:	601a      	str	r2, [r3, #0]
  final_carrera_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001550:	2120      	movs	r1, #32
 8001552:	4878      	ldr	r0, [pc, #480]	; (8001734 <main+0x2ac>)
 8001554:	f001 fba6 	bl	8002ca4 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b77      	ldr	r3, [pc, #476]	; (800173c <main+0x2b4>)
 800155e:	601a      	str	r2, [r3, #0]
  while (((final_carrera_2 == 0) || (final_carrera == 0))){
 8001560:	e019      	b.n	8001596 <main+0x10e>
	  	  if(final_carrera == 0){
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <main+0x2b0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <main+0xf4>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800156a:	4b68      	ldr	r3, [pc, #416]	; (800170c <main+0x284>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,400);
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <main+0x284>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  }

	  //test
	  	  if (final_carrera_2 == 0){
 800157c:	4b6f      	ldr	r3, [pc, #444]	; (800173c <main+0x2b4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <main+0x10e>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <main+0x284>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 700);
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <main+0x284>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
  while (((final_carrera_2 == 0) || (final_carrera == 0))){
 8001596:	4b69      	ldr	r3, [pc, #420]	; (800173c <main+0x2b4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0e1      	beq.n	8001562 <main+0xda>
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <main+0x2b0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0dd      	beq.n	8001562 <main+0xda>
	  	  }

  }

  //una vez encontrado el 0, reinicializar todo y avanzar n poco el motor para no llegar al 0
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015a6:	4b59      	ldr	r3, [pc, #356]	; (800170c <main+0x284>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 10); //100
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <main+0x284>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	220a      	movs	r2, #10
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015b6:	4b55      	ldr	r3, [pc, #340]	; (800170c <main+0x284>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 10); //100
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <main+0x284>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	220a      	movs	r2, #10
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_Delay(200);
 80015c6:	20c8      	movs	r0, #200	; 0xc8
 80015c8:	f001 f87c 	bl	80026c4 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <main+0x284>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <main+0x284>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <main+0x284>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); //100
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <main+0x284>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(100);
 80015ec:	2064      	movs	r0, #100	; 0x64
 80015ee:	f001 f869 	bl	80026c4 <HAL_Delay>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	4852      	ldr	r0, [pc, #328]	; (8001740 <main+0x2b8>)
 80015f6:	f002 f8fd 	bl	80037f4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //puedo iniciar el temprizaodr despues y asi no hace falta reiniciarlo?
 80015fa:	213c      	movs	r1, #60	; 0x3c
 80015fc:	4851      	ldr	r0, [pc, #324]	; (8001744 <main+0x2bc>)
 80015fe:	f002 f8f9 	bl	80037f4 <HAL_TIM_Encoder_Start>
motorbase.valor = 0;
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <main+0x2c0>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
motorcodo.valor= 0;
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <main+0x2c4>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
servomotor.valor =0;
 800160e:	4b50      	ldr	r3, [pc, #320]	; (8001750 <main+0x2c8>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
gripper.valor = 0;
 8001614:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <main+0x2cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]

	//procesar la info recibida


//motorbase.valor =440-  (motorbase.valor)*10;
motorbase.valor = (-4)* CaclValue(motorbase) +150;
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <main+0x2c0>)
 800161c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001620:	f7ff fcee 	bl	8001000 <CaclValue>
 8001624:	4602      	mov	r2, r0
 8001626:	4613      	mov	r3, r2
 8001628:	079b      	lsls	r3, r3, #30
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	3396      	adds	r3, #150	; 0x96
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <main+0x2c0>)
 8001632:	6093      	str	r3, [r2, #8]
if(motorbase.valor<0) motorbase.valor =0;
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <main+0x2c0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da02      	bge.n	8001642 <main+0x1ba>
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <main+0x2c0>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
if (motorbase.valor > 330) motorbase.valor = 330;
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <main+0x2c0>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800164a:	dd03      	ble.n	8001654 <main+0x1cc>
 800164c:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <main+0x2c0>)
 800164e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001652:	609a      	str	r2, [r3, #8]
//receptor.pos =  ((receptor.buffer[0] - 48)*1000) +	((receptor.buffer[1] - 48)*100) + ((receptor.buffer[2] - 48)*10) + ((receptor.buffer[3] -48));

//el numero de vueltas es como de 6800. No se deben tolerar valores por encima ni por debajo de esos valores
// quizás no usar directamente el valor del contador, sino una versión filtrada del mismo
encoder =  TIM2->CNT;
 8001654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	461a      	mov	r2, r3
 800165c:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <main+0x2d0>)
 800165e:	601a      	str	r2, [r3, #0]
if(encoder > 5000) encoder = 0; // ha dado mas vuelta de la necesaria
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <main+0x2d0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	dd02      	ble.n	8001672 <main+0x1ea>
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <main+0x2d0>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

  }
*/
//dt = HAL_GetTick()-current_time;
//motorbase.valor = 300;
current_time = HAL_GetTick();
 8001672:	f001 f81b 	bl	80026ac <HAL_GetTick>
 8001676:	ee07 0a90 	vmov	s15, r0
 800167a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <main+0x2d4>)
 8001680:	edc3 7a00 	vstr	s15, [r3]
//proportional


if(  (encoder ) >(motorbase.valor ) && final_carrera == 0    ){
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <main+0x2c0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <main+0x2d0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	da6f      	bge.n	8001770 <main+0x2e8>
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <main+0x2b0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d16b      	bne.n	8001770 <main+0x2e8>
	dt = HAL_GetTick()- current_time;
 8001698:	f001 f808 	bl	80026ac <HAL_GetTick>
 800169c:	ee07 0a90 	vmov	s15, r0
 80016a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <main+0x2d4>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <main+0x2d8>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]
prueba = a*(encoder-motorbase.valor);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <main+0x2d0>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <main+0x2c0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <main+0x2dc>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	ee17 2a90 	vmov	r2, s15
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <main+0x2e0>)
 80016da:	601a      	str	r2, [r3, #0]
salida =PID2(encoder,motorbase.valor);
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <main+0x2d0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <main+0x2c0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff fd2a 	bl	8001140 <PID2>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <main+0x2e4>)
 80016f0:	601a      	str	r2, [r3, #0]
	//prueba = receptor.pos - salida;
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <main+0x284>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, salida); //prueba
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <main+0x2e4>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <main+0x284>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
 8001704:	e070      	b.n	80017e8 <main+0x360>
 8001706:	bf00      	nop
 8001708:	20000254 	.word	0x20000254
 800170c:	200000f4 	.word	0x200000f4
 8001710:	20000150 	.word	0x20000150
 8001714:	200000d8 	.word	0x200000d8
 8001718:	200000e2 	.word	0x200000e2
 800171c:	200001ec 	.word	0x200001ec
 8001720:	200000ac 	.word	0x200000ac
 8001724:	200002a4 	.word	0x200002a4
 8001728:	4119999a 	.word	0x4119999a
 800172c:	c15e8f5c 	.word	0xc15e8f5c
 8001730:	42227ae1 	.word	0x42227ae1
 8001734:	40020000 	.word	0x40020000
 8001738:	2000029c 	.word	0x2000029c
 800173c:	20000238 	.word	0x20000238
 8001740:	2000019c 	.word	0x2000019c
 8001744:	200002ac 	.word	0x200002ac
 8001748:	200000cc 	.word	0x200000cc
 800174c:	20000190 	.word	0x20000190
 8001750:	200002f4 	.word	0x200002f4
 8001754:	20000248 	.word	0x20000248
 8001758:	20000148 	.word	0x20000148
 800175c:	2000013c 	.word	0x2000013c
 8001760:	20000300 	.word	0x20000300
 8001764:	20000000 	.word	0x20000000
 8001768:	200000c8 	.word	0x200000c8
 800176c:	200002ec 	.word	0x200002ec


	   }
else if (  (encoder ) <( motorbase.valor  ) ){  // cmbiar por leer el buffer : [0]*1000 + [1]*100 +[2]*10 +[3] (todos +48 para concordar con ASCI)
 8001770:	4ba5      	ldr	r3, [pc, #660]	; (8001a08 <main+0x580>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4ba5      	ldr	r3, [pc, #660]	; (8001a0c <main+0x584>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	dd35      	ble.n	80017e8 <main+0x360>
	dt = HAL_GetTick()- current_time;
 800177c:	f000 ff96 	bl	80026ac <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001788:	4ba1      	ldr	r3, [pc, #644]	; (8001a10 <main+0x588>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001792:	4ba0      	ldr	r3, [pc, #640]	; (8001a14 <main+0x58c>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
//	salida =PID(motorbase.valor, encoder);
	prueba = a*(motorbase.valor - encoder);
 8001798:	4b9b      	ldr	r3, [pc, #620]	; (8001a08 <main+0x580>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b9b      	ldr	r3, [pc, #620]	; (8001a0c <main+0x584>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	4b9b      	ldr	r3, [pc, #620]	; (8001a18 <main+0x590>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	4b97      	ldr	r3, [pc, #604]	; (8001a1c <main+0x594>)
 80017be:	601a      	str	r2, [r3, #0]
	salida =PID2(motorbase.valor,encoder);
 80017c0:	4b91      	ldr	r3, [pc, #580]	; (8001a08 <main+0x580>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <main+0x584>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fcb8 	bl	8001140 <PID2>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <main+0x598>)
 80017d4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,salida);//1000, aqui es sincrono, PRUEBA
 80017d6:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <main+0x598>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <main+0x59c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); //cambiarlo por salidas analogcas  PWM
 80017e0:	4b90      	ldr	r3, [pc, #576]	; (8001a24 <main+0x59c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c



//motorcodo.valor =440-  (motorcodo.valor)*10;

motorcodo.valor = -20*CaclValue(motorcodo) + 975; // 4  300
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <main+0x5a0>)
 80017ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ee:	f7ff fc07 	bl	8001000 <CaclValue>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f06f 0313 	mvn.w	r3, #19
 80017f8:	fb03 f302 	mul.w	r3, r3, r2
 80017fc:	f203 33cf 	addw	r3, r3, #975	; 0x3cf
 8001800:	4a89      	ldr	r2, [pc, #548]	; (8001a28 <main+0x5a0>)
 8001802:	6093      	str	r3, [r2, #8]
if(motorcodo.valor<0) motorcodo.valor =0;
 8001804:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <main+0x5a0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	da02      	bge.n	8001812 <main+0x38a>
 800180c:	4b86      	ldr	r3, [pc, #536]	; (8001a28 <main+0x5a0>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
if(motorcodo.valor>2000) motorcodo.valor =2000;
 8001812:	4b85      	ldr	r3, [pc, #532]	; (8001a28 <main+0x5a0>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800181a:	dd03      	ble.n	8001824 <main+0x39c>
 800181c:	4b82      	ldr	r3, [pc, #520]	; (8001a28 <main+0x5a0>)
 800181e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001822:	609a      	str	r2, [r3, #8]
//if(motorcodo.valor>650) motorcodo.valor =650;
//receptor.pos =  ((receptor.buffer[0] - 48)*1000) +	((receptor.buffer[1] - 48)*100) + ((receptor.buffer[2] - 48)*10) + ((receptor.buffer[3] -48));

//el numero de vueltas es como de 6800. No se deben tolerar valores por encima ni por debajo de esos valores
// quizás no usar directamente el valor del contador, sino una versión filtrada del mismo
encoder2 =  TIM3->CNT;
 8001824:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <main+0x5a4>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	461a      	mov	r2, r3
 800182a:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <main+0x5a8>)
 800182c:	601a      	str	r2, [r3, #0]
if(encoder2 > 5000) encoder2 = 0; // ha dado mas vuelta de la necesaria
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <main+0x5a8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	dd02      	ble.n	8001840 <main+0x3b8>
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <main+0x5a8>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

  }
*/
//dt = HAL_GetTick()-current_time;
//motorcodo.valor = 100;
current_time2 = HAL_GetTick();
 8001840:	f000 ff34 	bl	80026ac <HAL_GetTick>
 8001844:	ee07 0a90 	vmov	s15, r0
 8001848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <main+0x5ac>)
 800184e:	edc3 7a00 	vstr	s15, [r3]
//proportional




if(  (encoder2 ) >(motorcodo.valor ) && final_carrera_2 == 0  ){
 8001852:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <main+0x5a0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <main+0x5a8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	da3a      	bge.n	80018d4 <main+0x44c>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <main+0x5b0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d136      	bne.n	80018d4 <main+0x44c>
	dt2 = HAL_GetTick()- current_time2;
 8001866:	f000 ff21 	bl	80026ac <HAL_GetTick>
 800186a:	ee07 0a90 	vmov	s15, r0
 800186e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001872:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <main+0x5ac>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <main+0x5b4>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
prueba2 = a*(encoder2-motorcodo.valor);
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <main+0x5a8>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <main+0x5a0>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <main+0x590>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a2:	ee17 2a90 	vmov	r2, s15
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <main+0x5b8>)
 80018a8:	601a      	str	r2, [r3, #0]
salida2 =PID(encoder2,motorcodo.valor);
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <main+0x5a8>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <main+0x5a0>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4610      	mov	r0, r2
 80018b6:	f7ff fbff 	bl	80010b8 <PID>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <main+0x5bc>)
 80018be:	601a      	str	r2, [r3, #0]
	//prueba = receptor.pos - salida;2
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80018c0:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <main+0x59c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, salida2); //prueba
 80018c8:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <main+0x5bc>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <main+0x59c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e03b      	b.n	800194c <main+0x4c4>


	   }
else if (  (encoder2 ) <( motorcodo.valor  ) ){  // cmbiar por leer el buffer : [0]*1000 + [1]*100 +[2]*10 +[3] (todos +48 para concordar con ASCI)
 80018d4:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <main+0x5a0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <main+0x5a8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dd35      	ble.n	800194c <main+0x4c4>
	dt2 = HAL_GetTick()- current_time2;
 80018e0:	f000 fee4 	bl	80026ac <HAL_GetTick>
 80018e4:	ee07 0a90 	vmov	s15, r0
 80018e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ec:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <main+0x5ac>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <main+0x5b4>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
	salida2 =PID(motorcodo.valor, encoder2);
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <main+0x5a0>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <main+0x5a8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f7ff fbd6 	bl	80010b8 <PID>
 800190c:	4602      	mov	r2, r0
 800190e:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <main+0x5bc>)
 8001910:	601a      	str	r2, [r3, #0]
	prueba2 = a*(motorcodo.valor - encoder2);
 8001912:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <main+0x5a0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <main+0x5a8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <main+0x590>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	ee17 2a90 	vmov	r2, s15
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <main+0x5b8>)
 8001938:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,salida2);//1000, aqui es sincrono, PRUEBA
 800193a:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <main+0x5bc>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <main+0x59c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); //cambiarlo por salidas analogcas  PWM
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <main+0x59c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

//val = servo+50;
//val = (buffe[0]-48)*100+ (buffe[1]-48)*10+ buffe[2]-48 - 30 ;


servomotor.valor = (CaclValue(servomotor)*0.9) + 150;
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <main+0x5c0>)
 800194e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001952:	f7ff fb55 	bl	8001000 <CaclValue>
 8001956:	4603      	mov	r3, r0
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd87 	bl	800046c <__aeabi_i2d>
 800195e:	a326      	add	r3, pc, #152	; (adr r3, 80019f8 <main+0x570>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fdec 	bl	8000540 <__aeabi_dmul>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	4618      	mov	r0, r3
 800196e:	4621      	mov	r1, r4
 8001970:	a323      	add	r3, pc, #140	; (adr r3, 8001a00 <main+0x578>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc2d 	bl	80001d4 <__adddf3>
 800197a:	4603      	mov	r3, r0
 800197c:	460c      	mov	r4, r1
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	f7ff f88d 	bl	8000aa0 <__aeabi_d2iz>
 8001986:	4602      	mov	r2, r0
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <main+0x5c0>)
 800198a:	609a      	str	r2, [r3, #8]
//servomotor.valor = 120;
if (servomotor.valor >240) servomotor.valor= 240;
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <main+0x5c0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2bf0      	cmp	r3, #240	; 0xf0
 8001992:	dd02      	ble.n	800199a <main+0x512>
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <main+0x5c0>)
 8001996:	22f0      	movs	r2, #240	; 0xf0
 8001998:	609a      	str	r2, [r3, #8]
if (servomotor.valor <100) servomotor.valor= 100;
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <main+0x5c0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b63      	cmp	r3, #99	; 0x63
 80019a0:	dc02      	bgt.n	80019a8 <main+0x520>
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <main+0x5c0>)
 80019a4:	2264      	movs	r2, #100	; 0x64
 80019a6:	609a      	str	r2, [r3, #8]
//	step = step + error_servo/8;
//
//}


__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,servomotor.valor);
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <main+0x5c0>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <main+0x5c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34


gripper.valor = ((gripper.buffer[0]-48)*100 + (gripper.buffer[1]-48)*10 +(gripper.buffer[2]-48)) *1-70;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <main+0x5c8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3b30      	subs	r3, #48	; 0x30
 80019b8:	2264      	movs	r2, #100	; 0x64
 80019ba:	fb02 f103 	mul.w	r1, r2, r3
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <main+0x5c8>)
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	18ca      	adds	r2, r1, r3
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <main+0x5c8>)
 80019d2:	789b      	ldrb	r3, [r3, #2]
 80019d4:	3b30      	subs	r3, #48	; 0x30
 80019d6:	4413      	add	r3, r2
 80019d8:	3b46      	subs	r3, #70	; 0x46
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <main+0x5c8>)
 80019dc:	6093      	str	r3, [r2, #8]

if (gripper.valor < 90) gripper.valor = 90;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <main+0x5c8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b59      	cmp	r3, #89	; 0x59
 80019e4:	dc02      	bgt.n	80019ec <main+0x564>
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <main+0x5c8>)
 80019e8:	225a      	movs	r2, #90	; 0x5a
 80019ea:	609a      	str	r2, [r3, #8]
__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,gripper.valor);
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <main+0x5c8>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <main+0x5c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
motorbase.valor = (-4)* CaclValue(motorbase) +150;
 80019f6:	e610      	b.n	800161a <main+0x192>
 80019f8:	cccccccd 	.word	0xcccccccd
 80019fc:	3feccccc 	.word	0x3feccccc
 8001a00:	00000000 	.word	0x00000000
 8001a04:	4062c000 	.word	0x4062c000
 8001a08:	200000cc 	.word	0x200000cc
 8001a0c:	20000148 	.word	0x20000148
 8001a10:	2000013c 	.word	0x2000013c
 8001a14:	20000300 	.word	0x20000300
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	200000c8 	.word	0x200000c8
 8001a20:	200002ec 	.word	0x200002ec
 8001a24:	200000f4 	.word	0x200000f4
 8001a28:	20000190 	.word	0x20000190
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	20000304 	.word	0x20000304
 8001a34:	20000144 	.word	0x20000144
 8001a38:	20000238 	.word	0x20000238
 8001a3c:	200000f0 	.word	0x200000f0
 8001a40:	200000b8 	.word	0x200000b8
 8001a44:	2000014c 	.word	0x2000014c
 8001a48:	200002f4 	.word	0x200002f4
 8001a4c:	20000254 	.word	0x20000254
 8001a50:	20000248 	.word	0x20000248

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	; 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2230      	movs	r2, #48	; 0x30
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 f986 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <SystemClock_Config+0xcc>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a27      	ldr	r2, [pc, #156]	; (8001b20 <SystemClock_Config+0xcc>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <SystemClock_Config+0xcc>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <SystemClock_Config+0xd0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <SystemClock_Config+0xd0>)
 8001a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <SystemClock_Config+0xd0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001ac8:	2390      	movs	r3, #144	; 0x90
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001acc:	2304      	movs	r3, #4
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 f92d 	bl	8002d38 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae4:	f000 fb0a 	bl	80020fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2102      	movs	r1, #2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fb86 	bl	8003218 <HAL_RCC_ClockConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b12:	f000 faf3 	bl	80020fc <Error_Handler>
  }
}
 8001b16:	bf00      	nop
 8001b18:	3750      	adds	r7, #80	; 0x50
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000

08001b28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	; 0x48
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f90e 	bl	8004d74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b58:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b5a:	4a46      	ldr	r2, [pc, #280]	; (8001c74 <MX_TIM1_Init+0x14c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b60:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b6e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b86:	483a      	ldr	r0, [pc, #232]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001b88:	f001 fd38 	bl	80035fc <HAL_TIM_PWM_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b92:	f000 fab3 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4832      	ldr	r0, [pc, #200]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001ba6:	f002 f999 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001bb0:	f000 faa4 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4825      	ldr	r0, [pc, #148]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001bda:	f001 fe43 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001be4:	f000 fa8a 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	2204      	movs	r2, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001bf2:	f001 fe37 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001bfc:	f000 fa7e 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	2208      	movs	r2, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	4819      	ldr	r0, [pc, #100]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001c0a:	f001 fe2b 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001c14:	f000 fa72 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4813      	ldr	r0, [pc, #76]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001c22:	f001 fe1f 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001c2c:	f000 fa66 	bl	80020fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001c54:	f002 f9be 	bl	8003fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001c5e:	f000 fa4d 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM1_Init+0x148>)
 8001c64:	f000 fb3e 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001c68:	bf00      	nop
 8001c6a:	3748      	adds	r7, #72	; 0x48
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000254 	.word	0x20000254
 8001c74:	40010000 	.word	0x40010000

08001c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 f874 	bl	8004d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001cdc:	230a      	movs	r3, #10
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001ce8:	f001 fcf2 	bl	80036d0 <HAL_TIM_Encoder_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cf2:	f000 fa03 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <MX_TIM2_Init+0xa4>)
 8001d04:	f002 f8ea 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d0e:	f000 f9f5 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002ac 	.word	0x200002ac

08001d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2224      	movs	r2, #36	; 0x24
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 f820 	bl	8004d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <MX_TIM3_Init+0xa4>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d62:	2303      	movs	r3, #3
 8001d64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d8e:	f001 fc9f 	bl	80036d0 <HAL_TIM_Encoder_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f000 f9b0 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_TIM3_Init+0xa0>)
 8001daa:	f002 f897 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001db4:	f000 f9a2 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000019c 	.word	0x2000019c
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dea:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001dec:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <MX_TIM4_Init+0xf4>)
 8001dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001df2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001df6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e00:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e12:	4829      	ldr	r0, [pc, #164]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e14:	f001 fbf2 	bl	80035fc <HAL_TIM_PWM_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e1e:	f000 f96d 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e32:	f002 f853 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e3c:	f000 f95e 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e58:	f001 fd04 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e62:	f000 f94b 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e6e:	f001 fcf9 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001e78:	f000 f940 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2208      	movs	r2, #8
 8001e80:	4619      	mov	r1, r3
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e84:	f001 fcee 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001e8e:	f000 f935 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	220c      	movs	r2, #12
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001e9a:	f001 fce3 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001ea4:	f000 f92a 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM4_Init+0xf0>)
 8001eaa:	f000 fa1b 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000f4 	.word	0x200000f4
 8001ebc:	40000800 	.word	0x40000800

08001ec0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001ee4:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <MX_TIM5_Init+0xc8>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-10;
 8001ee8:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001eea:	f240 22c6 	movw	r2, #710	; 0x2c6
 8001eee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001ef8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001efc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f0a:	481e      	ldr	r0, [pc, #120]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f0c:	f001 fb76 	bl	80035fc <HAL_TIM_PWM_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001f16:	f000 f8f1 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4619      	mov	r1, r3
 8001f28:	4816      	ldr	r0, [pc, #88]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f2a:	f001 ffd7 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001f34:	f000 f8e2 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f50:	f001 fc88 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001f5a:	f000 f8cf 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	220c      	movs	r2, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f66:	f001 fc7d 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001f70:	f000 f8c4 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM5_Init+0xc4>)
 8001f76:	f000 f9b5 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000150 	.word	0x20000150
 8001f88:	40000c00 	.word	0x40000c00

08001f8c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_UART5_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001f98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f9c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_UART5_Init+0x4c>)
 8001fc4:	f002 f858 	bl	8004078 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001fce:	f000 f895 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200001ec 	.word	0x200001ec
 8001fdc:	40005000 	.word	0x40005000

08001fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <MX_GPIO_Init+0x10c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <MX_GPIO_Init+0x10c>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a2d      	ldr	r2, [pc, #180]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a26      	ldr	r2, [pc, #152]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <MX_GPIO_Init+0x10c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <MX_GPIO_Init+0x10c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_GPIO_Init+0x10c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002088:	4819      	ldr	r0, [pc, #100]	; (80020f0 <MX_GPIO_Init+0x110>)
 800208a:	f000 fe23 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800208e:	2330      	movs	r3, #48	; 0x30
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_GPIO_Init+0x114>)
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4815      	ldr	r0, [pc, #84]	; (80020f8 <MX_GPIO_Init+0x118>)
 80020a2:	f000 fc65 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <MX_GPIO_Init+0x110>)
 80020c0:	f000 fc56 	bl	8002970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fbf8 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020ce:	200a      	movs	r0, #10
 80020d0:	f000 fc11 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2017      	movs	r0, #23
 80020da:	f000 fbf0 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020de:	2017      	movs	r0, #23
 80020e0:	f000 fc09 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	10310000 	.word	0x10310000
 80020f8:	40020000 	.word	0x40020000

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002102:	e7fe      	b.n	8002102 <Error_Handler+0x6>

08002104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_MspInit+0x4c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_MspInit+0x4c>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_MspInit+0x4c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_MspInit+0x4c>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002142:	2007      	movs	r0, #7
 8002144:	f000 fbb0 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002182:	e026      	b.n	80021d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_TIM_PWM_MspInit+0x94>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
}
 80021aa:	e012      	b.n	80021d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_TIM_PWM_MspInit+0x98>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10d      	bne.n	80021d2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_TIM_PWM_MspInit+0x90>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00

080021f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d12c      	bne.n	800226c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800224a:	2303      	movs	r3, #3
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225a:	2301      	movs	r3, #1
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	481d      	ldr	r0, [pc, #116]	; (80022dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002266:	f000 fb83 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800226a:	e030      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <HAL_TIM_Encoder_MspInit+0xec>)
 80022ca:	f000 fb51 	bl	8002970 <HAL_GPIO_Init>
}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40000400 	.word	0x40000400

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_TIM_MspPostInit+0xfc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11f      	bne.n	8002346 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002310:	f043 0310 	orr.w	r3, r3, #16
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002322:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	482a      	ldr	r0, [pc, #168]	; (80023e8 <HAL_TIM_MspPostInit+0x104>)
 8002340:	f000 fb16 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002344:	e047      	b.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_TIM_MspPostInit+0x108>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11f      	bne.n	8002390 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800236c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4819      	ldr	r0, [pc, #100]	; (80023f0 <HAL_TIM_MspPostInit+0x10c>)
 800238a:	f000 faf1 	bl	8002970 <HAL_GPIO_Init>
}
 800238e:	e022      	b.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM5)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_TIM_MspPostInit+0x110>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11d      	bne.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023c6:	2302      	movs	r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_TIM_MspPostInit+0x114>)
 80023d2:	f000 facd 	bl	8002970 <HAL_GPIO_Init>
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40000c00 	.word	0x40000c00
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_UART_MspInit+0xd0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d152      	bne.n	80024c4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_UART_MspInit+0xd4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247c:	2301      	movs	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002484:	2308      	movs	r3, #8
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4811      	ldr	r0, [pc, #68]	; (80024d4 <HAL_UART_MspInit+0xd8>)
 8002490:	f000 fa6e 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002494:	2304      	movs	r3, #4
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249c:	2301      	movs	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024a4:	2308      	movs	r3, #8
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	480a      	ldr	r0, [pc, #40]	; (80024d8 <HAL_UART_MspInit+0xdc>)
 80024b0:	f000 fa5e 	bl	8002970 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2035      	movs	r0, #53	; 0x35
 80024ba:	f000 fa00 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80024be:	2035      	movs	r0, #53	; 0x35
 80024c0:	f000 fa19 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40005000 	.word	0x40005000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f8ac 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002534:	2010      	movs	r0, #16
 8002536:	f000 fbe7 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}

0800253e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002542:	2020      	movs	r0, #32
 8002544:	f000 fbe0 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <UART5_IRQHandler+0x10>)
 8002552:	f001 fe33 	bl	80041bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001ec 	.word	0x200001ec

08002560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <SystemInit+0x28>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <SystemInit+0x28>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SystemInit+0x28>)
 8002576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800257a:	609a      	str	r2, [r3, #8]
#endif
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002592:	e003      	b.n	800259c <LoopCopyDataInit>

08002594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800259a:	3104      	adds	r1, #4

0800259c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800259c:	480b      	ldr	r0, [pc, #44]	; (80025cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025a4:	d3f6      	bcc.n	8002594 <CopyDataInit>
  ldr  r2, =_sbss
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025a8:	e002      	b.n	80025b0 <LoopFillZerobss>

080025aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025ac:	f842 3b04 	str.w	r3, [r2], #4

080025b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025b4:	d3f9      	bcc.n	80025aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025b6:	f7ff ffd3 	bl	8002560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ba:	f002 fbb7 	bl	8004d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe ff63 	bl	8001488 <main>
  bx  lr    
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025c8:	08006860 	.word	0x08006860
  ldr  r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025d0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80025d4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80025d8:	2000031c 	.word	0x2000031c

080025dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_Init+0x40>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_Init+0x40>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x40>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f94d 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff fd76 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f965 	bl	8002912 <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 f92d 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000018 	.word	0x20000018
 800267c:	20000020 	.word	0x20000020
 8002680:	2000001c 	.word	0x2000001c

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000020 	.word	0x20000020
 80026a8:	20000318 	.word	0x20000318

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000318 	.word	0x20000318

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_Delay+0x40>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000020 	.word	0x20000020

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00c      	b.n	8002962 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2205      	movs	r2, #5
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e16b      	b.n	8002c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 815a 	bne.w	8002c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d00b      	beq.n	80029ca <HAL_GPIO_Init+0x5a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029be:	2b11      	cmp	r3, #17
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b12      	cmp	r3, #18
 80029c8:	d130      	bne.n	8002a2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 0201 	and.w	r2, r3, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0xfc>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d123      	bne.n	8002ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80b4 	beq.w	8002c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_GPIO_Init+0x308>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_GPIO_Init+0x308>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_GPIO_Init+0x308>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b12:	4a5a      	ldr	r2, [pc, #360]	; (8002c7c <HAL_GPIO_Init+0x30c>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_GPIO_Init+0x310>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_GPIO_Init+0x314>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d025      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_GPIO_Init+0x318>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_GPIO_Init+0x31c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x320>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0x216>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <HAL_GPIO_Init+0x20e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x32c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_GPIO_Init+0x20a>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e00e      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4934      	ldr	r1, [pc, #208]	; (8002c7c <HAL_GPIO_Init+0x30c>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f ae90 	bls.w	800298c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3724      	adds	r7, #36	; 0x24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40020400 	.word	0x40020400
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40021400 	.word	0x40021400
 8002c98:	40021800 	.word	0x40021800
 8002c9c:	40021c00 	.word	0x40021c00
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e001      	b.n	8002cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f8b2 	bl	8000e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e25b      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	4ba3      	ldr	r3, [pc, #652]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d00c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4ba0      	ldr	r3, [pc, #640]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d112      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b9d      	ldr	r3, [pc, #628]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d10b      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	4b99      	ldr	r3, [pc, #612]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCC_OscConfig+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d157      	bne.n	8002e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e236      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x74>
 8002d9e:	4b91      	ldr	r3, [pc, #580]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a90      	ldr	r2, [pc, #576]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b8b      	ldr	r3, [pc, #556]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a8a      	ldr	r2, [pc, #552]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a87      	ldr	r2, [pc, #540]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dd0:	4b84      	ldr	r3, [pc, #528]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a83      	ldr	r2, [pc, #524]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a80      	ldr	r2, [pc, #512]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fc5c 	bl	80026ac <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fc58 	bl	80026ac <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1fb      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xc0>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff fc48 	bl	80026ac <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff fc44 	bl	80026ac <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1e7      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0xe8>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1bb      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4952      	ldr	r1, [pc, #328]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCC_OscConfig+0x2b0>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7ff fbfd 	bl	80026ac <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff fbf9 	bl	80026ac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e19c      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4940      	ldr	r1, [pc, #256]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x2b0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fbdc 	bl	80026ac <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff fbd8 	bl	80026ac <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e17b      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d030      	beq.n	8002f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_OscConfig+0x2b4>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff fbbc 	bl	80026ac <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff fbb8 	bl	80026ac <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e15b      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x200>
 8002f56:	e015      	b.n	8002f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_OscConfig+0x2b4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff fba5 	bl	80026ac <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7ff fba1 	bl	80026ac <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e144      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a0 	beq.w	80030d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_OscConfig+0x2b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_RCC_OscConfig+0x2b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_RCC_OscConfig+0x2b8>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7ff fb67 	bl	80026ac <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e011      	b.n	8003006 <HAL_RCC_OscConfig+0x2ce>
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470000 	.word	0x42470000
 8002fec:	42470e80 	.word	0x42470e80
 8002ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7ff fb5a 	bl	80026ac <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0fd      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x4d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x2f0>
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a7c      	ldr	r2, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	e01c      	b.n	8003062 <HAL_RCC_OscConfig+0x32a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x312>
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a76      	ldr	r2, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	4b74      	ldr	r3, [pc, #464]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a73      	ldr	r2, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	e00b      	b.n	8003062 <HAL_RCC_OscConfig+0x32a>
 800304a:	4b71      	ldr	r3, [pc, #452]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	4b6e      	ldr	r3, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a6d      	ldr	r2, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d015      	beq.n	8003096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7ff fb1f 	bl	80026ac <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7ff fb1b 	bl	80026ac <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0bc      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ee      	beq.n	8003072 <HAL_RCC_OscConfig+0x33a>
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff fb09 	bl	80026ac <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7ff fb05 	bl	80026ac <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0a6      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b52      	ldr	r3, [pc, #328]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a51      	ldr	r2, [pc, #324]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8092 	beq.w	8003200 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030dc:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d05c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d141      	bne.n	8003174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b48      	ldr	r3, [pc, #288]	; (8003214 <HAL_RCC_OscConfig+0x4dc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7ff fad9 	bl	80026ac <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7ff fad5 	bl	80026ac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e078      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003110:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	4933      	ldr	r1, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003146:	4b33      	ldr	r3, [pc, #204]	; (8003214 <HAL_RCC_OscConfig+0x4dc>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff faae 	bl	80026ac <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7ff faaa 	bl	80026ac <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04d      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x41c>
 8003172:	e045      	b.n	8003200 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x4dc>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7ff fa97 	bl	80026ac <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7ff fa93 	bl	80026ac <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e036      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x44a>
 80031a0:	e02e      	b.n	8003200 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e029      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_RCC_OscConfig+0x4d8>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d115      	bne.n	80031fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40007000 	.word	0x40007000
 8003210:	40023800 	.word	0x40023800
 8003214:	42470060 	.word	0x42470060

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cc      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d90c      	bls.n	8003254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d044      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e067      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4934      	ldr	r1, [pc, #208]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7ff f9d0 	bl	80026ac <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7ff f9cc 	bl	80026ac <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d20c      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f821 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4601      	mov	r1, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	fa21 f303 	lsr.w	r3, r1, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f930 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	40023800 	.word	0x40023800
 80033d8:	080067a8 	.word	0x080067a8
 80033dc:	20000018 	.word	0x20000018
 80033e0:	2000001c 	.word	0x2000001c

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	2300      	movs	r3, #0
 80033f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b04      	cmp	r3, #4
 8003404:	d007      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x32>
 8003406:	2b08      	cmp	r3, #8
 8003408:	d008      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x38>
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 80b4 	bne.w	8003578 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b5e      	ldr	r3, [pc, #376]	; (800358c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003412:	60bb      	str	r3, [r7, #8]
       break;
 8003414:	e0b3      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003418:	60bb      	str	r3, [r7, #8]
      break;
 800341a:	e0b0      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003426:	4b58      	ldr	r3, [pc, #352]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d04a      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	4b55      	ldr	r3, [pc, #340]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	ea03 0501 	and.w	r5, r3, r1
 8003448:	ea04 0602 	and.w	r6, r4, r2
 800344c:	4629      	mov	r1, r5
 800344e:	4632      	mov	r2, r6
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	0154      	lsls	r4, r2, #5
 800345a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800345e:	014b      	lsls	r3, r1, #5
 8003460:	4619      	mov	r1, r3
 8003462:	4622      	mov	r2, r4
 8003464:	1b49      	subs	r1, r1, r5
 8003466:	eb62 0206 	sbc.w	r2, r2, r6
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	f04f 0400 	mov.w	r4, #0
 8003472:	0194      	lsls	r4, r2, #6
 8003474:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003478:	018b      	lsls	r3, r1, #6
 800347a:	1a5b      	subs	r3, r3, r1
 800347c:	eb64 0402 	sbc.w	r4, r4, r2
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	00e2      	lsls	r2, r4, #3
 800348a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800348e:	00d9      	lsls	r1, r3, #3
 8003490:	460b      	mov	r3, r1
 8003492:	4614      	mov	r4, r2
 8003494:	195b      	adds	r3, r3, r5
 8003496:	eb44 0406 	adc.w	r4, r4, r6
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	0262      	lsls	r2, r4, #9
 80034a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034a8:	0259      	lsls	r1, r3, #9
 80034aa:	460b      	mov	r3, r1
 80034ac:	4614      	mov	r4, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	4621      	mov	r1, r4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	461a      	mov	r2, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	f7fd fb68 	bl	8000b90 <__aeabi_uldivmod>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e049      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c8:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	f04f 0400 	mov.w	r4, #0
 80034d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea03 0501 	and.w	r5, r3, r1
 80034de:	ea04 0602 	and.w	r6, r4, r2
 80034e2:	4629      	mov	r1, r5
 80034e4:	4632      	mov	r2, r6
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	f04f 0400 	mov.w	r4, #0
 80034ee:	0154      	lsls	r4, r2, #5
 80034f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034f4:	014b      	lsls	r3, r1, #5
 80034f6:	4619      	mov	r1, r3
 80034f8:	4622      	mov	r2, r4
 80034fa:	1b49      	subs	r1, r1, r5
 80034fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	f04f 0400 	mov.w	r4, #0
 8003508:	0194      	lsls	r4, r2, #6
 800350a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	1a5b      	subs	r3, r3, r1
 8003512:	eb64 0402 	sbc.w	r4, r4, r2
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	00e2      	lsls	r2, r4, #3
 8003520:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003524:	00d9      	lsls	r1, r3, #3
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	195b      	adds	r3, r3, r5
 800352c:	eb44 0406 	adc.w	r4, r4, r6
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	02a2      	lsls	r2, r4, #10
 800353a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800353e:	0299      	lsls	r1, r3, #10
 8003540:	460b      	mov	r3, r1
 8003542:	4614      	mov	r4, r2
 8003544:	4618      	mov	r0, r3
 8003546:	4621      	mov	r1, r4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f04f 0400 	mov.w	r4, #0
 800354e:	461a      	mov	r2, r3
 8003550:	4623      	mov	r3, r4
 8003552:	f7fd fb1d 	bl	8000b90 <__aeabi_uldivmod>
 8003556:	4603      	mov	r3, r0
 8003558:	460c      	mov	r4, r1
 800355a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	60bb      	str	r3, [r7, #8]
      break;
 8003576:	e002      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800357a:	60bb      	str	r3, [r7, #8]
      break;
 800357c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357e:	68bb      	ldr	r3, [r7, #8]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	00f42400 	.word	0x00f42400
 8003590:	007a1200 	.word	0x007a1200

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000018 	.word	0x20000018

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b0:	f7ff fff0 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035b4:	4601      	mov	r1, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0a9b      	lsrs	r3, r3, #10
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	080067b8 	.word	0x080067b8

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035d8:	f7ff ffdc 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035dc:	4601      	mov	r1, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	080067b8 	.word	0x080067b8

080035fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01d      	b.n	800364a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fe fd96 	bl	8002154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 f9d8 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc12 	bl	8003e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_TIM_PWM_Start+0x74>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0x2c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_TIM_PWM_Start+0x78>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PWM_Start+0x30>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_Start+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40010400 	.word	0x40010400

080036d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e083      	b.n	80037ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fe fd79 	bl	80021f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f000 f963 	bl	80039f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003770:	f023 030c 	bic.w	r3, r3, #12
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800377c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	011a      	lsls	r2, r3, #4
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	031b      	lsls	r3, r3, #12
 80037a0:	4313      	orrs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4313      	orrs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_TIM_Encoder_Start+0x16>
 8003804:	2b04      	cmp	r3, #4
 8003806:	d008      	beq.n	800381a <HAL_TIM_Encoder_Start+0x26>
 8003808:	e00f      	b.n	800382a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb3c 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003818:	e016      	b.n	8003848 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	2104      	movs	r1, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fb34 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003828:	e00e      	b.n	8003848 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb2c 	bl	8003e90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2201      	movs	r2, #1
 800383e:	2104      	movs	r1, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb25 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003846:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800387a:	2302      	movs	r3, #2
 800387c:	e0b4      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	f200 809f 	bhi.w	80039d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	080039d5 	.word	0x080039d5
 80038a4:	080039d5 	.word	0x080039d5
 80038a8:	080039d5 	.word	0x080039d5
 80038ac:	08003911 	.word	0x08003911
 80038b0:	080039d5 	.word	0x080039d5
 80038b4:	080039d5 	.word	0x080039d5
 80038b8:	080039d5 	.word	0x080039d5
 80038bc:	08003953 	.word	0x08003953
 80038c0:	080039d5 	.word	0x080039d5
 80038c4:	080039d5 	.word	0x080039d5
 80038c8:	080039d5 	.word	0x080039d5
 80038cc:	08003993 	.word	0x08003993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f92a 	bl	8003b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6999      	ldr	r1, [r3, #24]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	619a      	str	r2, [r3, #24]
      break;
 800390e:	e062      	b.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f97a 	bl	8003c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6999      	ldr	r1, [r3, #24]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	619a      	str	r2, [r3, #24]
      break;
 8003950:	e041      	b.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f9cf 	bl	8003cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0208 	orr.w	r2, r2, #8
 800396c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0204 	bic.w	r2, r2, #4
 800397c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69d9      	ldr	r1, [r3, #28]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	61da      	str	r2, [r3, #28]
      break;
 8003990:	e021      	b.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa23 	bl	8003de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69d9      	ldr	r1, [r3, #28]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	021a      	lsls	r2, r3, #8
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	61da      	str	r2, [r3, #28]
      break;
 80039d2:	e000      	b.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d00f      	beq.n	8003a30 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <TIM_Base_SetConfig+0x118>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <TIM_Base_SetConfig+0x11c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3b      	ldr	r2, [pc, #236]	; (8003b10 <TIM_Base_SetConfig+0x120>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3a      	ldr	r2, [pc, #232]	; (8003b14 <TIM_Base_SetConfig+0x124>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2f      	ldr	r2, [pc, #188]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d02b      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d027      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <TIM_Base_SetConfig+0x118>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d023      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <TIM_Base_SetConfig+0x11c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <TIM_Base_SetConfig+0x120>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01b      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <TIM_Base_SetConfig+0x124>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d017      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <TIM_Base_SetConfig+0x128>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <TIM_Base_SetConfig+0x12c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00f      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <TIM_Base_SetConfig+0x130>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <TIM_Base_SetConfig+0x134>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <TIM_Base_SetConfig+0x138>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <TIM_Base_SetConfig+0x13c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0xf8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_Base_SetConfig+0x124>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40010400 	.word	0x40010400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800
 8003b24:	40001800 	.word	0x40001800
 8003b28:	40001c00 	.word	0x40001c00
 8003b2c:	40002000 	.word	0x40002000

08003b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0201 	bic.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 0302 	bic.w	r3, r3, #2
 8003b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <TIM_OC1_SetConfig+0xd8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_OC1_SetConfig+0x64>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <TIM_OC1_SetConfig+0xdc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10c      	bne.n	8003bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0308 	bic.w	r3, r3, #8
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <TIM_OC1_SetConfig+0xd8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC1_SetConfig+0x8e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <TIM_OC1_SetConfig+0xdc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40010400 	.word	0x40010400

08003c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0210 	bic.w	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0320 	bic.w	r3, r3, #32
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <TIM_OC2_SetConfig+0xe4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_OC2_SetConfig+0x68>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_OC2_SetConfig+0xe8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10d      	bne.n	8003c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <TIM_OC2_SetConfig+0xe4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_OC2_SetConfig+0x94>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <TIM_OC2_SetConfig+0xe8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d113      	bne.n	8003ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40010400 	.word	0x40010400

08003cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <TIM_OC3_SetConfig+0xe0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_OC3_SetConfig+0x66>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <TIM_OC3_SetConfig+0xe4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10d      	bne.n	8003d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <TIM_OC3_SetConfig+0xe0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_OC3_SetConfig+0x92>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <TIM_OC3_SetConfig+0xe4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d113      	bne.n	8003db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40010400 	.word	0x40010400

08003de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <TIM_OC4_SetConfig+0xa4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_OC4_SetConfig+0x68>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <TIM_OC4_SetConfig+0xa8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d109      	bne.n	8003e60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400

08003e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e05a      	b.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d01d      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10c      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e03d      	b.n	800406c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03f      	b.n	800410a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe f9ac 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fab3 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b20      	cmp	r3, #32
 800412a:	d140      	bne.n	80041ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Receive_IT+0x26>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e039      	b.n	80041b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_UART_Receive_IT+0x38>
 8004146:	2302      	movs	r3, #2
 8004148:	e032      	b.n	80041b0 <HAL_UART_Receive_IT+0x9e>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	88fa      	ldrh	r2, [r7, #6]
 8004162:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2222      	movs	r2, #34	; 0x22
 800416e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004188:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0220 	orr.w	r2, r2, #32
 80041a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x52>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f98c 	bl	8004524 <UART_Receive_IT>
      return;
 800420c:	e0d1      	b.n	80043b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80b0 	beq.w	8004376 <HAL_UART_IRQHandler+0x1ba>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_UART_IRQHandler+0x70>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80a5 	beq.w	8004376 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_UART_IRQHandler+0x90>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_UART_IRQHandler+0xb0>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	f043 0202 	orr.w	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_UART_IRQHandler+0xd0>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00f      	beq.n	80042b6 <HAL_UART_IRQHandler+0xfa>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <HAL_UART_IRQHandler+0xee>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	f043 0208 	orr.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d078      	beq.n	80043b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_UART_IRQHandler+0x11c>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f926 	bl	8004524 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_UART_IRQHandler+0x144>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d031      	beq.n	8004364 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f86f 	bl	80043e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d123      	bne.n	800435c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <HAL_UART_IRQHandler+0x1fc>)
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe faf6 	bl	800292a <HAL_DMA_Abort_IT>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d016      	beq.n	8004372 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800434e:	4610      	mov	r0, r2
 8004350:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	e00e      	b.n	8004372 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f83b 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435a:	e00a      	b.n	8004372 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f837 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004362:	e006      	b.n	8004372 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f833 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004370:	e01e      	b.n	80043b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004372:	bf00      	nop
    return;
 8004374:	e01c      	b.n	80043b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_UART_IRQHandler+0x1d6>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f85c 	bl	8004448 <UART_Transmit_IT>
    return;
 8004390:	e00f      	b.n	80043b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1f6>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8a4 	bl	80044f4 <UART_EndTransmit_IT>
    return;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80043b0:	bf00      	nop
  }
}
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	08004421 	.word	0x08004421

080043bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff ffc8 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b21      	cmp	r3, #33	; 0x21
 800445a:	d144      	bne.n	80044e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d11a      	bne.n	800449c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	621a      	str	r2, [r3, #32]
 800448e:	e00e      	b.n	80044ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]
 800449a:	e008      	b.n	80044ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6211      	str	r1, [r2, #32]
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff51 	bl	80043bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b22      	cmp	r3, #34	; 0x22
 8004536:	d171      	bne.n	800461c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d123      	bne.n	800458a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10e      	bne.n	800456e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	1c9a      	adds	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
 800456c:	e029      	b.n	80045c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
 8004588:	e01b      	b.n	80045c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6858      	ldr	r0, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	1c59      	adds	r1, r3, #1
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6291      	str	r1, [r2, #40]	; 0x28
 80045a2:	b2c2      	uxtb	r2, r0
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e00c      	b.n	80045c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	1c58      	adds	r0, r3, #1
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	6288      	str	r0, [r1, #40]	; 0x28
 80045ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4619      	mov	r1, r3
 80045d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d120      	bne.n	8004618 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0220 	bic.w	r2, r2, #32
 80045e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fc7e 	bl	8000f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e002      	b.n	800461e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800466a:	f023 030c 	bic.w	r3, r3, #12
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	430b      	orrs	r3, r1
 8004676:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004696:	f040 818b 	bne.w	80049b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4ac1      	ldr	r2, [pc, #772]	; (80049a4 <UART_SetConfig+0x37c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d005      	beq.n	80046b0 <UART_SetConfig+0x88>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4abf      	ldr	r2, [pc, #764]	; (80049a8 <UART_SetConfig+0x380>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	f040 80bd 	bne.w	800482a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7fe ff90 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80046b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	461d      	mov	r5, r3
 80046ba:	f04f 0600 	mov.w	r6, #0
 80046be:	46a8      	mov	r8, r5
 80046c0:	46b1      	mov	r9, r6
 80046c2:	eb18 0308 	adds.w	r3, r8, r8
 80046c6:	eb49 0409 	adc.w	r4, r9, r9
 80046ca:	4698      	mov	r8, r3
 80046cc:	46a1      	mov	r9, r4
 80046ce:	eb18 0805 	adds.w	r8, r8, r5
 80046d2:	eb49 0906 	adc.w	r9, r9, r6
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046ea:	4688      	mov	r8, r1
 80046ec:	4691      	mov	r9, r2
 80046ee:	eb18 0005 	adds.w	r0, r8, r5
 80046f2:	eb49 0106 	adc.w	r1, r9, r6
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	461d      	mov	r5, r3
 80046fc:	f04f 0600 	mov.w	r6, #0
 8004700:	196b      	adds	r3, r5, r5
 8004702:	eb46 0406 	adc.w	r4, r6, r6
 8004706:	461a      	mov	r2, r3
 8004708:	4623      	mov	r3, r4
 800470a:	f7fc fa41 	bl	8000b90 <__aeabi_uldivmod>
 800470e:	4603      	mov	r3, r0
 8004710:	460c      	mov	r4, r1
 8004712:	461a      	mov	r2, r3
 8004714:	4ba5      	ldr	r3, [pc, #660]	; (80049ac <UART_SetConfig+0x384>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	461d      	mov	r5, r3
 8004724:	f04f 0600 	mov.w	r6, #0
 8004728:	46a9      	mov	r9, r5
 800472a:	46b2      	mov	sl, r6
 800472c:	eb19 0309 	adds.w	r3, r9, r9
 8004730:	eb4a 040a 	adc.w	r4, sl, sl
 8004734:	4699      	mov	r9, r3
 8004736:	46a2      	mov	sl, r4
 8004738:	eb19 0905 	adds.w	r9, r9, r5
 800473c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800474c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004754:	4689      	mov	r9, r1
 8004756:	4692      	mov	sl, r2
 8004758:	eb19 0005 	adds.w	r0, r9, r5
 800475c:	eb4a 0106 	adc.w	r1, sl, r6
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	461d      	mov	r5, r3
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	196b      	adds	r3, r5, r5
 800476c:	eb46 0406 	adc.w	r4, r6, r6
 8004770:	461a      	mov	r2, r3
 8004772:	4623      	mov	r3, r4
 8004774:	f7fc fa0c 	bl	8000b90 <__aeabi_uldivmod>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	461a      	mov	r2, r3
 800477e:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <UART_SetConfig+0x384>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a86      	ldr	r2, [pc, #536]	; (80049ac <UART_SetConfig+0x384>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a0:	4498      	add	r8, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	461d      	mov	r5, r3
 80047a6:	f04f 0600 	mov.w	r6, #0
 80047aa:	46a9      	mov	r9, r5
 80047ac:	46b2      	mov	sl, r6
 80047ae:	eb19 0309 	adds.w	r3, r9, r9
 80047b2:	eb4a 040a 	adc.w	r4, sl, sl
 80047b6:	4699      	mov	r9, r3
 80047b8:	46a2      	mov	sl, r4
 80047ba:	eb19 0905 	adds.w	r9, r9, r5
 80047be:	eb4a 0a06 	adc.w	sl, sl, r6
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d6:	4689      	mov	r9, r1
 80047d8:	4692      	mov	sl, r2
 80047da:	eb19 0005 	adds.w	r0, r9, r5
 80047de:	eb4a 0106 	adc.w	r1, sl, r6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	461d      	mov	r5, r3
 80047e8:	f04f 0600 	mov.w	r6, #0
 80047ec:	196b      	adds	r3, r5, r5
 80047ee:	eb46 0406 	adc.w	r4, r6, r6
 80047f2:	461a      	mov	r2, r3
 80047f4:	4623      	mov	r3, r4
 80047f6:	f7fc f9cb 	bl	8000b90 <__aeabi_uldivmod>
 80047fa:	4603      	mov	r3, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	461a      	mov	r2, r3
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <UART_SetConfig+0x384>)
 8004802:	fba3 1302 	umull	r1, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2164      	movs	r1, #100	; 0x64
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <UART_SetConfig+0x384>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 0207 	and.w	r2, r3, #7
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4442      	add	r2, r8
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	e26f      	b.n	8004d0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800482a:	f7fe febf 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 800482e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	461d      	mov	r5, r3
 8004834:	f04f 0600 	mov.w	r6, #0
 8004838:	46a8      	mov	r8, r5
 800483a:	46b1      	mov	r9, r6
 800483c:	eb18 0308 	adds.w	r3, r8, r8
 8004840:	eb49 0409 	adc.w	r4, r9, r9
 8004844:	4698      	mov	r8, r3
 8004846:	46a1      	mov	r9, r4
 8004848:	eb18 0805 	adds.w	r8, r8, r5
 800484c:	eb49 0906 	adc.w	r9, r9, r6
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800485c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004860:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004864:	4688      	mov	r8, r1
 8004866:	4691      	mov	r9, r2
 8004868:	eb18 0005 	adds.w	r0, r8, r5
 800486c:	eb49 0106 	adc.w	r1, r9, r6
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	461d      	mov	r5, r3
 8004876:	f04f 0600 	mov.w	r6, #0
 800487a:	196b      	adds	r3, r5, r5
 800487c:	eb46 0406 	adc.w	r4, r6, r6
 8004880:	461a      	mov	r2, r3
 8004882:	4623      	mov	r3, r4
 8004884:	f7fc f984 	bl	8000b90 <__aeabi_uldivmod>
 8004888:	4603      	mov	r3, r0
 800488a:	460c      	mov	r4, r1
 800488c:	461a      	mov	r2, r3
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <UART_SetConfig+0x384>)
 8004890:	fba3 2302 	umull	r2, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	461d      	mov	r5, r3
 800489e:	f04f 0600 	mov.w	r6, #0
 80048a2:	46a9      	mov	r9, r5
 80048a4:	46b2      	mov	sl, r6
 80048a6:	eb19 0309 	adds.w	r3, r9, r9
 80048aa:	eb4a 040a 	adc.w	r4, sl, sl
 80048ae:	4699      	mov	r9, r3
 80048b0:	46a2      	mov	sl, r4
 80048b2:	eb19 0905 	adds.w	r9, r9, r5
 80048b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ce:	4689      	mov	r9, r1
 80048d0:	4692      	mov	sl, r2
 80048d2:	eb19 0005 	adds.w	r0, r9, r5
 80048d6:	eb4a 0106 	adc.w	r1, sl, r6
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	461d      	mov	r5, r3
 80048e0:	f04f 0600 	mov.w	r6, #0
 80048e4:	196b      	adds	r3, r5, r5
 80048e6:	eb46 0406 	adc.w	r4, r6, r6
 80048ea:	461a      	mov	r2, r3
 80048ec:	4623      	mov	r3, r4
 80048ee:	f7fc f94f 	bl	8000b90 <__aeabi_uldivmod>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <UART_SetConfig+0x384>)
 80048fa:	fba3 1302 	umull	r1, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2164      	movs	r1, #100	; 0x64
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	3332      	adds	r3, #50	; 0x32
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <UART_SetConfig+0x384>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800491a:	4498      	add	r8, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	461d      	mov	r5, r3
 8004920:	f04f 0600 	mov.w	r6, #0
 8004924:	46a9      	mov	r9, r5
 8004926:	46b2      	mov	sl, r6
 8004928:	eb19 0309 	adds.w	r3, r9, r9
 800492c:	eb4a 040a 	adc.w	r4, sl, sl
 8004930:	4699      	mov	r9, r3
 8004932:	46a2      	mov	sl, r4
 8004934:	eb19 0905 	adds.w	r9, r9, r5
 8004938:	eb4a 0a06 	adc.w	sl, sl, r6
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800494c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004950:	4689      	mov	r9, r1
 8004952:	4692      	mov	sl, r2
 8004954:	eb19 0005 	adds.w	r0, r9, r5
 8004958:	eb4a 0106 	adc.w	r1, sl, r6
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	461d      	mov	r5, r3
 8004962:	f04f 0600 	mov.w	r6, #0
 8004966:	196b      	adds	r3, r5, r5
 8004968:	eb46 0406 	adc.w	r4, r6, r6
 800496c:	461a      	mov	r2, r3
 800496e:	4623      	mov	r3, r4
 8004970:	f7fc f90e 	bl	8000b90 <__aeabi_uldivmod>
 8004974:	4603      	mov	r3, r0
 8004976:	460c      	mov	r4, r1
 8004978:	461a      	mov	r2, r3
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <UART_SetConfig+0x384>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	; 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3332      	adds	r3, #50	; 0x32
 800498e:	4a07      	ldr	r2, [pc, #28]	; (80049ac <UART_SetConfig+0x384>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	f003 0207 	and.w	r2, r3, #7
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4442      	add	r2, r8
 80049a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049a2:	e1b2      	b.n	8004d0a <UART_SetConfig+0x6e2>
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4ad7      	ldr	r2, [pc, #860]	; (8004d14 <UART_SetConfig+0x6ec>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d005      	beq.n	80049c6 <UART_SetConfig+0x39e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4ad6      	ldr	r2, [pc, #856]	; (8004d18 <UART_SetConfig+0x6f0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	f040 80d1 	bne.w	8004b68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c6:	f7fe fe05 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80049ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	469a      	mov	sl, r3
 80049d0:	f04f 0b00 	mov.w	fp, #0
 80049d4:	46d0      	mov	r8, sl
 80049d6:	46d9      	mov	r9, fp
 80049d8:	eb18 0308 	adds.w	r3, r8, r8
 80049dc:	eb49 0409 	adc.w	r4, r9, r9
 80049e0:	4698      	mov	r8, r3
 80049e2:	46a1      	mov	r9, r4
 80049e4:	eb18 080a 	adds.w	r8, r8, sl
 80049e8:	eb49 090b 	adc.w	r9, r9, fp
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a00:	4688      	mov	r8, r1
 8004a02:	4691      	mov	r9, r2
 8004a04:	eb1a 0508 	adds.w	r5, sl, r8
 8004a08:	eb4b 0609 	adc.w	r6, fp, r9
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	f04f 0400 	mov.w	r4, #0
 8004a1e:	0094      	lsls	r4, r2, #2
 8004a20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	f7fc f8af 	bl	8000b90 <__aeabi_uldivmod>
 8004a32:	4603      	mov	r3, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	461a      	mov	r2, r3
 8004a38:	4bb8      	ldr	r3, [pc, #736]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	469b      	mov	fp, r3
 8004a48:	f04f 0c00 	mov.w	ip, #0
 8004a4c:	46d9      	mov	r9, fp
 8004a4e:	46e2      	mov	sl, ip
 8004a50:	eb19 0309 	adds.w	r3, r9, r9
 8004a54:	eb4a 040a 	adc.w	r4, sl, sl
 8004a58:	4699      	mov	r9, r3
 8004a5a:	46a2      	mov	sl, r4
 8004a5c:	eb19 090b 	adds.w	r9, r9, fp
 8004a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a78:	4689      	mov	r9, r1
 8004a7a:	4692      	mov	sl, r2
 8004a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8004a80:	eb4c 060a 	adc.w	r6, ip, sl
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	0094      	lsls	r4, r2, #2
 8004a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	f7fc f873 	bl	8000b90 <__aeabi_uldivmod>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b9a      	ldr	r3, [pc, #616]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2164      	movs	r1, #100	; 0x64
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	3332      	adds	r3, #50	; 0x32
 8004ac4:	4a95      	ldr	r2, [pc, #596]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad0:	4498      	add	r8, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	469b      	mov	fp, r3
 8004ad6:	f04f 0c00 	mov.w	ip, #0
 8004ada:	46d9      	mov	r9, fp
 8004adc:	46e2      	mov	sl, ip
 8004ade:	eb19 0309 	adds.w	r3, r9, r9
 8004ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae6:	4699      	mov	r9, r3
 8004ae8:	46a2      	mov	sl, r4
 8004aea:	eb19 090b 	adds.w	r9, r9, fp
 8004aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b06:	4689      	mov	r9, r1
 8004b08:	4692      	mov	sl, r2
 8004b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8004b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4619      	mov	r1, r3
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	f04f 0400 	mov.w	r4, #0
 8004b24:	0094      	lsls	r4, r2, #2
 8004b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	4631      	mov	r1, r6
 8004b34:	f7fc f82c 	bl	8000b90 <__aeabi_uldivmod>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b77      	ldr	r3, [pc, #476]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004b40:	fba3 1302 	umull	r1, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2164      	movs	r1, #100	; 0x64
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	3332      	adds	r3, #50	; 0x32
 8004b52:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	f003 020f 	and.w	r2, r3, #15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4442      	add	r2, r8
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	e0d0      	b.n	8004d0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fd20 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8004b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	469a      	mov	sl, r3
 8004b72:	f04f 0b00 	mov.w	fp, #0
 8004b76:	46d0      	mov	r8, sl
 8004b78:	46d9      	mov	r9, fp
 8004b7a:	eb18 0308 	adds.w	r3, r8, r8
 8004b7e:	eb49 0409 	adc.w	r4, r9, r9
 8004b82:	4698      	mov	r8, r3
 8004b84:	46a1      	mov	r9, r4
 8004b86:	eb18 080a 	adds.w	r8, r8, sl
 8004b8a:	eb49 090b 	adc.w	r9, r9, fp
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ba2:	4688      	mov	r8, r1
 8004ba4:	4691      	mov	r9, r2
 8004ba6:	eb1a 0508 	adds.w	r5, sl, r8
 8004baa:	eb4b 0609 	adc.w	r6, fp, r9
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	0094      	lsls	r4, r2, #2
 8004bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	4631      	mov	r1, r6
 8004bd0:	f7fb ffde 	bl	8000b90 <__aeabi_uldivmod>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	469b      	mov	fp, r3
 8004bea:	f04f 0c00 	mov.w	ip, #0
 8004bee:	46d9      	mov	r9, fp
 8004bf0:	46e2      	mov	sl, ip
 8004bf2:	eb19 0309 	adds.w	r3, r9, r9
 8004bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bfa:	4699      	mov	r9, r3
 8004bfc:	46a2      	mov	sl, r4
 8004bfe:	eb19 090b 	adds.w	r9, r9, fp
 8004c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c1a:	4689      	mov	r9, r1
 8004c1c:	4692      	mov	sl, r2
 8004c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8004c22:	eb4c 060a 	adc.w	r6, ip, sl
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f04f 0400 	mov.w	r4, #0
 8004c38:	0094      	lsls	r4, r2, #2
 8004c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3e:	008b      	lsls	r3, r1, #2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	4628      	mov	r0, r5
 8004c46:	4631      	mov	r1, r6
 8004c48:	f7fb ffa2 	bl	8000b90 <__aeabi_uldivmod>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004c54:	fba3 1302 	umull	r1, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	2164      	movs	r1, #100	; 0x64
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	3332      	adds	r3, #50	; 0x32
 8004c66:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c72:	4498      	add	r8, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	469b      	mov	fp, r3
 8004c78:	f04f 0c00 	mov.w	ip, #0
 8004c7c:	46d9      	mov	r9, fp
 8004c7e:	46e2      	mov	sl, ip
 8004c80:	eb19 0309 	adds.w	r3, r9, r9
 8004c84:	eb4a 040a 	adc.w	r4, sl, sl
 8004c88:	4699      	mov	r9, r3
 8004c8a:	46a2      	mov	sl, r4
 8004c8c:	eb19 090b 	adds.w	r9, r9, fp
 8004c90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ca8:	4689      	mov	r9, r1
 8004caa:	4692      	mov	sl, r2
 8004cac:	eb1b 0509 	adds.w	r5, fp, r9
 8004cb0:	eb4c 060a 	adc.w	r6, ip, sl
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	f04f 0400 	mov.w	r4, #0
 8004cc6:	0094      	lsls	r4, r2, #2
 8004cc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	f7fb ff5b 	bl	8000b90 <__aeabi_uldivmod>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2164      	movs	r1, #100	; 0x64
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	3332      	adds	r3, #50	; 0x32
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <UART_SetConfig+0x6f4>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4442      	add	r2, r8
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	e7ff      	b.n	8004d0a <UART_SetConfig+0x6e2>
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	40011000 	.word	0x40011000
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	51eb851f 	.word	0x51eb851f

08004d20 <__errno>:
 8004d20:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <__errno+0x8>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000024 	.word	0x20000024

08004d2c <__libc_init_array>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4e0d      	ldr	r6, [pc, #52]	; (8004d64 <__libc_init_array+0x38>)
 8004d30:	4c0d      	ldr	r4, [pc, #52]	; (8004d68 <__libc_init_array+0x3c>)
 8004d32:	1ba4      	subs	r4, r4, r6
 8004d34:	10a4      	asrs	r4, r4, #2
 8004d36:	2500      	movs	r5, #0
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d109      	bne.n	8004d50 <__libc_init_array+0x24>
 8004d3c:	4e0b      	ldr	r6, [pc, #44]	; (8004d6c <__libc_init_array+0x40>)
 8004d3e:	4c0c      	ldr	r4, [pc, #48]	; (8004d70 <__libc_init_array+0x44>)
 8004d40:	f001 fd24 	bl	800678c <_init>
 8004d44:	1ba4      	subs	r4, r4, r6
 8004d46:	10a4      	asrs	r4, r4, #2
 8004d48:	2500      	movs	r5, #0
 8004d4a:	42a5      	cmp	r5, r4
 8004d4c:	d105      	bne.n	8004d5a <__libc_init_array+0x2e>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d54:	4798      	blx	r3
 8004d56:	3501      	adds	r5, #1
 8004d58:	e7ee      	b.n	8004d38 <__libc_init_array+0xc>
 8004d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d5e:	4798      	blx	r3
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7f2      	b.n	8004d4a <__libc_init_array+0x1e>
 8004d64:	08006858 	.word	0x08006858
 8004d68:	08006858 	.word	0x08006858
 8004d6c:	08006858 	.word	0x08006858
 8004d70:	0800685c 	.word	0x0800685c

08004d74 <memset>:
 8004d74:	4402      	add	r2, r0
 8004d76:	4603      	mov	r3, r0
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>
 8004d84:	0000      	movs	r0, r0
	...

08004d88 <atan>:
 8004d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	ec55 4b10 	vmov	r4, r5, d0
 8004d90:	4bc3      	ldr	r3, [pc, #780]	; (80050a0 <atan+0x318>)
 8004d92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d96:	429e      	cmp	r6, r3
 8004d98:	46ab      	mov	fp, r5
 8004d9a:	dd18      	ble.n	8004dce <atan+0x46>
 8004d9c:	4bc1      	ldr	r3, [pc, #772]	; (80050a4 <atan+0x31c>)
 8004d9e:	429e      	cmp	r6, r3
 8004da0:	dc01      	bgt.n	8004da6 <atan+0x1e>
 8004da2:	d109      	bne.n	8004db8 <atan+0x30>
 8004da4:	b144      	cbz	r4, 8004db8 <atan+0x30>
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	4629      	mov	r1, r5
 8004dae:	f7fb fa11 	bl	80001d4 <__adddf3>
 8004db2:	4604      	mov	r4, r0
 8004db4:	460d      	mov	r5, r1
 8004db6:	e006      	b.n	8004dc6 <atan+0x3e>
 8004db8:	f1bb 0f00 	cmp.w	fp, #0
 8004dbc:	f340 8131 	ble.w	8005022 <atan+0x29a>
 8004dc0:	a59b      	add	r5, pc, #620	; (adr r5, 8005030 <atan+0x2a8>)
 8004dc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dc6:	ec45 4b10 	vmov	d0, r4, r5
 8004dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dce:	4bb6      	ldr	r3, [pc, #728]	; (80050a8 <atan+0x320>)
 8004dd0:	429e      	cmp	r6, r3
 8004dd2:	dc14      	bgt.n	8004dfe <atan+0x76>
 8004dd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004dd8:	429e      	cmp	r6, r3
 8004dda:	dc0d      	bgt.n	8004df8 <atan+0x70>
 8004ddc:	a396      	add	r3, pc, #600	; (adr r3, 8005038 <atan+0x2b0>)
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	ee10 0a10 	vmov	r0, s0
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb f9f4 	bl	80001d4 <__adddf3>
 8004dec:	2200      	movs	r2, #0
 8004dee:	4baf      	ldr	r3, [pc, #700]	; (80050ac <atan+0x324>)
 8004df0:	f7fb fe36 	bl	8000a60 <__aeabi_dcmpgt>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e6      	bne.n	8004dc6 <atan+0x3e>
 8004df8:	f04f 3aff 	mov.w	sl, #4294967295
 8004dfc:	e02b      	b.n	8004e56 <atan+0xce>
 8004dfe:	f000 f963 	bl	80050c8 <fabs>
 8004e02:	4bab      	ldr	r3, [pc, #684]	; (80050b0 <atan+0x328>)
 8004e04:	429e      	cmp	r6, r3
 8004e06:	ec55 4b10 	vmov	r4, r5, d0
 8004e0a:	f300 80bf 	bgt.w	8004f8c <atan+0x204>
 8004e0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004e12:	429e      	cmp	r6, r3
 8004e14:	f300 80a0 	bgt.w	8004f58 <atan+0x1d0>
 8004e18:	ee10 2a10 	vmov	r2, s0
 8004e1c:	ee10 0a10 	vmov	r0, s0
 8004e20:	462b      	mov	r3, r5
 8004e22:	4629      	mov	r1, r5
 8004e24:	f7fb f9d6 	bl	80001d4 <__adddf3>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4ba0      	ldr	r3, [pc, #640]	; (80050ac <atan+0x324>)
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_dsub>
 8004e30:	2200      	movs	r2, #0
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f7fb f9c9 	bl	80001d4 <__adddf3>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4630      	mov	r0, r6
 8004e48:	4639      	mov	r1, r7
 8004e4a:	f7fb fca3 	bl	8000794 <__aeabi_ddiv>
 8004e4e:	f04f 0a00 	mov.w	sl, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	4622      	mov	r2, r4
 8004e58:	462b      	mov	r3, r5
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb fb6f 	bl	8000540 <__aeabi_dmul>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4680      	mov	r8, r0
 8004e68:	4689      	mov	r9, r1
 8004e6a:	f7fb fb69 	bl	8000540 <__aeabi_dmul>
 8004e6e:	a374      	add	r3, pc, #464	; (adr r3, 8005040 <atan+0x2b8>)
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	4606      	mov	r6, r0
 8004e76:	460f      	mov	r7, r1
 8004e78:	f7fb fb62 	bl	8000540 <__aeabi_dmul>
 8004e7c:	a372      	add	r3, pc, #456	; (adr r3, 8005048 <atan+0x2c0>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb f9a7 	bl	80001d4 <__adddf3>
 8004e86:	4632      	mov	r2, r6
 8004e88:	463b      	mov	r3, r7
 8004e8a:	f7fb fb59 	bl	8000540 <__aeabi_dmul>
 8004e8e:	a370      	add	r3, pc, #448	; (adr r3, 8005050 <atan+0x2c8>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f7fb f99e 	bl	80001d4 <__adddf3>
 8004e98:	4632      	mov	r2, r6
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	f7fb fb50 	bl	8000540 <__aeabi_dmul>
 8004ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8005058 <atan+0x2d0>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb f995 	bl	80001d4 <__adddf3>
 8004eaa:	4632      	mov	r2, r6
 8004eac:	463b      	mov	r3, r7
 8004eae:	f7fb fb47 	bl	8000540 <__aeabi_dmul>
 8004eb2:	a36b      	add	r3, pc, #428	; (adr r3, 8005060 <atan+0x2d8>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb f98c 	bl	80001d4 <__adddf3>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	f7fb fb3e 	bl	8000540 <__aeabi_dmul>
 8004ec4:	a368      	add	r3, pc, #416	; (adr r3, 8005068 <atan+0x2e0>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb f983 	bl	80001d4 <__adddf3>
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	f7fb fb35 	bl	8000540 <__aeabi_dmul>
 8004ed6:	a366      	add	r3, pc, #408	; (adr r3, 8005070 <atan+0x2e8>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	4680      	mov	r8, r0
 8004ede:	4689      	mov	r9, r1
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb fb2c 	bl	8000540 <__aeabi_dmul>
 8004ee8:	a363      	add	r3, pc, #396	; (adr r3, 8005078 <atan+0x2f0>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb f96f 	bl	80001d0 <__aeabi_dsub>
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	f7fb fb23 	bl	8000540 <__aeabi_dmul>
 8004efa:	a361      	add	r3, pc, #388	; (adr r3, 8005080 <atan+0x2f8>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	a35e      	add	r3, pc, #376	; (adr r3, 8005088 <atan+0x300>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f95d 	bl	80001d0 <__aeabi_dsub>
 8004f16:	4632      	mov	r2, r6
 8004f18:	463b      	mov	r3, r7
 8004f1a:	f7fb fb11 	bl	8000540 <__aeabi_dmul>
 8004f1e:	a35c      	add	r3, pc, #368	; (adr r3, 8005090 <atan+0x308>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb f954 	bl	80001d0 <__aeabi_dsub>
 8004f28:	4632      	mov	r2, r6
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	f7fb fb08 	bl	8000540 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4640      	mov	r0, r8
 8004f36:	4649      	mov	r1, r9
 8004f38:	f7fb f94c 	bl	80001d4 <__adddf3>
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f7fb fafe 	bl	8000540 <__aeabi_dmul>
 8004f44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	d14b      	bne.n	8004fe6 <atan+0x25e>
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	f7fb f93d 	bl	80001d0 <__aeabi_dsub>
 8004f56:	e72c      	b.n	8004db2 <atan+0x2a>
 8004f58:	ee10 0a10 	vmov	r0, s0
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <atan+0x324>)
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_dsub>
 8004f66:	2200      	movs	r2, #0
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	4b4f      	ldr	r3, [pc, #316]	; (80050ac <atan+0x324>)
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb f92f 	bl	80001d4 <__adddf3>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	f7fb fc09 	bl	8000794 <__aeabi_ddiv>
 8004f82:	f04f 0a01 	mov.w	sl, #1
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	e764      	b.n	8004e56 <atan+0xce>
 8004f8c:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <atan+0x32c>)
 8004f8e:	429e      	cmp	r6, r3
 8004f90:	dc1d      	bgt.n	8004fce <atan+0x246>
 8004f92:	ee10 0a10 	vmov	r0, s0
 8004f96:	2200      	movs	r2, #0
 8004f98:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <atan+0x330>)
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f918 	bl	80001d0 <__aeabi_dsub>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <atan+0x330>)
 8004fa8:	4620      	mov	r0, r4
 8004faa:	4629      	mov	r1, r5
 8004fac:	f7fb fac8 	bl	8000540 <__aeabi_dmul>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <atan+0x324>)
 8004fb4:	f7fb f90e 	bl	80001d4 <__adddf3>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	f7fb fbe8 	bl	8000794 <__aeabi_ddiv>
 8004fc4:	f04f 0a02 	mov.w	sl, #2
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	e743      	b.n	8004e56 <atan+0xce>
 8004fce:	462b      	mov	r3, r5
 8004fd0:	ee10 2a10 	vmov	r2, s0
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	4939      	ldr	r1, [pc, #228]	; (80050bc <atan+0x334>)
 8004fd8:	f7fb fbdc 	bl	8000794 <__aeabi_ddiv>
 8004fdc:	f04f 0a03 	mov.w	sl, #3
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	e737      	b.n	8004e56 <atan+0xce>
 8004fe6:	4b36      	ldr	r3, [pc, #216]	; (80050c0 <atan+0x338>)
 8004fe8:	4e36      	ldr	r6, [pc, #216]	; (80050c4 <atan+0x33c>)
 8004fea:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004fee:	4456      	add	r6, sl
 8004ff0:	449a      	add	sl, r3
 8004ff2:	e9da 2300 	ldrd	r2, r3, [sl]
 8004ff6:	f7fb f8eb 	bl	80001d0 <__aeabi_dsub>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb f8e7 	bl	80001d0 <__aeabi_dsub>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	e9d6 0100 	ldrd	r0, r1, [r6]
 800500a:	f7fb f8e1 	bl	80001d0 <__aeabi_dsub>
 800500e:	f1bb 0f00 	cmp.w	fp, #0
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	f6bf aed6 	bge.w	8004dc6 <atan+0x3e>
 800501a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800501e:	461d      	mov	r5, r3
 8005020:	e6d1      	b.n	8004dc6 <atan+0x3e>
 8005022:	a51d      	add	r5, pc, #116	; (adr r5, 8005098 <atan+0x310>)
 8005024:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005028:	e6cd      	b.n	8004dc6 <atan+0x3e>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	54442d18 	.word	0x54442d18
 8005034:	3ff921fb 	.word	0x3ff921fb
 8005038:	8800759c 	.word	0x8800759c
 800503c:	7e37e43c 	.word	0x7e37e43c
 8005040:	e322da11 	.word	0xe322da11
 8005044:	3f90ad3a 	.word	0x3f90ad3a
 8005048:	24760deb 	.word	0x24760deb
 800504c:	3fa97b4b 	.word	0x3fa97b4b
 8005050:	a0d03d51 	.word	0xa0d03d51
 8005054:	3fb10d66 	.word	0x3fb10d66
 8005058:	c54c206e 	.word	0xc54c206e
 800505c:	3fb745cd 	.word	0x3fb745cd
 8005060:	920083ff 	.word	0x920083ff
 8005064:	3fc24924 	.word	0x3fc24924
 8005068:	5555550d 	.word	0x5555550d
 800506c:	3fd55555 	.word	0x3fd55555
 8005070:	2c6a6c2f 	.word	0x2c6a6c2f
 8005074:	bfa2b444 	.word	0xbfa2b444
 8005078:	52defd9a 	.word	0x52defd9a
 800507c:	3fadde2d 	.word	0x3fadde2d
 8005080:	af749a6d 	.word	0xaf749a6d
 8005084:	3fb3b0f2 	.word	0x3fb3b0f2
 8005088:	fe231671 	.word	0xfe231671
 800508c:	3fbc71c6 	.word	0x3fbc71c6
 8005090:	9998ebc4 	.word	0x9998ebc4
 8005094:	3fc99999 	.word	0x3fc99999
 8005098:	54442d18 	.word	0x54442d18
 800509c:	bff921fb 	.word	0xbff921fb
 80050a0:	440fffff 	.word	0x440fffff
 80050a4:	7ff00000 	.word	0x7ff00000
 80050a8:	3fdbffff 	.word	0x3fdbffff
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	3ff2ffff 	.word	0x3ff2ffff
 80050b4:	40037fff 	.word	0x40037fff
 80050b8:	3ff80000 	.word	0x3ff80000
 80050bc:	bff00000 	.word	0xbff00000
 80050c0:	080067e0 	.word	0x080067e0
 80050c4:	080067c0 	.word	0x080067c0

080050c8 <fabs>:
 80050c8:	ec51 0b10 	vmov	r0, r1, d0
 80050cc:	ee10 2a10 	vmov	r2, s0
 80050d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050d4:	ec43 2b10 	vmov	d0, r2, r3
 80050d8:	4770      	bx	lr
	...

080050dc <acos>:
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	ed2d 8b02 	vpush	{d8}
 80050e2:	4e26      	ldr	r6, [pc, #152]	; (800517c <acos+0xa0>)
 80050e4:	b08b      	sub	sp, #44	; 0x2c
 80050e6:	ec55 4b10 	vmov	r4, r5, d0
 80050ea:	f000 fa19 	bl	8005520 <__ieee754_acos>
 80050ee:	f996 3000 	ldrsb.w	r3, [r6]
 80050f2:	eeb0 8a40 	vmov.f32	s16, s0
 80050f6:	eef0 8a60 	vmov.f32	s17, s1
 80050fa:	3301      	adds	r3, #1
 80050fc:	d036      	beq.n	800516c <acos+0x90>
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	f7fb fcb5 	bl	8000a74 <__aeabi_dcmpun>
 800510a:	4607      	mov	r7, r0
 800510c:	bb70      	cbnz	r0, 800516c <acos+0x90>
 800510e:	ec45 4b10 	vmov	d0, r4, r5
 8005112:	f7ff ffd9 	bl	80050c8 <fabs>
 8005116:	2200      	movs	r2, #0
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <acos+0xa4>)
 800511a:	ec51 0b10 	vmov	r0, r1, d0
 800511e:	f7fb fc9f 	bl	8000a60 <__aeabi_dcmpgt>
 8005122:	b318      	cbz	r0, 800516c <acos+0x90>
 8005124:	2301      	movs	r3, #1
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4816      	ldr	r0, [pc, #88]	; (8005184 <acos+0xa8>)
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <acos+0xac>)
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	9708      	str	r7, [sp, #32]
 8005130:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005134:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005138:	f001 fa16 	bl	8006568 <nan>
 800513c:	f996 3000 	ldrsb.w	r3, [r6]
 8005140:	2b02      	cmp	r3, #2
 8005142:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005146:	d104      	bne.n	8005152 <acos+0x76>
 8005148:	f7ff fdea 	bl	8004d20 <__errno>
 800514c:	2321      	movs	r3, #33	; 0x21
 800514e:	6003      	str	r3, [r0, #0]
 8005150:	e004      	b.n	800515c <acos+0x80>
 8005152:	4668      	mov	r0, sp
 8005154:	f001 fa06 	bl	8006564 <matherr>
 8005158:	2800      	cmp	r0, #0
 800515a:	d0f5      	beq.n	8005148 <acos+0x6c>
 800515c:	9b08      	ldr	r3, [sp, #32]
 800515e:	b11b      	cbz	r3, 8005168 <acos+0x8c>
 8005160:	f7ff fdde 	bl	8004d20 <__errno>
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	6003      	str	r3, [r0, #0]
 8005168:	ed9d 8b06 	vldr	d8, [sp, #24]
 800516c:	eeb0 0a48 	vmov.f32	s0, s16
 8005170:	eef0 0a68 	vmov.f32	s1, s17
 8005174:	b00b      	add	sp, #44	; 0x2c
 8005176:	ecbd 8b02 	vpop	{d8}
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	20000088 	.word	0x20000088
 8005180:	3ff00000 	.word	0x3ff00000
 8005184:	08006804 	.word	0x08006804
 8005188:	08006800 	.word	0x08006800

0800518c <pow>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	ed2d 8b04 	vpush	{d8-d9}
 8005194:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005468 <pow+0x2dc>
 8005198:	b08d      	sub	sp, #52	; 0x34
 800519a:	ec57 6b10 	vmov	r6, r7, d0
 800519e:	ec55 4b11 	vmov	r4, r5, d1
 80051a2:	f000 fc19 	bl	80059d8 <__ieee754_pow>
 80051a6:	f999 3000 	ldrsb.w	r3, [r9]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	eeb0 8a40 	vmov.f32	s16, s0
 80051b2:	eef0 8a60 	vmov.f32	s17, s1
 80051b6:	46c8      	mov	r8, r9
 80051b8:	d05f      	beq.n	800527a <pow+0xee>
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb fc57 	bl	8000a74 <__aeabi_dcmpun>
 80051c6:	4683      	mov	fp, r0
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d156      	bne.n	800527a <pow+0xee>
 80051cc:	4632      	mov	r2, r6
 80051ce:	463b      	mov	r3, r7
 80051d0:	4630      	mov	r0, r6
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb fc4e 	bl	8000a74 <__aeabi_dcmpun>
 80051d8:	9001      	str	r0, [sp, #4]
 80051da:	b1e8      	cbz	r0, 8005218 <pow+0x8c>
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	f7fb fc14 	bl	8000a10 <__aeabi_dcmpeq>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d046      	beq.n	800527a <pow+0xee>
 80051ec:	2301      	movs	r3, #1
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	4b96      	ldr	r3, [pc, #600]	; (800544c <pow+0x2c0>)
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	4b96      	ldr	r3, [pc, #600]	; (8005450 <pow+0x2c4>)
 80051f6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80051fa:	2200      	movs	r2, #0
 80051fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005200:	9b00      	ldr	r3, [sp, #0]
 8005202:	2b02      	cmp	r3, #2
 8005204:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005208:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800520c:	d033      	beq.n	8005276 <pow+0xea>
 800520e:	a802      	add	r0, sp, #8
 8005210:	f001 f9a8 	bl	8006564 <matherr>
 8005214:	bb48      	cbnz	r0, 800526a <pow+0xde>
 8005216:	e05d      	b.n	80052d4 <pow+0x148>
 8005218:	f04f 0a00 	mov.w	sl, #0
 800521c:	f04f 0b00 	mov.w	fp, #0
 8005220:	4652      	mov	r2, sl
 8005222:	465b      	mov	r3, fp
 8005224:	4630      	mov	r0, r6
 8005226:	4639      	mov	r1, r7
 8005228:	f7fb fbf2 	bl	8000a10 <__aeabi_dcmpeq>
 800522c:	ec4b ab19 	vmov	d9, sl, fp
 8005230:	2800      	cmp	r0, #0
 8005232:	d054      	beq.n	80052de <pow+0x152>
 8005234:	4652      	mov	r2, sl
 8005236:	465b      	mov	r3, fp
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb fbe8 	bl	8000a10 <__aeabi_dcmpeq>
 8005240:	4680      	mov	r8, r0
 8005242:	b318      	cbz	r0, 800528c <pow+0x100>
 8005244:	2301      	movs	r3, #1
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	4b80      	ldr	r3, [pc, #512]	; (800544c <pow+0x2c0>)
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	9b01      	ldr	r3, [sp, #4]
 800524e:	930a      	str	r3, [sp, #40]	; 0x28
 8005250:	9b00      	ldr	r3, [sp, #0]
 8005252:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005256:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800525a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0d5      	beq.n	800520e <pow+0x82>
 8005262:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <pow+0x2c4>)
 8005264:	2200      	movs	r2, #0
 8005266:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	b11b      	cbz	r3, 8005276 <pow+0xea>
 800526e:	f7ff fd57 	bl	8004d20 <__errno>
 8005272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005274:	6003      	str	r3, [r0, #0]
 8005276:	ed9d 8b08 	vldr	d8, [sp, #32]
 800527a:	eeb0 0a48 	vmov.f32	s0, s16
 800527e:	eef0 0a68 	vmov.f32	s1, s17
 8005282:	b00d      	add	sp, #52	; 0x34
 8005284:	ecbd 8b04 	vpop	{d8-d9}
 8005288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528c:	ec45 4b10 	vmov	d0, r4, r5
 8005290:	f001 f960 	bl	8006554 <finite>
 8005294:	2800      	cmp	r0, #0
 8005296:	d0f0      	beq.n	800527a <pow+0xee>
 8005298:	4652      	mov	r2, sl
 800529a:	465b      	mov	r3, fp
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb fbc0 	bl	8000a24 <__aeabi_dcmplt>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d0e8      	beq.n	800527a <pow+0xee>
 80052a8:	2301      	movs	r3, #1
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	4b67      	ldr	r3, [pc, #412]	; (800544c <pow+0x2c0>)
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	f999 3000 	ldrsb.w	r3, [r9]
 80052b4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80052b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052c0:	b913      	cbnz	r3, 80052c8 <pow+0x13c>
 80052c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80052c6:	e7a2      	b.n	800520e <pow+0x82>
 80052c8:	4962      	ldr	r1, [pc, #392]	; (8005454 <pow+0x2c8>)
 80052ca:	2000      	movs	r0, #0
 80052cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d19c      	bne.n	800520e <pow+0x82>
 80052d4:	f7ff fd24 	bl	8004d20 <__errno>
 80052d8:	2321      	movs	r3, #33	; 0x21
 80052da:	6003      	str	r3, [r0, #0]
 80052dc:	e7c5      	b.n	800526a <pow+0xde>
 80052de:	eeb0 0a48 	vmov.f32	s0, s16
 80052e2:	eef0 0a68 	vmov.f32	s1, s17
 80052e6:	f001 f935 	bl	8006554 <finite>
 80052ea:	9000      	str	r0, [sp, #0]
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 8081 	bne.w	80053f4 <pow+0x268>
 80052f2:	ec47 6b10 	vmov	d0, r6, r7
 80052f6:	f001 f92d 	bl	8006554 <finite>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d07a      	beq.n	80053f4 <pow+0x268>
 80052fe:	ec45 4b10 	vmov	d0, r4, r5
 8005302:	f001 f927 	bl	8006554 <finite>
 8005306:	2800      	cmp	r0, #0
 8005308:	d074      	beq.n	80053f4 <pow+0x268>
 800530a:	ec53 2b18 	vmov	r2, r3, d8
 800530e:	ee18 0a10 	vmov	r0, s16
 8005312:	4619      	mov	r1, r3
 8005314:	f7fb fbae 	bl	8000a74 <__aeabi_dcmpun>
 8005318:	f999 9000 	ldrsb.w	r9, [r9]
 800531c:	4b4b      	ldr	r3, [pc, #300]	; (800544c <pow+0x2c0>)
 800531e:	b1b0      	cbz	r0, 800534e <pow+0x1c2>
 8005320:	2201      	movs	r2, #1
 8005322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	930a      	str	r3, [sp, #40]	; 0x28
 800532a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800532e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	d0c4      	beq.n	80052c2 <pow+0x136>
 8005338:	4652      	mov	r2, sl
 800533a:	465b      	mov	r3, fp
 800533c:	4650      	mov	r0, sl
 800533e:	4659      	mov	r1, fp
 8005340:	f7fb fa28 	bl	8000794 <__aeabi_ddiv>
 8005344:	f1b9 0f02 	cmp.w	r9, #2
 8005348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800534c:	e7c1      	b.n	80052d2 <pow+0x146>
 800534e:	2203      	movs	r2, #3
 8005350:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005354:	900a      	str	r0, [sp, #40]	; 0x28
 8005356:	4629      	mov	r1, r5
 8005358:	4620      	mov	r0, r4
 800535a:	2200      	movs	r2, #0
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <pow+0x2cc>)
 800535e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005362:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005366:	f7fb f8eb 	bl	8000540 <__aeabi_dmul>
 800536a:	4604      	mov	r4, r0
 800536c:	460d      	mov	r5, r1
 800536e:	f1b9 0f00 	cmp.w	r9, #0
 8005372:	d124      	bne.n	80053be <pow+0x232>
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <pow+0x2d0>)
 8005376:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800537a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800537e:	4630      	mov	r0, r6
 8005380:	4652      	mov	r2, sl
 8005382:	465b      	mov	r3, fp
 8005384:	4639      	mov	r1, r7
 8005386:	f7fb fb4d 	bl	8000a24 <__aeabi_dcmplt>
 800538a:	2800      	cmp	r0, #0
 800538c:	d056      	beq.n	800543c <pow+0x2b0>
 800538e:	ec45 4b10 	vmov	d0, r4, r5
 8005392:	f001 f8f1 	bl	8006578 <rint>
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	ec51 0b10 	vmov	r0, r1, d0
 800539e:	f7fb fb37 	bl	8000a10 <__aeabi_dcmpeq>
 80053a2:	b920      	cbnz	r0, 80053ae <pow+0x222>
 80053a4:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <pow+0x2d4>)
 80053a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80053aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053ae:	f998 3000 	ldrsb.w	r3, [r8]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d142      	bne.n	800543c <pow+0x2b0>
 80053b6:	f7ff fcb3 	bl	8004d20 <__errno>
 80053ba:	2322      	movs	r3, #34	; 0x22
 80053bc:	e78d      	b.n	80052da <pow+0x14e>
 80053be:	4b29      	ldr	r3, [pc, #164]	; (8005464 <pow+0x2d8>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053c6:	4630      	mov	r0, r6
 80053c8:	4652      	mov	r2, sl
 80053ca:	465b      	mov	r3, fp
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fb fb29 	bl	8000a24 <__aeabi_dcmplt>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0eb      	beq.n	80053ae <pow+0x222>
 80053d6:	ec45 4b10 	vmov	d0, r4, r5
 80053da:	f001 f8cd 	bl	8006578 <rint>
 80053de:	4622      	mov	r2, r4
 80053e0:	462b      	mov	r3, r5
 80053e2:	ec51 0b10 	vmov	r0, r1, d0
 80053e6:	f7fb fb13 	bl	8000a10 <__aeabi_dcmpeq>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d1df      	bne.n	80053ae <pow+0x222>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <pow+0x2c8>)
 80053f2:	e7da      	b.n	80053aa <pow+0x21e>
 80053f4:	2200      	movs	r2, #0
 80053f6:	2300      	movs	r3, #0
 80053f8:	ec51 0b18 	vmov	r0, r1, d8
 80053fc:	f7fb fb08 	bl	8000a10 <__aeabi_dcmpeq>
 8005400:	2800      	cmp	r0, #0
 8005402:	f43f af3a 	beq.w	800527a <pow+0xee>
 8005406:	ec47 6b10 	vmov	d0, r6, r7
 800540a:	f001 f8a3 	bl	8006554 <finite>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f af33 	beq.w	800527a <pow+0xee>
 8005414:	ec45 4b10 	vmov	d0, r4, r5
 8005418:	f001 f89c 	bl	8006554 <finite>
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f af2c 	beq.w	800527a <pow+0xee>
 8005422:	2304      	movs	r3, #4
 8005424:	9302      	str	r3, [sp, #8]
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <pow+0x2c0>)
 8005428:	9303      	str	r3, [sp, #12]
 800542a:	2300      	movs	r3, #0
 800542c:	930a      	str	r3, [sp, #40]	; 0x28
 800542e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005432:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005436:	ed8d 9b08 	vstr	d9, [sp, #32]
 800543a:	e7b8      	b.n	80053ae <pow+0x222>
 800543c:	a802      	add	r0, sp, #8
 800543e:	f001 f891 	bl	8006564 <matherr>
 8005442:	2800      	cmp	r0, #0
 8005444:	f47f af11 	bne.w	800526a <pow+0xde>
 8005448:	e7b5      	b.n	80053b6 <pow+0x22a>
 800544a:	bf00      	nop
 800544c:	08006805 	.word	0x08006805
 8005450:	3ff00000 	.word	0x3ff00000
 8005454:	fff00000 	.word	0xfff00000
 8005458:	3fe00000 	.word	0x3fe00000
 800545c:	47efffff 	.word	0x47efffff
 8005460:	c7efffff 	.word	0xc7efffff
 8005464:	7ff00000 	.word	0x7ff00000
 8005468:	20000088 	.word	0x20000088

0800546c <sqrt>:
 800546c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005470:	ed2d 8b02 	vpush	{d8}
 8005474:	b08b      	sub	sp, #44	; 0x2c
 8005476:	ec55 4b10 	vmov	r4, r5, d0
 800547a:	f000 ffbb 	bl	80063f4 <__ieee754_sqrt>
 800547e:	4b26      	ldr	r3, [pc, #152]	; (8005518 <sqrt+0xac>)
 8005480:	eeb0 8a40 	vmov.f32	s16, s0
 8005484:	eef0 8a60 	vmov.f32	s17, s1
 8005488:	f993 6000 	ldrsb.w	r6, [r3]
 800548c:	1c73      	adds	r3, r6, #1
 800548e:	d02a      	beq.n	80054e6 <sqrt+0x7a>
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	4620      	mov	r0, r4
 8005496:	4629      	mov	r1, r5
 8005498:	f7fb faec 	bl	8000a74 <__aeabi_dcmpun>
 800549c:	4607      	mov	r7, r0
 800549e:	bb10      	cbnz	r0, 80054e6 <sqrt+0x7a>
 80054a0:	f04f 0800 	mov.w	r8, #0
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb fab8 	bl	8000a24 <__aeabi_dcmplt>
 80054b4:	b1b8      	cbz	r0, 80054e6 <sqrt+0x7a>
 80054b6:	2301      	movs	r3, #1
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4b18      	ldr	r3, [pc, #96]	; (800551c <sqrt+0xb0>)
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	9708      	str	r7, [sp, #32]
 80054c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80054c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054c8:	b9b6      	cbnz	r6, 80054f8 <sqrt+0x8c>
 80054ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80054ce:	4668      	mov	r0, sp
 80054d0:	f001 f848 	bl	8006564 <matherr>
 80054d4:	b1d0      	cbz	r0, 800550c <sqrt+0xa0>
 80054d6:	9b08      	ldr	r3, [sp, #32]
 80054d8:	b11b      	cbz	r3, 80054e2 <sqrt+0x76>
 80054da:	f7ff fc21 	bl	8004d20 <__errno>
 80054de:	9b08      	ldr	r3, [sp, #32]
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80054e6:	eeb0 0a48 	vmov.f32	s0, s16
 80054ea:	eef0 0a68 	vmov.f32	s1, s17
 80054ee:	b00b      	add	sp, #44	; 0x2c
 80054f0:	ecbd 8b02 	vpop	{d8}
 80054f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	f7fb f948 	bl	8000794 <__aeabi_ddiv>
 8005504:	2e02      	cmp	r6, #2
 8005506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800550a:	d1e0      	bne.n	80054ce <sqrt+0x62>
 800550c:	f7ff fc08 	bl	8004d20 <__errno>
 8005510:	2321      	movs	r3, #33	; 0x21
 8005512:	6003      	str	r3, [r0, #0]
 8005514:	e7df      	b.n	80054d6 <sqrt+0x6a>
 8005516:	bf00      	nop
 8005518:	20000088 	.word	0x20000088
 800551c:	08006809 	.word	0x08006809

08005520 <__ieee754_acos>:
 8005520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	ec55 4b10 	vmov	r4, r5, d0
 8005528:	49b7      	ldr	r1, [pc, #732]	; (8005808 <__ieee754_acos+0x2e8>)
 800552a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800552e:	428b      	cmp	r3, r1
 8005530:	dd1b      	ble.n	800556a <__ieee754_acos+0x4a>
 8005532:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8005536:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800553a:	4323      	orrs	r3, r4
 800553c:	d109      	bne.n	8005552 <__ieee754_acos+0x32>
 800553e:	2d00      	cmp	r5, #0
 8005540:	f300 8211 	bgt.w	8005966 <__ieee754_acos+0x446>
 8005544:	a196      	add	r1, pc, #600	; (adr r1, 80057a0 <__ieee754_acos+0x280>)
 8005546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554a:	ec41 0b10 	vmov	d0, r0, r1
 800554e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	ee10 2a10 	vmov	r2, s0
 8005556:	462b      	mov	r3, r5
 8005558:	4620      	mov	r0, r4
 800555a:	4629      	mov	r1, r5
 800555c:	f7fa fe38 	bl	80001d0 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	f7fb f916 	bl	8000794 <__aeabi_ddiv>
 8005568:	e7ef      	b.n	800554a <__ieee754_acos+0x2a>
 800556a:	49a8      	ldr	r1, [pc, #672]	; (800580c <__ieee754_acos+0x2ec>)
 800556c:	428b      	cmp	r3, r1
 800556e:	f300 8087 	bgt.w	8005680 <__ieee754_acos+0x160>
 8005572:	4aa7      	ldr	r2, [pc, #668]	; (8005810 <__ieee754_acos+0x2f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	f340 81f9 	ble.w	800596c <__ieee754_acos+0x44c>
 800557a:	ee10 2a10 	vmov	r2, s0
 800557e:	ee10 0a10 	vmov	r0, s0
 8005582:	462b      	mov	r3, r5
 8005584:	4629      	mov	r1, r5
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	a387      	add	r3, pc, #540	; (adr r3, 80057a8 <__ieee754_acos+0x288>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	4606      	mov	r6, r0
 8005592:	460f      	mov	r7, r1
 8005594:	f7fa ffd4 	bl	8000540 <__aeabi_dmul>
 8005598:	a385      	add	r3, pc, #532	; (adr r3, 80057b0 <__ieee754_acos+0x290>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa fe19 	bl	80001d4 <__adddf3>
 80055a2:	4632      	mov	r2, r6
 80055a4:	463b      	mov	r3, r7
 80055a6:	f7fa ffcb 	bl	8000540 <__aeabi_dmul>
 80055aa:	a383      	add	r3, pc, #524	; (adr r3, 80057b8 <__ieee754_acos+0x298>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa fe0e 	bl	80001d0 <__aeabi_dsub>
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fa ffc2 	bl	8000540 <__aeabi_dmul>
 80055bc:	a380      	add	r3, pc, #512	; (adr r3, 80057c0 <__ieee754_acos+0x2a0>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fe07 	bl	80001d4 <__adddf3>
 80055c6:	4632      	mov	r2, r6
 80055c8:	463b      	mov	r3, r7
 80055ca:	f7fa ffb9 	bl	8000540 <__aeabi_dmul>
 80055ce:	a37e      	add	r3, pc, #504	; (adr r3, 80057c8 <__ieee754_acos+0x2a8>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fdfc 	bl	80001d0 <__aeabi_dsub>
 80055d8:	4632      	mov	r2, r6
 80055da:	463b      	mov	r3, r7
 80055dc:	f7fa ffb0 	bl	8000540 <__aeabi_dmul>
 80055e0:	a37b      	add	r3, pc, #492	; (adr r3, 80057d0 <__ieee754_acos+0x2b0>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fdf5 	bl	80001d4 <__adddf3>
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	f7fa ffa7 	bl	8000540 <__aeabi_dmul>
 80055f2:	a379      	add	r3, pc, #484	; (adr r3, 80057d8 <__ieee754_acos+0x2b8>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	4680      	mov	r8, r0
 80055fa:	4689      	mov	r9, r1
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fa ff9e 	bl	8000540 <__aeabi_dmul>
 8005604:	a376      	add	r3, pc, #472	; (adr r3, 80057e0 <__ieee754_acos+0x2c0>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fa fde1 	bl	80001d0 <__aeabi_dsub>
 800560e:	4632      	mov	r2, r6
 8005610:	463b      	mov	r3, r7
 8005612:	f7fa ff95 	bl	8000540 <__aeabi_dmul>
 8005616:	a374      	add	r3, pc, #464	; (adr r3, 80057e8 <__ieee754_acos+0x2c8>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa fdda 	bl	80001d4 <__adddf3>
 8005620:	4632      	mov	r2, r6
 8005622:	463b      	mov	r3, r7
 8005624:	f7fa ff8c 	bl	8000540 <__aeabi_dmul>
 8005628:	a371      	add	r3, pc, #452	; (adr r3, 80057f0 <__ieee754_acos+0x2d0>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa fdcf 	bl	80001d0 <__aeabi_dsub>
 8005632:	4632      	mov	r2, r6
 8005634:	463b      	mov	r3, r7
 8005636:	f7fa ff83 	bl	8000540 <__aeabi_dmul>
 800563a:	2200      	movs	r2, #0
 800563c:	4b75      	ldr	r3, [pc, #468]	; (8005814 <__ieee754_acos+0x2f4>)
 800563e:	f7fa fdc9 	bl	80001d4 <__adddf3>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	f7fb f8a3 	bl	8000794 <__aeabi_ddiv>
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f7fa ff75 	bl	8000540 <__aeabi_dmul>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	a167      	add	r1, pc, #412	; (adr r1, 80057f8 <__ieee754_acos+0x2d8>)
 800565c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005660:	f7fa fdb6 	bl	80001d0 <__aeabi_dsub>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4620      	mov	r0, r4
 800566a:	4629      	mov	r1, r5
 800566c:	f7fa fdb0 	bl	80001d0 <__aeabi_dsub>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	a162      	add	r1, pc, #392	; (adr r1, 8005800 <__ieee754_acos+0x2e0>)
 8005676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567a:	f7fa fda9 	bl	80001d0 <__aeabi_dsub>
 800567e:	e764      	b.n	800554a <__ieee754_acos+0x2a>
 8005680:	2d00      	cmp	r5, #0
 8005682:	f280 80cb 	bge.w	800581c <__ieee754_acos+0x2fc>
 8005686:	ee10 0a10 	vmov	r0, s0
 800568a:	2200      	movs	r2, #0
 800568c:	4b61      	ldr	r3, [pc, #388]	; (8005814 <__ieee754_acos+0x2f4>)
 800568e:	4629      	mov	r1, r5
 8005690:	f7fa fda0 	bl	80001d4 <__adddf3>
 8005694:	2200      	movs	r2, #0
 8005696:	4b60      	ldr	r3, [pc, #384]	; (8005818 <__ieee754_acos+0x2f8>)
 8005698:	f7fa ff52 	bl	8000540 <__aeabi_dmul>
 800569c:	a342      	add	r3, pc, #264	; (adr r3, 80057a8 <__ieee754_acos+0x288>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	4604      	mov	r4, r0
 80056a4:	460d      	mov	r5, r1
 80056a6:	f7fa ff4b 	bl	8000540 <__aeabi_dmul>
 80056aa:	a341      	add	r3, pc, #260	; (adr r3, 80057b0 <__ieee754_acos+0x290>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa fd90 	bl	80001d4 <__adddf3>
 80056b4:	4622      	mov	r2, r4
 80056b6:	462b      	mov	r3, r5
 80056b8:	f7fa ff42 	bl	8000540 <__aeabi_dmul>
 80056bc:	a33e      	add	r3, pc, #248	; (adr r3, 80057b8 <__ieee754_acos+0x298>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa fd85 	bl	80001d0 <__aeabi_dsub>
 80056c6:	4622      	mov	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f7fa ff39 	bl	8000540 <__aeabi_dmul>
 80056ce:	a33c      	add	r3, pc, #240	; (adr r3, 80057c0 <__ieee754_acos+0x2a0>)
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f7fa fd7e 	bl	80001d4 <__adddf3>
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	f7fa ff30 	bl	8000540 <__aeabi_dmul>
 80056e0:	a339      	add	r3, pc, #228	; (adr r3, 80057c8 <__ieee754_acos+0x2a8>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa fd73 	bl	80001d0 <__aeabi_dsub>
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	f7fa ff27 	bl	8000540 <__aeabi_dmul>
 80056f2:	a337      	add	r3, pc, #220	; (adr r3, 80057d0 <__ieee754_acos+0x2b0>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa fd6c 	bl	80001d4 <__adddf3>
 80056fc:	4622      	mov	r2, r4
 80056fe:	462b      	mov	r3, r5
 8005700:	f7fa ff1e 	bl	8000540 <__aeabi_dmul>
 8005704:	ec45 4b10 	vmov	d0, r4, r5
 8005708:	4680      	mov	r8, r0
 800570a:	4689      	mov	r9, r1
 800570c:	f000 fe72 	bl	80063f4 <__ieee754_sqrt>
 8005710:	a331      	add	r3, pc, #196	; (adr r3, 80057d8 <__ieee754_acos+0x2b8>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	ec57 6b10 	vmov	r6, r7, d0
 800571e:	f7fa ff0f 	bl	8000540 <__aeabi_dmul>
 8005722:	a32f      	add	r3, pc, #188	; (adr r3, 80057e0 <__ieee754_acos+0x2c0>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fd52 	bl	80001d0 <__aeabi_dsub>
 800572c:	4622      	mov	r2, r4
 800572e:	462b      	mov	r3, r5
 8005730:	f7fa ff06 	bl	8000540 <__aeabi_dmul>
 8005734:	a32c      	add	r3, pc, #176	; (adr r3, 80057e8 <__ieee754_acos+0x2c8>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa fd4b 	bl	80001d4 <__adddf3>
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	f7fa fefd 	bl	8000540 <__aeabi_dmul>
 8005746:	a32a      	add	r3, pc, #168	; (adr r3, 80057f0 <__ieee754_acos+0x2d0>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa fd40 	bl	80001d0 <__aeabi_dsub>
 8005750:	4622      	mov	r2, r4
 8005752:	462b      	mov	r3, r5
 8005754:	f7fa fef4 	bl	8000540 <__aeabi_dmul>
 8005758:	2200      	movs	r2, #0
 800575a:	4b2e      	ldr	r3, [pc, #184]	; (8005814 <__ieee754_acos+0x2f4>)
 800575c:	f7fa fd3a 	bl	80001d4 <__adddf3>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fb f814 	bl	8000794 <__aeabi_ddiv>
 800576c:	4632      	mov	r2, r6
 800576e:	463b      	mov	r3, r7
 8005770:	f7fa fee6 	bl	8000540 <__aeabi_dmul>
 8005774:	a320      	add	r3, pc, #128	; (adr r3, 80057f8 <__ieee754_acos+0x2d8>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fd29 	bl	80001d0 <__aeabi_dsub>
 800577e:	4632      	mov	r2, r6
 8005780:	463b      	mov	r3, r7
 8005782:	f7fa fd27 	bl	80001d4 <__adddf3>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	f7fa fd23 	bl	80001d4 <__adddf3>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	a103      	add	r1, pc, #12	; (adr r1, 80057a0 <__ieee754_acos+0x280>)
 8005794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005798:	e76f      	b.n	800567a <__ieee754_acos+0x15a>
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	54442d18 	.word	0x54442d18
 80057a4:	400921fb 	.word	0x400921fb
 80057a8:	0dfdf709 	.word	0x0dfdf709
 80057ac:	3f023de1 	.word	0x3f023de1
 80057b0:	7501b288 	.word	0x7501b288
 80057b4:	3f49efe0 	.word	0x3f49efe0
 80057b8:	b5688f3b 	.word	0xb5688f3b
 80057bc:	3fa48228 	.word	0x3fa48228
 80057c0:	0e884455 	.word	0x0e884455
 80057c4:	3fc9c155 	.word	0x3fc9c155
 80057c8:	03eb6f7d 	.word	0x03eb6f7d
 80057cc:	3fd4d612 	.word	0x3fd4d612
 80057d0:	55555555 	.word	0x55555555
 80057d4:	3fc55555 	.word	0x3fc55555
 80057d8:	b12e9282 	.word	0xb12e9282
 80057dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80057e0:	1b8d0159 	.word	0x1b8d0159
 80057e4:	3fe6066c 	.word	0x3fe6066c
 80057e8:	9c598ac8 	.word	0x9c598ac8
 80057ec:	40002ae5 	.word	0x40002ae5
 80057f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80057f4:	40033a27 	.word	0x40033a27
 80057f8:	33145c07 	.word	0x33145c07
 80057fc:	3c91a626 	.word	0x3c91a626
 8005800:	54442d18 	.word	0x54442d18
 8005804:	3ff921fb 	.word	0x3ff921fb
 8005808:	3fefffff 	.word	0x3fefffff
 800580c:	3fdfffff 	.word	0x3fdfffff
 8005810:	3c600000 	.word	0x3c600000
 8005814:	3ff00000 	.word	0x3ff00000
 8005818:	3fe00000 	.word	0x3fe00000
 800581c:	ee10 2a10 	vmov	r2, s0
 8005820:	462b      	mov	r3, r5
 8005822:	2000      	movs	r0, #0
 8005824:	496a      	ldr	r1, [pc, #424]	; (80059d0 <__ieee754_acos+0x4b0>)
 8005826:	f7fa fcd3 	bl	80001d0 <__aeabi_dsub>
 800582a:	2200      	movs	r2, #0
 800582c:	4b69      	ldr	r3, [pc, #420]	; (80059d4 <__ieee754_acos+0x4b4>)
 800582e:	f7fa fe87 	bl	8000540 <__aeabi_dmul>
 8005832:	4604      	mov	r4, r0
 8005834:	460d      	mov	r5, r1
 8005836:	ec45 4b10 	vmov	d0, r4, r5
 800583a:	f000 fddb 	bl	80063f4 <__ieee754_sqrt>
 800583e:	a34e      	add	r3, pc, #312	; (adr r3, 8005978 <__ieee754_acos+0x458>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	ec59 8b10 	vmov	r8, r9, d0
 800584c:	f7fa fe78 	bl	8000540 <__aeabi_dmul>
 8005850:	a34b      	add	r3, pc, #300	; (adr r3, 8005980 <__ieee754_acos+0x460>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fcbd 	bl	80001d4 <__adddf3>
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	f7fa fe6f 	bl	8000540 <__aeabi_dmul>
 8005862:	a349      	add	r3, pc, #292	; (adr r3, 8005988 <__ieee754_acos+0x468>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f7fa fcb2 	bl	80001d0 <__aeabi_dsub>
 800586c:	4622      	mov	r2, r4
 800586e:	462b      	mov	r3, r5
 8005870:	f7fa fe66 	bl	8000540 <__aeabi_dmul>
 8005874:	a346      	add	r3, pc, #280	; (adr r3, 8005990 <__ieee754_acos+0x470>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fcab 	bl	80001d4 <__adddf3>
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	f7fa fe5d 	bl	8000540 <__aeabi_dmul>
 8005886:	a344      	add	r3, pc, #272	; (adr r3, 8005998 <__ieee754_acos+0x478>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fa fca0 	bl	80001d0 <__aeabi_dsub>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fe54 	bl	8000540 <__aeabi_dmul>
 8005898:	a341      	add	r3, pc, #260	; (adr r3, 80059a0 <__ieee754_acos+0x480>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fc99 	bl	80001d4 <__adddf3>
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	f7fa fe4b 	bl	8000540 <__aeabi_dmul>
 80058aa:	a33f      	add	r3, pc, #252	; (adr r3, 80059a8 <__ieee754_acos+0x488>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	4682      	mov	sl, r0
 80058b2:	468b      	mov	fp, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fe42 	bl	8000540 <__aeabi_dmul>
 80058bc:	a33c      	add	r3, pc, #240	; (adr r3, 80059b0 <__ieee754_acos+0x490>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fc85 	bl	80001d0 <__aeabi_dsub>
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	f7fa fe39 	bl	8000540 <__aeabi_dmul>
 80058ce:	a33a      	add	r3, pc, #232	; (adr r3, 80059b8 <__ieee754_acos+0x498>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fc7e 	bl	80001d4 <__adddf3>
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	f7fa fe30 	bl	8000540 <__aeabi_dmul>
 80058e0:	a337      	add	r3, pc, #220	; (adr r3, 80059c0 <__ieee754_acos+0x4a0>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc73 	bl	80001d0 <__aeabi_dsub>
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f7fa fe27 	bl	8000540 <__aeabi_dmul>
 80058f2:	2200      	movs	r2, #0
 80058f4:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <__ieee754_acos+0x4b0>)
 80058f6:	f7fa fc6d 	bl	80001d4 <__adddf3>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fa ff47 	bl	8000794 <__aeabi_ddiv>
 8005906:	4642      	mov	r2, r8
 8005908:	464b      	mov	r3, r9
 800590a:	f7fa fe19 	bl	8000540 <__aeabi_dmul>
 800590e:	2600      	movs	r6, #0
 8005910:	4682      	mov	sl, r0
 8005912:	468b      	mov	fp, r1
 8005914:	4632      	mov	r2, r6
 8005916:	464b      	mov	r3, r9
 8005918:	4630      	mov	r0, r6
 800591a:	4649      	mov	r1, r9
 800591c:	f7fa fe10 	bl	8000540 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4620      	mov	r0, r4
 8005926:	4629      	mov	r1, r5
 8005928:	f7fa fc52 	bl	80001d0 <__aeabi_dsub>
 800592c:	4632      	mov	r2, r6
 800592e:	4604      	mov	r4, r0
 8005930:	460d      	mov	r5, r1
 8005932:	464b      	mov	r3, r9
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	f7fa fc4c 	bl	80001d4 <__adddf3>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4620      	mov	r0, r4
 8005942:	4629      	mov	r1, r5
 8005944:	f7fa ff26 	bl	8000794 <__aeabi_ddiv>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4650      	mov	r0, sl
 800594e:	4659      	mov	r1, fp
 8005950:	f7fa fc40 	bl	80001d4 <__adddf3>
 8005954:	4632      	mov	r2, r6
 8005956:	464b      	mov	r3, r9
 8005958:	f7fa fc3c 	bl	80001d4 <__adddf3>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	f7fa fc38 	bl	80001d4 <__adddf3>
 8005964:	e5f1      	b.n	800554a <__ieee754_acos+0x2a>
 8005966:	2000      	movs	r0, #0
 8005968:	2100      	movs	r1, #0
 800596a:	e5ee      	b.n	800554a <__ieee754_acos+0x2a>
 800596c:	a116      	add	r1, pc, #88	; (adr r1, 80059c8 <__ieee754_acos+0x4a8>)
 800596e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005972:	e5ea      	b.n	800554a <__ieee754_acos+0x2a>
 8005974:	f3af 8000 	nop.w
 8005978:	0dfdf709 	.word	0x0dfdf709
 800597c:	3f023de1 	.word	0x3f023de1
 8005980:	7501b288 	.word	0x7501b288
 8005984:	3f49efe0 	.word	0x3f49efe0
 8005988:	b5688f3b 	.word	0xb5688f3b
 800598c:	3fa48228 	.word	0x3fa48228
 8005990:	0e884455 	.word	0x0e884455
 8005994:	3fc9c155 	.word	0x3fc9c155
 8005998:	03eb6f7d 	.word	0x03eb6f7d
 800599c:	3fd4d612 	.word	0x3fd4d612
 80059a0:	55555555 	.word	0x55555555
 80059a4:	3fc55555 	.word	0x3fc55555
 80059a8:	b12e9282 	.word	0xb12e9282
 80059ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80059b0:	1b8d0159 	.word	0x1b8d0159
 80059b4:	3fe6066c 	.word	0x3fe6066c
 80059b8:	9c598ac8 	.word	0x9c598ac8
 80059bc:	40002ae5 	.word	0x40002ae5
 80059c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80059c4:	40033a27 	.word	0x40033a27
 80059c8:	54442d18 	.word	0x54442d18
 80059cc:	3ff921fb 	.word	0x3ff921fb
 80059d0:	3ff00000 	.word	0x3ff00000
 80059d4:	3fe00000 	.word	0x3fe00000

080059d8 <__ieee754_pow>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	b091      	sub	sp, #68	; 0x44
 80059de:	ed8d 1b00 	vstr	d1, [sp]
 80059e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80059e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80059ea:	ea58 0302 	orrs.w	r3, r8, r2
 80059ee:	ec57 6b10 	vmov	r6, r7, d0
 80059f2:	f000 84be 	beq.w	8006372 <__ieee754_pow+0x99a>
 80059f6:	4b7a      	ldr	r3, [pc, #488]	; (8005be0 <__ieee754_pow+0x208>)
 80059f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80059fc:	429c      	cmp	r4, r3
 80059fe:	463d      	mov	r5, r7
 8005a00:	ee10 aa10 	vmov	sl, s0
 8005a04:	dc09      	bgt.n	8005a1a <__ieee754_pow+0x42>
 8005a06:	d103      	bne.n	8005a10 <__ieee754_pow+0x38>
 8005a08:	b93e      	cbnz	r6, 8005a1a <__ieee754_pow+0x42>
 8005a0a:	45a0      	cmp	r8, r4
 8005a0c:	dc0d      	bgt.n	8005a2a <__ieee754_pow+0x52>
 8005a0e:	e001      	b.n	8005a14 <__ieee754_pow+0x3c>
 8005a10:	4598      	cmp	r8, r3
 8005a12:	dc02      	bgt.n	8005a1a <__ieee754_pow+0x42>
 8005a14:	4598      	cmp	r8, r3
 8005a16:	d10e      	bne.n	8005a36 <__ieee754_pow+0x5e>
 8005a18:	b16a      	cbz	r2, 8005a36 <__ieee754_pow+0x5e>
 8005a1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a22:	ea54 030a 	orrs.w	r3, r4, sl
 8005a26:	f000 84a4 	beq.w	8006372 <__ieee754_pow+0x99a>
 8005a2a:	486e      	ldr	r0, [pc, #440]	; (8005be4 <__ieee754_pow+0x20c>)
 8005a2c:	b011      	add	sp, #68	; 0x44
 8005a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a32:	f000 bd99 	b.w	8006568 <nan>
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	da53      	bge.n	8005ae2 <__ieee754_pow+0x10a>
 8005a3a:	4b6b      	ldr	r3, [pc, #428]	; (8005be8 <__ieee754_pow+0x210>)
 8005a3c:	4598      	cmp	r8, r3
 8005a3e:	dc4d      	bgt.n	8005adc <__ieee754_pow+0x104>
 8005a40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a44:	4598      	cmp	r8, r3
 8005a46:	dd4c      	ble.n	8005ae2 <__ieee754_pow+0x10a>
 8005a48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a50:	2b14      	cmp	r3, #20
 8005a52:	dd26      	ble.n	8005aa2 <__ieee754_pow+0xca>
 8005a54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005a58:	fa22 f103 	lsr.w	r1, r2, r3
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d13e      	bne.n	8005ae2 <__ieee754_pow+0x10a>
 8005a64:	f001 0101 	and.w	r1, r1, #1
 8005a68:	f1c1 0b02 	rsb	fp, r1, #2
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	d15b      	bne.n	8005b28 <__ieee754_pow+0x150>
 8005a70:	4b5b      	ldr	r3, [pc, #364]	; (8005be0 <__ieee754_pow+0x208>)
 8005a72:	4598      	cmp	r8, r3
 8005a74:	d124      	bne.n	8005ac0 <__ieee754_pow+0xe8>
 8005a76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005a7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005a7e:	ea53 030a 	orrs.w	r3, r3, sl
 8005a82:	f000 8476 	beq.w	8006372 <__ieee754_pow+0x99a>
 8005a86:	4b59      	ldr	r3, [pc, #356]	; (8005bec <__ieee754_pow+0x214>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	dd2d      	ble.n	8005ae8 <__ieee754_pow+0x110>
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	f280 8473 	bge.w	800637a <__ieee754_pow+0x9a2>
 8005a94:	2000      	movs	r0, #0
 8005a96:	2100      	movs	r1, #0
 8005a98:	ec41 0b10 	vmov	d0, r0, r1
 8005a9c:	b011      	add	sp, #68	; 0x44
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	d13e      	bne.n	8005b24 <__ieee754_pow+0x14c>
 8005aa6:	f1c3 0314 	rsb	r3, r3, #20
 8005aaa:	fa48 f103 	asr.w	r1, r8, r3
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	4543      	cmp	r3, r8
 8005ab4:	f040 8469 	bne.w	800638a <__ieee754_pow+0x9b2>
 8005ab8:	f001 0101 	and.w	r1, r1, #1
 8005abc:	f1c1 0b02 	rsb	fp, r1, #2
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <__ieee754_pow+0x218>)
 8005ac2:	4598      	cmp	r8, r3
 8005ac4:	d118      	bne.n	8005af8 <__ieee754_pow+0x120>
 8005ac6:	f1b9 0f00 	cmp.w	r9, #0
 8005aca:	f280 845a 	bge.w	8006382 <__ieee754_pow+0x9aa>
 8005ace:	4948      	ldr	r1, [pc, #288]	; (8005bf0 <__ieee754_pow+0x218>)
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7fa fe5d 	bl	8000794 <__aeabi_ddiv>
 8005ada:	e7dd      	b.n	8005a98 <__ieee754_pow+0xc0>
 8005adc:	f04f 0b02 	mov.w	fp, #2
 8005ae0:	e7c4      	b.n	8005a6c <__ieee754_pow+0x94>
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	e7c1      	b.n	8005a6c <__ieee754_pow+0x94>
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	dad2      	bge.n	8005a94 <__ieee754_pow+0xbc>
 8005aee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005af2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005af6:	e7cf      	b.n	8005a98 <__ieee754_pow+0xc0>
 8005af8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005afc:	d106      	bne.n	8005b0c <__ieee754_pow+0x134>
 8005afe:	4632      	mov	r2, r6
 8005b00:	463b      	mov	r3, r7
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f7fa fd1b 	bl	8000540 <__aeabi_dmul>
 8005b0a:	e7c5      	b.n	8005a98 <__ieee754_pow+0xc0>
 8005b0c:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <__ieee754_pow+0x21c>)
 8005b0e:	4599      	cmp	r9, r3
 8005b10:	d10a      	bne.n	8005b28 <__ieee754_pow+0x150>
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	db08      	blt.n	8005b28 <__ieee754_pow+0x150>
 8005b16:	ec47 6b10 	vmov	d0, r6, r7
 8005b1a:	b011      	add	sp, #68	; 0x44
 8005b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	f000 bc68 	b.w	80063f4 <__ieee754_sqrt>
 8005b24:	f04f 0b00 	mov.w	fp, #0
 8005b28:	ec47 6b10 	vmov	d0, r6, r7
 8005b2c:	f7ff facc 	bl	80050c8 <fabs>
 8005b30:	ec51 0b10 	vmov	r0, r1, d0
 8005b34:	f1ba 0f00 	cmp.w	sl, #0
 8005b38:	d127      	bne.n	8005b8a <__ieee754_pow+0x1b2>
 8005b3a:	b124      	cbz	r4, 8005b46 <__ieee754_pow+0x16e>
 8005b3c:	4b2c      	ldr	r3, [pc, #176]	; (8005bf0 <__ieee754_pow+0x218>)
 8005b3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d121      	bne.n	8005b8a <__ieee754_pow+0x1b2>
 8005b46:	f1b9 0f00 	cmp.w	r9, #0
 8005b4a:	da05      	bge.n	8005b58 <__ieee754_pow+0x180>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	2000      	movs	r0, #0
 8005b52:	4927      	ldr	r1, [pc, #156]	; (8005bf0 <__ieee754_pow+0x218>)
 8005b54:	f7fa fe1e 	bl	8000794 <__aeabi_ddiv>
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	da9d      	bge.n	8005a98 <__ieee754_pow+0xc0>
 8005b5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b64:	ea54 030b 	orrs.w	r3, r4, fp
 8005b68:	d108      	bne.n	8005b7c <__ieee754_pow+0x1a4>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7fa fb2d 	bl	80001d0 <__aeabi_dsub>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e7ac      	b.n	8005ad6 <__ieee754_pow+0xfe>
 8005b7c:	f1bb 0f01 	cmp.w	fp, #1
 8005b80:	d18a      	bne.n	8005a98 <__ieee754_pow+0xc0>
 8005b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b86:	4619      	mov	r1, r3
 8005b88:	e786      	b.n	8005a98 <__ieee754_pow+0xc0>
 8005b8a:	0fed      	lsrs	r5, r5, #31
 8005b8c:	1e6b      	subs	r3, r5, #1
 8005b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b90:	ea5b 0303 	orrs.w	r3, fp, r3
 8005b94:	d102      	bne.n	8005b9c <__ieee754_pow+0x1c4>
 8005b96:	4632      	mov	r2, r6
 8005b98:	463b      	mov	r3, r7
 8005b9a:	e7e8      	b.n	8005b6e <__ieee754_pow+0x196>
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <__ieee754_pow+0x220>)
 8005b9e:	4598      	cmp	r8, r3
 8005ba0:	f340 80fe 	ble.w	8005da0 <__ieee754_pow+0x3c8>
 8005ba4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005ba8:	4598      	cmp	r8, r3
 8005baa:	dd0a      	ble.n	8005bc2 <__ieee754_pow+0x1ea>
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <__ieee754_pow+0x214>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	dc0d      	bgt.n	8005bce <__ieee754_pow+0x1f6>
 8005bb2:	f1b9 0f00 	cmp.w	r9, #0
 8005bb6:	f6bf af6d 	bge.w	8005a94 <__ieee754_pow+0xbc>
 8005bba:	a307      	add	r3, pc, #28	; (adr r3, 8005bd8 <__ieee754_pow+0x200>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	e79f      	b.n	8005b02 <__ieee754_pow+0x12a>
 8005bc2:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <__ieee754_pow+0x224>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	ddf4      	ble.n	8005bb2 <__ieee754_pow+0x1da>
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <__ieee754_pow+0x218>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	dd18      	ble.n	8005c00 <__ieee754_pow+0x228>
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	dcf2      	bgt.n	8005bba <__ieee754_pow+0x1e2>
 8005bd4:	e75e      	b.n	8005a94 <__ieee754_pow+0xbc>
 8005bd6:	bf00      	nop
 8005bd8:	8800759c 	.word	0x8800759c
 8005bdc:	7e37e43c 	.word	0x7e37e43c
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	08006804 	.word	0x08006804
 8005be8:	433fffff 	.word	0x433fffff
 8005bec:	3fefffff 	.word	0x3fefffff
 8005bf0:	3ff00000 	.word	0x3ff00000
 8005bf4:	3fe00000 	.word	0x3fe00000
 8005bf8:	41e00000 	.word	0x41e00000
 8005bfc:	3feffffe 	.word	0x3feffffe
 8005c00:	2200      	movs	r2, #0
 8005c02:	4b63      	ldr	r3, [pc, #396]	; (8005d90 <__ieee754_pow+0x3b8>)
 8005c04:	f7fa fae4 	bl	80001d0 <__aeabi_dsub>
 8005c08:	a355      	add	r3, pc, #340	; (adr r3, 8005d60 <__ieee754_pow+0x388>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	f7fa fc95 	bl	8000540 <__aeabi_dmul>
 8005c16:	a354      	add	r3, pc, #336	; (adr r3, 8005d68 <__ieee754_pow+0x390>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa fc8c 	bl	8000540 <__aeabi_dmul>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c2e:	4b59      	ldr	r3, [pc, #356]	; (8005d94 <__ieee754_pow+0x3bc>)
 8005c30:	4620      	mov	r0, r4
 8005c32:	4629      	mov	r1, r5
 8005c34:	f7fa fc84 	bl	8000540 <__aeabi_dmul>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	a14c      	add	r1, pc, #304	; (adr r1, 8005d70 <__ieee754_pow+0x398>)
 8005c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c42:	f7fa fac5 	bl	80001d0 <__aeabi_dsub>
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	f7fa fc79 	bl	8000540 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	2000      	movs	r0, #0
 8005c54:	4950      	ldr	r1, [pc, #320]	; (8005d98 <__ieee754_pow+0x3c0>)
 8005c56:	f7fa fabb 	bl	80001d0 <__aeabi_dsub>
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	4680      	mov	r8, r0
 8005c60:	4689      	mov	r9, r1
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f7fa fc6b 	bl	8000540 <__aeabi_dmul>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa fc65 	bl	8000540 <__aeabi_dmul>
 8005c76:	a340      	add	r3, pc, #256	; (adr r3, 8005d78 <__ieee754_pow+0x3a0>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fc60 	bl	8000540 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c88:	f7fa faa2 	bl	80001d0 <__aeabi_dsub>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4604      	mov	r4, r0
 8005c92:	460d      	mov	r5, r1
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa fa9c 	bl	80001d4 <__adddf3>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	f7fa fa93 	bl	80001d0 <__aeabi_dsub>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fa fa8d 	bl	80001d0 <__aeabi_dsub>
 8005cb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	460f      	mov	r7, r1
 8005cc2:	f040 81eb 	bne.w	800609c <__ieee754_pow+0x6c4>
 8005cc6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005d80 <__ieee754_pow+0x3a8>
 8005cca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005cce:	2400      	movs	r4, #0
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	462b      	mov	r3, r5
 8005cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cdc:	f7fa fa78 	bl	80001d0 <__aeabi_dsub>
 8005ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce4:	f7fa fc2c 	bl	8000540 <__aeabi_dmul>
 8005ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fc24 	bl	8000540 <__aeabi_dmul>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4649      	mov	r1, r9
 8005d00:	f7fa fa68 	bl	80001d4 <__adddf3>
 8005d04:	4622      	mov	r2, r4
 8005d06:	462b      	mov	r3, r5
 8005d08:	4680      	mov	r8, r0
 8005d0a:	4689      	mov	r9, r1
 8005d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d10:	f7fa fc16 	bl	8000540 <__aeabi_dmul>
 8005d14:	460b      	mov	r3, r1
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4640      	mov	r0, r8
 8005d20:	e9cd 4500 	strd	r4, r5, [sp]
 8005d24:	f7fa fa56 	bl	80001d4 <__adddf3>
 8005d28:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <__ieee754_pow+0x3c4>)
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	460f      	mov	r7, r1
 8005d30:	468b      	mov	fp, r1
 8005d32:	f340 82f7 	ble.w	8006324 <__ieee754_pow+0x94c>
 8005d36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d3e:	4303      	orrs	r3, r0
 8005d40:	f000 81ea 	beq.w	8006118 <__ieee754_pow+0x740>
 8005d44:	a310      	add	r3, pc, #64	; (adr r3, 8005d88 <__ieee754_pow+0x3b0>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4e:	f7fa fbf7 	bl	8000540 <__aeabi_dmul>
 8005d52:	a30d      	add	r3, pc, #52	; (adr r3, 8005d88 <__ieee754_pow+0x3b0>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	e6d5      	b.n	8005b06 <__ieee754_pow+0x12e>
 8005d5a:	bf00      	nop
 8005d5c:	f3af 8000 	nop.w
 8005d60:	60000000 	.word	0x60000000
 8005d64:	3ff71547 	.word	0x3ff71547
 8005d68:	f85ddf44 	.word	0xf85ddf44
 8005d6c:	3e54ae0b 	.word	0x3e54ae0b
 8005d70:	55555555 	.word	0x55555555
 8005d74:	3fd55555 	.word	0x3fd55555
 8005d78:	652b82fe 	.word	0x652b82fe
 8005d7c:	3ff71547 	.word	0x3ff71547
 8005d80:	00000000 	.word	0x00000000
 8005d84:	bff00000 	.word	0xbff00000
 8005d88:	8800759c 	.word	0x8800759c
 8005d8c:	7e37e43c 	.word	0x7e37e43c
 8005d90:	3ff00000 	.word	0x3ff00000
 8005d94:	3fd00000 	.word	0x3fd00000
 8005d98:	3fe00000 	.word	0x3fe00000
 8005d9c:	408fffff 	.word	0x408fffff
 8005da0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	da05      	bge.n	8005db6 <__ieee754_pow+0x3de>
 8005daa:	4bd3      	ldr	r3, [pc, #844]	; (80060f8 <__ieee754_pow+0x720>)
 8005dac:	f7fa fbc8 	bl	8000540 <__aeabi_dmul>
 8005db0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005db4:	460c      	mov	r4, r1
 8005db6:	1523      	asrs	r3, r4, #20
 8005db8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005dbc:	4413      	add	r3, r2
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	4bce      	ldr	r3, [pc, #824]	; (80060fc <__ieee754_pow+0x724>)
 8005dc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005dc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005dca:	429c      	cmp	r4, r3
 8005dcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005dd0:	dd08      	ble.n	8005de4 <__ieee754_pow+0x40c>
 8005dd2:	4bcb      	ldr	r3, [pc, #812]	; (8006100 <__ieee754_pow+0x728>)
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	f340 815e 	ble.w	8006096 <__ieee754_pow+0x6be>
 8005dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ddc:	3301      	adds	r3, #1
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005de4:	f04f 0a00 	mov.w	sl, #0
 8005de8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005dec:	930c      	str	r3, [sp, #48]	; 0x30
 8005dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005df0:	4bc4      	ldr	r3, [pc, #784]	; (8006104 <__ieee754_pow+0x72c>)
 8005df2:	4413      	add	r3, r2
 8005df4:	ed93 7b00 	vldr	d7, [r3]
 8005df8:	4629      	mov	r1, r5
 8005dfa:	ec53 2b17 	vmov	r2, r3, d7
 8005dfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005e02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e06:	f7fa f9e3 	bl	80001d0 <__aeabi_dsub>
 8005e0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e0e:	4606      	mov	r6, r0
 8005e10:	460f      	mov	r7, r1
 8005e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e16:	f7fa f9dd 	bl	80001d4 <__adddf3>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	2000      	movs	r0, #0
 8005e20:	49b9      	ldr	r1, [pc, #740]	; (8006108 <__ieee754_pow+0x730>)
 8005e22:	f7fa fcb7 	bl	8000794 <__aeabi_ddiv>
 8005e26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4639      	mov	r1, r7
 8005e32:	f7fa fb85 	bl	8000540 <__aeabi_dmul>
 8005e36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e42:	2300      	movs	r3, #0
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e4a:	106d      	asrs	r5, r5, #1
 8005e4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e54:	2200      	movs	r2, #0
 8005e56:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4614      	mov	r4, r2
 8005e60:	461d      	mov	r5, r3
 8005e62:	f7fa fb6d 	bl	8000540 <__aeabi_dmul>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	f7fa f9af 	bl	80001d0 <__aeabi_dsub>
 8005e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa f9a7 	bl	80001d0 <__aeabi_dsub>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e8a:	f7fa f9a1 	bl	80001d0 <__aeabi_dsub>
 8005e8e:	4642      	mov	r2, r8
 8005e90:	464b      	mov	r3, r9
 8005e92:	f7fa fb55 	bl	8000540 <__aeabi_dmul>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	f7fa f997 	bl	80001d0 <__aeabi_dsub>
 8005ea2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005ea6:	f7fa fb4b 	bl	8000540 <__aeabi_dmul>
 8005eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f7fa fb43 	bl	8000540 <__aeabi_dmul>
 8005eba:	a37b      	add	r3, pc, #492	; (adr r3, 80060a8 <__ieee754_pow+0x6d0>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	f7fa fb3c 	bl	8000540 <__aeabi_dmul>
 8005ec8:	a379      	add	r3, pc, #484	; (adr r3, 80060b0 <__ieee754_pow+0x6d8>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa f981 	bl	80001d4 <__adddf3>
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	f7fa fb33 	bl	8000540 <__aeabi_dmul>
 8005eda:	a377      	add	r3, pc, #476	; (adr r3, 80060b8 <__ieee754_pow+0x6e0>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f978 	bl	80001d4 <__adddf3>
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	f7fa fb2a 	bl	8000540 <__aeabi_dmul>
 8005eec:	a374      	add	r3, pc, #464	; (adr r3, 80060c0 <__ieee754_pow+0x6e8>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f96f 	bl	80001d4 <__adddf3>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f7fa fb21 	bl	8000540 <__aeabi_dmul>
 8005efe:	a372      	add	r3, pc, #456	; (adr r3, 80060c8 <__ieee754_pow+0x6f0>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f966 	bl	80001d4 <__adddf3>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	f7fa fb18 	bl	8000540 <__aeabi_dmul>
 8005f10:	a36f      	add	r3, pc, #444	; (adr r3, 80060d0 <__ieee754_pow+0x6f8>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa f95d 	bl	80001d4 <__adddf3>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	462b      	mov	r3, r5
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa fb0b 	bl	8000540 <__aeabi_dmul>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa fb05 	bl	8000540 <__aeabi_dmul>
 8005f36:	4642      	mov	r2, r8
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f42:	f7fa f947 	bl	80001d4 <__adddf3>
 8005f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f4a:	f7fa faf9 	bl	8000540 <__aeabi_dmul>
 8005f4e:	4622      	mov	r2, r4
 8005f50:	462b      	mov	r3, r5
 8005f52:	f7fa f93f 	bl	80001d4 <__adddf3>
 8005f56:	4642      	mov	r2, r8
 8005f58:	4606      	mov	r6, r0
 8005f5a:	460f      	mov	r7, r1
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa faed 	bl	8000540 <__aeabi_dmul>
 8005f66:	2200      	movs	r2, #0
 8005f68:	4b68      	ldr	r3, [pc, #416]	; (800610c <__ieee754_pow+0x734>)
 8005f6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f6e:	f7fa f931 	bl	80001d4 <__adddf3>
 8005f72:	4632      	mov	r2, r6
 8005f74:	463b      	mov	r3, r7
 8005f76:	f7fa f92d 	bl	80001d4 <__adddf3>
 8005f7a:	9802      	ldr	r0, [sp, #8]
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa fada 	bl	8000540 <__aeabi_dmul>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4680      	mov	r8, r0
 8005f90:	4689      	mov	r9, r1
 8005f92:	4b5e      	ldr	r3, [pc, #376]	; (800610c <__ieee754_pow+0x734>)
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7fa f91a 	bl	80001d0 <__aeabi_dsub>
 8005f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fa0:	f7fa f916 	bl	80001d0 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4630      	mov	r0, r6
 8005faa:	4639      	mov	r1, r7
 8005fac:	f7fa f910 	bl	80001d0 <__aeabi_dsub>
 8005fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fb4:	f7fa fac4 	bl	8000540 <__aeabi_dmul>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc4:	f7fa fabc 	bl	8000540 <__aeabi_dmul>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa f900 	bl	80001d4 <__adddf3>
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	460f      	mov	r7, r1
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4640      	mov	r0, r8
 8005fde:	4649      	mov	r1, r9
 8005fe0:	f7fa f8f8 	bl	80001d4 <__adddf3>
 8005fe4:	9802      	ldr	r0, [sp, #8]
 8005fe6:	a33c      	add	r3, pc, #240	; (adr r3, 80060d8 <__ieee754_pow+0x700>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	f7fa faa6 	bl	8000540 <__aeabi_dmul>
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f8e6 	bl	80001d0 <__aeabi_dsub>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa f8e0 	bl	80001d0 <__aeabi_dsub>
 8006010:	a333      	add	r3, pc, #204	; (adr r3, 80060e0 <__ieee754_pow+0x708>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa fa93 	bl	8000540 <__aeabi_dmul>
 800601a:	a333      	add	r3, pc, #204	; (adr r3, 80060e8 <__ieee754_pow+0x710>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fa8a 	bl	8000540 <__aeabi_dmul>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	f7fa f8ce 	bl	80001d4 <__adddf3>
 8006038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800603a:	4b35      	ldr	r3, [pc, #212]	; (8006110 <__ieee754_pow+0x738>)
 800603c:	4413      	add	r3, r2
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa f8c7 	bl	80001d4 <__adddf3>
 8006046:	4604      	mov	r4, r0
 8006048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604a:	460d      	mov	r5, r1
 800604c:	f7fa fa0e 	bl	800046c <__aeabi_i2d>
 8006050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006052:	4b30      	ldr	r3, [pc, #192]	; (8006114 <__ieee754_pow+0x73c>)
 8006054:	4413      	add	r3, r2
 8006056:	e9d3 8900 	ldrd	r8, r9, [r3]
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006066:	f7fa f8b5 	bl	80001d4 <__adddf3>
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	f7fa f8b1 	bl	80001d4 <__adddf3>
 8006072:	4632      	mov	r2, r6
 8006074:	463b      	mov	r3, r7
 8006076:	f7fa f8ad 	bl	80001d4 <__adddf3>
 800607a:	9802      	ldr	r0, [sp, #8]
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006084:	f7fa f8a4 	bl	80001d0 <__aeabi_dsub>
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	f7fa f8a0 	bl	80001d0 <__aeabi_dsub>
 8006090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006094:	e607      	b.n	8005ca6 <__ieee754_pow+0x2ce>
 8006096:	f04f 0a01 	mov.w	sl, #1
 800609a:	e6a5      	b.n	8005de8 <__ieee754_pow+0x410>
 800609c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80060f0 <__ieee754_pow+0x718>
 80060a0:	e613      	b.n	8005cca <__ieee754_pow+0x2f2>
 80060a2:	bf00      	nop
 80060a4:	f3af 8000 	nop.w
 80060a8:	4a454eef 	.word	0x4a454eef
 80060ac:	3fca7e28 	.word	0x3fca7e28
 80060b0:	93c9db65 	.word	0x93c9db65
 80060b4:	3fcd864a 	.word	0x3fcd864a
 80060b8:	a91d4101 	.word	0xa91d4101
 80060bc:	3fd17460 	.word	0x3fd17460
 80060c0:	518f264d 	.word	0x518f264d
 80060c4:	3fd55555 	.word	0x3fd55555
 80060c8:	db6fabff 	.word	0xdb6fabff
 80060cc:	3fdb6db6 	.word	0x3fdb6db6
 80060d0:	33333303 	.word	0x33333303
 80060d4:	3fe33333 	.word	0x3fe33333
 80060d8:	e0000000 	.word	0xe0000000
 80060dc:	3feec709 	.word	0x3feec709
 80060e0:	dc3a03fd 	.word	0xdc3a03fd
 80060e4:	3feec709 	.word	0x3feec709
 80060e8:	145b01f5 	.word	0x145b01f5
 80060ec:	be3e2fe0 	.word	0xbe3e2fe0
 80060f0:	00000000 	.word	0x00000000
 80060f4:	3ff00000 	.word	0x3ff00000
 80060f8:	43400000 	.word	0x43400000
 80060fc:	0003988e 	.word	0x0003988e
 8006100:	000bb679 	.word	0x000bb679
 8006104:	08006810 	.word	0x08006810
 8006108:	3ff00000 	.word	0x3ff00000
 800610c:	40080000 	.word	0x40080000
 8006110:	08006830 	.word	0x08006830
 8006114:	08006820 	.word	0x08006820
 8006118:	a3b4      	add	r3, pc, #720	; (adr r3, 80063ec <__ieee754_pow+0xa14>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa f857 	bl	80001d4 <__adddf3>
 8006126:	4622      	mov	r2, r4
 8006128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800612c:	462b      	mov	r3, r5
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa f84d 	bl	80001d0 <__aeabi_dsub>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613e:	f7fa fc8f 	bl	8000a60 <__aeabi_dcmpgt>
 8006142:	2800      	cmp	r0, #0
 8006144:	f47f adfe 	bne.w	8005d44 <__ieee754_pow+0x36c>
 8006148:	4aa3      	ldr	r2, [pc, #652]	; (80063d8 <__ieee754_pow+0xa00>)
 800614a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800614e:	4293      	cmp	r3, r2
 8006150:	f340 810a 	ble.w	8006368 <__ieee754_pow+0x990>
 8006154:	151b      	asrs	r3, r3, #20
 8006156:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800615a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800615e:	fa4a f303 	asr.w	r3, sl, r3
 8006162:	445b      	add	r3, fp
 8006164:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006168:	4e9c      	ldr	r6, [pc, #624]	; (80063dc <__ieee754_pow+0xa04>)
 800616a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800616e:	4116      	asrs	r6, r2
 8006170:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006174:	2000      	movs	r0, #0
 8006176:	ea23 0106 	bic.w	r1, r3, r6
 800617a:	f1c2 0214 	rsb	r2, r2, #20
 800617e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006182:	fa4a fa02 	asr.w	sl, sl, r2
 8006186:	f1bb 0f00 	cmp.w	fp, #0
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	bfb8      	it	lt
 8006194:	f1ca 0a00 	rsblt	sl, sl, #0
 8006198:	f7fa f81a 	bl	80001d0 <__aeabi_dsub>
 800619c:	e9cd 0100 	strd	r0, r1, [sp]
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a8:	f7fa f814 	bl	80001d4 <__adddf3>
 80061ac:	2000      	movs	r0, #0
 80061ae:	a378      	add	r3, pc, #480	; (adr r3, 8006390 <__ieee754_pow+0x9b8>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	f7fa f9c2 	bl	8000540 <__aeabi_dmul>
 80061bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061c0:	4606      	mov	r6, r0
 80061c2:	460f      	mov	r7, r1
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f802 	bl	80001d0 <__aeabi_dsub>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7f9 fffc 	bl	80001d0 <__aeabi_dsub>
 80061d8:	a36f      	add	r3, pc, #444	; (adr r3, 8006398 <__ieee754_pow+0x9c0>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa f9af 	bl	8000540 <__aeabi_dmul>
 80061e2:	a36f      	add	r3, pc, #444	; (adr r3, 80063a0 <__ieee754_pow+0x9c8>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	4680      	mov	r8, r0
 80061ea:	4689      	mov	r9, r1
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa f9a6 	bl	8000540 <__aeabi_dmul>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7f9 ffea 	bl	80001d4 <__adddf3>
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7f9 ffe2 	bl	80001d4 <__adddf3>
 8006210:	4632      	mov	r2, r6
 8006212:	463b      	mov	r3, r7
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	f7f9 ffda 	bl	80001d0 <__aeabi_dsub>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4620      	mov	r0, r4
 8006222:	4629      	mov	r1, r5
 8006224:	f7f9 ffd4 	bl	80001d0 <__aeabi_dsub>
 8006228:	4642      	mov	r2, r8
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	464b      	mov	r3, r9
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa f984 	bl	8000540 <__aeabi_dmul>
 8006238:	a35b      	add	r3, pc, #364	; (adr r3, 80063a8 <__ieee754_pow+0x9d0>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	f7fa f97d 	bl	8000540 <__aeabi_dmul>
 8006246:	a35a      	add	r3, pc, #360	; (adr r3, 80063b0 <__ieee754_pow+0x9d8>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f7f9 ffc0 	bl	80001d0 <__aeabi_dsub>
 8006250:	4622      	mov	r2, r4
 8006252:	462b      	mov	r3, r5
 8006254:	f7fa f974 	bl	8000540 <__aeabi_dmul>
 8006258:	a357      	add	r3, pc, #348	; (adr r3, 80063b8 <__ieee754_pow+0x9e0>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7f9 ffb9 	bl	80001d4 <__adddf3>
 8006262:	4622      	mov	r2, r4
 8006264:	462b      	mov	r3, r5
 8006266:	f7fa f96b 	bl	8000540 <__aeabi_dmul>
 800626a:	a355      	add	r3, pc, #340	; (adr r3, 80063c0 <__ieee754_pow+0x9e8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7f9 ffae 	bl	80001d0 <__aeabi_dsub>
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	f7fa f962 	bl	8000540 <__aeabi_dmul>
 800627c:	a352      	add	r3, pc, #328	; (adr r3, 80063c8 <__ieee754_pow+0x9f0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7f9 ffa7 	bl	80001d4 <__adddf3>
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	f7fa f959 	bl	8000540 <__aeabi_dmul>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4640      	mov	r0, r8
 8006294:	4649      	mov	r1, r9
 8006296:	f7f9 ff9b 	bl	80001d0 <__aeabi_dsub>
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa f94b 	bl	8000540 <__aeabi_dmul>
 80062aa:	2200      	movs	r2, #0
 80062ac:	e9cd 0100 	strd	r0, r1, [sp]
 80062b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7f9 ff8a 	bl	80001d0 <__aeabi_dsub>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c4:	f7fa fa66 	bl	8000794 <__aeabi_ddiv>
 80062c8:	4632      	mov	r2, r6
 80062ca:	4604      	mov	r4, r0
 80062cc:	460d      	mov	r5, r1
 80062ce:	463b      	mov	r3, r7
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa f934 	bl	8000540 <__aeabi_dmul>
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	f7f9 ff7a 	bl	80001d4 <__adddf3>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7f9 ff72 	bl	80001d0 <__aeabi_dsub>
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	f7f9 ff6e 	bl	80001d0 <__aeabi_dsub>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	2000      	movs	r0, #0
 80062fa:	4939      	ldr	r1, [pc, #228]	; (80063e0 <__ieee754_pow+0xa08>)
 80062fc:	f7f9 ff68 	bl	80001d0 <__aeabi_dsub>
 8006300:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006304:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	da2f      	bge.n	800636e <__ieee754_pow+0x996>
 800630e:	4650      	mov	r0, sl
 8006310:	ec43 2b10 	vmov	d0, r2, r3
 8006314:	f000 f9b4 	bl	8006680 <scalbn>
 8006318:	ec51 0b10 	vmov	r0, r1, d0
 800631c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006320:	f7ff bbf1 	b.w	8005b06 <__ieee754_pow+0x12e>
 8006324:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <__ieee754_pow+0xa0c>)
 8006326:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800632a:	429e      	cmp	r6, r3
 800632c:	f77f af0c 	ble.w	8006148 <__ieee754_pow+0x770>
 8006330:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <__ieee754_pow+0xa10>)
 8006332:	440b      	add	r3, r1
 8006334:	4303      	orrs	r3, r0
 8006336:	d00b      	beq.n	8006350 <__ieee754_pow+0x978>
 8006338:	a325      	add	r3, pc, #148	; (adr r3, 80063d0 <__ieee754_pow+0x9f8>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006342:	f7fa f8fd 	bl	8000540 <__aeabi_dmul>
 8006346:	a322      	add	r3, pc, #136	; (adr r3, 80063d0 <__ieee754_pow+0x9f8>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7ff bbdb 	b.w	8005b06 <__ieee754_pow+0x12e>
 8006350:	4622      	mov	r2, r4
 8006352:	462b      	mov	r3, r5
 8006354:	f7f9 ff3c 	bl	80001d0 <__aeabi_dsub>
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	f7fa fb76 	bl	8000a4c <__aeabi_dcmpge>
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f aef1 	beq.w	8006148 <__ieee754_pow+0x770>
 8006366:	e7e7      	b.n	8006338 <__ieee754_pow+0x960>
 8006368:	f04f 0a00 	mov.w	sl, #0
 800636c:	e718      	b.n	80061a0 <__ieee754_pow+0x7c8>
 800636e:	4621      	mov	r1, r4
 8006370:	e7d4      	b.n	800631c <__ieee754_pow+0x944>
 8006372:	2000      	movs	r0, #0
 8006374:	491a      	ldr	r1, [pc, #104]	; (80063e0 <__ieee754_pow+0xa08>)
 8006376:	f7ff bb8f 	b.w	8005a98 <__ieee754_pow+0xc0>
 800637a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800637e:	f7ff bb8b 	b.w	8005a98 <__ieee754_pow+0xc0>
 8006382:	4630      	mov	r0, r6
 8006384:	4639      	mov	r1, r7
 8006386:	f7ff bb87 	b.w	8005a98 <__ieee754_pow+0xc0>
 800638a:	4693      	mov	fp, r2
 800638c:	f7ff bb98 	b.w	8005ac0 <__ieee754_pow+0xe8>
 8006390:	00000000 	.word	0x00000000
 8006394:	3fe62e43 	.word	0x3fe62e43
 8006398:	fefa39ef 	.word	0xfefa39ef
 800639c:	3fe62e42 	.word	0x3fe62e42
 80063a0:	0ca86c39 	.word	0x0ca86c39
 80063a4:	be205c61 	.word	0xbe205c61
 80063a8:	72bea4d0 	.word	0x72bea4d0
 80063ac:	3e663769 	.word	0x3e663769
 80063b0:	c5d26bf1 	.word	0xc5d26bf1
 80063b4:	3ebbbd41 	.word	0x3ebbbd41
 80063b8:	af25de2c 	.word	0xaf25de2c
 80063bc:	3f11566a 	.word	0x3f11566a
 80063c0:	16bebd93 	.word	0x16bebd93
 80063c4:	3f66c16c 	.word	0x3f66c16c
 80063c8:	5555553e 	.word	0x5555553e
 80063cc:	3fc55555 	.word	0x3fc55555
 80063d0:	c2f8f359 	.word	0xc2f8f359
 80063d4:	01a56e1f 	.word	0x01a56e1f
 80063d8:	3fe00000 	.word	0x3fe00000
 80063dc:	000fffff 	.word	0x000fffff
 80063e0:	3ff00000 	.word	0x3ff00000
 80063e4:	4090cbff 	.word	0x4090cbff
 80063e8:	3f6f3400 	.word	0x3f6f3400
 80063ec:	652b82fe 	.word	0x652b82fe
 80063f0:	3c971547 	.word	0x3c971547

080063f4 <__ieee754_sqrt>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	4955      	ldr	r1, [pc, #340]	; (8006550 <__ieee754_sqrt+0x15c>)
 80063fa:	ec55 4b10 	vmov	r4, r5, d0
 80063fe:	43a9      	bics	r1, r5
 8006400:	462b      	mov	r3, r5
 8006402:	462a      	mov	r2, r5
 8006404:	d112      	bne.n	800642c <__ieee754_sqrt+0x38>
 8006406:	ee10 2a10 	vmov	r2, s0
 800640a:	ee10 0a10 	vmov	r0, s0
 800640e:	4629      	mov	r1, r5
 8006410:	f7fa f896 	bl	8000540 <__aeabi_dmul>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4620      	mov	r0, r4
 800641a:	4629      	mov	r1, r5
 800641c:	f7f9 feda 	bl	80001d4 <__adddf3>
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
 8006424:	ec45 4b10 	vmov	d0, r4, r5
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	2d00      	cmp	r5, #0
 800642e:	ee10 0a10 	vmov	r0, s0
 8006432:	4621      	mov	r1, r4
 8006434:	dc0f      	bgt.n	8006456 <__ieee754_sqrt+0x62>
 8006436:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800643a:	4330      	orrs	r0, r6
 800643c:	d0f2      	beq.n	8006424 <__ieee754_sqrt+0x30>
 800643e:	b155      	cbz	r5, 8006456 <__ieee754_sqrt+0x62>
 8006440:	ee10 2a10 	vmov	r2, s0
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	f7f9 fec2 	bl	80001d0 <__aeabi_dsub>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	f7fa f9a0 	bl	8000794 <__aeabi_ddiv>
 8006454:	e7e4      	b.n	8006420 <__ieee754_sqrt+0x2c>
 8006456:	151b      	asrs	r3, r3, #20
 8006458:	d073      	beq.n	8006542 <__ieee754_sqrt+0x14e>
 800645a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800645e:	07dd      	lsls	r5, r3, #31
 8006460:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006464:	bf48      	it	mi
 8006466:	0fc8      	lsrmi	r0, r1, #31
 8006468:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800646c:	bf44      	itt	mi
 800646e:	0049      	lslmi	r1, r1, #1
 8006470:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006474:	2500      	movs	r5, #0
 8006476:	1058      	asrs	r0, r3, #1
 8006478:	0fcb      	lsrs	r3, r1, #31
 800647a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800647e:	0049      	lsls	r1, r1, #1
 8006480:	2316      	movs	r3, #22
 8006482:	462c      	mov	r4, r5
 8006484:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006488:	19a7      	adds	r7, r4, r6
 800648a:	4297      	cmp	r7, r2
 800648c:	bfde      	ittt	le
 800648e:	19bc      	addle	r4, r7, r6
 8006490:	1bd2      	suble	r2, r2, r7
 8006492:	19ad      	addle	r5, r5, r6
 8006494:	0fcf      	lsrs	r7, r1, #31
 8006496:	3b01      	subs	r3, #1
 8006498:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800649c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064a4:	d1f0      	bne.n	8006488 <__ieee754_sqrt+0x94>
 80064a6:	f04f 0c20 	mov.w	ip, #32
 80064aa:	469e      	mov	lr, r3
 80064ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80064b0:	42a2      	cmp	r2, r4
 80064b2:	eb06 070e 	add.w	r7, r6, lr
 80064b6:	dc02      	bgt.n	80064be <__ieee754_sqrt+0xca>
 80064b8:	d112      	bne.n	80064e0 <__ieee754_sqrt+0xec>
 80064ba:	428f      	cmp	r7, r1
 80064bc:	d810      	bhi.n	80064e0 <__ieee754_sqrt+0xec>
 80064be:	2f00      	cmp	r7, #0
 80064c0:	eb07 0e06 	add.w	lr, r7, r6
 80064c4:	da42      	bge.n	800654c <__ieee754_sqrt+0x158>
 80064c6:	f1be 0f00 	cmp.w	lr, #0
 80064ca:	db3f      	blt.n	800654c <__ieee754_sqrt+0x158>
 80064cc:	f104 0801 	add.w	r8, r4, #1
 80064d0:	1b12      	subs	r2, r2, r4
 80064d2:	428f      	cmp	r7, r1
 80064d4:	bf88      	it	hi
 80064d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064da:	1bc9      	subs	r1, r1, r7
 80064dc:	4433      	add	r3, r6
 80064de:	4644      	mov	r4, r8
 80064e0:	0052      	lsls	r2, r2, #1
 80064e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80064e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80064ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064f2:	d1dd      	bne.n	80064b0 <__ieee754_sqrt+0xbc>
 80064f4:	430a      	orrs	r2, r1
 80064f6:	d006      	beq.n	8006506 <__ieee754_sqrt+0x112>
 80064f8:	1c5c      	adds	r4, r3, #1
 80064fa:	bf13      	iteet	ne
 80064fc:	3301      	addne	r3, #1
 80064fe:	3501      	addeq	r5, #1
 8006500:	4663      	moveq	r3, ip
 8006502:	f023 0301 	bicne.w	r3, r3, #1
 8006506:	106a      	asrs	r2, r5, #1
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	07e9      	lsls	r1, r5, #31
 800650c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006510:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006514:	bf48      	it	mi
 8006516:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800651a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800651e:	461c      	mov	r4, r3
 8006520:	e780      	b.n	8006424 <__ieee754_sqrt+0x30>
 8006522:	0aca      	lsrs	r2, r1, #11
 8006524:	3815      	subs	r0, #21
 8006526:	0549      	lsls	r1, r1, #21
 8006528:	2a00      	cmp	r2, #0
 800652a:	d0fa      	beq.n	8006522 <__ieee754_sqrt+0x12e>
 800652c:	02d6      	lsls	r6, r2, #11
 800652e:	d50a      	bpl.n	8006546 <__ieee754_sqrt+0x152>
 8006530:	f1c3 0420 	rsb	r4, r3, #32
 8006534:	fa21 f404 	lsr.w	r4, r1, r4
 8006538:	1e5d      	subs	r5, r3, #1
 800653a:	4099      	lsls	r1, r3
 800653c:	4322      	orrs	r2, r4
 800653e:	1b43      	subs	r3, r0, r5
 8006540:	e78b      	b.n	800645a <__ieee754_sqrt+0x66>
 8006542:	4618      	mov	r0, r3
 8006544:	e7f0      	b.n	8006528 <__ieee754_sqrt+0x134>
 8006546:	0052      	lsls	r2, r2, #1
 8006548:	3301      	adds	r3, #1
 800654a:	e7ef      	b.n	800652c <__ieee754_sqrt+0x138>
 800654c:	46a0      	mov	r8, r4
 800654e:	e7bf      	b.n	80064d0 <__ieee754_sqrt+0xdc>
 8006550:	7ff00000 	.word	0x7ff00000

08006554 <finite>:
 8006554:	ee10 3a90 	vmov	r3, s1
 8006558:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800655c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006560:	0fc0      	lsrs	r0, r0, #31
 8006562:	4770      	bx	lr

08006564 <matherr>:
 8006564:	2000      	movs	r0, #0
 8006566:	4770      	bx	lr

08006568 <nan>:
 8006568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006570 <nan+0x8>
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	00000000 	.word	0x00000000
 8006574:	7ff80000 	.word	0x7ff80000

08006578 <rint>:
 8006578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800657a:	ec51 0b10 	vmov	r0, r1, d0
 800657e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006582:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006586:	2e13      	cmp	r6, #19
 8006588:	460b      	mov	r3, r1
 800658a:	ee10 4a10 	vmov	r4, s0
 800658e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006592:	dc56      	bgt.n	8006642 <rint+0xca>
 8006594:	2e00      	cmp	r6, #0
 8006596:	da2b      	bge.n	80065f0 <rint+0x78>
 8006598:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800659c:	4302      	orrs	r2, r0
 800659e:	d023      	beq.n	80065e8 <rint+0x70>
 80065a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80065a4:	4302      	orrs	r2, r0
 80065a6:	4254      	negs	r4, r2
 80065a8:	4314      	orrs	r4, r2
 80065aa:	0c4b      	lsrs	r3, r1, #17
 80065ac:	0b24      	lsrs	r4, r4, #12
 80065ae:	045b      	lsls	r3, r3, #17
 80065b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80065b4:	ea44 0103 	orr.w	r1, r4, r3
 80065b8:	460b      	mov	r3, r1
 80065ba:	492f      	ldr	r1, [pc, #188]	; (8006678 <rint+0x100>)
 80065bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80065c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80065c4:	4602      	mov	r2, r0
 80065c6:	4639      	mov	r1, r7
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7f9 fe03 	bl	80001d4 <__adddf3>
 80065ce:	e9cd 0100 	strd	r0, r1, [sp]
 80065d2:	463b      	mov	r3, r7
 80065d4:	4632      	mov	r2, r6
 80065d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065da:	f7f9 fdf9 	bl	80001d0 <__aeabi_dsub>
 80065de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80065e6:	4639      	mov	r1, r7
 80065e8:	ec41 0b10 	vmov	d0, r0, r1
 80065ec:	b003      	add	sp, #12
 80065ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <rint+0x104>)
 80065f2:	4132      	asrs	r2, r6
 80065f4:	ea01 0702 	and.w	r7, r1, r2
 80065f8:	4307      	orrs	r7, r0
 80065fa:	d0f5      	beq.n	80065e8 <rint+0x70>
 80065fc:	0852      	lsrs	r2, r2, #1
 80065fe:	4011      	ands	r1, r2
 8006600:	430c      	orrs	r4, r1
 8006602:	d00b      	beq.n	800661c <rint+0xa4>
 8006604:	ea23 0202 	bic.w	r2, r3, r2
 8006608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800660c:	2e13      	cmp	r6, #19
 800660e:	fa43 f306 	asr.w	r3, r3, r6
 8006612:	bf0c      	ite	eq
 8006614:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006618:	2400      	movne	r4, #0
 800661a:	4313      	orrs	r3, r2
 800661c:	4916      	ldr	r1, [pc, #88]	; (8006678 <rint+0x100>)
 800661e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006622:	4622      	mov	r2, r4
 8006624:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fdd2 	bl	80001d4 <__adddf3>
 8006630:	e9cd 0100 	strd	r0, r1, [sp]
 8006634:	4622      	mov	r2, r4
 8006636:	462b      	mov	r3, r5
 8006638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800663c:	f7f9 fdc8 	bl	80001d0 <__aeabi_dsub>
 8006640:	e7d2      	b.n	80065e8 <rint+0x70>
 8006642:	2e33      	cmp	r6, #51	; 0x33
 8006644:	dd07      	ble.n	8006656 <rint+0xde>
 8006646:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800664a:	d1cd      	bne.n	80065e8 <rint+0x70>
 800664c:	ee10 2a10 	vmov	r2, s0
 8006650:	f7f9 fdc0 	bl	80001d4 <__adddf3>
 8006654:	e7c8      	b.n	80065e8 <rint+0x70>
 8006656:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	40f2      	lsrs	r2, r6
 8006660:	4210      	tst	r0, r2
 8006662:	d0c1      	beq.n	80065e8 <rint+0x70>
 8006664:	0852      	lsrs	r2, r2, #1
 8006666:	4210      	tst	r0, r2
 8006668:	bf1f      	itttt	ne
 800666a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800666e:	ea20 0202 	bicne.w	r2, r0, r2
 8006672:	4134      	asrne	r4, r6
 8006674:	4314      	orrne	r4, r2
 8006676:	e7d1      	b.n	800661c <rint+0xa4>
 8006678:	08006840 	.word	0x08006840
 800667c:	000fffff 	.word	0x000fffff

08006680 <scalbn>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	ec55 4b10 	vmov	r4, r5, d0
 8006686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800668a:	4606      	mov	r6, r0
 800668c:	462b      	mov	r3, r5
 800668e:	b9aa      	cbnz	r2, 80066bc <scalbn+0x3c>
 8006690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006694:	4323      	orrs	r3, r4
 8006696:	d03b      	beq.n	8006710 <scalbn+0x90>
 8006698:	4b31      	ldr	r3, [pc, #196]	; (8006760 <scalbn+0xe0>)
 800669a:	4629      	mov	r1, r5
 800669c:	2200      	movs	r2, #0
 800669e:	ee10 0a10 	vmov	r0, s0
 80066a2:	f7f9 ff4d 	bl	8000540 <__aeabi_dmul>
 80066a6:	4b2f      	ldr	r3, [pc, #188]	; (8006764 <scalbn+0xe4>)
 80066a8:	429e      	cmp	r6, r3
 80066aa:	4604      	mov	r4, r0
 80066ac:	460d      	mov	r5, r1
 80066ae:	da12      	bge.n	80066d6 <scalbn+0x56>
 80066b0:	a327      	add	r3, pc, #156	; (adr r3, 8006750 <scalbn+0xd0>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7f9 ff43 	bl	8000540 <__aeabi_dmul>
 80066ba:	e009      	b.n	80066d0 <scalbn+0x50>
 80066bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80066c0:	428a      	cmp	r2, r1
 80066c2:	d10c      	bne.n	80066de <scalbn+0x5e>
 80066c4:	ee10 2a10 	vmov	r2, s0
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7f9 fd82 	bl	80001d4 <__adddf3>
 80066d0:	4604      	mov	r4, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	e01c      	b.n	8006710 <scalbn+0x90>
 80066d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066da:	460b      	mov	r3, r1
 80066dc:	3a36      	subs	r2, #54	; 0x36
 80066de:	4432      	add	r2, r6
 80066e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066e4:	428a      	cmp	r2, r1
 80066e6:	dd0b      	ble.n	8006700 <scalbn+0x80>
 80066e8:	ec45 4b11 	vmov	d1, r4, r5
 80066ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006758 <scalbn+0xd8>
 80066f0:	f000 f83c 	bl	800676c <copysign>
 80066f4:	a318      	add	r3, pc, #96	; (adr r3, 8006758 <scalbn+0xd8>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	ec51 0b10 	vmov	r0, r1, d0
 80066fe:	e7da      	b.n	80066b6 <scalbn+0x36>
 8006700:	2a00      	cmp	r2, #0
 8006702:	dd08      	ble.n	8006716 <scalbn+0x96>
 8006704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800670c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006710:	ec45 4b10 	vmov	d0, r4, r5
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800671a:	da0d      	bge.n	8006738 <scalbn+0xb8>
 800671c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006720:	429e      	cmp	r6, r3
 8006722:	ec45 4b11 	vmov	d1, r4, r5
 8006726:	dce1      	bgt.n	80066ec <scalbn+0x6c>
 8006728:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006750 <scalbn+0xd0>
 800672c:	f000 f81e 	bl	800676c <copysign>
 8006730:	a307      	add	r3, pc, #28	; (adr r3, 8006750 <scalbn+0xd0>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	e7e0      	b.n	80066fa <scalbn+0x7a>
 8006738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800673c:	3236      	adds	r2, #54	; 0x36
 800673e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006742:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	2200      	movs	r2, #0
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <scalbn+0xe8>)
 800674e:	e7b2      	b.n	80066b6 <scalbn+0x36>
 8006750:	c2f8f359 	.word	0xc2f8f359
 8006754:	01a56e1f 	.word	0x01a56e1f
 8006758:	8800759c 	.word	0x8800759c
 800675c:	7e37e43c 	.word	0x7e37e43c
 8006760:	43500000 	.word	0x43500000
 8006764:	ffff3cb0 	.word	0xffff3cb0
 8006768:	3c900000 	.word	0x3c900000

0800676c <copysign>:
 800676c:	ec51 0b10 	vmov	r0, r1, d0
 8006770:	ee11 0a90 	vmov	r0, s3
 8006774:	ee10 2a10 	vmov	r2, s0
 8006778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800677c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006780:	ea41 0300 	orr.w	r3, r1, r0
 8006784:	ec43 2b10 	vmov	d0, r2, r3
 8006788:	4770      	bx	lr
	...

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
