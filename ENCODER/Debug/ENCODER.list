
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800404c  0800404c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004054  08004054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800405c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08004068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004068  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c397  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b20  00000000  00000000  0002c3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211e2  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093f4  00000000  00000000  00050982  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cda80  00000000  00000000  00059d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001277f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  00127874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800401c 	.word	0x0800401c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800401c 	.word	0x0800401c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b972 	b.w	800094c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	4688      	mov	r8, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <__udivmoddi4+0xa6>
 800068e:	428a      	cmp	r2, r1
 8000690:	4615      	mov	r5, r2
 8000692:	d967      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0720 	rsb	r7, r2, #32
 800069e:	fa01 f302 	lsl.w	r3, r1, r2
 80006a2:	fa20 f707 	lsr.w	r7, r0, r7
 80006a6:	4095      	lsls	r5, r2
 80006a8:	ea47 0803 	orr.w	r8, r7, r3
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b8:	fa1f fc85 	uxth.w	ip, r5
 80006bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c4:	fb07 f10c 	mul.w	r1, r7, ip
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18eb      	adds	r3, r5, r3
 80006ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80006d2:	f080 811b 	bcs.w	800090c <__udivmoddi4+0x28c>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8118 	bls.w	800090c <__udivmoddi4+0x28c>
 80006dc:	3f02      	subs	r7, #2
 80006de:	442b      	add	r3, r5
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f4:	45a4      	cmp	ip, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	192c      	adds	r4, r5, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8107 	bcs.w	8000910 <__udivmoddi4+0x290>
 8000702:	45a4      	cmp	ip, r4
 8000704:	f240 8104 	bls.w	8000910 <__udivmoddi4+0x290>
 8000708:	3802      	subs	r0, #2
 800070a:	442c      	add	r4, r5
 800070c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000710:	eba4 040c 	sub.w	r4, r4, ip
 8000714:	2700      	movs	r7, #0
 8000716:	b11e      	cbz	r6, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c6 4300 	strd	r4, r3, [r6]
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0xbe>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80eb 	beq.w	8000906 <__udivmoddi4+0x286>
 8000730:	2700      	movs	r7, #0
 8000732:	e9c6 0100 	strd	r0, r1, [r6]
 8000736:	4638      	mov	r0, r7
 8000738:	4639      	mov	r1, r7
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f783 	clz	r7, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d147      	bne.n	80007d6 <__udivmoddi4+0x156>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xd0>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80fa 	bhi.w	8000944 <__udivmoddi4+0x2c4>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0303 	sbc.w	r3, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4698      	mov	r8, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d0e0      	beq.n	8000720 <__udivmoddi4+0xa0>
 800075e:	e9c6 4800 	strd	r4, r8, [r6]
 8000762:	e7dd      	b.n	8000720 <__udivmoddi4+0xa0>
 8000764:	b902      	cbnz	r2, 8000768 <__udivmoddi4+0xe8>
 8000766:	deff      	udf	#255	; 0xff
 8000768:	fab2 f282 	clz	r2, r2
 800076c:	2a00      	cmp	r2, #0
 800076e:	f040 808f 	bne.w	8000890 <__udivmoddi4+0x210>
 8000772:	1b49      	subs	r1, r1, r5
 8000774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000778:	fa1f f885 	uxth.w	r8, r5
 800077c:	2701      	movs	r7, #1
 800077e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000782:	0c23      	lsrs	r3, r4, #16
 8000784:	fb0e 111c 	mls	r1, lr, ip, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb08 f10c 	mul.w	r1, r8, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f10c 30ff 	add.w	r0, ip, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4299      	cmp	r1, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2bc>
 80007a2:	4684      	mov	ip, r0
 80007a4:	1a59      	subs	r1, r3, r1
 80007a6:	b2a3      	uxth	r3, r4
 80007a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b4:	fb08 f800 	mul.w	r8, r8, r0
 80007b8:	45a0      	cmp	r8, r4
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x14c>
 80007bc:	192c      	adds	r4, r5, r4
 80007be:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14a>
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	f200 80b6 	bhi.w	8000936 <__udivmoddi4+0x2b6>
 80007ca:	4618      	mov	r0, r3
 80007cc:	eba4 0408 	sub.w	r4, r4, r8
 80007d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d4:	e79f      	b.n	8000716 <__udivmoddi4+0x96>
 80007d6:	f1c7 0c20 	rsb	ip, r7, #32
 80007da:	40bb      	lsls	r3, r7
 80007dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e4:	fa01 f407 	lsl.w	r4, r1, r7
 80007e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f4:	4325      	orrs	r5, r4
 80007f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000800:	fa1f fa8e 	uxth.w	sl, lr
 8000804:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000808:	fb09 f40a 	mul.w	r4, r9, sl
 800080c:	429c      	cmp	r4, r3
 800080e:	fa02 f207 	lsl.w	r2, r2, r7
 8000812:	fa00 f107 	lsl.w	r1, r0, r7
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1e 0303 	adds.w	r3, lr, r3
 800081c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000820:	f080 8087 	bcs.w	8000932 <__udivmoddi4+0x2b2>
 8000824:	429c      	cmp	r4, r3
 8000826:	f240 8084 	bls.w	8000932 <__udivmoddi4+0x2b2>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4473      	add	r3, lr
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	b2ad      	uxth	r5, r5
 8000834:	fbb3 f0f8 	udiv	r0, r3, r8
 8000838:	fb08 3310 	mls	r3, r8, r0, r3
 800083c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000840:	fb00 fa0a 	mul.w	sl, r0, sl
 8000844:	45a2      	cmp	sl, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1e 0404 	adds.w	r4, lr, r4
 800084c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000850:	d26b      	bcs.n	800092a <__udivmoddi4+0x2aa>
 8000852:	45a2      	cmp	sl, r4
 8000854:	d969      	bls.n	800092a <__udivmoddi4+0x2aa>
 8000856:	3802      	subs	r0, #2
 8000858:	4474      	add	r4, lr
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	fba0 8902 	umull	r8, r9, r0, r2
 8000862:	eba4 040a 	sub.w	r4, r4, sl
 8000866:	454c      	cmp	r4, r9
 8000868:	46c2      	mov	sl, r8
 800086a:	464b      	mov	r3, r9
 800086c:	d354      	bcc.n	8000918 <__udivmoddi4+0x298>
 800086e:	d051      	beq.n	8000914 <__udivmoddi4+0x294>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d069      	beq.n	8000948 <__udivmoddi4+0x2c8>
 8000874:	ebb1 050a 	subs.w	r5, r1, sl
 8000878:	eb64 0403 	sbc.w	r4, r4, r3
 800087c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000880:	40fd      	lsrs	r5, r7
 8000882:	40fc      	lsrs	r4, r7
 8000884:	ea4c 0505 	orr.w	r5, ip, r5
 8000888:	e9c6 5400 	strd	r5, r4, [r6]
 800088c:	2700      	movs	r7, #0
 800088e:	e747      	b.n	8000720 <__udivmoddi4+0xa0>
 8000890:	f1c2 0320 	rsb	r3, r2, #32
 8000894:	fa20 f703 	lsr.w	r7, r0, r3
 8000898:	4095      	lsls	r5, r2
 800089a:	fa01 f002 	lsl.w	r0, r1, r2
 800089e:	fa21 f303 	lsr.w	r3, r1, r3
 80008a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008a6:	4338      	orrs	r0, r7
 80008a8:	0c01      	lsrs	r1, r0, #16
 80008aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ae:	fa1f f885 	uxth.w	r8, r5
 80008b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ba:	fb07 f308 	mul.w	r3, r7, r8
 80008be:	428b      	cmp	r3, r1
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x256>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80008cc:	d22f      	bcs.n	800092e <__udivmoddi4+0x2ae>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d92d      	bls.n	800092e <__udivmoddi4+0x2ae>
 80008d2:	3f02      	subs	r7, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	b281      	uxth	r1, r0
 80008da:	fbb3 f0fe 	udiv	r0, r3, lr
 80008de:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e6:	fb00 f308 	mul.w	r3, r0, r8
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x27e>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f4:	d217      	bcs.n	8000926 <__udivmoddi4+0x2a6>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d915      	bls.n	8000926 <__udivmoddi4+0x2a6>
 80008fa:	3802      	subs	r0, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000904:	e73b      	b.n	800077e <__udivmoddi4+0xfe>
 8000906:	4637      	mov	r7, r6
 8000908:	4630      	mov	r0, r6
 800090a:	e709      	b.n	8000720 <__udivmoddi4+0xa0>
 800090c:	4607      	mov	r7, r0
 800090e:	e6e7      	b.n	80006e0 <__udivmoddi4+0x60>
 8000910:	4618      	mov	r0, r3
 8000912:	e6fb      	b.n	800070c <__udivmoddi4+0x8c>
 8000914:	4541      	cmp	r1, r8
 8000916:	d2ab      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 8000918:	ebb8 0a02 	subs.w	sl, r8, r2
 800091c:	eb69 020e 	sbc.w	r2, r9, lr
 8000920:	3801      	subs	r0, #1
 8000922:	4613      	mov	r3, r2
 8000924:	e7a4      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000926:	4660      	mov	r0, ip
 8000928:	e7e9      	b.n	80008fe <__udivmoddi4+0x27e>
 800092a:	4618      	mov	r0, r3
 800092c:	e795      	b.n	800085a <__udivmoddi4+0x1da>
 800092e:	4667      	mov	r7, ip
 8000930:	e7d1      	b.n	80008d6 <__udivmoddi4+0x256>
 8000932:	4681      	mov	r9, r0
 8000934:	e77c      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000936:	3802      	subs	r0, #2
 8000938:	442c      	add	r4, r5
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0x14c>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	442b      	add	r3, r5
 8000942:	e72f      	b.n	80007a4 <__udivmoddi4+0x124>
 8000944:	4638      	mov	r0, r7
 8000946:	e708      	b.n	800075a <__udivmoddi4+0xda>
 8000948:	4637      	mov	r7, r6
 800094a:	e6e9      	b.n	8000720 <__udivmoddi4+0xa0>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <HAL_GPIO_EXTI_Callback>:





void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 800095a:	2110      	movs	r1, #16
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_GPIO_EXTI_Callback+0x40>)
 800095e:	f001 fb45 	bl	8001fec <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00b      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x30>
final_carrera = 1;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_GPIO_EXTI_Callback+0x44>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_GPIO_EXTI_Callback+0x48>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_GPIO_EXTI_Callback+0x48>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		final_carrera = 0;
	}

}
 800097e:	e002      	b.n	8000986 <HAL_GPIO_EXTI_Callback+0x36>
		final_carrera = 0;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_GPIO_EXTI_Callback+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020000 	.word	0x40020000
 8000994:	2000012c 	.word	0x2000012c
 8000998:	2000003c 	.word	0x2000003c

0800099c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]


if (receptor.selector == 'a'){
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_UART_RxCpltCallback+0x54>)
 80009a6:	7a9b      	ldrb	r3, [r3, #10]
 80009a8:	2b61      	cmp	r3, #97	; 0x61
 80009aa:	d10a      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x26>
	 HAL_UART_Receive_IT(&huart5, receptor.buffer,  4* sizeof(uint8_t ));
 80009ac:	2204      	movs	r2, #4
 80009ae:	4910      	ldr	r1, [pc, #64]	; (80009f0 <HAL_UART_RxCpltCallback+0x54>)
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HAL_UART_RxCpltCallback+0x58>)
 80009b2:	f002 fd00 	bl	80033b6 <HAL_UART_Receive_IT>
	 //enviar como ASCI para ganar resolucion y luego convertir
	 receptor.selector = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_RxCpltCallback+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	729a      	strb	r2, [r3, #10]
	 prueba =1;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_RxCpltCallback+0x5c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
}

if(receptor.selector == 's'){
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_UART_RxCpltCallback+0x54>)
 80009c4:	7a9b      	ldrb	r3, [r3, #10]
 80009c6:	2b73      	cmp	r3, #115	; 0x73
 80009c8:	d108      	bne.n	80009dc <HAL_UART_RxCpltCallback+0x40>
	HAL_UART_Receive_IT(&huart5, &servo,   sizeof(servo));
 80009ca:	2201      	movs	r2, #1
 80009cc:	490b      	ldr	r1, [pc, #44]	; (80009fc <HAL_UART_RxCpltCallback+0x60>)
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <HAL_UART_RxCpltCallback+0x58>)
 80009d0:	f002 fcf1 	bl	80033b6 <HAL_UART_Receive_IT>
	receptor.selector = 0;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_UART_RxCpltCallback+0x54>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	729a      	strb	r2, [r3, #10]
else HAL_UART_Receive_IT(&huart5, &receptor.selector,  sizeof(uint8_t ));

//	 receptor.pos++;
 // receptor.buff_pointer =  &receptor.buffer[(receptor.pos)  % TAMBUFFER];

}
 80009da:	e004      	b.n	80009e6 <HAL_UART_RxCpltCallback+0x4a>
else HAL_UART_Receive_IT(&huart5, &receptor.selector,  sizeof(uint8_t ));
 80009dc:	2201      	movs	r2, #1
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <HAL_UART_RxCpltCallback+0x64>)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <HAL_UART_RxCpltCallback+0x58>)
 80009e2:	f002 fce8 	bl	80033b6 <HAL_UART_Receive_IT>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000084 	.word	0x20000084
 80009f8:	20000028 	.word	0x20000028
 80009fc:	20000122 	.word	0x20000122
 8000a00:	20000036 	.word	0x20000036

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f000 fd2b 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f909 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 fab1 	bl	8000f78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a16:	f000 f9c1 	bl	8000d9c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a1a:	f000 fa13 	bl	8000e44 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000a1e:	f000 f96b 	bl	8000cf8 <MX_ADC1_Init>
  MX_UART5_Init();
 8000a22:	f000 fa7f 	bl	8000f24 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a26:	2100      	movs	r1, #0
 8000a28:	4870      	ldr	r0, [pc, #448]	; (8000bec <main+0x1e8>)
 8000a2a:	f001 ffb7 	bl	800299c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	486e      	ldr	r0, [pc, #440]	; (8000bec <main+0x1e8>)
 8000a32:	f001 ffb3 	bl	800299c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a36:	2108      	movs	r1, #8
 8000a38:	486c      	ldr	r0, [pc, #432]	; (8000bec <main+0x1e8>)
 8000a3a:	f001 ffaf 	bl	800299c <HAL_TIM_PWM_Start>




  //inicializar el buffer
receptor.pos = 0;
 8000a3e:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <main+0x1ec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  for(int i = 0; i<10 ; i++){
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	e007      	b.n	8000a5a <main+0x56>
	  receptor.buffer[i] = '0';
 8000a4a:	4a69      	ldr	r2, [pc, #420]	; (8000bf0 <main+0x1ec>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	2230      	movs	r2, #48	; 0x30
 8000a52:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<10 ; i++){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b09      	cmp	r3, #9
 8000a5e:	ddf4      	ble.n	8000a4a <main+0x46>
  }

  HAL_UART_Receive_IT(&huart5, &receptor.selector, sizeof(uint8_t ));
 8000a60:	2201      	movs	r2, #1
 8000a62:	4964      	ldr	r1, [pc, #400]	; (8000bf4 <main+0x1f0>)
 8000a64:	4864      	ldr	r0, [pc, #400]	; (8000bf8 <main+0x1f4>)
 8000a66:	f002 fca6 	bl	80033b6 <HAL_UART_Receive_IT>
//fer chupame los hevos
  receptor.pos = 0;
 8000a6a:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <main+0x1ec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
//reubicar el motro hasta el punto 0
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
  final_carrera = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000a70:	2110      	movs	r1, #16
 8000a72:	4862      	ldr	r0, [pc, #392]	; (8000bfc <main+0x1f8>)
 8000a74:	f001 faba 	bl	8001fec <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <main+0x1fc>)
 8000a7e:	601a      	str	r2, [r3, #0]
  do{

	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000a80:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <main+0x1e8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,400);
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <main+0x1e8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c
  }while(final_carrera == 0);
 8000a92:	4b5b      	ldr	r3, [pc, #364]	; (8000c00 <main+0x1fc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f2      	beq.n	8000a80 <main+0x7c>

  //una vez encontrado el 0, reinicializar todo y avanzar n poco el motor para no llegar al 0
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000a9a:	4b54      	ldr	r3, [pc, #336]	; (8000bec <main+0x1e8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 100);
 8000aa2:	4b52      	ldr	r3, [pc, #328]	; (8000bec <main+0x1e8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2264      	movs	r2, #100	; 0x64
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(200);
 8000aaa:	20c8      	movs	r0, #200	; 0xc8
 8000aac:	f000 fd4c 	bl	8001548 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000ab0:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <main+0x1e8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <main+0x1e8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(100);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f000 fd41 	bl	8001548 <HAL_Delay>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //puedo iniciar el temprizaodr despues y asi no hace falta reiniciarlo?
 8000ac6:	213c      	movs	r1, #60	; 0x3c
 8000ac8:	484e      	ldr	r0, [pc, #312]	; (8000c04 <main+0x200>)
 8000aca:	f002 f837 	bl	8002b3c <HAL_TIM_Encoder_Start>
  {


	//procesar la info recibida

receptor.pos =  ((receptor.buffer[0] - 48)*1000) +	((receptor.buffer[1] - 48)*100) + ((receptor.buffer[2] - 48)*10) + ((receptor.buffer[3] -48));
 8000ace:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <main+0x1ec>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3b30      	subs	r3, #48	; 0x30
 8000ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad8:	fb02 f203 	mul.w	r2, r2, r3
 8000adc:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <main+0x1ec>)
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	3b30      	subs	r3, #48	; 0x30
 8000ae2:	2164      	movs	r1, #100	; 0x64
 8000ae4:	fb01 f303 	mul.w	r3, r1, r3
 8000ae8:	18d1      	adds	r1, r2, r3
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <main+0x1ec>)
 8000aec:	789b      	ldrb	r3, [r3, #2]
 8000aee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	18ca      	adds	r2, r1, r3
 8000afc:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <main+0x1ec>)
 8000afe:	78db      	ldrb	r3, [r3, #3]
 8000b00:	3b30      	subs	r3, #48	; 0x30
 8000b02:	4413      	add	r3, r2
 8000b04:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <main+0x1ec>)
 8000b06:	60d3      	str	r3, [r2, #12]

//el numero de vueltas es como de 6800. No se deben tolerar valores por encima ni por debajo de esos valores
// quizás no usar directamente el valor del contador, sino una versión filtrada del mismo
encoder =  TIM2->CNT;
 8000b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <main+0x204>)
 8000b12:	601a      	str	r2, [r3, #0]
if(encoder > 5000) encoder = 0; // ha dado mas vuelta de la necesaria
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <main+0x204>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	dd02      	ble.n	8000b26 <main+0x122>
 8000b20:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <main+0x204>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]


dt = HAL_GetTick()- current_time;
 8000b26:	f000 fd03 	bl	8001530 <HAL_GetTick>
 8000b2a:	ee07 0a90 	vmov	s15, r0
 8000b2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <main+0x208>)
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <main+0x20c>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
if(dt >= 30){

}
if(  fabs(encoder-receptor.pos) < 10 ) prueba = 0;
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <main+0x204>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <main+0x1ec>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fc8d 	bl	800046c <__aeabi_i2d>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4614      	mov	r4, r2
 8000b58:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <main+0x210>)
 8000b62:	4620      	mov	r0, r4
 8000b64:	4629      	mov	r1, r5
 8000b66:	f7ff fd4b 	bl	8000600 <__aeabi_dcmplt>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <main+0x172>
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <main+0x214>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]

if(   prueba == 0){
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <main+0x214>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <main+0x18a>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <main+0x1e8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <main+0x1e8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  }

if(  (encoder ) >(receptor.pos ) && final_carrera == 0    ){
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <main+0x1ec>)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <main+0x204>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	da0d      	bge.n	8000bb6 <main+0x1b2>
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <main+0x1fc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d109      	bne.n	8000bb6 <main+0x1b2>
/*
);

*/
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <main+0x1e8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500);
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <main+0x1e8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	e00e      	b.n	8000bd4 <main+0x1d0>
//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
	 //   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1200);


	   }
else if (  (encoder ) <( receptor.pos  ) ){  // cmbiar por leer el buffer : [0]*1000 + [1]*100 +[2]*10 +[3] (todos +48 para concordar con ASCI)
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <main+0x1ec>)
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <main+0x204>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dd08      	ble.n	8000bd4 <main+0x1d0>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,500);//1000, aqui es sincrono
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <main+0x1e8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); //cambiarlo por salidas analogcas  PWM
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <main+0x1e8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c

}
val = servo+50;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <main+0x218>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3332      	adds	r3, #50	; 0x32
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <main+0x21c>)
 8000bdc:	6013      	str	r3, [r2, #0]

__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,val);
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <main+0x21c>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b02      	ldr	r3, [pc, #8]	; (8000bec <main+0x1e8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	635a      	str	r2, [r3, #52]	; 0x34
receptor.pos =  ((receptor.buffer[0] - 48)*1000) +	((receptor.buffer[1] - 48)*100) + ((receptor.buffer[2] - 48)*10) + ((receptor.buffer[3] -48));
 8000be8:	e771      	b.n	8000ace <main+0xca>
 8000bea:	bf00      	nop
 8000bec:	2000003c 	.word	0x2000003c
 8000bf0:	2000002c 	.word	0x2000002c
 8000bf4:	20000036 	.word	0x20000036
 8000bf8:	20000084 	.word	0x20000084
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	2000012c 	.word	0x2000012c
 8000c04:	20000134 	.word	0x20000134
 8000c08:	20000080 	.word	0x20000080
 8000c0c:	2000007c 	.word	0x2000007c
 8000c10:	20000174 	.word	0x20000174
 8000c14:	40240000 	.word	0x40240000
 8000c18:	20000028 	.word	0x20000028
 8000c1c:	20000122 	.word	0x20000122
 8000c20:	20000110 	.word	0x20000110

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	2230      	movs	r2, #48	; 0x30
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 f9ea 	bl	800400c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <SystemClock_Config+0xcc>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <SystemClock_Config+0xcc>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c94:	2308      	movs	r3, #8
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 f9e9 	bl	8002080 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb4:	f000 f9d8 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
 8000cba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fc42 	bl	8002560 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ce2:	f000 f9c1 	bl	8001068 <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3750      	adds	r7, #80	; 0x50
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <MX_ADC1_Init+0x9c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_ADC1_Init+0xa0>)
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d58:	f000 fc18 	bl	800158c <HAL_ADC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 f981 	bl	8001068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d78:	f000 fc4c 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d82:	f000 f971 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000c4 	.word	0x200000c4
 8000d94:	40012000 	.word	0x40012000
 8000d98:	0f000001 	.word	0x0f000001

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2224      	movs	r2, #36	; 0x24
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 f92e 	bl	800400c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000de0:	2303      	movs	r3, #3
 8000de2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000df0:	230a      	movs	r3, #10
 8000df2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000e0c:	f001 fe04 	bl	8002a18 <HAL_TIM_Encoder_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e16:	f000 f927 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000e28:	f002 f9fc 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e32:	f000 f919 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	; 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000134 	.word	0x20000134

08000e44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_TIM4_Init+0xdc>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e7c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e8e:	4823      	ldr	r0, [pc, #140]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000e90:	f001 fd58 	bl	8002944 <HAL_TIM_PWM_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e9a:	f000 f8e5 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481b      	ldr	r0, [pc, #108]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000eae:	f002 f9b9 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000eb8:	f000 f8d6 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebc:	2360      	movs	r3, #96	; 0x60
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000ed4:	f001 fe6a 	bl	8002bac <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ede:	f000 f8c3 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000eea:	f001 fe5f 	bl	8002bac <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ef4:	f000 f8b8 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2208      	movs	r2, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000f00:	f001 fe54 	bl	8002bac <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000f0a:	f000 f8ad 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM4_Init+0xd8>)
 8000f10:	f000 f982 	bl	8001218 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000003c 	.word	0x2000003c
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <MX_UART5_Init+0x50>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_UART5_Init+0x4c>)
 8000f5c:	f002 f9de 	bl	800331c <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f66:	f000 f87f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000084 	.word	0x20000084
 8000f74:	40005000 	.word	0x40005000

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001004:	4815      	ldr	r0, [pc, #84]	; (800105c <MX_GPIO_Init+0xe4>)
 8001006:	f001 f809 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_GPIO_Init+0xe8>)
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <MX_GPIO_Init+0xec>)
 800101e:	f000 fe4b 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001022:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <MX_GPIO_Init+0xe4>)
 800103c:	f000 fe3c 	bl	8001cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	200a      	movs	r0, #10
 8001046:	f000 fdde 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800104a:	200a      	movs	r0, #10
 800104c:	f000 fdf7 	bl	8001c3e <HAL_NVIC_EnableIRQ>

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	10310000 	.word	0x10310000
 8001064:	40020000 	.word	0x40020000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106e:	e7fe      	b.n	800106e <Error_Handler+0x6>

08001070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ae:	2007      	movs	r0, #7
 80010b0:	f000 fd9e 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_ADC_MspInit+0x7c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d127      	bne.n	8001132 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_ADC_MspInit+0x84>)
 800112e:	f000 fdc3 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001168:	d12b      	bne.n	80011c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_TIM_Encoder_MspInit+0x84>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a2:	2303      	movs	r3, #3
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <HAL_TIM_Encoder_MspInit+0x88>)
 80011be:	f000 fd7b 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_PWM_MspInit+0x3c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10d      	bne.n	8001202 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_TIM_PWM_MspInit+0x40>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_TIM_PWM_MspInit+0x40>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_TIM_PWM_MspInit+0x40>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40000800 	.word	0x40000800
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_TIM_MspPostInit+0x68>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d11e      	bne.n	8001278 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_TIM_MspPostInit+0x6c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_TIM_MspPostInit+0x6c>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_TIM_MspPostInit+0x6c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001256:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800125a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_TIM_MspPostInit+0x70>)
 8001274:	f000 fd20 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40000800 	.word	0x40000800
 8001284:	40023800 	.word	0x40023800
 8001288:	40020c00 	.word	0x40020c00

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_UART_MspInit+0xd0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d152      	bne.n	8001354 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_UART_MspInit+0xd4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001314:	2308      	movs	r3, #8
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <HAL_UART_MspInit+0xd8>)
 8001320:	f000 fcca 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001324:	2304      	movs	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001334:	2308      	movs	r3, #8
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <HAL_UART_MspInit+0xdc>)
 8001340:	f000 fcba 	bl	8001cb8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2035      	movs	r0, #53	; 0x35
 800134a:	f000 fc5c 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800134e:	2035      	movs	r0, #53	; 0x35
 8001350:	f000 fc75 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005000 	.word	0x40005000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 f8a6 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80013c4:	2010      	movs	r0, #16
 80013c6:	f000 fe43 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <UART5_IRQHandler+0x10>)
 80013d6:	f002 f843 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000084 	.word	0x20000084

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <SystemInit+0x28>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <SystemInit+0x28>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <SystemInit+0x28>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001416:	e003      	b.n	8001420 <LoopCopyDataInit>

08001418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800141a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800141c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800141e:	3104      	adds	r1, #4

08001420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001428:	d3f6      	bcc.n	8001418 <CopyDataInit>
  ldr  r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800142c:	e002      	b.n	8001434 <LoopFillZerobss>

0800142e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800142e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001430:	f842 3b04 	str.w	r3, [r2], #4

08001434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001438:	d3f9      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd3 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f002 fdc1 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fadf 	bl	8000a04 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800144c:	0800405c 	.word	0x0800405c
  ldr  r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001454:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001458:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800145c:	2000017c 	.word	0x2000017c

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 fbaf 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fdea 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fbc7 	bl	8001c5a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 fb8f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	20000178 	.word	0x20000178

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000178 	.word	0x20000178

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_Delay+0x40>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000008 	.word	0x20000008

0800158c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e033      	b.n	800160a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fd88 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015d2:	f023 0302 	bic.w	r3, r3, #2
 80015d6:	f043 0202 	orr.w	r2, r3, #2
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f93a 	bl	8001858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1c>
 800162c:	2302      	movs	r3, #2
 800162e:	e105      	b.n	800183c <HAL_ADC_ConfigChannel+0x228>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d925      	bls.n	800168c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	3b1e      	subs	r3, #30
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68d9      	ldr	r1, [r3, #12]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4403      	add	r3, r0
 800167e:	3b1e      	subs	r3, #30
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e022      	b.n	80016d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	2207      	movs	r2, #7
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4403      	add	r3, r0
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d824      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b05      	subs	r3, #5
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b05      	subs	r3, #5
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	e04c      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d824      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b23      	subs	r3, #35	; 0x23
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	3b23      	subs	r3, #35	; 0x23
 8001768:	fa00 f203 	lsl.w	r2, r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
 8001774:	e023      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b41      	subs	r3, #65	; 0x41
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_ADC_ConfigChannel+0x234>)
 80017c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_ADC_ConfigChannel+0x238>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d109      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1cc>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_ADC_ConfigChannel+0x238>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d123      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x21e>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d003      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x1e6>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	d11b      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d111      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_ADC_ConfigChannel+0x23c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_ADC_ConfigChannel+0x240>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9a      	lsrs	r2, r3, #18
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40012300 	.word	0x40012300
 800184c:	40012000 	.word	0x40012000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <ADC_Init+0x1f0>)
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	021a      	lsls	r2, r3, #8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <ADC_Init+0x1f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d022      	beq.n	8001936 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6899      	ldr	r1, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e00f      	b.n	8001956 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001954:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0202 	bic.w	r2, r2, #2
 8001964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7e1b      	ldrb	r3, [r3, #24]
 8001970:	005a      	lsls	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01b      	beq.n	80019bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001992:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	3b01      	subs	r3, #1
 80019b0:	035a      	lsls	r2, r3, #13
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	e007      	b.n	80019cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	051a      	lsls	r2, r3, #20
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6899      	ldr	r1, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0e:	025a      	lsls	r2, r3, #9
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	029a      	lsls	r2, r3, #10
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40012300 	.word	0x40012300
 8001a4c:	0f000001 	.word	0x0f000001

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00c      	b.n	8001caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2205      	movs	r2, #5
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e16b      	b.n	8001fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 815a 	bne.w	8001fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d00b      	beq.n	8001d12 <HAL_GPIO_Init+0x5a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d06:	2b11      	cmp	r3, #17
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0xfc>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80b4 	beq.w	8001fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_GPIO_Init+0x308>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_GPIO_Init+0x308>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_GPIO_Init+0x308>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x310>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02b      	beq.n	8001ede <HAL_GPIO_Init+0x226>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_GPIO_Init+0x314>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d025      	beq.n	8001eda <HAL_GPIO_Init+0x222>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_GPIO_Init+0x318>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_GPIO_Init+0x31c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d019      	beq.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_GPIO_Init+0x320>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x216>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x212>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4b      	ldr	r2, [pc, #300]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x20e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x20a>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00e      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	e00c      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e00a      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4934      	ldr	r1, [pc, #208]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f22:	4a31      	ldr	r2, [pc, #196]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f28:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f ae90 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3724      	adds	r7, #36	; 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40021400 	.word	0x40021400
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fc6e 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e25b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d075      	beq.n	800218a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	4ba3      	ldr	r3, [pc, #652]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4ba0      	ldr	r3, [pc, #640]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d112      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b9d      	ldr	r3, [pc, #628]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b99      	ldr	r3, [pc, #612]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d05b      	beq.n	8002188 <HAL_RCC_OscConfig+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d157      	bne.n	8002188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e236      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x74>
 80020e6:	4b91      	ldr	r3, [pc, #580]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a90      	ldr	r2, [pc, #576]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a8a      	ldr	r2, [pc, #552]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a87      	ldr	r2, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a83      	ldr	r2, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a80      	ldr	r2, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f9fa 	bl	8001530 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff f9f6 	bl	8001530 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1fb      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xc0>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f9e6 	bl	8001530 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f9e2 	bl	8001530 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1e7      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0xe8>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1bb      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4952      	ldr	r1, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_RCC_OscConfig+0x2b0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f99b 	bl	8001530 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff f997 	bl	8001530 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e19c      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4940      	ldr	r1, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x2b0>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f97a 	bl	8001530 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff f976 	bl	8001530 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e17b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d030      	beq.n	80022cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_OscConfig+0x2b4>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff f95a 	bl	8001530 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff f956 	bl	8001530 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e15b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 800229e:	e015      	b.n	80022cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x2b4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f943 	bl	8001530 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f93f 	bl	8001530 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e144      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a0 	beq.w	800241a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d121      	bne.n	800235a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7ff f905 	bl	8001530 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e011      	b.n	800234e <HAL_RCC_OscConfig+0x2ce>
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	42470000 	.word	0x42470000
 8002334:	42470e80 	.word	0x42470e80
 8002338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233c:	f7ff f8f8 	bl	8001530 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0fd      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x4d4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x312>
 8002378:	4b77      	ldr	r3, [pc, #476]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a76      	ldr	r2, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a73      	ldr	r2, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x32a>
 8002392:	4b71      	ldr	r3, [pc, #452]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	; 0x70
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7ff f8bd 	bl	8001530 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f8b9 	bl	8001530 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0bc      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x33a>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f8a7 	bl	8001530 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f8a3 	bl	8001530 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0a6      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8092 	beq.w	8002548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002424:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d05c      	beq.n	80024ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d141      	bne.n	80024bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f877 	bl	8001530 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f873 	bl	8001530 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e078      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	4933      	ldr	r1, [pc, #204]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248e:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff f84c 	bl	8001530 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7ff f848 	bl	8001530 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04d      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x41c>
 80024ba:	e045      	b.n	8002548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff f835 	bl	8001530 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff f831 	bl	8001530 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e036      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x44a>
 80024e8:	e02e      	b.n	8002548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e029      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	429a      	cmp	r2, r3
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d115      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000
 8002558:	40023800 	.word	0x40023800
 800255c:	42470060 	.word	0x42470060

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe ff6e 	bl	8001530 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe ff6a 	bl	8001530 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	fa21 f303 	lsr.w	r3, r1, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fece 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	08004034 	.word	0x08004034
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d007      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x32>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d008      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x38>
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80b4 	bne.w	80028c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800275a:	60bb      	str	r3, [r7, #8]
       break;
 800275c:	e0b3      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002760:	60bb      	str	r3, [r7, #8]
      break;
 8002762:	e0b0      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d04a      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b55      	ldr	r3, [pc, #340]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	f04f 0400 	mov.w	r4, #0
 8002784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	ea03 0501 	and.w	r5, r3, r1
 8002790:	ea04 0602 	and.w	r6, r4, r2
 8002794:	4629      	mov	r1, r5
 8002796:	4632      	mov	r2, r6
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	0154      	lsls	r4, r2, #5
 80027a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a6:	014b      	lsls	r3, r1, #5
 80027a8:	4619      	mov	r1, r3
 80027aa:	4622      	mov	r2, r4
 80027ac:	1b49      	subs	r1, r1, r5
 80027ae:	eb62 0206 	sbc.w	r2, r2, r6
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	0194      	lsls	r4, r2, #6
 80027bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027c0:	018b      	lsls	r3, r1, #6
 80027c2:	1a5b      	subs	r3, r3, r1
 80027c4:	eb64 0402 	sbc.w	r4, r4, r2
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	00e2      	lsls	r2, r4, #3
 80027d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d6:	00d9      	lsls	r1, r3, #3
 80027d8:	460b      	mov	r3, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	195b      	adds	r3, r3, r5
 80027de:	eb44 0406 	adc.w	r4, r4, r6
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	0262      	lsls	r2, r4, #9
 80027ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027f0:	0259      	lsls	r1, r3, #9
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	4621      	mov	r1, r4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f04f 0400 	mov.w	r4, #0
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	f7fd ff24 	bl	8000650 <__aeabi_uldivmod>
 8002808:	4603      	mov	r3, r0
 800280a:	460c      	mov	r4, r1
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e049      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	ea03 0501 	and.w	r5, r3, r1
 8002826:	ea04 0602 	and.w	r6, r4, r2
 800282a:	4629      	mov	r1, r5
 800282c:	4632      	mov	r2, r6
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	0154      	lsls	r4, r2, #5
 8002838:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800283c:	014b      	lsls	r3, r1, #5
 800283e:	4619      	mov	r1, r3
 8002840:	4622      	mov	r2, r4
 8002842:	1b49      	subs	r1, r1, r5
 8002844:	eb62 0206 	sbc.w	r2, r2, r6
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0194      	lsls	r4, r2, #6
 8002852:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	1a5b      	subs	r3, r3, r1
 800285a:	eb64 0402 	sbc.w	r4, r4, r2
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	460b      	mov	r3, r1
 8002870:	4614      	mov	r4, r2
 8002872:	195b      	adds	r3, r3, r5
 8002874:	eb44 0406 	adc.w	r4, r4, r6
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	02a2      	lsls	r2, r4, #10
 8002882:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002886:	0299      	lsls	r1, r3, #10
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	4618      	mov	r0, r3
 800288e:	4621      	mov	r1, r4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0400 	mov.w	r4, #0
 8002896:	461a      	mov	r2, r3
 8002898:	4623      	mov	r3, r4
 800289a:	f7fd fed9 	bl	8000650 <__aeabi_uldivmod>
 800289e:	4603      	mov	r3, r0
 80028a0:	460c      	mov	r4, r1
 80028a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	60bb      	str	r3, [r7, #8]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028c2:	60bb      	str	r3, [r7, #8]
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	68bb      	ldr	r3, [r7, #8]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400
 80028d8:	007a1200 	.word	0x007a1200

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4601      	mov	r1, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	08004044 	.word	0x08004044

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002920:	f7ff ffdc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002924:	4601      	mov	r1, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0b5b      	lsrs	r3, r3, #13
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4a03      	ldr	r2, [pc, #12]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	08004044 	.word	0x08004044

08002944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e01d      	b.n	8002992 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fc32 	bl	80011d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 f9d8 	bl	8002d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fc12 	bl	80031d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_TIM_PWM_Start+0x74>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_PWM_Start+0x2c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <HAL_TIM_PWM_Start+0x78>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_TIM_PWM_Start+0x30>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_TIM_PWM_Start+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010400 	.word	0x40010400

08002a18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e083      	b.n	8002b34 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe fb81 	bl	8001148 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5c:	f023 0307 	bic.w	r3, r3, #7
 8002a60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 f963 	bl	8002d38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ab8:	f023 030c 	bic.w	r3, r3, #12
 8002abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	011a      	lsls	r2, r3, #4
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002af6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_TIM_Encoder_Start+0x16>
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d008      	beq.n	8002b62 <HAL_TIM_Encoder_Start+0x26>
 8002b50:	e00f      	b.n	8002b72 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fb3c 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 8002b60:	e016      	b.n	8002b90 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	2104      	movs	r1, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fb34 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 8002b70:	e00e      	b.n	8002b90 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fb2c 	bl	80031d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	2104      	movs	r1, #4
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fb25 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 8002b8e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0b4      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	f200 809f 	bhi.w	8002d1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002c19 	.word	0x08002c19
 8002be8:	08002d1d 	.word	0x08002d1d
 8002bec:	08002d1d 	.word	0x08002d1d
 8002bf0:	08002d1d 	.word	0x08002d1d
 8002bf4:	08002c59 	.word	0x08002c59
 8002bf8:	08002d1d 	.word	0x08002d1d
 8002bfc:	08002d1d 	.word	0x08002d1d
 8002c00:	08002d1d 	.word	0x08002d1d
 8002c04:	08002c9b 	.word	0x08002c9b
 8002c08:	08002d1d 	.word	0x08002d1d
 8002c0c:	08002d1d 	.word	0x08002d1d
 8002c10:	08002d1d 	.word	0x08002d1d
 8002c14:	08002cdb 	.word	0x08002cdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f92a 	bl	8002e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	619a      	str	r2, [r3, #24]
      break;
 8002c56:	e062      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f97a 	bl	8002f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	021a      	lsls	r2, r3, #8
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
      break;
 8002c98:	e041      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f9cf 	bl	8003044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0208 	orr.w	r2, r2, #8
 8002cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	61da      	str	r2, [r3, #28]
      break;
 8002cd8:	e021      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fa23 	bl	800312c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69d9      	ldr	r1, [r3, #28]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	021a      	lsls	r2, r3, #8
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]
      break;
 8002d1a:	e000      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d00f      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <TIM_Base_SetConfig+0x118>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <TIM_Base_SetConfig+0x11c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <TIM_Base_SetConfig+0x120>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d027      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <TIM_Base_SetConfig+0x118>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d023      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <TIM_Base_SetConfig+0x11c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <TIM_Base_SetConfig+0x120>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d017      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <TIM_Base_SetConfig+0x128>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <TIM_Base_SetConfig+0x12c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <TIM_Base_SetConfig+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <TIM_Base_SetConfig+0x13c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0xf8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	615a      	str	r2, [r3, #20]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40010400 	.word	0x40010400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800
 8002e6c:	40001800 	.word	0x40001800
 8002e70:	40001c00 	.word	0x40001c00
 8002e74:	40002000 	.word	0x40002000

08002e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 0302 	bic.w	r3, r3, #2
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <TIM_OC1_SetConfig+0xd8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC1_SetConfig+0x64>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <TIM_OC1_SetConfig+0xdc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10c      	bne.n	8002ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f023 0308 	bic.w	r3, r3, #8
 8002ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <TIM_OC1_SetConfig+0xd8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_OC1_SetConfig+0x8e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_OC1_SetConfig+0xdc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d111      	bne.n	8002f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40010400 	.word	0x40010400

08002f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0320 	bic.w	r3, r3, #32
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <TIM_OC2_SetConfig+0xe4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC2_SetConfig+0x68>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <TIM_OC2_SetConfig+0xe8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10d      	bne.n	8002fdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <TIM_OC2_SetConfig+0xe4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_OC2_SetConfig+0x94>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <TIM_OC2_SetConfig+0xe8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d113      	bne.n	8003014 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40010400 	.word	0x40010400

08003044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <TIM_OC3_SetConfig+0xe0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC3_SetConfig+0x66>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a20      	ldr	r2, [pc, #128]	; (8003128 <TIM_OC3_SetConfig+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <TIM_OC3_SetConfig+0xe0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC3_SetConfig+0x92>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <TIM_OC3_SetConfig+0xe4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d113      	bne.n	80030fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40010000 	.word	0x40010000
 8003128:	40010400 	.word	0x40010400

0800312c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <TIM_OC4_SetConfig+0xa4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_OC4_SetConfig+0x68>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <TIM_OC4_SetConfig+0xa8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03f      	b.n	80033ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd ffa2 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fab3 	bl	80038cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d140      	bne.n	8003452 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Receive_IT+0x26>
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e039      	b.n	8003454 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Receive_IT+0x38>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e032      	b.n	8003454 <HAL_UART_Receive_IT+0x9e>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2222      	movs	r2, #34	; 0x22
 8003412:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_UART_IRQHandler+0x52>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f98c 	bl	80037c8 <UART_Receive_IT>
      return;
 80034b0:	e0d1      	b.n	8003656 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80b0 	beq.w	800361a <HAL_UART_IRQHandler+0x1ba>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_UART_IRQHandler+0x70>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a5 	beq.w	800361a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_UART_IRQHandler+0x90>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_UART_IRQHandler+0xb0>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_UART_IRQHandler+0xd0>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	f043 0204 	orr.w	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00f      	beq.n	800355a <HAL_UART_IRQHandler+0xfa>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_UART_IRQHandler+0xee>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	f043 0208 	orr.w	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d078      	beq.n	8003654 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_UART_IRQHandler+0x11c>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f926 	bl	80037c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_UART_IRQHandler+0x144>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d031      	beq.n	8003608 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f86f 	bl	8003688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d123      	bne.n	8003600 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	4a21      	ldr	r2, [pc, #132]	; (800365c <HAL_UART_IRQHandler+0x1fc>)
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fb48 	bl	8001c72 <HAL_DMA_Abort_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035f2:	4610      	mov	r0, r2
 80035f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f6:	e00e      	b.n	8003616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f83b 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fe:	e00a      	b.n	8003616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f837 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003606:	e006      	b.n	8003616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f833 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003614:	e01e      	b.n	8003654 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	bf00      	nop
    return;
 8003618:	e01c      	b.n	8003654 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x1d6>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f85c 	bl	80036ec <UART_Transmit_IT>
    return;
 8003634:	e00f      	b.n	8003656 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_UART_IRQHandler+0x1f6>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8a4 	bl	8003798 <UART_EndTransmit_IT>
    return;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003654:	bf00      	nop
  }
}
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	080036c5 	.word	0x080036c5

08003660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800369e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ffc8 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d144      	bne.n	800378a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d11a      	bne.n	8003740 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]
 8003732:	e00e      	b.n	8003752 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]
 800373e:	e008      	b.n	8003752 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	1c59      	adds	r1, r3, #1
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6211      	str	r1, [r2, #32]
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29b      	uxth	r3, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4619      	mov	r1, r3
 8003760:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003774:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003784:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff51 	bl	8003660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b22      	cmp	r3, #34	; 0x22
 80037da:	d171      	bne.n	80038c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	d123      	bne.n	800382e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
 8003810:	e029      	b.n	8003866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	e01b      	b.n	8003866 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6858      	ldr	r0, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	1c59      	adds	r1, r3, #1
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6291      	str	r1, [r2, #40]	; 0x28
 8003846:	b2c2      	uxtb	r2, r0
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e00c      	b.n	8003866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	1c58      	adds	r0, r3, #1
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	6288      	str	r0, [r1, #40]	; 0x28
 800385e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29b      	uxth	r3, r3
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4619      	mov	r1, r3
 8003874:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003876:	2b00      	cmp	r3, #0
 8003878:	d120      	bne.n	80038bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0220 	bic.w	r2, r2, #32
 8003888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd f872 	bl	800099c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e002      	b.n	80038c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800390e:	f023 030c 	bic.w	r3, r3, #12
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	430b      	orrs	r3, r1
 800391a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	f040 818b 	bne.w	8003c54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4ac1      	ldr	r2, [pc, #772]	; (8003c48 <UART_SetConfig+0x37c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d005      	beq.n	8003954 <UART_SetConfig+0x88>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4abf      	ldr	r2, [pc, #764]	; (8003c4c <UART_SetConfig+0x380>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f040 80bd 	bne.w	8003ace <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe ffe2 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	461d      	mov	r5, r3
 800395e:	f04f 0600 	mov.w	r6, #0
 8003962:	46a8      	mov	r8, r5
 8003964:	46b1      	mov	r9, r6
 8003966:	eb18 0308 	adds.w	r3, r8, r8
 800396a:	eb49 0409 	adc.w	r4, r9, r9
 800396e:	4698      	mov	r8, r3
 8003970:	46a1      	mov	r9, r4
 8003972:	eb18 0805 	adds.w	r8, r8, r5
 8003976:	eb49 0906 	adc.w	r9, r9, r6
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800398a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800398e:	4688      	mov	r8, r1
 8003990:	4691      	mov	r9, r2
 8003992:	eb18 0005 	adds.w	r0, r8, r5
 8003996:	eb49 0106 	adc.w	r1, r9, r6
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	461d      	mov	r5, r3
 80039a0:	f04f 0600 	mov.w	r6, #0
 80039a4:	196b      	adds	r3, r5, r5
 80039a6:	eb46 0406 	adc.w	r4, r6, r6
 80039aa:	461a      	mov	r2, r3
 80039ac:	4623      	mov	r3, r4
 80039ae:	f7fc fe4f 	bl	8000650 <__aeabi_uldivmod>
 80039b2:	4603      	mov	r3, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	461a      	mov	r2, r3
 80039b8:	4ba5      	ldr	r3, [pc, #660]	; (8003c50 <UART_SetConfig+0x384>)
 80039ba:	fba3 2302 	umull	r2, r3, r3, r2
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	461d      	mov	r5, r3
 80039c8:	f04f 0600 	mov.w	r6, #0
 80039cc:	46a9      	mov	r9, r5
 80039ce:	46b2      	mov	sl, r6
 80039d0:	eb19 0309 	adds.w	r3, r9, r9
 80039d4:	eb4a 040a 	adc.w	r4, sl, sl
 80039d8:	4699      	mov	r9, r3
 80039da:	46a2      	mov	sl, r4
 80039dc:	eb19 0905 	adds.w	r9, r9, r5
 80039e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039f8:	4689      	mov	r9, r1
 80039fa:	4692      	mov	sl, r2
 80039fc:	eb19 0005 	adds.w	r0, r9, r5
 8003a00:	eb4a 0106 	adc.w	r1, sl, r6
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	461d      	mov	r5, r3
 8003a0a:	f04f 0600 	mov.w	r6, #0
 8003a0e:	196b      	adds	r3, r5, r5
 8003a10:	eb46 0406 	adc.w	r4, r6, r6
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	f7fc fe1a 	bl	8000650 <__aeabi_uldivmod>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b8b      	ldr	r3, [pc, #556]	; (8003c50 <UART_SetConfig+0x384>)
 8003a24:	fba3 1302 	umull	r1, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	2164      	movs	r1, #100	; 0x64
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	3332      	adds	r3, #50	; 0x32
 8003a36:	4a86      	ldr	r2, [pc, #536]	; (8003c50 <UART_SetConfig+0x384>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a44:	4498      	add	r8, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	461d      	mov	r5, r3
 8003a4a:	f04f 0600 	mov.w	r6, #0
 8003a4e:	46a9      	mov	r9, r5
 8003a50:	46b2      	mov	sl, r6
 8003a52:	eb19 0309 	adds.w	r3, r9, r9
 8003a56:	eb4a 040a 	adc.w	r4, sl, sl
 8003a5a:	4699      	mov	r9, r3
 8003a5c:	46a2      	mov	sl, r4
 8003a5e:	eb19 0905 	adds.w	r9, r9, r5
 8003a62:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a7a:	4689      	mov	r9, r1
 8003a7c:	4692      	mov	sl, r2
 8003a7e:	eb19 0005 	adds.w	r0, r9, r5
 8003a82:	eb4a 0106 	adc.w	r1, sl, r6
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	f04f 0600 	mov.w	r6, #0
 8003a90:	196b      	adds	r3, r5, r5
 8003a92:	eb46 0406 	adc.w	r4, r6, r6
 8003a96:	461a      	mov	r2, r3
 8003a98:	4623      	mov	r3, r4
 8003a9a:	f7fc fdd9 	bl	8000650 <__aeabi_uldivmod>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <UART_SetConfig+0x384>)
 8003aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2164      	movs	r1, #100	; 0x64
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	3332      	adds	r3, #50	; 0x32
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <UART_SetConfig+0x384>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	f003 0207 	and.w	r2, r3, #7
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4442      	add	r2, r8
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e26f      	b.n	8003fae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe ff11 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	f04f 0600 	mov.w	r6, #0
 8003adc:	46a8      	mov	r8, r5
 8003ade:	46b1      	mov	r9, r6
 8003ae0:	eb18 0308 	adds.w	r3, r8, r8
 8003ae4:	eb49 0409 	adc.w	r4, r9, r9
 8003ae8:	4698      	mov	r8, r3
 8003aea:	46a1      	mov	r9, r4
 8003aec:	eb18 0805 	adds.w	r8, r8, r5
 8003af0:	eb49 0906 	adc.w	r9, r9, r6
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b08:	4688      	mov	r8, r1
 8003b0a:	4691      	mov	r9, r2
 8003b0c:	eb18 0005 	adds.w	r0, r8, r5
 8003b10:	eb49 0106 	adc.w	r1, r9, r6
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	461d      	mov	r5, r3
 8003b1a:	f04f 0600 	mov.w	r6, #0
 8003b1e:	196b      	adds	r3, r5, r5
 8003b20:	eb46 0406 	adc.w	r4, r6, r6
 8003b24:	461a      	mov	r2, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	f7fc fd92 	bl	8000650 <__aeabi_uldivmod>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <UART_SetConfig+0x384>)
 8003b34:	fba3 2302 	umull	r2, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	461d      	mov	r5, r3
 8003b42:	f04f 0600 	mov.w	r6, #0
 8003b46:	46a9      	mov	r9, r5
 8003b48:	46b2      	mov	sl, r6
 8003b4a:	eb19 0309 	adds.w	r3, r9, r9
 8003b4e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b52:	4699      	mov	r9, r3
 8003b54:	46a2      	mov	sl, r4
 8003b56:	eb19 0905 	adds.w	r9, r9, r5
 8003b5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b72:	4689      	mov	r9, r1
 8003b74:	4692      	mov	sl, r2
 8003b76:	eb19 0005 	adds.w	r0, r9, r5
 8003b7a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	461d      	mov	r5, r3
 8003b84:	f04f 0600 	mov.w	r6, #0
 8003b88:	196b      	adds	r3, r5, r5
 8003b8a:	eb46 0406 	adc.w	r4, r6, r6
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	f7fc fd5d 	bl	8000650 <__aeabi_uldivmod>
 8003b96:	4603      	mov	r3, r0
 8003b98:	460c      	mov	r4, r1
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <UART_SetConfig+0x384>)
 8003b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2164      	movs	r1, #100	; 0x64
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	3332      	adds	r3, #50	; 0x32
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <UART_SetConfig+0x384>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bbe:	4498      	add	r8, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	46a9      	mov	r9, r5
 8003bca:	46b2      	mov	sl, r6
 8003bcc:	eb19 0309 	adds.w	r3, r9, r9
 8003bd0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	46a2      	mov	sl, r4
 8003bd8:	eb19 0905 	adds.w	r9, r9, r5
 8003bdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bf4:	4689      	mov	r9, r1
 8003bf6:	4692      	mov	sl, r2
 8003bf8:	eb19 0005 	adds.w	r0, r9, r5
 8003bfc:	eb4a 0106 	adc.w	r1, sl, r6
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	461d      	mov	r5, r3
 8003c06:	f04f 0600 	mov.w	r6, #0
 8003c0a:	196b      	adds	r3, r5, r5
 8003c0c:	eb46 0406 	adc.w	r4, r6, r6
 8003c10:	461a      	mov	r2, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	f7fc fd1c 	bl	8000650 <__aeabi_uldivmod>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <UART_SetConfig+0x384>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <UART_SetConfig+0x384>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4442      	add	r2, r8
 8003c44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c46:	e1b2      	b.n	8003fae <UART_SetConfig+0x6e2>
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40011400 	.word	0x40011400
 8003c50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4ad7      	ldr	r2, [pc, #860]	; (8003fb8 <UART_SetConfig+0x6ec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d005      	beq.n	8003c6a <UART_SetConfig+0x39e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4ad6      	ldr	r2, [pc, #856]	; (8003fbc <UART_SetConfig+0x6f0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	f040 80d1 	bne.w	8003e0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c6a:	f7fe fe57 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003c6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	469a      	mov	sl, r3
 8003c74:	f04f 0b00 	mov.w	fp, #0
 8003c78:	46d0      	mov	r8, sl
 8003c7a:	46d9      	mov	r9, fp
 8003c7c:	eb18 0308 	adds.w	r3, r8, r8
 8003c80:	eb49 0409 	adc.w	r4, r9, r9
 8003c84:	4698      	mov	r8, r3
 8003c86:	46a1      	mov	r9, r4
 8003c88:	eb18 080a 	adds.w	r8, r8, sl
 8003c8c:	eb49 090b 	adc.w	r9, r9, fp
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ca0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ca4:	4688      	mov	r8, r1
 8003ca6:	4691      	mov	r9, r2
 8003ca8:	eb1a 0508 	adds.w	r5, sl, r8
 8003cac:	eb4b 0609 	adc.w	r6, fp, r9
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	0094      	lsls	r4, r2, #2
 8003cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4623      	mov	r3, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	f7fc fcbd 	bl	8000650 <__aeabi_uldivmod>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4bb8      	ldr	r3, [pc, #736]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003cde:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	469b      	mov	fp, r3
 8003cec:	f04f 0c00 	mov.w	ip, #0
 8003cf0:	46d9      	mov	r9, fp
 8003cf2:	46e2      	mov	sl, ip
 8003cf4:	eb19 0309 	adds.w	r3, r9, r9
 8003cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cfc:	4699      	mov	r9, r3
 8003cfe:	46a2      	mov	sl, r4
 8003d00:	eb19 090b 	adds.w	r9, r9, fp
 8003d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d1c:	4689      	mov	r9, r1
 8003d1e:	4692      	mov	sl, r2
 8003d20:	eb1b 0509 	adds.w	r5, fp, r9
 8003d24:	eb4c 060a 	adc.w	r6, ip, sl
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	f04f 0400 	mov.w	r4, #0
 8003d3a:	0094      	lsls	r4, r2, #2
 8003d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	461a      	mov	r2, r3
 8003d44:	4623      	mov	r3, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	4631      	mov	r1, r6
 8003d4a:	f7fc fc81 	bl	8000650 <__aeabi_uldivmod>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b9a      	ldr	r3, [pc, #616]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2164      	movs	r1, #100	; 0x64
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	3332      	adds	r3, #50	; 0x32
 8003d68:	4a95      	ldr	r2, [pc, #596]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	4498      	add	r8, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	469b      	mov	fp, r3
 8003d7a:	f04f 0c00 	mov.w	ip, #0
 8003d7e:	46d9      	mov	r9, fp
 8003d80:	46e2      	mov	sl, ip
 8003d82:	eb19 0309 	adds.w	r3, r9, r9
 8003d86:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	46a2      	mov	sl, r4
 8003d8e:	eb19 090b 	adds.w	r9, r9, fp
 8003d92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003daa:	4689      	mov	r9, r1
 8003dac:	4692      	mov	sl, r2
 8003dae:	eb1b 0509 	adds.w	r5, fp, r9
 8003db2:	eb4c 060a 	adc.w	r6, ip, sl
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	0094      	lsls	r4, r2, #2
 8003dca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dce:	008b      	lsls	r3, r1, #2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	f7fc fc3a 	bl	8000650 <__aeabi_uldivmod>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b77      	ldr	r3, [pc, #476]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a72      	ldr	r2, [pc, #456]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4442      	add	r2, r8
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	e0d0      	b.n	8003fae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fd72 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	469a      	mov	sl, r3
 8003e16:	f04f 0b00 	mov.w	fp, #0
 8003e1a:	46d0      	mov	r8, sl
 8003e1c:	46d9      	mov	r9, fp
 8003e1e:	eb18 0308 	adds.w	r3, r8, r8
 8003e22:	eb49 0409 	adc.w	r4, r9, r9
 8003e26:	4698      	mov	r8, r3
 8003e28:	46a1      	mov	r9, r4
 8003e2a:	eb18 080a 	adds.w	r8, r8, sl
 8003e2e:	eb49 090b 	adc.w	r9, r9, fp
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e46:	4688      	mov	r8, r1
 8003e48:	4691      	mov	r9, r2
 8003e4a:	eb1a 0508 	adds.w	r5, sl, r8
 8003e4e:	eb4b 0609 	adc.w	r6, fp, r9
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	f04f 0400 	mov.w	r4, #0
 8003e64:	0094      	lsls	r4, r2, #2
 8003e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	4631      	mov	r1, r6
 8003e74:	f7fc fbec 	bl	8000650 <__aeabi_uldivmod>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003e80:	fba3 2302 	umull	r2, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	469b      	mov	fp, r3
 8003e8e:	f04f 0c00 	mov.w	ip, #0
 8003e92:	46d9      	mov	r9, fp
 8003e94:	46e2      	mov	sl, ip
 8003e96:	eb19 0309 	adds.w	r3, r9, r9
 8003e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	46a2      	mov	sl, r4
 8003ea2:	eb19 090b 	adds.w	r9, r9, fp
 8003ea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	4692      	mov	sl, r2
 8003ec2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ec6:	eb4c 060a 	adc.w	r6, ip, sl
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f04f 0400 	mov.w	r4, #0
 8003edc:	0094      	lsls	r4, r2, #2
 8003ede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee2:	008b      	lsls	r3, r1, #2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	4631      	mov	r1, r6
 8003eec:	f7fc fbb0 	bl	8000650 <__aeabi_uldivmod>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	4498      	add	r8, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	f04f 0c00 	mov.w	ip, #0
 8003f20:	46d9      	mov	r9, fp
 8003f22:	46e2      	mov	sl, ip
 8003f24:	eb19 0309 	adds.w	r3, r9, r9
 8003f28:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2c:	4699      	mov	r9, r3
 8003f2e:	46a2      	mov	sl, r4
 8003f30:	eb19 090b 	adds.w	r9, r9, fp
 8003f34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4c:	4689      	mov	r9, r1
 8003f4e:	4692      	mov	sl, r2
 8003f50:	eb1b 0509 	adds.w	r5, fp, r9
 8003f54:	eb4c 060a 	adc.w	r6, ip, sl
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f04f 0400 	mov.w	r4, #0
 8003f6a:	0094      	lsls	r4, r2, #2
 8003f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f70:	008b      	lsls	r3, r1, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	4623      	mov	r3, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	4631      	mov	r1, r6
 8003f7a:	f7fc fb69 	bl	8000650 <__aeabi_uldivmod>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003f86:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2164      	movs	r1, #100	; 0x64
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	3332      	adds	r3, #50	; 0x32
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <UART_SetConfig+0x6f4>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4442      	add	r2, r8
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	e7ff      	b.n	8003fae <UART_SetConfig+0x6e2>
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	40011000 	.word	0x40011000
 8003fbc:	40011400 	.word	0x40011400
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4e0d      	ldr	r6, [pc, #52]	; (8003ffc <__libc_init_array+0x38>)
 8003fc8:	4c0d      	ldr	r4, [pc, #52]	; (8004000 <__libc_init_array+0x3c>)
 8003fca:	1ba4      	subs	r4, r4, r6
 8003fcc:	10a4      	asrs	r4, r4, #2
 8003fce:	2500      	movs	r5, #0
 8003fd0:	42a5      	cmp	r5, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	4e0b      	ldr	r6, [pc, #44]	; (8004004 <__libc_init_array+0x40>)
 8003fd6:	4c0c      	ldr	r4, [pc, #48]	; (8004008 <__libc_init_array+0x44>)
 8003fd8:	f000 f820 	bl	800401c <_init>
 8003fdc:	1ba4      	subs	r4, r4, r6
 8003fde:	10a4      	asrs	r4, r4, #2
 8003fe0:	2500      	movs	r5, #0
 8003fe2:	42a5      	cmp	r5, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fec:	4798      	blx	r3
 8003fee:	3501      	adds	r5, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff6:	4798      	blx	r3
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	08004054 	.word	0x08004054
 8004000:	08004054 	.word	0x08004054
 8004004:	08004054 	.word	0x08004054
 8004008:	08004058 	.word	0x08004058

0800400c <memset>:
 800400c:	4402      	add	r2, r0
 800400e:	4603      	mov	r3, r0
 8004010:	4293      	cmp	r3, r2
 8004012:	d100      	bne.n	8004016 <memset+0xa>
 8004014:	4770      	bx	lr
 8004016:	f803 1b01 	strb.w	r1, [r3], #1
 800401a:	e7f9      	b.n	8004010 <memset+0x4>

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
